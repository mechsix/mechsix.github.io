"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[45215],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>f});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=n.createContext({}),c=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(u.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,s=e.originalType,u=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=c(r),m=o,f=d["".concat(u,".").concat(m)]||d[m]||p[m]||s;return r?n.createElement(f,a(a({ref:t},l),{},{components:r})):n.createElement(f,a({ref:t},l))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=r.length,a=new Array(s);a[0]=m;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[d]="string"==typeof e?e:o,a[1]=i;for(var c=2;c<s;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},28483:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var n=r(87462),o=(r(67294),r(3905));const s={title:"581. Shortest Unsorted Continuous Subarray",sidebar_label:"581. Shortest Unsorted Continuous Subarray",tags:["Leetcode Medium","Two Pointer"]},a=void 0,i={unversionedId:"leetcode/501-1000/sortest_unsorted_continuous_subarray",id:"leetcode/501-1000/sortest_unsorted_continuous_subarray",title:"581. Shortest Unsorted Continuous Subarray",description:"https://leetcode.com/problems/shortest-unsorted-continuous-subarray/",source:"@site/docs/leetcode/501-1000/581_sortest_unsorted_continuous_subarray.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/sortest_unsorted_continuous_subarray",permalink:"/docs/leetcode/501-1000/sortest_unsorted_continuous_subarray",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/581_sortest_unsorted_continuous_subarray.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Two Pointer",permalink:"/docs/tags/two-pointer"}],version:"current",sidebarPosition:581,frontMatter:{title:"581. Shortest Unsorted Continuous Subarray",sidebar_label:"581. Shortest Unsorted Continuous Subarray",tags:["Leetcode Medium","Two Pointer"]},sidebar:"docSidebar",previous:{title:"557. Reverse Words in a String III",permalink:"/docs/leetcode/501-1000/reverse_words_in_string_iii"},next:{title:"583. Delete Operation for Two Strings",permalink:"/docs/leetcode/501-1000/delete_operation_for_two_strings"}},u={},c=[{value:"Python",id:"python",level:2}],l={toc:c},d="wrapper";function p(e){let{components:t,...r}=e;return(0,o.kt)(d,(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/shortest-unsorted-continuous-subarray/"},"https://leetcode.com/problems/shortest-unsorted-continuous-subarray/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("p",null,"\u56e0\u70ba\u984c\u76ee\u6700\u7d42\u9700\u8981\u7684\u662f\u905e\u589e\u6392\u5e8f\n\u62ff\u539f\u672c\u7684array\u53bb\u6bd4\u5c0d\u6392\u5e8f\u5f8c\u7684array\n\u7528max/min\u7b97\u51fa\u5de6\u53f3\u754c"),(0,o.kt)("p",null,"\u4f46\u8981\u662f\u984c\u76ee\u4e0d\u77e5\u9053\u6700\u7d42\u6703\u662f\u905e\u589e\u6216\u905e\u6e1b...\u53ef\u80fd\u53ea\u80fd\u66b4\u529b\u7834"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Time: O(NlogN), for the sorting"),(0,o.kt)("li",{parentName:"ul"},"Space: O(N), for the sorted array")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def findUnsortedSubarray(self, nums: List[int]) -> int:\n        sorted_nums = sorted(nums[:])\n        start, end = len(nums)-1, 0\n\n        for i in range(len(nums)):\n            if nums[i] != sorted_nums[i]:\n                start = min(start, i)\n                end = max(end, i)\n\n        diff = end - start\n        return diff+1 if diff > 0 else 0\n")))}p.isMDXComponent=!0}}]);