"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[3102],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return d}});var n=r(67294);function l(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){l(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,l=function(e,t){if(null==e)return{};var r,n,l={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(l[r]=e[r]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(l[r]=e[r])}return l}var c=n.createContext({}),u=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,l=e.mdxType,o=e.originalType,c=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),m=u(r),d=l,p=m["".concat(c,".").concat(d)]||m[d]||f[d]||o;return r?n.createElement(p,i(i({ref:t},s),{},{components:r})):n.createElement(p,i({ref:t},s))}));function d(e,t){var r=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=r.length,i=new Array(o);i[0]=m;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:l,i[1]=a;for(var u=2;u<o;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},29466:function(e,t,r){r.r(t),r.d(t,{contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return a},metadata:function(){return u},toc:function(){return s}});var n=r(87462),l=r(63366),o=(r(67294),r(3905)),i=["components"],a={title:"315. Count of Smaller Numbers After Self",sidebar_label:"315. Count of Smaller Numbers After Self",tags:["Leetcode Hard","Segment Tree","Fenwick Tree","TODO"]},c=void 0,u={unversionedId:"leetcode/1-500/count_of_smaller_numbers_after_self",id:"leetcode/1-500/count_of_smaller_numbers_after_self",title:"315. Count of Smaller Numbers After Self",description:"Python",source:"@site/docs/leetcode/1-500/315_count_of_smaller_numbers_after_self.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/count_of_smaller_numbers_after_self",permalink:"/docs/leetcode/1-500/count_of_smaller_numbers_after_self",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/315_count_of_smaller_numbers_after_self.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"Segment Tree",permalink:"/docs/tags/segment-tree"},{label:"Fenwick Tree",permalink:"/docs/tags/fenwick-tree"},{label:"TODO",permalink:"/docs/tags/todo"}],version:"current",sidebarPosition:315,frontMatter:{title:"315. Count of Smaller Numbers After Self",sidebar_label:"315. Count of Smaller Numbers After Self",tags:["Leetcode Hard","Segment Tree","Fenwick Tree","TODO"]},sidebar:"docSidebar",previous:{title:"314. Binary Tree Vertical Order Traversal",permalink:"/docs/leetcode/1-500/binary_tree_vertical_order_traversal"},next:{title:"318. Maximum Product of Word Lengths",permalink:"/docs/leetcode/1-500/maximum_product_of_word_lengths"}},s=[{value:"Python",id:"python",children:[{value:"Brute Force (Timelimit Exceed)",id:"brute-force-timelimit-exceed",children:[],level:3},{value:"Segment Tree",id:"segment-tree",children:[],level:3},{value:"Fenwick Tree",id:"fenwick-tree",children:[],level:3}],level:2}],f={toc:s};function m(e){var t=e.components,r=(0,l.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"brute-force-timelimit-exceed"},"Brute Force (Timelimit Exceed)"),(0,o.kt)("p",null,"Time: O(N^2)\nSpace: O(N)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def countSmaller(self, nums: List[int]) -> List[int]:\n        mapper = []\n        for i in range(len(nums)):\n            count = 0\n            for j in range(i+1, len(nums)):\n                if nums[j] < nums[i]:\n                    count += 1\n            mapper.append(count)\n        return mapper\n")),(0,o.kt)("h3",{id:"segment-tree"},"Segment Tree"),(0,o.kt)("p",null,"M = 2 * (10**4)"),(0,o.kt)("p",null,"Time: O(NlogM)\nSpace: O(M)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def countSmaller(self, nums: List[int]) -> List[int]:\n        size = 2 * 10**4 + 1\n        tree = [0] * (2*size)\n\n        def update(i, value):\n            i += size\n            tree[i] += value\n            while i > 1:\n                i >>= 1\n                tree[i] = tree[i*2] + tree[i*2+1]\n\n        def query(left, right):\n            left, right = left+size, right+size\n            result = 0\n\n            while left < right:\n                if left % 2 == 1:\n                    result += tree[left]\n                    left += 1\n                left >>= 1\n\n                if right % 2 == 1:\n                    right -= 1\n                    result += tree[right]\n                right >>= 1\n\n            return result\n\n        offset = 10**4\n        ans = []\n\n        for num in reversed(nums):\n            ans.append(query(0, num+offset))\n            update(num+offset, 1)\n\n        return ans[::-1]\n")),(0,o.kt)("h3",{id:"fenwick-tree"},"Fenwick Tree"),(0,o.kt)("p",null,"(TODO)"))}m.isMDXComponent=!0}}]);