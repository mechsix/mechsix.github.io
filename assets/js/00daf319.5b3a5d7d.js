"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[41025],{1736:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var s=n(74848),r=n(28453);const a={title:"2246. Longest Path With Different Adjacent Characters",sidebar_label:"2246. Longest Path With Different Adjacent Characters",tags:["Leetcode Hard","Tree","Hash"]},i=void 0,o={id:"leetcode/2000/longest_path_with_different_adjacent_chars",title:"2246. Longest Path With Different Adjacent Characters",description:"https://leetcode.com/problems/longest-path-with-different-adjacent-characters/description/",source:"@site/docs/leetcode/2000/2246_longest_path_with_different_adjacent_chars.md",sourceDirName:"leetcode/2000",slug:"/leetcode/2000/longest_path_with_different_adjacent_chars",permalink:"/docs/leetcode/2000/longest_path_with_different_adjacent_chars",draft:!1,unlisted:!1,tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"Tree",permalink:"/docs/tags/tree"},{label:"Hash",permalink:"/docs/tags/hash"}],version:"current",sidebarPosition:2246,frontMatter:{title:"2246. Longest Path With Different Adjacent Characters",sidebar_label:"2246. Longest Path With Different Adjacent Characters",tags:["Leetcode Hard","Tree","Hash"]},sidebar:"docSidebar",previous:{title:"2215. Find the Difference of Two Arrays",permalink:"/docs/leetcode/2000/find_the_difference_of_two_arrays"},next:{title:"2305. Fair Distribution of Cookies",permalink:"/docs/leetcode/2000/fair_distribution_of_cookies"}},c={},d=[{value:"Python",id:"python",level:2},{value:"DFS",id:"dfs",level:3}];function l(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://leetcode.com/problems/longest-path-with-different-adjacent-characters/description/",children:"https://leetcode.com/problems/longest-path-with-different-adjacent-characters/description/"})}),"\n",(0,s.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,s.jsx)(t.h3,{id:"dfs",children:"DFS"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"from collections import defaultdict\n\n\nclass Solution:\n    def longestPath(self, parent: List[int], s: str) -> int:\n        mapper = defaultdict(set)\n        for i, p in enumerate(parent):\n            mapper[p].add(i)\n\n        def dfs(node):\n            first, second = 0, 0\n            for child in mapper[node]:\n                child_path = dfs(child)\n                if s[child] == s[node]:\n                    continue\n\n                if child_path >= first:\n                    first, second = child_path, first\n                elif child_path > second:\n                    second = child_path\n            self.ans = max(self.ans, 1+first+second)\n            return 1 + first\n        self.ans = 0\n\n        dfs(0)\n        return self.ans\n"})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var s=n(96540);const r={},a=s.createContext(r);function i(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);