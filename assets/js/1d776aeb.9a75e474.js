"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[9963],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return v}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=s(n),v=i,f=p["".concat(l,".").concat(v)]||p[v]||d[v]||a;return n?r.createElement(f,o(o({ref:t},u),{},{components:n})):r.createElement(f,o({ref:t},u))}));function v(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=p;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},234:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return u}});var r=n(87462),i=n(63366),a=(n(67294),n(3905)),o=["components"],c={title:"399. Evaluate Division",sidebar_label:"399. Evaluate Division",tags:["Leetcode Medium","Graph","Backtracking","Leetcode Fail Review"]},l=void 0,s={unversionedId:"leetcode/1-500/evaluate_division",id:"leetcode/1-500/evaluate_division",title:"399. Evaluate Division",description:"https://leetcode.com/problems/evaluate-division/",source:"@site/docs/leetcode/1-500/399_evaluate_division.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/evaluate_division",permalink:"/docs/leetcode/1-500/evaluate_division",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/399_evaluate_division.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Graph",permalink:"/docs/tags/graph"},{label:"Backtracking",permalink:"/docs/tags/backtracking"},{label:"Leetcode Fail Review",permalink:"/docs/tags/leetcode-fail-review"}],version:"current",sidebarPosition:399,frontMatter:{title:"399. Evaluate Division",sidebar_label:"399. Evaluate Division",tags:["Leetcode Medium","Graph","Backtracking","Leetcode Fail Review"]},sidebar:"docSidebar",previous:{title:"392. Is Subsequence",permalink:"/docs/leetcode/1-500/is_subsequence"},next:{title:"401. Binary Watch",permalink:"/docs/leetcode/1-500/binary_watch"}},u=[{value:"Python",id:"python",children:[{value:"Backtracking (Offical Solution)",id:"backtracking-offical-solution",children:[],level:3}],level:2}],d={toc:u};function p(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/evaluate-division/"},"https://leetcode.com/problems/evaluate-division/")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("h3",{id:"backtracking-offical-solution"},"Backtracking (Offical Solution)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u56e0\u70baa/c = a/b * b/c\uff0c\u6240\u4ee5\u5c07\u6574\u500bequations/values\u7684\u5c0d\u61c9\u8b8a\u6210\u4e00\u500b\u6709\u5411\u5716"),(0,a.kt)("li",{parentName:"ul"},"\u5728\u5716\u5167\u51fa\u767c(\u88ab\u9664\u6578)\u627e\u5f97\u5230path\u5230\u9054\u76ee\u7684(\u9664\u6578)\uff0cpath\u7684node\u76f8\u4e58\u5c31\u6703\u662f\u7b54\u6848")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from collections import defaultdict\n\nclass Solution:\n    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:\n\n        def backtrack(curr_node, target_node, acc_product, visited):\n            neighbors = graph[curr_node]\n            if target_node in neighbors:\n                return acc_product * neighbors[target_node]\n\n            visited.add(curr_node)\n\n            for neighbor, value in neighbors.items():\n                if neighbor in visited:\n                    continue\n\n                ret = backtrack(\n                    neighbor,\n                    target_node,\n                    acc_product * value,\n                    visited\n                )\n                if ret != -1.0:\n                    return ret\n\n            visited.remove(curr_node)\n\n            return -1.0\n\n        # 1. build the graph from the equations\n        graph = defaultdict(defaultdict)\n        for i, pair in enumerate(equations):\n            dividend, divisor = pair\n            graph[dividend][divisor] = values[i]\n            graph[divisor][dividend] = 1 / values[i]\n\n        # 2. Evaluate each query with backtracking\n        results = []\n        for dividend, divisor in queries:\n            if dividend not in graph or divisor not in graph:\n                # Either node does not exist\n                results.append(-1.0)\n            elif dividend == divisor:\n                # Origin and destination are the same node\n                results.append(1.0)\n            else:\n                result = backtrack(dividend, divisor, 1, set())\n                results.append(result)\n\n        return results\n")))}p.isMDXComponent=!0}}]);