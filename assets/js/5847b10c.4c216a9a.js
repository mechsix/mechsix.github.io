"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[41947],{72812:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>p,frontMatter:()=>l,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"leetcode/1-500/same_tree","title":"100. Same Tree","description":"https://leetcode.com/problems/same-tree","source":"@site/docs/leetcode/1-500/100_same_tree.md","sourceDirName":"leetcode/1-500","slug":"/leetcode/1-500/same_tree","permalink":"/docs/leetcode/1-500/same_tree","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Easy","permalink":"/docs/tags/leetcode-easy"},{"inline":true,"label":"BFS","permalink":"/docs/tags/bfs"},{"inline":true,"label":"Go","permalink":"/docs/tags/go"}],"version":"current","sidebarPosition":100,"frontMatter":{"title":"100. Same Tree","sidebar_label":"100. Same Tree","tags":["Leetcode Easy","BFS","Go"]},"sidebar":"docSidebar","previous":{"title":"99. Recover Binary Search Tree","permalink":"/docs/leetcode/1-500/recover_bst"},"next":{"title":"101. Symmetric Tree","permalink":"/docs/leetcode/1-500/symmetric_tree"}}');var o=n(74848),s=n(28453);const l={title:"100. Same Tree",sidebar_label:"100. Same Tree",tags:["Leetcode Easy","BFS","Go"]},a=void 0,i={},c=[{value:"Python",id:"python",level:2},{value:"Go",id:"go",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{href:"https://leetcode.com/problems/same-tree",children:"https://leetcode.com/problems/same-tree"})}),"\n",(0,o.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"class Solution:\n    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:\n        if not p or not q:\n            if not p and not q:\n                return True\n            else:\n                return False\n\n        if p.val != q.val:\n            return False\n\n        return self.isSameTree(p.left, q.left) \\\n           and self.isSameTree(p.right, q.right)\n"})}),"\n",(0,o.jsx)(t.h2,{id:"go",children:"Go"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-go",children:"func isSameTree(p *TreeNode, q *TreeNode) bool {\n    if p == nil || q == nil {\n        if p == nil && q == nil {\n            return true\n        } else {\n            return false\n        }\n    }\n\n    if p.Val != q.Val {\n        return false\n    }\n\n    return isSameTree(p.Left, q.Left) && isSameTree(p.Right, q.Right)\n}\n"})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>a});var r=n(96540);const o={},s=r.createContext(o);function l(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);