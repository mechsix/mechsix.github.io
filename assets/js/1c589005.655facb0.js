"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[49334],{20906:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=n(74848),s=n(28453);const r={title:"703. Kth Largest Element in a Stream",sidebar_label:"703. Kth Largest Element in a Stream",tags:["Leetcode Medium","Heap"]},l=void 0,o={id:"leetcode/501-1000/kth_largest_elm_in_stream",title:"703. Kth Largest Element in a Stream",description:"https://leetcode.com/problems/kth-largest-element-in-a-stream/",source:"@site/docs/leetcode/501-1000/703_kth_largest_elm_in_stream.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/kth_largest_elm_in_stream",permalink:"/docs/leetcode/501-1000/kth_largest_elm_in_stream",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Heap",permalink:"/docs/tags/heap"}],version:"current",sidebarPosition:703,frontMatter:{title:"703. Kth Largest Element in a Stream",sidebar_label:"703. Kth Largest Element in a Stream",tags:["Leetcode Medium","Heap"]},sidebar:"docSidebar",previous:{title:"701. Insert into a Binary Search Tree",permalink:"/docs/leetcode/501-1000/insert_bst_node"},next:{title:"704. Binary Search",permalink:"/docs/leetcode/501-1000/binary_search"}},i={},c=[{value:"Python",id:"python",level:2}];function h(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://leetcode.com/problems/kth-largest-element-in-a-stream/",children:"https://leetcode.com/problems/kth-largest-element-in-a-stream/"})}),"\n",(0,a.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"import heapq\n\n\nclass KthLargest:\n\n    def __init__(self, k: int, nums: List[int]):\n        heap = nums[:]\n        heapq.heapify(heap)\n\n        for i in range(len(heap)-k):\n            heapq.heappop(heap)\n\n        self.heap = heap\n        self.k = k\n\n    def add(self, val: int) -> int:\n        heapq.heappush(self.heap, val)\n        if len(self.heap) > self.k:\n            heapq.heappop(self.heap)\n\n        return self.heap[0]\n"})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>o});var a=n(96540);const s={},r=a.createContext(s);function l(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);