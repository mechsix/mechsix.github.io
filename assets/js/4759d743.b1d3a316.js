"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[92885],{3905:(e,r,t)=>{t.d(r,{Zo:()=>d,kt:()=>f});var n=t(67294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=n.createContext({}),s=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},d=function(e){var r=s(e.components);return n.createElement(c.Provider,{value:r},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(t),m=a,f=u["".concat(c,".").concat(m)]||u[m]||p[m]||o;return t?n.createElement(f,i(i({ref:r},d),{},{components:t})):n.createElement(f,i({ref:r},d))}));function f(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var c in r)hasOwnProperty.call(r,c)&&(l[c]=r[c]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},79715:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=t(87462),a=(t(67294),t(3905));const o={title:"314. Binary Tree Vertical Order Traversal",sidebar_label:"314. Binary Tree Vertical Order Traversal",tags:["Leetcode Medium","Binary Tree","BFS"]},i=void 0,l={unversionedId:"leetcode/1-500/binary_tree_vertical_order_traversal",id:"leetcode/1-500/binary_tree_vertical_order_traversal",title:"314. Binary Tree Vertical Order Traversal",description:"https://leetcode.com/problems/binary-tree-vertical-order-traversal/",source:"@site/docs/leetcode/1-500/314_binary_tree_vertical_order_traversal.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/binary_tree_vertical_order_traversal",permalink:"/docs/leetcode/1-500/binary_tree_vertical_order_traversal",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/314_binary_tree_vertical_order_traversal.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"},{label:"BFS",permalink:"/docs/tags/bfs"}],version:"current",sidebarPosition:314,frontMatter:{title:"314. Binary Tree Vertical Order Traversal",sidebar_label:"314. Binary Tree Vertical Order Traversal",tags:["Leetcode Medium","Binary Tree","BFS"]},sidebar:"docSidebar",previous:{title:"307. Range Sum Query - Mutable",permalink:"/docs/leetcode/1-500/range_sum_query"},next:{title:"315. Count of Smaller Numbers After Self",permalink:"/docs/leetcode/1-500/count_of_smaller_numbers_after_self"}},c={},s=[{value:"Python",id:"python",level:2},{value:"Javascript",id:"javascript",level:2}],d={toc:s},u="wrapper";function p(e){let{components:r,...t}=e;return(0,a.kt)(u,(0,n.Z)({},d,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/binary-tree-vertical-order-traversal/"},"https://leetcode.com/problems/binary-tree-vertical-order-traversal/")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from collections import deque, defaultdict\n\n\nclass Solution:\n    def verticalOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        mapper = defaultdict(list)\n        queue = deque([(root, 0)])\n\n        while queue:\n            node, key = queue.popleft()\n\n            if node:\n                mapper[key].append(node.val)\n                queue.append((node.left, key-1))\n                queue.append((node.right, key+1))\n\n        return [mapper[key] for key in sorted(mapper.keys())]\n")),(0,a.kt)("h2",{id:"javascript"},"Javascript"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"var verticalOrder = function(root) {\n    const queue = [];\n    const res = {};\n    let min = Infinity;\n\n    if (root) queue.push([0, root]);\n    while (queue.length) {\n        const [idx, node] = queue.shift();\n\n        min = Math.min(idx, min);\n\n        if (res[idx]) res[idx].push(node.val);\n        else res[idx] = [node.val];\n\n        //console.log(idx, node.val);\n        if (node.left) queue.push([idx - 1, node.left]);\n        if (node.right) queue.push([idx + 1, node.right]);\n    }\n\n    const ary = [];\n    while (res[min] !== undefined) {\n        ary.push(res[min]);\n        min++;\n    }\n    return ary;\n};\n")))}p.isMDXComponent=!0}}]);