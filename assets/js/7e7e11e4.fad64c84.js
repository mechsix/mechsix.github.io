"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[97690],{25710:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var i=t(74848),r=t(28453);const o={title:"1091. Shortest Path in Binary Matrix",sidebar_label:"1091. Shortest Path in Binary Matrix",tags:["Leetcode Medium","BFS","Matrix"]},c=void 0,s={id:"leetcode/1001-1500/shortest_path_in_binary_matrix",title:"1091. Shortest Path in Binary Matrix",description:"https://leetcode.com/problems/shortest-path-in-binary-matrix/",source:"@site/docs/leetcode/1001-1500/1091_shortest_path_in_binary_matrix.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/shortest_path_in_binary_matrix",permalink:"/docs/leetcode/1001-1500/shortest_path_in_binary_matrix",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"BFS",permalink:"/docs/tags/bfs"},{label:"Matrix",permalink:"/docs/tags/matrix"}],version:"current",sidebarPosition:1091,frontMatter:{title:"1091. Shortest Path in Binary Matrix",sidebar_label:"1091. Shortest Path in Binary Matrix",tags:["Leetcode Medium","BFS","Matrix"]},sidebar:"docSidebar",previous:{title:"1089. Duplicate Zeros",permalink:"/docs/leetcode/1001-1500/duplicate_zeros"},next:{title:"1094. Car Pooling",permalink:"/docs/leetcode/1001-1500/car_pooling"}},a={},d=[{value:"Python",id:"python",level:2},{value:"DFS with cache (Timelimit Exceed)",id:"dfs-with-cache-timelimit-exceed",level:3},{value:"BFS and remember the distance in place",id:"bfs-and-remember-the-distance-in-place",level:3}];function l(n){const e={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{href:"https://leetcode.com/problems/shortest-path-in-binary-matrix/",children:"https://leetcode.com/problems/shortest-path-in-binary-matrix/"})}),"\n",(0,i.jsx)(e.h2,{id:"python",children:"Python"}),"\n",(0,i.jsx)(e.h3,{id:"dfs-with-cache-timelimit-exceed",children:"DFS with cache (Timelimit Exceed)"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'from math import inf\nfrom functools import cache\n\n\nclass Solution:\n    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:\n        if grid[0][0] != 0:\n            return -1\n\n        n = len(grid)\n        visited = set()\n        options = [\n            (1, 0), (-1, 0), (0, 1),   (0, -1),\n            (1, 1), (-1, 1), (-1, -1), (1, -1)\n        ]\n        min_cost = inf\n\n        @cache\n        def dfs(cost, row, col):\n            nonlocal min_cost\n\n            if row == n-1 and col == n-1:\n                min_cost = min(min_cost, cost)\n                return\n\n            if cost > min_cost:\n                return\n\n            for rx, cx in options:\n                nr, nc = row+rx, col+cx\n                if (nr, nc) not in visited \\\n                   and nr >= 0 and nr < n \\\n                   and nc >= 0 and nc < n \\\n                   and grid[nr][nc] == 0:\n                    # print((row, col), ">", (nr, nc), visited)\n                    visited.add((nr, nc))\n                    dfs(cost+1, nr, nc)\n                    visited.remove((nr, nc))\n\n        dfs(1, 0, 0)\n\n        return min_cost if min_cost != inf else -1\n'})}),"\n",(0,i.jsx)(e.h3,{id:"bfs-and-remember-the-distance-in-place",children:"BFS and remember the distance in place"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"from collections import deque\n\n\nclass Solution:\n    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:\n        if grid[0][0] != 0:\n            return -1\n\n        n = len(grid)\n\n        directions = [\n            (1, 0), (-1, 0), (0, 1),   (0, -1),\n            (1, 1), (-1, 1), (-1, -1), (1, -1)\n        ]\n\n        queue = deque([(0, 0)])\n        grid[0][0] = 1\n\n        while queue:\n            row, col = queue.popleft()\n\n            if row == n-1 and col == n-1:\n                return grid[row][col]\n\n            for rx, cx in directions:\n                nr, nc = row+rx, col+cx\n                if nr >= 0 and nr < n \\\n                   and nc >= 0 and nc < n \\\n                   and grid[nr][nc] == 0:\n                    grid[nr][nc] = grid[row][col] + 1\n                    queue.append((nr, nc))\n\n        return -1\n"})})]})}function h(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(l,{...n})}):l(n)}},28453:(n,e,t)=>{t.d(e,{R:()=>c,x:()=>s});var i=t(96540);const r={},o=i.createContext(r);function c(n){const e=i.useContext(o);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:c(n.components),i.createElement(o.Provider,{value:e},n.children)}}}]);