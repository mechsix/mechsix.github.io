"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[5202],{3905:function(e,n,r){r.d(n,{Zo:function(){return s},kt:function(){return p}});var t=r(67294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=t.createContext({}),u=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},s=function(e){var n=u(e.components);return t.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},f=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),f=u(r),p=a,y=f["".concat(c,".").concat(p)]||f[p]||d[p]||i;return r?t.createElement(y,o(o({ref:n},s),{},{components:r})):t.createElement(y,o({ref:n},s))}));function p(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=f;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=r[u];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}f.displayName="MDXCreateElement"},29168:function(e,n,r){r.r(n),r.d(n,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return s},default:function(){return f}});var t=r(87462),a=r(63366),i=(r(67294),r(3905)),o=["components"],l={title:"941. Valid Mountain Array",sidebar_label:"941. Valid Mountain Array",tags:["Leetcode Easy"]},c=void 0,u={unversionedId:"leetcode/valid_mountain_array",id:"leetcode/valid_mountain_array",title:"941. Valid Mountain Array",description:"Python",source:"@site/docs/leetcode/941_valid_mountain_array.md",sourceDirName:"leetcode",slug:"/leetcode/valid_mountain_array",permalink:"/docs/leetcode/valid_mountain_array",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/941_valid_mountain_array.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"}],version:"current",sidebarPosition:941,frontMatter:{title:"941. Valid Mountain Array",sidebar_label:"941. Valid Mountain Array",tags:["Leetcode Easy"]},sidebar:"docSidebar",previous:{title:"938. Range Sum of BST",permalink:"/docs/leetcode/range_sum_bst"},next:{title:"977. Squares of a Sorted Array",permalink:"/docs/leetcode/squares_of_sorted_array"}},s=[{value:"Python",id:"python",children:[{value:"Fail Try",id:"fail-try",children:[],level:3},{value:"Second Try",id:"second-try",children:[],level:3}],level:2}],d={toc:s};function f(e){var n=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,t.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"fail-try"},"Fail Try"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def validMountainArray(self, arr: List[int]) -> bool:\n        length = len(arr)\n        if length < 3:\n            return False\n\n        for i in range(0, length-1):\n            if arr[i] >= arr[i+1]:\n                break\n\n        if i == 0 or i == length-1:\n            return False\n\n        for i in range(i, length-1):\n            if arr[i] <= arr[i+1]:\n                break\n\n        return i == length-2\n")),(0,i.kt)("h3",{id:"second-try"},"Second Try"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def validMountainArray(self, arr: List[int]) -> bool:\n        length = len(arr)\n        if length < 3:\n            return False\n\n        i = 0\n        while i < length-1:\n            if arr[i] < arr[i+1]:\n                i += 1\n            else:\n                break\n\n        if i == 0 or i == length-1:\n            return False\n\n        while i < length-1:\n            if arr[i] > arr[i+1]:\n                i += 1\n            else:\n                break\n\n        return i == length-1\n")))}f.isMDXComponent=!0}}]);