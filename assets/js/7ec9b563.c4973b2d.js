"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[8880],{3905:(e,r,n)=>{n.d(r,{Zo:()=>d,kt:()=>y});var t=n(67294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function c(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function l(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var a=t.createContext({}),s=function(e){var r=t.useContext(a),n=r;return e&&(n="function"==typeof e?e(r):c(c({},r),e)),n},d=function(e){var r=s(e.components);return t.createElement(a.Provider,{value:r},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},f=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=s(n),f=o,y=p["".concat(a,".").concat(f)]||p[f]||u[f]||i;return n?t.createElement(y,c(c({ref:r},d),{},{components:n})):t.createElement(y,c({ref:r},d))}));function y(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=n.length,c=new Array(i);c[0]=f;var l={};for(var a in r)hasOwnProperty.call(r,a)&&(l[a]=r[a]);l.originalType=e,l[p]="string"==typeof e?e:o,c[1]=l;for(var s=2;s<i;s++)c[s]=n[s];return t.createElement.apply(null,c)}return t.createElement.apply(null,n)}f.displayName="MDXCreateElement"},56019:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var t=n(87462),o=(n(67294),n(3905));const i={title:"1114. Print in Order",sidebar_label:"1114. Print in Order",tags:["Leetcode Easy","Concurrency"]},c=void 0,l={unversionedId:"leetcode/1001-1500/print_in_order",id:"leetcode/1001-1500/print_in_order",title:"1114. Print in Order",description:"Python",source:"@site/docs/leetcode/1001-1500/1114_print_in_order.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/print_in_order",permalink:"/docs/leetcode/1001-1500/print_in_order",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1114_print_in_order.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Concurrency",permalink:"/docs/tags/concurrency"}],version:"current",sidebarPosition:1114,frontMatter:{title:"1114. Print in Order",sidebar_label:"1114. Print in Order",tags:["Leetcode Easy","Concurrency"]},sidebar:"docSidebar",previous:{title:"1094. Car Pooling",permalink:"/docs/leetcode/1001-1500/car_pooling"},next:{title:"1137. N-th Tribonacci Number",permalink:"/docs/leetcode/1001-1500/nth_tribonacci"}},a={},s=[{value:"Python",id:"python",level:2},{value:"Pair Sync",id:"pair-sync",level:3}],d={toc:s},p="wrapper";function u(e){let{components:r,...n}=e;return(0,o.kt)(p,(0,t.Z)({},d,n,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"pair-sync"},"Pair Sync"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from threading import Lock\n\nclass Foo:\n    def __init__(self):\n        self.first_lock = Lock()\n        self.second_lock = Lock()\n        self.first_lock.acquire()\n        self.second_lock.acquire()\n\n\n    def first(self, printFirst: 'Callable[[], None]') -> None:\n\n        # printFirst() outputs \"first\". Do not change or remove this line.\n\n        printFirst()\n        self.first_lock.release()\n\n\n    def second(self, printSecond: 'Callable[[], None]') -> None:\n\n        # printSecond() outputs \"second\". Do not change or remove this line.\n        with self.first_lock:\n            printSecond()\n            self.second_lock.release()\n\n\n    def third(self, printThird: 'Callable[[], None]') -> None:\n\n        # printThird() outputs \"third\". Do not change or remove this line.\n        with self.second_lock:\n            printThird()\n")))}u.isMDXComponent=!0}}]);