"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[94732],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),i=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=i(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=i(n),f=o,m=p["".concat(c,".").concat(f)]||p[f]||d[f]||a;return n?r.createElement(m,s(s({ref:t},u),{},{components:n})):r.createElement(m,s({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=f;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:o,s[1]=l;for(var i=2;i<a;i++)s[i]=n[i];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},83865:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return i}});var r=n(83117),o=(n(67294),n(3905));const a={title:"20. Valid Parentheses",sidebar_label:"20. Valid Parentheses",tags:["Leetcode Easy","Rust"]},s=void 0,l={unversionedId:"leetcode/1-500/valid_parentheses",id:"leetcode/1-500/valid_parentheses",title:"20. Valid Parentheses",description:"https://leetcode.com/problems/valid-parentheses",source:"@site/docs/leetcode/1-500/20_valid_parentheses.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/valid_parentheses",permalink:"/docs/leetcode/1-500/valid_parentheses",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/20_valid_parentheses.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Rust",permalink:"/docs/tags/rust"}],version:"current",sidebarPosition:20,frontMatter:{title:"20. Valid Parentheses",sidebar_label:"20. Valid Parentheses",tags:["Leetcode Easy","Rust"]},sidebar:"docSidebar",previous:{title:"19. Remove Nth Node From End of List",permalink:"/docs/leetcode/1-500/remove_nth_from_eof_linked_list"},next:{title:"21. Merge Two Sorted Lists",permalink:"/docs/leetcode/1-500/merge_sorted_list"}},c={},i=[{value:"Python",id:"python",level:2},{value:"Rust",id:"rust",level:2}],u={toc:i};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/valid-parentheses"},"https://leetcode.com/problems/valid-parentheses")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("p",null,"N = len(s)\nO(logN)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'class Solution:\n    def isValid(self, s: str) -> bool:\n        if len(s) % 2 != 0:\n            return False\n\n        brackets = {\n            ")": "(",\n            "]": "[",\n            "}": "{",\n        }\n        lefts = brackets.values()\n        rights = brackets.keys()\n\n\n        stack = []\n\n        for char in s:\n            if char in lefts:\n                stack.append(char)\n                continue\n\n            if char in rights:\n                if not stack:\n                    return False\n\n                if brackets[char] == stack[-1]:\n                    stack.pop()\n                    continue\n                return False\n\n            # Corner case, should never happen\n            return False\n\n        return not bool(stack)\n')),(0,o.kt)("h2",{id:"rust"},"Rust"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"use std::collections::HashMap;\n\n\nimpl Solution {\n    pub fn is_valid(s: String) -> bool {\n        let brackets: HashMap<char, char> = [('(', ')'), ('[', ']'), ('{', '}')].into_iter().cloned().collect();\n\n        let mut stack = Vec::new();\n\n        for letter in s.chars() {\n            match brackets.get(&letter) {\n                Some(opposite) => {\n                    stack.push(*opposite)\n                },\n                None => {\n                    if stack.pop() != Some(letter) {\n                        return false\n                    }\n                }\n            }\n        }\n        stack.is_empty()\n    }\n}\n")))}p.isMDXComponent=!0}}]);