"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[8582],{3905:function(e,r,n){n.d(r,{Zo:function(){return l},kt:function(){return _}});var t=n(67294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function a(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function d(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=t.createContext({}),s=function(e){var r=t.useContext(c),n=r;return e&&(n="function"==typeof e?e(r):a(a({},r),e)),n},l=function(e){var r=s(e.components);return t.createElement(c.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},u=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,l=d(e,["components","mdxType","originalType","parentName"]),u=s(n),_=o,f=u["".concat(c,".").concat(_)]||u[_]||p[_]||i;return n?t.createElement(f,a(a({ref:r},l),{},{components:n})):t.createElement(f,a({ref:r},l))}));function _(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=u;var d={};for(var c in r)hasOwnProperty.call(r,c)&&(d[c]=r[c]);d.originalType=e,d.mdxType="string"==typeof e?e:o,a[1]=d;for(var s=2;s<i;s++)a[s]=n[s];return t.createElement.apply(null,a)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},403:function(e,r,n){n.r(r),n.d(r,{frontMatter:function(){return d},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return l},default:function(){return u}});var t=n(87462),o=n(63366),i=(n(67294),n(3905)),a=["components"],d={title:"105. Construct Binary Tree from Preorder and Inorder Traversal",sidebar_label:"105. Construct Binary Tree from Preorder and Inorder Traversal"},c=void 0,s={unversionedId:"leetcode/binary_tree/binary_tree_preorder_inorder",id:"leetcode/binary_tree/binary_tree_preorder_inorder",isDocsHomePage:!1,title:"105. Construct Binary Tree from Preorder and Inorder Traversal",description:"Python",source:"@site/docs/leetcode/binary_tree/105_binary_tree_preorder_inorder.md",sourceDirName:"leetcode/binary_tree",slug:"/leetcode/binary_tree/binary_tree_preorder_inorder",permalink:"/docs/leetcode/binary_tree/binary_tree_preorder_inorder",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/binary_tree/105_binary_tree_preorder_inorder.md",tags:[],version:"current",sidebarPosition:105,frontMatter:{title:"105. Construct Binary Tree from Preorder and Inorder Traversal",sidebar_label:"105. Construct Binary Tree from Preorder and Inorder Traversal"},sidebar:"tutorialSidebar",previous:{title:"1413. Mini Value to Possitive Sum",permalink:"/docs/leetcode/min_value_get_positive_sum"},next:{title:"106. Construct Binary Tree from Inorder and Postorder Traversal",permalink:"/docs/leetcode/binary_tree/construct_bin_tree_from_inorder_postorder_traversal"}},l=[{value:"Python",id:"python",children:[]}],p={toc:l};function u(e){var r=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,t.Z)({},p,n,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:\n        return self._build(\n            preorder=preorder,\n            pre_start=0,\n            pre_end=len(preorder)-1,\n            inorder=inorder,\n            in_start=0,\n            in_end=len(inorder)-1\n        )\n\n    def _build(self, preorder: List[int], pre_start: int, pre_end: int,\n               inorder: List[int], in_start: int, in_end: int):\n        if pre_start > pre_end:\n            return None\n\n        root_val = preorder[pre_start]\n        root_index = inorder.index(root_val)\n\n        left_size = root_index - in_start\n\n        return TreeNode(\n            val=root_val,\n            left=self._build(\n                preorder=preorder,\n                pre_start=pre_start+1,\n                pre_end=pre_start+left_size,\n                inorder=inorder,\n                in_start=in_start,\n                in_end=root_index-1\n            ),\n            right=self._build(\n                preorder=preorder,\n                pre_start=pre_start+left_size+1,\n                pre_end=pre_end,\n                inorder=inorder,\n                in_start=root_index+1,\n                in_end=in_end\n            )\n        )\n\n")))}u.isMDXComponent=!0}}]);