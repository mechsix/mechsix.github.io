"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[4769],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>m});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),d=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},s=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=d(r),p=i,m=u["".concat(l,".").concat(p)]||u[p]||f[p]||o;return r?n.createElement(m,a(a({ref:t},s),{},{components:r})):n.createElement(m,a({ref:t},s))}));function m(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=p;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[u]="string"==typeof e?e:i,a[1]=c;for(var d=2;d<o;d++)a[d]=r[d];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},73377:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>f,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var n=r(87462),i=(r(67294),r(3905));const o={title:"1823. Find the Winner of the Circular Game",sidebar_label:"1823. Find the Winner of the Circular Game",tags:["Leetcode Medium"]},a=void 0,c={unversionedId:"leetcode/1501-2000/find_winner_of_circular_game",id:"leetcode/1501-2000/find_winner_of_circular_game",title:"1823. Find the Winner of the Circular Game",description:"Python",source:"@site/docs/leetcode/1501-2000/1823_find_winner_of_circular_game.md",sourceDirName:"leetcode/1501-2000",slug:"/leetcode/1501-2000/find_winner_of_circular_game",permalink:"/docs/leetcode/1501-2000/find_winner_of_circular_game",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1501-2000/1823_find_winner_of_circular_game.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"}],version:"current",sidebarPosition:1823,frontMatter:{title:"1823. Find the Winner of the Circular Game",sidebar_label:"1823. Find the Winner of the Circular Game",tags:["Leetcode Medium"]},sidebar:"docSidebar",previous:{title:"1822. Sign of the Product of an Array",permalink:"/docs/leetcode/1501-2000/sign_of_the_product_of_an_array"},next:{title:"1832. Check if the Sentence Is Pangram",permalink:"/docs/leetcode/1501-2000/check_if_the_sentence_is_pangram"}},l={},d=[{value:"Python",id:"python",level:2}],s={toc:d},u="wrapper";function f(e){let{components:t,...r}=e;return(0,i.kt)(u,(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class Solution:\n    def findTheWinner(self, n: int, k: int) -> int:\n        friends = list(range(n))\n\n        i = 0\n        while len(friends) > 1:\n            i = (i+k-1) % len(friends)\n            print("Remove {} {}".format(i, friends))\n            friends.pop(i)\n\n        return friends[0] + 1\n')))}f.isMDXComponent=!0}}]);