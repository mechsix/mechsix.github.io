"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[56407],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},s="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),s=c(n),f=a,m=s["".concat(l,".").concat(f)]||s[f]||d[f]||o;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=f;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[s]="string"==typeof e?e:a,i[1]=p;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},51241:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return i},default:function(){return s},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return c}});var r=n(83117),a=(n(67294),n(3905));const o={title:"502. IPO",sidebar_label:"502. IPO",tags:["Leetcode Hard","Heap","Greedy"]},i=void 0,p={unversionedId:"leetcode/501-1000/ipo",id:"leetcode/501-1000/ipo",title:"502. IPO",description:"Python",source:"@site/docs/leetcode/501-1000/502_ipo.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/ipo",permalink:"/docs/leetcode/501-1000/ipo",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/502_ipo.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"Heap",permalink:"/docs/tags/heap"},{label:"Greedy",permalink:"/docs/tags/greedy"}],version:"current",sidebarPosition:502,frontMatter:{title:"502. IPO",sidebar_label:"502. IPO",tags:["Leetcode Hard","Heap","Greedy"]},sidebar:"docSidebar",previous:{title:"495. Teemo Attacking",permalink:"/docs/leetcode/1-500/teemo_attack"},next:{title:"509. Fibonacci Number",permalink:"/docs/leetcode/501-1000/fibonacci_number"}},l={},c=[{value:"Python",id:"python",level:2},{value:"Max Heap",id:"max-heap",level:3}],u={toc:c};function s(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("h3",{id:"max-heap"},"Max Heap"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u5b98\u65b9\u89e3\u6cd5"),(0,a.kt)("li",{parentName:"ul"},"\u5728\u6bcf\u500b\u6b65\u9a5f\uff0c\u6709\u5169\u500b\u5b50\u554f\u984c",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"\u627e\u5230\u4e0b\u4e00\u500b\u53ef\u627f\u63a5\u7684\u6848\u5b50",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"\u4e0b\u4e00\u500b\u6240\u9700\u9810\u7b97\u6700\u5c11\u7684\u6848\u5b50"),(0,a.kt)("li",{parentName:"ul"},"\u5148\u5c07\u9810\u7b97\u4ee5\u5c0f\u5230\u5927\u6392\u5e8f\u904e"))),(0,a.kt)("li",{parentName:"ul"},"\u627e\u5230\u7576\u524d\u9810\u7b97\u53ef\u627f\u64d4\u7684\u72c0\u6cc1\u4e0b\uff0c\u80fd\u5920\u63a5\u4e0b\u7684\u6700\u6709profit\u7684\u5c08\u6848",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"\u4f7f\u7528max heap\u7dad\u8b77\u5269\u9918\u7684\u6848\u5b50")))))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from heapq import heappush, heappop\n\n\nclass Solution:\n    def findMaximizedCapital(self, k: int, w: int, profits: List[int], capitals: List[int]) -> int:\n        fund = w\n\n        projects = list(zip(capitals, profits))\n        projects.sort()\n\n        max_heap = []\n        ptr = 0\n\n        for i in range(k):\n            while ptr < len(projects) and projects[ptr][0] <= fund:\n                profit = projects[ptr][1]\n                heappush(max_heap, -profit) # Add new available project\n                ptr += 1\n\n            if not max_heap:\n                break\n\n            # Choose the best project and remove it\n            fund += -heappop(max_heap)\n\n        return fund\n")))}s.isMDXComponent=!0}}]);