"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[71948],{93318:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>i});var o=n(74848),r=n(28453);const a={title:"763. Partition Labels",sidebar_label:"763. Partition Labels",tags:["Leetcode Medium","Graph"]},s=void 0,l={id:"leetcode/501-1000/all_paths_from_source_to_target",title:"763. Partition Labels",description:"https://leetcode.com/problems/all-paths-from-source-to-target/",source:"@site/docs/leetcode/501-1000/797_all_paths_from_source_to_target.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/all_paths_from_source_to_target",permalink:"/docs/leetcode/501-1000/all_paths_from_source_to_target",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Graph",permalink:"/docs/tags/graph"}],version:"current",sidebarPosition:797,frontMatter:{title:"763. Partition Labels",sidebar_label:"763. Partition Labels",tags:["Leetcode Medium","Graph"]},sidebar:"docSidebar",previous:{title:"792. Number of Matching Subsequences",permalink:"/docs/leetcode/501-1000/number_of_matching_subsequences"},next:{title:"802. Find Eventual Safe States",permalink:"/docs/leetcode/501-1000/find_eventual_safe_states"}},c={},i=[{value:"Python",id:"python",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{href:"https://leetcode.com/problems/all-paths-from-source-to-target/",children:"https://leetcode.com/problems/all-paths-from-source-to-target/"})}),"\n",(0,o.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"class Solution:\n    def allPathsSourceTarget(self, graph: List[List[int]]) -> List[List[int]]:\n        self.result = []\n        self.travel(graph, 0, [])\n        return self.result\n\n    def travel(self, graph, node, path):\n        path.append(node)\n\n        if node == len(graph)-1:\n            # Reach the end\n            self.result.append(path[:])\n            path.pop()\n            return\n\n        for next_node in graph[node]:\n            self.travel(graph, next_node, path)\n\n        path.pop()\n\n        return path\n"})})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>l});var o=n(96540);const r={},a=o.createContext(r);function s(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);