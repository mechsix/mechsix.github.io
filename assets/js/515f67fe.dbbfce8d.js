"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[3770],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),i=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=i(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=i(r),m=o,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||a;return r?n.createElement(f,l(l({ref:t},u),{},{components:r})):n.createElement(f,l({ref:t},u))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,l[1]=c;for(var i=2;i<a;i++)l[i]=r[i];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},46553:function(e,t,r){r.r(t),r.d(t,{contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return c},metadata:function(){return i},toc:function(){return u}});var n=r(87462),o=r(63366),a=(r(67294),r(3905)),l=["components"],c={title:"1302. Deepest Leaves Sum",sidebar_label:"1302. Deepest Leaves Sum",tags:["Leetcode Hard","Binary Tree"]},s=void 0,i={unversionedId:"leetcode/1001-1500/deepest_leaves_sum",id:"leetcode/1001-1500/deepest_leaves_sum",title:"1302. Deepest Leaves Sum",description:"https://leetcode.com/problems/deepest-leaves-sum/",source:"@site/docs/leetcode/1001-1500/1302_deepest_leaves_sum.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/deepest_leaves_sum",permalink:"/docs/leetcode/1001-1500/deepest_leaves_sum",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1302_deepest_leaves_sum.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"}],version:"current",sidebarPosition:1302,frontMatter:{title:"1302. Deepest Leaves Sum",sidebar_label:"1302. Deepest Leaves Sum",tags:["Leetcode Hard","Binary Tree"]},sidebar:"docSidebar",previous:{title:"1299. Replace Elements with Greatest Element on Right Side",permalink:"/docs/leetcode/1001-1500/replace_elm_with_greatest_right"},next:{title:"1305. All Elements in Two Binary Search Trees",permalink:"/docs/leetcode/1001-1500/all_elms_in_two_bst"}},u=[{value:"Python",id:"python",children:[],level:2},{value:"Javascript",id:"javascript",children:[],level:2}],p={toc:u};function d(e){var t=e.components,r=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/deepest-leaves-sum/"},"https://leetcode.com/problems/deepest-leaves-sum/")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("h2",{id:"javascript"},"Javascript"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"var deepestLeavesSum = function(root) {\n    const queue = [root];\n    let level = 0;\n    const layer = [];\n  \n    while (queue.length) {\n      const total = queue.length;\n      layer.push([]);\n      for (let i = 0; i < total; i++) {\n        const node = queue.shift();\n        layer[level].push(node.val);\n        \n        if (node.left) queue.push(node.left);\n        if (node.right) queue.push(node.right);          \n      }\n      level++;\n    }\n  \n    return layer[layer.length - 1].reduce((acc, cur) => acc + cur, 0)\n}\n")))}d.isMDXComponent=!0}}]);