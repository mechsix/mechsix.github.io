"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[51273],{3905:(e,n,t)=>{t.d(n,{Zo:()=>i,kt:()=>f});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),m=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):u(u({},n),e)),t},i=function(e){var n=m(e.components);return r.createElement(s.Provider,{value:n},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,i=l(e,["components","mdxType","originalType","parentName"]),c=m(t),d=a,f=c["".concat(s,".").concat(d)]||c[d]||p[d]||o;return t?r.createElement(f,u(u({ref:n},i),{},{components:t})):r.createElement(f,u({ref:n},i))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,u=new Array(o);u[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:a,u[1]=l;for(var m=2;m<o;m++)u[m]=t[m];return r.createElement.apply(null,u)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},21782:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>u,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>m});var r=t(87462),a=(t(67294),t(3905));const o={title:"53. Maximum Subarray",sidebar_label:"53. Maximum Subarray",tags:["Leetcode Easy","Max Subarray","Kadane Algorithm","Go"]},u=void 0,l={unversionedId:"leetcode/1-500/max_subarray",id:"leetcode/1-500/max_subarray",title:"53. Maximum Subarray",description:"https://leetcode.com/problems/maximum-subarray",source:"@site/docs/leetcode/1-500/53_max_subarray.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/max_subarray",permalink:"/docs/leetcode/1-500/max_subarray",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/53_max_subarray.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Max Subarray",permalink:"/docs/tags/max-subarray"},{label:"Kadane Algorithm",permalink:"/docs/tags/kadane-algorithm"},{label:"Go",permalink:"/docs/tags/go"}],version:"current",sidebarPosition:53,frontMatter:{title:"53. Maximum Subarray",sidebar_label:"53. Maximum Subarray",tags:["Leetcode Easy","Max Subarray","Kadane Algorithm","Go"]},sidebar:"docSidebar",previous:{title:"51. N-Queens",permalink:"/docs/leetcode/1-500/n_queens"},next:{title:"54. Spiral Matrix",permalink:"/docs/leetcode/1-500/spiral_matrix"}},s={},m=[{value:"Python",id:"python",level:2},{value:"First Try",id:"first-try",level:3},{value:"O(n) Solution",id:"on-solution",level:3},{value:"### O(n) clear solution",id:"-on-clear-solution",level:3},{value:"Bottom-Up DP",id:"bottom-up-dp",level:3},{value:"Go",id:"go",level:2},{value:"JS",id:"js",level:2}],i={toc:m},c="wrapper";function p(e){let{components:n,...t}=e;return(0,a.kt)(c,(0,r.Z)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/maximum-subarray"},"https://leetcode.com/problems/maximum-subarray")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("h3",{id:"first-try"},"First Try"),(0,a.kt)("p",null,"Timeout, O(nlogn)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        ans_sum = 0\n        for start in range(0, len(nums)):\n            for end in range(start, len(nums)+1):\n                if (current_sum := sum(nums[start:end])) > ans_sum:\n                    ans_sum = current_sum\n        return ans_sum\n")),(0,a.kt)("h3",{id:"on-solution"},"O(n) Solution"),(0,a.kt)("p",null,"O(n) Solution, which don't care the ans array but only reach the sum()"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        ans_sum = None\n        current_sum = -10^4\n        for num in nums:\n            current_sum = max(current_sum + num, num)\n            ans_sum = current_sum if ans_sum is None else max(ans_sum, current_sum)\n        return ans_sum\n\n")),(0,a.kt)("h3",{id:"-on-clear-solution"},"### O(n) clear solution"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from math import inf\n\n\nclass Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        total = -inf\n        max_total = -inf\n        for num in nums:\n            total = max(total+num, num)\n            max_total = max(max_total, total)\n        return max_total\n")),(0,a.kt)("h3",{id:"bottom-up-dp"},"Bottom-Up DP"),(0,a.kt)("p",null,"Same as previous solution, but follow the DP pattern"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        dp = [0] * (len(nums)+1)\n\n        ans = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i-1] > 0:\n                nums[i] = nums[i] + nums[i-1]\n                ans = max(ans, nums[i])\n\n        return ans\n")),(0,a.kt)("h2",{id:"go"},"Go"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func maxSubArray(nums []int) int {\n    var total int = -10000\n    var max_total int = -10000\n\n    for _, num := range nums {\n        if num > total + num {\n            total = num\n        } else {\n            total += num\n        }\n\n        if (max_total < total) {\n            max_total = total\n        }\n    }\n\n    return max_total\n}\n")),(0,a.kt)("h2",{id:"js"},"JS"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxSubArray = function(nums) {\n    let max = -Infinity;\n    let cur = 0;\n\n    for (let num of nums) {\n        if (cur + num < num) {\n            cur = num;\n        } else {\n            cur += num;\n        }\n        max = Math.max(cur, max);\n    }\n\n    return max;\n};\n\n/**\n * max -2  1  1  4  4  5  6  6  6\n *\n * cur -2  1 -2  4  3  5  6  1  5\n * num -2  1 -3  4 -1  2  1 -5  4\n *.        *    *\n *  1 > (-2 + 1) -> max: 1, cur: 1\n *  4 > (-2 + 4) -> max: 4, cur: 4\n */\n")))}p.isMDXComponent=!0}}]);