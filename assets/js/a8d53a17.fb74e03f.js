"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[9427],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),a=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=a(e.components);return o.createElement(s.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=a(n),d=r,m=u["".concat(s,".").concat(d)]||u[d]||h[d]||i;return n?o.createElement(m,c(c({ref:t},p),{},{components:n})):o.createElement(m,c({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,c=new Array(i);c[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,c[1]=l;for(var a=2;a<i;a++)c[a]=n[a];return o.createElement.apply(null,c)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},91007:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return a},toc:function(){return p},default:function(){return u}});var o=n(87462),r=n(63366),i=(n(67294),n(3905)),c=["components"],l={title:"Algorithm Examples in TS",sidebar_label:"Alg Examples",sidebar_position:3},s=void 0,a={unversionedId:"typscript/alg-examples",id:"typscript/alg-examples",isDocsHomePage:!1,title:"Algorithm Examples in TS",description:"This is a study note of Typescript The Complete Developers Guide, if you're looking for more details of these example, please see the course",source:"@site/docs/typscript/alg-examples.md",sourceDirName:"typscript",slug:"/typscript/alg-examples",permalink:"/docs/typscript/alg-examples",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/typscript/alg-examples.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Algorithm Examples in TS",sidebar_label:"Alg Examples",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Developing Environment",permalink:"/docs/typscript/useful-dev-packages"},next:{title:"Interfaces vs Abstract Classes",permalink:"/docs/typscript/interface-vs-abstract-classess"}},p=[{value:"Basic Bubble Sorter",id:"basic-bubble-sorter",children:[]},{value:"Add string sorting support",id:"add-string-sorting-support",children:[]},{value:"Separate swapping and comparison",id:"separate-swapping-and-comparison",children:[]}],h={toc:p};function u(e){var t=e.components,n=(0,r.Z)(e,c);return(0,i.kt)("wrapper",(0,o.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This is a study note of ",(0,i.kt)("a",{parentName:"p",href:"https://www.udemy.com/course/typescript-the-complete-developers-guide"},"Typescript The Complete Developers Guide"),", if you're looking for more details of these example, please see the course"),(0,i.kt)("h2",{id:"basic-bubble-sorter"},"Basic Bubble Sorter"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"class Sorter {\n  // collection: number[];\n  // constructor(collection: number[]) {\n  //   this.collection = collection\n  // }\n\n  // * Typescript Constructor Shorthand\n  constructor(public collection: number[]) {}\n\n  sort(): void {\n    const { length } = this.collection;\n    for (let i = 0; i < length; i++) {\n      for (let j = 0; j < length - i - 1; j++) {\n        if (this.collection[j] > this.collection[j + 1]) {\n          const leftHand = this.collection[j];\n          this.collection[j] = this.collection[j + 1];\n          this.collection[j + 1] = leftHand;\n        }\n      }\n    }\n  }\n}\n\nconst sorter = new Sorter([10, 3, -5, 0]);\nsorter.sort();\nconsole.log(sorter.collection);\n")),(0,i.kt)("p",null,"The compiled javascript, can see what ",(0,i.kt)("inlineCode",{parentName:"p"},"tsc")," checked and removed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The type declaration of collection"),(0,i.kt)("li",{parentName:"ul"},"Return type declaration"),(0,i.kt)("li",{parentName:"ul"},"The constructor shorthand (",(0,i.kt)("a",{parentName:"li",href:"https://maksimivanov.com/posts/typescript-constructor-shorthand/"},"Reference"),")")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'"use strict";\nclass Sorter {\n  constructor(collection) {\n    this.collection = collection;\n  }\n  sort() {\n    const { length } = this.collection;\n    for (let i = 0; i < length; i++) {\n      for (let j = 0; j < length - i - 1; j++) {\n        if (this.collection[j] > this.collection[j + 1]) {\n          const leftHand = this.collection[j];\n          this.collection[j] = this.collection[j + 1];\n          this.collection[j + 1] = leftHand;\n        }\n      }\n    }\n  }\n}\nconst sorter = new Sorter([10, 3, -5, 0]);\nsorter.sort();\nconsole.log(sorter.collection);\n')),(0,i.kt)("h2",{id:"add-string-sorting-support"},"Add string sorting support"),(0,i.kt)("p",null,"Since ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," can't be replace in place in the Javascript, we have no choice to make the program determine what type it is in the cycle"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"class Sorter {\n  constructor(public collection: number[] | string) { }\n\n  sort(): void {\n    const { length } = this.collection;\n\n    for (let i = 0; i < length; i++) {\n      for (let j = 0; j < length - i - 1; j++) {\n        if (this.collection instanceof Array) {\n          if (this.collection[j] > this.collection[j + 1]) {\n            const leftHand = this.collection[j];\n            this.collection[j] = this.collection[j + 1];\n            this.collection[j + 1] = leftHand;\n          }\n        }\n\n        if (typeof this.collection === 'string') {\n          if (this.collection[j].charCodeAt(0) > this.collection[j + 1].charCodeAt(0)) {\n            const leftHand = this.collection[j];\n            this.collection = this.collection.substr(0, j) + this.collection[j + 1] + this.collection[j] + this.collection.substr(j + 2)\n          }\n        }\n      }\n    }\n  }\n}\n")),(0,i.kt)("p",null,"And this is how the compiled javascript code looks like"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"\"use strict\";\nclass Sorter {\n    constructor(collection) {\n        this.collection = collection;\n    }\n    sort() {\n        const { length } = this.collection;\n        for (let i = 0; i < length; i++) {\n            for (let j = 0; j < length - i - 1; j++) {\n                if (this.collection instanceof Array) {\n                    if (this.collection[j] > this.collection[j + 1]) {\n                        const leftHand = this.collection[j];\n                        this.collection[j] = this.collection[j + 1];\n                        this.collection[j + 1] = leftHand;\n                    }\n                }\n                if (typeof this.collection === 'string') {\n                    if (this.collection[j].charCodeAt(0) > this.collection[j + 1].charCodeAt(0)) {\n                        const leftHand = this.collection[j];\n                        this.collection = this.collection.substr(0, j) + this.collection[j + 1] + this.collection[j] + this.collection.substr(j + 2);\n                    }\n                }\n            }\n        }\n    }\n}\n")),(0,i.kt)("h2",{id:"separate-swapping-and-comparison"},"Separate swapping and comparison"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"export class NumbersCollection {\n  constructor(public data: number[]) {}\n\n  get length(): number {\n    return this.data.length;\n  }\n  compare(leftIndex: number, rightIndex: number): boolean {\n    return this.data[leftIndex] > this.data[rightIndex];\n  }\n\n  swap(leftIndex: number, rightIndex: number): void {\n    const leftHand = this.data[leftIndex];\n    this.data[leftIndex] = this.data[rightIndex];\n    this.data[rightIndex] = leftHand;\n  }\n}\n\nexport class CharactersCollection {\n  constructor(public data: string) {}\n\n  get length(): number {\n    return this.data.length;\n  }\n\n  compare(leftIndex: number, rightIndex: number): boolean {\n    return (\n      this.data[leftIndex].toLowerCase() > this.data[rightIndex].toLowerCase()\n    );\n  }\n  swap(leftIndex: number, rightIndex: number): void {\n    const characters = this.data.split('');\n\n    const leftHand = characters[leftIndex];\n    characters[leftIndex] = characters[rightIndex];\n    characters[rightIndex] = leftHand;\n\n    this.data = characters.join('');\n  }\n}\n\ninterface Sortable {\n  length: number;\n  compare(leftIndex: number, rightIndex: number): boolean;\n  swap(leftIndex: number, rightIndex: number): void;\n}\n\nexport class Sorter {\n  constructor(public collection: Sortable) {}\n\n  sort(): void {\n    const { length } = this.collection;\n\n    for (let i = 0; i < length; i++) {\n      for (let j = 0; j < length - i - 1; j++) {\n        if (this.collection.compare(j, j + 1)) {\n          this.collection.swap(j, j + 1);\n        }\n      }\n    }\n  }\n}\n\nconst numbersCollection = new NumbersCollection([10, 3, -5, 0]);\nconst num_sorter = new Sorter(numbersCollection);\nnum_sorter.sort();\nconsole.log(numbersCollection.data);\n\nconst charactersCollection = new CharactersCollection('Xaayb');\nconst char_sorter = new Sorter(charactersCollection);\nchar_sorter.sort();\nconsole.log(charactersCollection.data);\n")))}u.isMDXComponent=!0}}]);