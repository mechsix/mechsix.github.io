"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[52378],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>f});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},s=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),m=u(r),p=a,f=m["".concat(l,".").concat(p)]||m[p]||d[p]||i;return r?n.createElement(f,o(o({ref:t},s),{},{components:r})):n.createElement(f,o({ref:t},s))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=p;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[m]="string"==typeof e?e:a,o[1]=c;for(var u=2;u<i;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},96695:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var n=r(87462),a=(r(67294),r(3905));const i={title:"1338. Reduce Array Size to The Half",sidebar_label:"1338. Reduce Array Size to The Half",tags:["Leetcode Medium","Backtracking"]},o=void 0,c={unversionedId:"leetcode/1001-1500/reduce_array_size_to_the_half",id:"leetcode/1001-1500/reduce_array_size_to_the_half",title:"1338. Reduce Array Size to The Half",description:"https://leetcode.com/problems/reduce-array-size-to-the-half/",source:"@site/docs/leetcode/1001-1500/1338_reduce_array_size_to_the_half.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/reduce_array_size_to_the_half",permalink:"/docs/leetcode/1001-1500/reduce_array_size_to_the_half",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1338_reduce_array_size_to_the_half.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Backtracking",permalink:"/docs/tags/backtracking"}],version:"current",sidebarPosition:1338,frontMatter:{title:"1338. Reduce Array Size to The Half",sidebar_label:"1338. Reduce Array Size to The Half",tags:["Leetcode Medium","Backtracking"]},sidebar:"docSidebar",previous:{title:"1337. The K Weakest Rows in a Matrix",permalink:"/docs/leetcode/1001-1500/k_weakest_rows_in_matrix"},next:{title:"1339. Maximum Product of Splitted Binary Tree",permalink:"/docs/leetcode/1001-1500/max_product_of_splited_binary_tree"}},l={},u=[{value:"Python",id:"python",level:2},{value:"Backtracking (Timelimit Exceed)",id:"backtracking-timelimit-exceed",level:3}],s={toc:u},m="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(m,(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/reduce-array-size-to-the-half/"},"https://leetcode.com/problems/reduce-array-size-to-the-half/")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("h3",{id:"backtracking-timelimit-exceed"},"Backtracking (Timelimit Exceed)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Time: O(N!)"),(0,a.kt)("li",{parentName:"ul"},"Space: O(M)  # M is the count of non-duplicated num in the arr")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from collections import Counter\nfrom math import inf\n\n\nclass Solution:\n    def minSetSize(self, arr: List[int]) -> int:\n        counts = Counter(arr)\n        half = len(arr) >> 1\n\n        nums = counts.keys()\n\n        def backtrack(path: set):\n            if sum([counts[num] for num in nums if num not in path]) <= half:\n                return len(path)\n\n            minium = inf\n            for num in nums:\n                if num in path:\n                    continue\n                path.add(num)\n                minium = min(minium, backtrack(path))\n                path.remove(num)\n\n            return minium\n\n        return backtrack(set())\n")))}d.isMDXComponent=!0}}]);