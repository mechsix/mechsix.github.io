"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[5881],{49494:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"leetcode/501-1000/binary_tree_with_factors","title":"823. Binary Trees With Factors","description":"https://leetcode.com/problems/binary-trees-with-factors/","source":"@site/docs/leetcode/501-1000/832_binary_tree_with_factors.md","sourceDirName":"leetcode/501-1000","slug":"/leetcode/501-1000/binary_tree_with_factors","permalink":"/docs/leetcode/501-1000/binary_tree_with_factors","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Medium","permalink":"/docs/tags/leetcode-medium"},{"inline":true,"label":"DP","permalink":"/docs/tags/dp"},{"inline":true,"label":"TODO","permalink":"/docs/tags/todo"}],"version":"current","sidebarPosition":832,"frontMatter":{"title":"823. Binary Trees With Factors","sidebar_label":"823. Binary Trees With Factors","tags":["Leetcode Medium","DP","TODO"]},"sidebar":"docSidebar","previous":{"title":"820. Short Encoding of Words","permalink":"/docs/leetcode/501-1000/short_encoding_of_words"},"next":{"title":"835. Image Overlap","permalink":"/docs/leetcode/501-1000/image_overlap"}}');var o=n(74848),i=n(28453);const s={title:"823. Binary Trees With Factors",sidebar_label:"823. Binary Trees With Factors",tags:["Leetcode Medium","DP","TODO"]},a=void 0,c={},l=[{value:"Python",id:"python",level:2},{value:"Bottom Up DP",id:"bottom-up-dp",level:3}];function d(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{href:"https://leetcode.com/problems/binary-trees-with-factors/",children:"https://leetcode.com/problems/binary-trees-with-factors/"})}),"\n",(0,o.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,o.jsx)(t.h3,{id:"bottom-up-dp",children:"Bottom Up DP"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Offical solution"}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"class Solution:\n    def numFactoredBinaryTrees(self, arr: List[int]) -> int:\n        arr.sort()\n\n        dp = [1] * len(arr)\n        mapper = {num: index for index, num in enumerate(arr)}\n\n        for i, num in enumerate(arr):\n            for j in range(i):\n                left, right = num % arr[j], num / arr[j]\n                if left == 0 and right in mapper:\n                    dp[i] += dp[j] * dp[mapper[right]]\n                    dp[i] %= (10**9+7)\n\n        return sum(dp) % (10**9+7)\n"})})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>a});var r=n(96540);const o={},i=r.createContext(o);function s(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);