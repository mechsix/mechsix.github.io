"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[88294],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),m=s(n),d=o,f=m["".concat(c,".").concat(d)]||m[d]||p[d]||i;return n?r.createElement(f,a(a({ref:t},l),{},{components:n})):r.createElement(f,a({ref:t},l))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var u={};for(var c in t)hasOwnProperty.call(t,c)&&(u[c]=t[c]);u.originalType=e,u[m]="string"==typeof e?e:o,a[1]=u;for(var s=2;s<i;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},46188:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>u,toc:()=>s});var r=n(87462),o=(n(67294),n(3905));const i={title:"525. Contiguous Array",sidebar_label:"525. Contiguous Array",tags:["Leetcode Medium","Prefix Sum"]},a=void 0,u={unversionedId:"leetcode/501-1000/contiguous_array",id:"leetcode/501-1000/contiguous_array",title:"525. Contiguous Array",description:"https://leetcode.com/problems/contiguous-array/",source:"@site/docs/leetcode/501-1000/525_contiguous_array.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/contiguous_array",permalink:"/docs/leetcode/501-1000/contiguous_array",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/525_contiguous_array.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Prefix Sum",permalink:"/docs/tags/prefix-sum"}],version:"current",sidebarPosition:525,frontMatter:{title:"525. Contiguous Array",sidebar_label:"525. Contiguous Array",tags:["Leetcode Medium","Prefix Sum"]},sidebar:"docSidebar",previous:{title:"523. Continuous Subarray Sum",permalink:"/docs/leetcode/501-1000/continuous_subarray_sum"},next:{title:"528. Random Pick with Weight",permalink:"/docs/leetcode/501-1000/random_pick_with_weight"}},c={},s=[{value:"Python",id:"python",level:2},{value:"Prefix Sum",id:"prefix-sum",level:3}],l={toc:s},m="wrapper";function p(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/contiguous-array/"},"https://leetcode.com/problems/contiguous-array/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"prefix-sum"},"Prefix Sum"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"first_seem")," key is difference btw zero_count and one_count, value is the first seem index"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"fist_seem")," inital with ",(0,o.kt)("inlineCode",{parentName:"li"},"0 -> -1")," to ensure the first place able to be calculated from next ",(0,o.kt)("inlineCode",{parentName:"li"},"0"),"s")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def findMaxLength(self, nums: List[int]) -> int:\n        first_seem = {0: -1}\n\n        zero_count = 0\n        one_count = 0\n\n        ans = 0\n\n        for index, num in enumerate(nums):\n            if num == 0:\n                zero_count += 1\n            else:\n                one_count += 1\n\n            diff = zero_count - one_count\n            if diff in first_seem:\n                ans = max(ans, index - first_seem[diff])\n            else:\n                first_seem[diff] = index\n\n        return ans\n")))}p.isMDXComponent=!0}}]);