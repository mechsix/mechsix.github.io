"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[13025],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var a=r.createContext({}),i=function(e){var t=r.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=i(e.components);return r.createElement(a.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,a=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=i(n),m=o,f=d["".concat(a,".").concat(m)]||d[m]||p[m]||s;return n?r.createElement(f,c(c({ref:t},u),{},{components:n})):r.createElement(f,c({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,c=new Array(s);c[0]=m;var l={};for(var a in t)hasOwnProperty.call(t,a)&&(l[a]=t[a]);l.originalType=e,l[d]="string"==typeof e?e:o,c[1]=l;for(var i=2;i<s;i++)c[i]=n[i];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},95712:function(e,t,n){n.r(t),n.d(t,{assets:function(){return a},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return i}});var r=n(83117),o=(n(67294),n(3905));const s={title:"299. Bulls and Cows",sidebar_label:"299. Bulls and Cows",tags:["Leetcode Medium","Hash"]},c=void 0,l={unversionedId:"leetcode/1-500/bulls_and_cows",id:"leetcode/1-500/bulls_and_cows",title:"299. Bulls and Cows",description:"https://leetcode.com/problems/bulls-and-cows/",source:"@site/docs/leetcode/1-500/299_bulls_and_cows.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/bulls_and_cows",permalink:"/docs/leetcode/1-500/bulls_and_cows",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/299_bulls_and_cows.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Hash",permalink:"/docs/tags/hash"}],version:"current",sidebarPosition:299,frontMatter:{title:"299. Bulls and Cows",sidebar_label:"299. Bulls and Cows",tags:["Leetcode Medium","Hash"]},sidebar:"docSidebar",previous:{title:"297. Serialize and Deserialize Binary Tree",permalink:"/docs/leetcode/1-500/serialize_descrialize_bt"},next:{title:"300. Longest Increasing Subsequence",permalink:"/docs/leetcode/1-500/longest_increasing_subsequence"}},a={},i=[{value:"Python",id:"python",level:2}],u={toc:i};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/bulls-and-cows/"},"https://leetcode.com/problems/bulls-and-cows/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from collections import Counter\n\n\nclass Solution:\n    def getHint(self, secret: str, guess: str) -> str:\n        counts = Counter(secret)\n\n        bulls, cows = 0, 0\n        for i, num in enumerate(guess):\n            if num == secret[i]:\n                bulls += 1\n                cows -= 1 if counts[num] <= 0 else 0\n            else:\n                cows += 1 if counts[num] > 0 else 0\n            counts[num] -= 1\n        return "{}A{}B".format(bulls, cows)\n')))}d.isMDXComponent=!0}}]);