"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[1597],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return p}});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var a=r.createContext({}),c=function(e){var n=r.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},m=function(e){var n=c(e.components);return r.createElement(a.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,a=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=c(t),p=i,f=d["".concat(a,".").concat(p)]||d[p]||u[p]||o;return t?r.createElement(f,s(s({ref:n},m),{},{components:t})):r.createElement(f,s({ref:n},m))}));function p(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,s=new Array(o);s[0]=d;var l={};for(var a in n)hasOwnProperty.call(n,a)&&(l[a]=n[a]);l.originalType=e,l.mdxType="string"==typeof e?e:i,s[1]=l;for(var c=2;c<o;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},84537:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return a},default:function(){return d},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return m}});var r=t(87462),i=t(63366),o=(t(67294),t(3905)),s=["components"],l={title:"712. Minimum ASCII Delete Sum for Two Strings",sidebar_label:"712. Minimum ASCII Delete Sum for Two Strings",tags:["Leetcode Medium","DP"]},a=void 0,c={unversionedId:"leetcode/501-1000/minimum-ascii-delete-sum-for-two-strings",id:"leetcode/501-1000/minimum-ascii-delete-sum-for-two-strings",title:"712. Minimum ASCII Delete Sum for Two Strings",description:"https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/",source:"@site/docs/leetcode/501-1000/712_minimum-ascii-delete-sum-for-two-strings.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/minimum-ascii-delete-sum-for-two-strings",permalink:"/docs/leetcode/501-1000/minimum-ascii-delete-sum-for-two-strings",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/712_minimum-ascii-delete-sum-for-two-strings.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"DP",permalink:"/docs/tags/dp"}],version:"current",sidebarPosition:712,frontMatter:{title:"712. Minimum ASCII Delete Sum for Two Strings",sidebar_label:"712. Minimum ASCII Delete Sum for Two Strings",tags:["Leetcode Medium","DP"]},sidebar:"docSidebar",previous:{title:"707. Design Linked List",permalink:"/docs/leetcode/501-1000/design_linked_list"},next:{title:"723. Candy Crush",permalink:"/docs/leetcode/501-1000/candy_crush"}},m=[{value:"Python",id:"python",children:[{value:"Bottom-UP DP",id:"bottom-up-dp",children:[],level:3}],level:2},{value:"JS",id:"js",children:[],level:2}],u={toc:m};function d(e){var n=e.components,t=(0,i.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/"},"https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"bottom-up-dp"},"Bottom-UP DP"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def minimumDeleteSum(self, s1: str, s2: str) -> int:\n        m, n = len(s1), len(s2)\n\n        dp = [[0]*(n+1) for _ in range(m+1)]\n\n        for i in range(m-1, -1, -1):\n            dp[i][n] = dp[i+1][n] + ord(s1[i])\n        for j in range(n-1, -1, -1):\n            dp[m][j] = dp[m][j+1] + ord(s2[j])\n\n        for i in range(m-1, -1, -1):\n            for j in range(n-1, -1, -1):\n                if s1[i] == s2[j]:\n                    dp[i][j] = dp[i+1][j+1]\n                else:\n                    dp[i][j] = min(\n                        dp[i+1][j] + ord(s1[i]),\n                        dp[i][j+1] + ord(s2[j])\n                    )\n\n        return dp[0][0]\n")),(0,o.kt)("h2",{id:"js"},"JS"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var minimumDeleteSum = function(s1, s2) {\n    const dp = [...new Array(s2.length + 1)].map(() => new Array(s1.length + 1).fill(0));\n\n    for (let i = 1; i <= s2.length; i++) {\n        dp[i][0] = dp[i - 1][0] + s2[i - 1].charCodeAt(0)\n    }\n\n    for (let j = 1; j <= s1.length; j++) {\n        dp[0][j] = dp[0][j - 1] + s1[j - 1].charCodeAt(0)\n    }\n    // console.log(dp)\n\n    for (let i = 1; i <= s2.length; i++) {\n        for (let j = 1; j <= s1.length; j++) {\n            if (s2[i - 1] !== s1[j - 1]) {\n                dp[i][j] = Math.min(\n                    dp[i - 1][j] + s2[i - 1].charCodeAt(0),\n                    dp[i][j - 1] + s1[j - 1].charCodeAt(0)\n                );\n            } else {\n                dp[i][j] = dp[i - 1][j - 1];\n            }\n        }\n    }\n    // console.log(dp)\n    return dp[s2.length][s1.length]\n};\n\n/**\n *\n *     "   s   e   a\n * "   0 115 216 313\n * e 101 216 115 212\n * a 198 313 212 115\n * t 314 429     231\n *\n * sea, e  -> ["sea", ""] + e or ["se", "e"] + a -> [313 + 116] or [115 + 97]\n * sea, ea -> ["se", "e"] -> 115\n */\n\n// e: 101, a: 97, t: 116, s: 115\n')))}d.isMDXComponent=!0}}]);