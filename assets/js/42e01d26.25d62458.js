"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[3540],{3905:function(e,r,t){t.d(r,{Zo:function(){return d},kt:function(){return p}});var n=t(67294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function c(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function a(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),l=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):c(c({},r),e)),t},d=function(e){var r=l(e.components);return n.createElement(s.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},h=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),h=l(t),p=o,f=h["".concat(s,".").concat(p)]||h[p]||u[p]||i;return t?n.createElement(f,c(c({ref:r},d),{},{components:t})):n.createElement(f,c({ref:r},d))}));function p(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=t.length,c=new Array(i);c[0]=h;var a={};for(var s in r)hasOwnProperty.call(r,s)&&(a[s]=r[s]);a.originalType=e,a.mdxType="string"==typeof e?e:o,c[1]=a;for(var l=2;l<i;l++)c[l]=t[l];return n.createElement.apply(null,c)}return n.createElement.apply(null,t)}h.displayName="MDXCreateElement"},57600:function(e,r,t){t.r(r),t.d(r,{frontMatter:function(){return a},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return d},default:function(){return h}});var n=t(87462),o=t(63366),i=(t(67294),t(3905)),c=["components"],a={title:"212. Word Search II",sidebar_label:"212. Word Search II",tags:["Leetcode Hard","Backtracking"]},s=void 0,l={unversionedId:"leetcode/1-500/word_search_ii",id:"leetcode/1-500/word_search_ii",title:"212. Word Search II",description:"https://leetcode.com/problems/word-search-ii/",source:"@site/docs/leetcode/1-500/212_word_search_ii.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/word_search_ii",permalink:"/docs/leetcode/1-500/word_search_ii",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/212_word_search_ii.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"Backtracking",permalink:"/docs/tags/backtracking"}],version:"current",sidebarPosition:212,frontMatter:{title:"212. Word Search II",sidebar_label:"212. Word Search II",tags:["Leetcode Hard","Backtracking"]},sidebar:"docSidebar",previous:{title:"209. Minimum Size Subarray Sum",permalink:"/docs/leetcode/1-500/min_size_subarray_sum"},next:{title:"215. Kth Largest Element in an Array",permalink:"/docs/leetcode/1-500/kth_largest_elm_in_array"}},d=[{value:"Python",id:"python",children:[],level:2},{value:"Javascript",id:"javascript",children:[],level:2}],u={toc:d};function h(e){var r=e.components,t=(0,o.Z)(e,c);return(0,i.kt)("wrapper",(0,n.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/word-search-ii/"},"https://leetcode.com/problems/word-search-ii/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h2",{id:"javascript"},"Javascript"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"var findWords = function (board, words) {\n  const trie = new Trie();\n  trie.create(words)\n  const trieRoot = trie.get();\n\n    this.finding = new Finding(board);\n    return this.finding.findWords(trieRoot);\n};\n\nclass Finding {\n    constructor(board) {\n        this.board = board;\n        this.maxRows = board.length;\n        this.maxCols = board[0].length;\n    this.result = [];\n    }\n\n    findWords(root) {\n    for (let row = 0; row < this.board.length; row++) {\n      for (let col = 0; col < this.board[row].length; col++) {\n        if (root.childs[this.board[row][col]]) {\n          this.find(row, col, root)\n        }\n      }\n    }\n    // console.log(this.result)\n    return this.result;\n    }\n\n    find(row, col, root) {\n    const letter = this.board[row][col];\n    const currNode = root.childs[letter];\n\n    if (currNode.word) {\n      this.result.push(currNode.word)  \n      currNode.word = '';\n    }\n\n        this.board[row][col] = null;\n    // console.log(this.board)\n\n        const directions = [ [0, 1], [0, -1], [1, 0], [-1, 0] ];\n\n        for (const [x, y] of directions) {\n      const nextRow = row + x;\n      const nextCol = col + y;\n\n      if ( nextRow >= 0 && nextRow < this.maxRows && nextCol >= 0 && nextCol < this.maxCols) { \n        const nextLetter = this.board[nextRow][nextCol];\n        // console.log(currNode.childs[nextLetter])\n        if (currNode.childs[nextLetter]) {\n          this.find(nextRow, nextCol, currNode)\n        }\n      }\n        }\n\n    this.board[row][col] = letter;\n    }\n}\n\nclass TrieNode {\n  constructor() {\n    this.childs = {};\n    this.word = '';\n  }\n}\n\nclass Trie {\n  constructor() {\n    this.root = new TrieNode();\n  }\n\n  create(words) {\n    for (const word of words) {\n      let node = this.root;\n      for (let letter of word) {\n        if (node.childs[letter]) {\n          node = node.childs[letter];\n        } else {\n          const newNode = new TrieNode(); \n          node.childs[letter] = newNode;\n          node = newNode;\n        }\n      }\n      node.word = word;\n    }\n  }\n\n  get() { return this.root; }\n}\n")))}h.isMDXComponent=!0}}]);