"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[60228],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>b});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},m=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=u(n),p=i,b=c["".concat(l,".").concat(p)]||c[p]||d[p]||o;return n?r.createElement(b,a(a({ref:t},m),{},{components:n})):r.createElement(b,a({ref:t},m))}));function b(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:i,a[1]=s;for(var u=2;u<o;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},42886:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var r=n(87462),i=(n(67294),n(3905));const o={title:"209. Minimum Size Subarray Sum",sidebar_label:"209. Minimum Size Subarray Sum",tags:["Leetcode Medium","Sliding Window","Two Pointer"]},a=void 0,s={unversionedId:"leetcode/1-500/min_size_subarray_sum",id:"leetcode/1-500/min_size_subarray_sum",title:"209. Minimum Size Subarray Sum",description:"https://leetcode.com/problems/minimum-size-subarray-sum",source:"@site/docs/leetcode/1-500/209_min_size_subarray_sum.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/min_size_subarray_sum",permalink:"/docs/leetcode/1-500/min_size_subarray_sum",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/209_min_size_subarray_sum.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Sliding Window",permalink:"/docs/tags/sliding-window"},{label:"Two Pointer",permalink:"/docs/tags/two-pointer"}],version:"current",sidebarPosition:209,frontMatter:{title:"209. Minimum Size Subarray Sum",sidebar_label:"209. Minimum Size Subarray Sum",tags:["Leetcode Medium","Sliding Window","Two Pointer"]},sidebar:"docSidebar",previous:{title:"208. Implement Trie (Prefix Tree)",permalink:"/docs/leetcode/1-500/trie_tree"},next:{title:"211. Design Add and Search Words Data Structure",permalink:"/docs/leetcode/1-500/design_add_and_search_words_data_structure"}},l={},u=[{value:"Python",id:"python",level:2}],m={toc:u},c="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/minimum-size-subarray-sum"},"https://leetcode.com/problems/minimum-size-subarray-sum")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class Solution:\n    def minSubArrayLen(self, target: int, nums: List[int]) -> int:\n        # Can be any of larger number which not possible from the answer\n        min_length = len(nums)+1\n        total = 0\n        start, end = 0, 0\n\n        while end < len(nums):\n            # print("window", nums[start:end+1])\n            total += nums[end]\n\n            while (total >= target):\n                min_length = min(min_length, end-start+1)\n                total -= nums[start]\n                start += 1\n            end += 1\n\n        return min_length if min_length < len(nums)+1 else 0\n')))}d.isMDXComponent=!0}}]);