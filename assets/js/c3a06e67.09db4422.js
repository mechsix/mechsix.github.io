"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[94916],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>b});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=l(n),m=a,b=p["".concat(c,".").concat(m)]||p[m]||d[m]||o;return n?r.createElement(b,s(s({ref:t},u),{},{components:n})):r.createElement(b,s({ref:t},u))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},77595:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const o={title:"78. Subsets",sidebar_label:"78. Subsets",tags:["Leetcode Medium"]},s=void 0,i={unversionedId:"leetcode/1-500/subsets",id:"leetcode/1-500/subsets",title:"78. Subsets",description:"Python",source:"@site/docs/leetcode/1-500/78_subsets.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/subsets",permalink:"/docs/leetcode/1-500/subsets",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/78_subsets.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"}],version:"current",sidebarPosition:78,frontMatter:{title:"78. Subsets",sidebar_label:"78. Subsets",tags:["Leetcode Medium"]},sidebar:"docSidebar",previous:{title:"77. Combinations",permalink:"/docs/leetcode/1-500/combinations"},next:{title:"79. Word Search",permalink:"/docs/leetcode/1-500/word_search"}},c={},l=[{value:"Python",id:"python",level:2},{value:"Package Answer",id:"package-answer",level:3},{value:"Loop and attach",id:"loop-and-attach",level:3},{value:"Backtracking",id:"backtracking",level:3},{value:"Javascript",id:"javascript",level:2}],u={toc:l},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("h3",{id:"package-answer"},"Package Answer"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Quick answer with Python built-in combinations package")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from itertools import combinations\n\n\nclass Solution:\n    def subsets(self, nums: List[int]) -> List[List[int]]:\n        result = []\n        for length in range(len(nums)+1):\n            for comb in combinations(nums, length):\n                result.append(comb)\n        return result\n")),(0,a.kt)("h3",{id:"loop-and-attach"},"Loop and attach"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def subsets(self, nums: List[int]) -> List[List[int]]:\n        result = [[]]\n        for num in nums:\n            result += [item+[num] for item in result]\n        return result\n")),(0,a.kt)("h3",{id:"backtracking"},"Backtracking"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"(TODO)")),(0,a.kt)("h2",{id:"javascript"},"Javascript"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"}," var subsets = function(nums) {\n   var result = [[]];\n   var backtrack = function(start, max, record) {\n     if (record.length === max) {\n       result.push(record.slice());\n       return;\n     }\n\n     for (let i = start; i < nums.length; i++) {\n       record.push(nums[i])\n       backtrack(i + 1, max, record);\n       record.pop();\n     }\n   }\n\n   for (let k = 1; k <= nums.length; k++) {\n     backtrack(0, k, [])\n   }\n   return result;\n};\n")))}d.isMDXComponent=!0}}]);