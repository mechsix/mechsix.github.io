"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[39416],{48719:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>f,frontMatter:()=>r,metadata:()=>t,toc:()=>c});var o=l(74848),s=l(28453);const r={title:"695. Max Area of Island",sidebar_label:"695. Max Area of Island",tags:["Leetcode Medium","DFS","BFS"]},i=void 0,t={id:"leetcode/501-1000/max_area_of_islands",title:"695. Max Area of Island",description:"https://leetcode.com/problems/max-area-of-island/",source:"@site/docs/leetcode/501-1000/695_max_area_of_islands.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/max_area_of_islands",permalink:"/docs/leetcode/501-1000/max_area_of_islands",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"DFS",permalink:"/docs/tags/dfs"},{label:"BFS",permalink:"/docs/tags/bfs"}],version:"current",sidebarPosition:695,frontMatter:{title:"695. Max Area of Island",sidebar_label:"695. Max Area of Island",tags:["Leetcode Medium","DFS","BFS"]},sidebar:"docSidebar",previous:{title:"692. Top K Frequent Words",permalink:"/docs/leetcode/501-1000/top_k_frequent_words"},next:{title:"696. Count Binary Substrings",permalink:"/docs/leetcode/501-1000/count_binary_substrings"}},a={},c=[{value:"Python",id:"python",level:2},{value:"DFS",id:"dfs",level:3},{value:"BFS",id:"bfs",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://leetcode.com/problems/max-area-of-island/",children:"https://leetcode.com/problems/max-area-of-island/"})}),"\n",(0,o.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,o.jsx)(n.h3,{id:"dfs",children:"DFS"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def __init__(self):\n        self.grid = []\n        self.seem = set()\n        self.row_limit = 0\n        self.col_limit = 0\n\n    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:\n        self.grid = grid\n        self.seem = set()\n        self.row_limit = len(grid)\n        self.col_limit = len(grid[0])\n\n        maximum = 0\n        for row in range(self.row_limit):\n            for col in range(self.col_limit):\n                if (row, col) in self.seem:\n                    continue\n                maximum = max(maximum, self._dfs(row, col))\n        return maximum\n\n    def _dfs(self, row, col):\n        if (row, col) in self.seem:\n            return 0\n\n        area = 0\n        if self.grid[row][col] == 1:\n            area += 1\n            self.seem.add((row, col))\n            if row - 1 >= 0:\n                area += self._dfs(row-1, col)\n            if row + 1 < self.row_limit:\n                area += self._dfs(row+1, col)\n            if col - 1 >= 0:\n                area += self._dfs(row, col-1)\n            if col + 1 < self.col_limit:\n                area += self._dfs(row, col+1)\n\n        return area\n"})}),"\n",(0,o.jsx)(n.h3,{id:"bfs",children:"BFS"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from collections import deque\n\n\nclass Solution:\n    def __init__(self):\n        self.grid = []\n        self.seem = set()\n        self.row_limit = 0\n        self.col_limit = 0\n\n    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:\n        self.grid = grid\n        self.seem = set()\n        self.row_limit = len(grid)\n        self.col_limit = len(grid[0])\n\n        maximum = 0\n        for row in range(self.row_limit):\n            for col in range(self.col_limit):\n                if (row, col) in self.seem:\n                    continue\n                maximum = max(maximum, self._bfs(row, col))\n        return maximum\n\n    def _bfs(self, start_row, start_col):\n        if (start_row, start_col) in self.seem:\n            return 0\n\n        area = 0\n        queue = deque([(start_row, start_col)])\n\n        while queue:\n            row, col = queue.popleft()\n            if (row, col) in self.seem:\n                continue\n\n            if self.grid[row][col] == 1:\n                area += 1\n                self.seem.add((row, col))\n\n                if row - 1 >= 0:\n                    queue.append((row-1, col))\n                if row + 1 < self.row_limit:\n                    queue.append((row+1, col))\n                if col - 1 >= 0:\n                    queue.append((row, col-1))\n                if col + 1 < self.col_limit:\n                    queue.append((row, col+1))\n\n        return area\n"})})]})}function f(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,l)=>{l.d(n,{R:()=>i,x:()=>t});var o=l(96540);const s={},r=o.createContext(s);function i(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);