"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[42402],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),a=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=a(e.components);return r.createElement(u.Provider,{value:t},e.children)},d="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=a(n),p=o,m=d["".concat(u,".").concat(p)]||d[p]||f[p]||i;return n?r.createElement(m,c(c({ref:t},l),{},{components:n})):r.createElement(m,c({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,c=new Array(i);c[0]=p;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[d]="string"==typeof e?e:o,c[1]=s;for(var a=2;a<i;a++)c[a]=n[a];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5042:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return a}});var r=n(83117),o=(n(67294),n(3905));const i={title:"792. Number of Matching Subsequences",sidebar_label:"792. Number of Matching Subsequences",tags:["Leetcode Medium","Trie","BFS"]},c=void 0,s={unversionedId:"leetcode/501-1000/number_of_matching_subsequences",id:"leetcode/501-1000/number_of_matching_subsequences",title:"792. Number of Matching Subsequences",description:"https://leetcode.com/problems/number-of-matching-subsequences/",source:"@site/docs/leetcode/501-1000/792_number_of_matching_subsequences.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/number_of_matching_subsequences",permalink:"/docs/leetcode/501-1000/number_of_matching_subsequences",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/792_number_of_matching_subsequences.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Trie",permalink:"/docs/tags/trie"},{label:"BFS",permalink:"/docs/tags/bfs"}],version:"current",sidebarPosition:792,frontMatter:{title:"792. Number of Matching Subsequences",sidebar_label:"792. Number of Matching Subsequences",tags:["Leetcode Medium","Trie","BFS"]},sidebar:"docSidebar",previous:{title:"787. Cheapest Flights Within K Stops",permalink:"/docs/leetcode/501-1000/cheapest_flights_within_k_stops"},next:{title:"763. Partition Labels",permalink:"/docs/leetcode/501-1000/all_paths_from_source_to_target"}},u={},a=[{value:"Python",id:"python",level:2},{value:"Trie with BFS",id:"trie-with-bfs",level:3}],l={toc:a};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/number-of-matching-subsequences/"},"https://leetcode.com/problems/number-of-matching-subsequences/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"trie-with-bfs"},"Trie with BFS"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def numMatchingSubseq(self, s: str, words: List[str]) -> int:\n        trie = dict()\n        for word_id in range(len(words)):\n            word = words[word_id]\n            cur = trie\n            for letter in word:\n                cur = cur.setdefault(letter, {})\n            if '#' not in cur:\n                cur['#'] = set()\n            cur[\"#\"].add(word_id) # Use index as word id, since the words might have duplicate item\n        \n        hits = set()\n        queue = [(trie, 0)]\n        \n        # BFS search from the subsequence of 's'\n        while queue:\n            node, i = queue.pop()\n            for letter in node:\n                if letter == '#':\n                    hits |= node['#']\n                else:\n                    for j in range(i, len(s)):\n                        if s[j] == letter:\n                            queue.append((node[letter], j+1))\n                            break\n        return len(hits)\n")))}d.isMDXComponent=!0}}]);