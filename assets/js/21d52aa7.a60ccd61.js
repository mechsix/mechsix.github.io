"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[13788],{3905:function(n,e,t){t.d(e,{Zo:function(){return l},kt:function(){return m}});var r=t(67294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function c(n,e){if(null==n)return{};var t,r,o=function(n,e){if(null==n)return{};var t,r,o={},a=Object.keys(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var u=r.createContext({}),s=function(n){var e=r.useContext(u),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},l=function(n){var e=s(n.components);return r.createElement(u.Provider,{value:e},n.children)},p={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(n,e){var t=n.components,o=n.mdxType,a=n.originalType,u=n.parentName,l=c(n,["components","mdxType","originalType","parentName"]),d=s(t),m=o,f=d["".concat(u,".").concat(m)]||d[m]||p[m]||a;return t?r.createElement(f,i(i({ref:e},l),{},{components:t})):r.createElement(f,i({ref:e},l))}));function m(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var a=t.length,i=new Array(a);i[0]=d;var c={};for(var u in e)hasOwnProperty.call(e,u)&&(c[u]=e[u]);c.originalType=n,c.mdxType="string"==typeof n?n:o,i[1]=c;for(var s=2;s<a;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},61071:function(n,e,t){t.r(e),t.d(e,{contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return l}});var r=t(87462),o=t(63366),a=(t(67294),t(3905)),i=["components"],c={title:"401. Binary Watch",sidebar_label:"401. Binary Watch",tags:["Leetcode Easy","Backtracking"]},u=void 0,s={unversionedId:"leetcode/1-500/binary_watch",id:"leetcode/1-500/binary_watch",title:"401. Binary Watch",description:"https://leetcode.com/problems/binary-watch/",source:"@site/docs/leetcode/1-500/401_binary_watch.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/binary_watch",permalink:"/docs/leetcode/1-500/binary_watch",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/401_binary_watch.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Backtracking",permalink:"/docs/tags/backtracking"}],version:"current",sidebarPosition:401,frontMatter:{title:"401. Binary Watch",sidebar_label:"401. Binary Watch",tags:["Leetcode Easy","Backtracking"]},sidebar:"docSidebar",previous:{title:"399. Evaluate Division",permalink:"/docs/leetcode/1-500/evaluate_division"},next:{title:"404. Sum of Left Leaf",permalink:"/docs/leetcode/1-500/left_leaf_sum"}},l=[{value:"Python",id:"python",children:[],level:2},{value:"Javascript",id:"javascript",children:[],level:2}],p={toc:l};function d(n){var e=n.components,t=(0,o.Z)(n,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/binary-watch/"},"https://leetcode.com/problems/binary-watch/")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'class Solution:\n    def readBinaryWatch(self, turnedOn: int) -> List[str]:\n        options = [\n            ("h", 8), ("h", 4), ("h", 2), ("h", 1),\n            ("m", 32), ("m", 16), ("m", 8), ("m", 4), ("m", 2), ("m", 1)\n        ]\n\n        used = set()\n        result = set()\n\n        def backtrack(track, hour, minute):\n            if len(track) == turnedOn:\n                result.add(\'{h:d}:{m:02d}\'.format(h=hour, m=minute))\n                return\n\n            for option in options:\n                if option in used:\n                    continue\n\n                track.append(option)\n                used.add(option)\n\n                if option[0] == \'h\':\n                    if hour + option[1] < 12:\n                        backtrack(track, hour+option[1], minute)\n                else:\n                    if minute + option[1] < 60:\n                        backtrack(track, hour, minute+option[1])\n\n                track.pop()\n                used.remove(option)\n\n        backtrack([], 0, 0)\n\n        return [string for string in result]\n')),(0,a.kt)("h2",{id:"javascript"},"Javascript"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'/**\n * H [1,2,4,8]\n * M [1,2,4,8,16,32]\n *\n * Example 1:\n * turnedOn = 1 => [0,1], [1,0]\n * turnedOn = 2 => [0,2], [2,0], [1, 1]\n */\n\n/**\n * @param {number} turnedOn\n * @return {string[]}\n */\nvar readBinaryWatch = function (turnedOn) {\n  if (turnedOn >= 9) return [];\n    const hourDigits = [1, 2, 4, 8];\n    const minDigits = [1, 2, 4, 8, 16, 32];\n    const n = turnedOn;\n    const result = [];\n\n    for (let i = 0; i <= n; i++) {\n        const hours = createDigit(hourDigits, i);\n        const mins = createDigit(minDigits, n - i);\n         // console.log(hours, i)\n         // console.log(mins, n - i)\n\n     for (hour of hours) {\n      for (min of mins) {\n        if (hour >= 12 || min >= 60) break;\n        result.push(`${hour}:${padZero(min)}`);\n      }\n     }\n    }\n    return result;\n};\n\nfunction createDigit(list, max) {\n    const result = [];\n    pickByMax(list, max, 0, [], result);\n    return result;\n}\n\nfunction pickByMax(ary, max, start, record = [], result) {\n    if (record.length === max) {\n        const sum = record.reduce((acc, num) => acc + num, 0);\n        result.push(sum);\n        return;\n    }\n\n    for (let i = start; i < ary.length; i++) {\n        record.push(ary[i]);\n        pickByMax(ary, max, i + 1, record, result);\n        record.pop();\n    }\n}\n\nfunction padZero(num) {\n    if (!num) return "00";\n\n    const target = 2;\n    const max = Math.max(target - num.toString().length, 0);\n    const pad = "0".repeat(max);\n    return `${pad}${num}`;\n}\n')))}d.isMDXComponent=!0}}]);