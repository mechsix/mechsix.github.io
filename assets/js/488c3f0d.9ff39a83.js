"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[42156],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return v}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),c=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(o.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,v=d["".concat(o,".").concat(m)]||d[m]||p[m]||i;return n?r.createElement(v,s(s({ref:t},u),{},{components:n})):r.createElement(v,s({ref:t},u))}));function v(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[d]="string"==typeof e?e:a,s[1]=l;for(var c=2;c<i;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},19216:function(e,t,n){n.r(t),n.d(t,{assets:function(){return o},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return c}});var r=n(83117),a=(n(67294),n(3905));const i={title:"56. Merge Intervals",sidebar_label:"56. Merge Intervals",tags:["Leetcode Medium","Rust","Interval"]},s=void 0,l={unversionedId:"leetcode/1-500/merge_intervals",id:"leetcode/1-500/merge_intervals",title:"56. Merge Intervals",description:"https://leetcode.com/problems/merge-intervals/",source:"@site/docs/leetcode/1-500/56_merge_intervals.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/merge_intervals",permalink:"/docs/leetcode/1-500/merge_intervals",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/56_merge_intervals.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Rust",permalink:"/docs/tags/rust"},{label:"Interval",permalink:"/docs/tags/interval"}],version:"current",sidebarPosition:56,frontMatter:{title:"56. Merge Intervals",sidebar_label:"56. Merge Intervals",tags:["Leetcode Medium","Rust","Interval"]},sidebar:"docSidebar",previous:{title:"55. Jump Game",permalink:"/docs/leetcode/1-500/jump_gamp"},next:{title:"57. Insert Interval",permalink:"/docs/leetcode/1-500/insert_interval"}},o={},c=[{value:"Python",id:"python",level:2},{value:"Rust",id:"rust",level:2}],u={toc:c};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/merge-intervals/"},"https://leetcode.com/problems/merge-intervals/")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def merge(self, intervals: List[List[int]]) -> List[List[int]]:\n        if len(intervals) < 2:\n            return intervals\n\n        intervals.sort(key=lambda pair: pair[0])\n\n        result = []\n        start, end = intervals[0]\n\n        for i in range(len(intervals)):\n            if intervals[i][0] <= end:\n                end = max(end, intervals[i][1])\n                continue\n            result.append([start, end])\n            start, end = intervals[i]\n\n        result.append([start, end])\n        return result\n")),(0,a.kt)("h2",{id:"rust"},"Rust"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"use std::cmp::max;\n\nimpl Solution {\n    pub fn merge(intervals: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n        if intervals.len() < 2 {\n            return intervals;\n        }\n\n        let mut sorted_intervals = intervals.clone();\n        sorted_intervals.sort_by_key(|pair| pair[0]);\n\n        let mut result = vec![];\n        let mut start = sorted_intervals[0][0];\n        let mut end = sorted_intervals[0][1];\n\n        for i in 0..sorted_intervals.len() {\n            if sorted_intervals[i as usize][0] <= end {\n                end = max(end, sorted_intervals[i as usize][1]);\n                continue\n            }\n            result.push(vec![start, end]);\n            start = sorted_intervals[i as usize][0];\n            end = sorted_intervals[i as usize][1];\n        }\n\n        result.push(vec![start, end]);\n\n        result\n    }\n}\n")))}d.isMDXComponent=!0}}]);