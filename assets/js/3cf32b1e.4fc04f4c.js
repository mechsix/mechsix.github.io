"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[8909],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return f}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),c=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=c(e.components);return r.createElement(o.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,m=u(e,["components","mdxType","originalType","parentName"]),p=c(n),f=a,d=p["".concat(o,".").concat(f)]||p[f]||s[f]||i;return n?r.createElement(d,l(l({ref:t},m),{},{components:n})):r.createElement(d,l({ref:t},m))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=p;var u={};for(var o in t)hasOwnProperty.call(t,o)&&(u[o]=t[o]);u.originalType=e,u.mdxType="string"==typeof e?e:a,l[1]=u;for(var c=2;c<i;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},37107:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return o},default:function(){return p},frontMatter:function(){return u},metadata:function(){return c},toc:function(){return m}});var r=n(87462),a=n(63366),i=(n(67294),n(3905)),l=["components"],u={title:"303. Range Sum Query - Immutable",sidebar_label:"303. Range Sum Query - Immutable",tags:["Leetcode Easy"]},o=void 0,c={unversionedId:"leetcode/1-500/range_sum_query_immutable",id:"leetcode/1-500/range_sum_query_immutable",title:"303. Range Sum Query - Immutable",description:"https://leetcode.com/problems/range-sum-query-immutable/",source:"@site/docs/leetcode/1-500/303_range_sum_query_immutable.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/range_sum_query_immutable",permalink:"/docs/leetcode/1-500/range_sum_query_immutable",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/303_range_sum_query_immutable.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"}],version:"current",sidebarPosition:303,frontMatter:{title:"303. Range Sum Query - Immutable",sidebar_label:"303. Range Sum Query - Immutable",tags:["Leetcode Easy"]},sidebar:"docSidebar",previous:{title:"297. Serialize and Deserialize Binary Tree",permalink:"/docs/leetcode/1-500/serialize_descrialize_bt"},next:{title:"304. Range Sum Query 2D - Immutable",permalink:"/docs/leetcode/1-500/range_sum_query_2d_immutable"}},m=[{value:"Python",id:"python",children:[{value:"Cache the sum of ranges on initial",id:"cache-the-sum-of-ranges-on-initial",children:[],level:3}],level:2}],s={toc:m};function p(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/range-sum-query-immutable/"},"https://leetcode.com/problems/range-sum-query-immutable/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"cache-the-sum-of-ranges-on-initial"},"Cache the sum of ranges on initial"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"INIT",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Time: O(N)"),(0,i.kt)("li",{parentName:"ul"},"Space: O(N)"))),(0,i.kt)("li",{parentName:"ul"},"Call sumRange",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Time: O(1)"),(0,i.kt)("li",{parentName:"ul"},"Space: O(1)")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class NumArray:\n    def __init__(self, nums: List[int]):\n        cache = [0]*len(nums)\n        cache[0] = nums[0]\n\n        for i in range(1, len(nums)):\n            cache[i] = cache[i-1] + nums[i]\n\n        self.cache = cache\n\n\n    def sumRange(self, left: int, right: int) -> int:\n        if left == 0:\n            return self.cache[right]\n        else:\n            return self.cache[right] - self.cache[left-1]\n")))}p.isMDXComponent=!0}}]);