"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[74322],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var a=n.createContext({}),s=function(e){var t=n.useContext(a),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(a.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=s(r),m=o,p=d["".concat(a,".").concat(m)]||d[m]||f[m]||i;return r?n.createElement(p,l(l({ref:t},u),{},{components:r})):n.createElement(p,l({ref:t},u))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,l=new Array(i);l[0]=d;var c={};for(var a in t)hasOwnProperty.call(t,a)&&(c[a]=t[a]);c.originalType=e,c.mdxType="string"==typeof e?e:o,l[1]=c;for(var s=2;s<i;s++)l[s]=r[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},14878:function(e,t,r){r.r(t),r.d(t,{contentTitle:function(){return a},default:function(){return d},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return u}});var n=r(87462),o=r(63366),i=(r(67294),r(3905)),l=["components"],c={title:"101. Symmetric Tree",slidebar_label:"101. Symmetric Tree",tags:["Leetcode Easy","Binary Tree","DFS"]},a=void 0,s={unversionedId:"leetcode/1-500/symmetric_tree",id:"leetcode/1-500/symmetric_tree",title:"101. Symmetric Tree",description:"https://leetcode.com/problems/symmetric-tree/",source:"@site/docs/leetcode/1-500/101_symmetric_tree.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/symmetric_tree",permalink:"/docs/leetcode/1-500/symmetric_tree",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/101_symmetric_tree.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"},{label:"DFS",permalink:"/docs/tags/dfs"}],version:"current",sidebarPosition:101,frontMatter:{title:"101. Symmetric Tree",slidebar_label:"101. Symmetric Tree",tags:["Leetcode Easy","Binary Tree","DFS"]},sidebar:"docSidebar",previous:{title:"100. Same Tree",permalink:"/docs/leetcode/1-500/same_tree"},next:{title:"102. Binary Tree Level Order Traversal",permalink:"/docs/leetcode/1-500/binary_tree_levelorder"}},u=[{value:"Python",id:"python",children:[{value:"DFS",id:"dfs",children:[],level:3}],level:2},{value:"Go",id:"go",children:[{value:"DFS",id:"dfs-1",children:[],level:3}],level:2}],f={toc:u};function d(e){var t=e.components,r=(0,o.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/symmetric-tree/"},"https://leetcode.com/problems/symmetric-tree/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"dfs"},"DFS"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def isSymmetric(self, root: Optional[TreeNode]) -> bool:\n        if not root:\n            return False\n\n        def check(left, right):\n            if not left or not right:\n                if not left and not right:\n                    return True\n                return False\n\n            if left.val != right.val:\n                return False\n\n            return check(left.left, right.right) and \\\n                   check(left.right, right.left)\n\n        return check(root.left, root.right)\n")),(0,i.kt)("h2",{id:"go"},"Go"),(0,i.kt)("h3",{id:"dfs-1"},"DFS"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc isSymmetric(root *TreeNode) bool {\n    if root == nil {\n        return false\n    }\n\n    return check(root.Left, root.Right)\n}\n\nfunc check(left *TreeNode, right *TreeNode) bool {\n    if left == nil && right == nil {\n        return true\n    }\n\n    if left == nil || right == nil {\n        return false\n    }\n\n    if left.Val != right.Val {\n        return false\n    }\n\n    return check(left.Right, right.Left) && check(left.Left, right.Right)\n}\n")))}d.isMDXComponent=!0}}]);