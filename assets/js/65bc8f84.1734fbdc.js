"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[46764],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),s=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,f=d["".concat(i,".").concat(m)]||d[m]||p[m]||o;return n?r.createElement(f,c(c({ref:t},u),{},{components:n})):r.createElement(f,c({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,c[1]=l;for(var s=2;s<o;s++)c[s]=n[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},18388:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),c=["components"],l={title:"1047. Remove All Adjacent Duplicates In String",sidebar_label:"1047. Remove All Adjacent Duplicates In String",tags:["Leetcode Easy","Stack"]},i=void 0,s={unversionedId:"leetcode/1001-1500/remove_all_adjacent_duplicates_in_string",id:"leetcode/1001-1500/remove_all_adjacent_duplicates_in_string",title:"1047. Remove All Adjacent Duplicates In String",description:"https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string/",source:"@site/docs/leetcode/1001-1500/1047_remove_all_adjacent_duplicates_in_string.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/remove_all_adjacent_duplicates_in_string",permalink:"/docs/leetcode/1001-1500/remove_all_adjacent_duplicates_in_string",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1047_remove_all_adjacent_duplicates_in_string.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Stack",permalink:"/docs/tags/stack"}],version:"current",sidebarPosition:1047,frontMatter:{title:"1047. Remove All Adjacent Duplicates In String",sidebar_label:"1047. Remove All Adjacent Duplicates In String",tags:["Leetcode Easy","Stack"]},sidebar:"docSidebar",previous:{title:"1046. Last Stone Weight",permalink:"/docs/leetcode/1001-1500/last_stone_weight"},next:{title:"1048. Longest String Chain",permalink:"/docs/leetcode/1001-1500/longest_string_chain"}},u=[{value:"Python",id:"python",children:[],level:2},{value:"Go",id:"go",children:[],level:2}],p={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,c);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string/"},"https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def removeDuplicates(self, s: str) -> str:\n        stack = []\n        \n        for letter in s:\n            if stack and letter == stack[-1]:\n                stack.pop()\n            else:\n                stack.append(letter)\n        return ''.join(stack)\n")),(0,o.kt)("h2",{id:"go"},"Go"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func removeDuplicates(s string) string {\n    var stack []rune\n    \n    for _, letter := range s {\n        if len(stack) > 0 && letter == stack[len(stack)-1] {\n            stack = stack[:len(stack)-1]\n        } else {\n            stack = append(stack, letter)\n        }\n    }\n\n    return string(stack)\n}\n")))}d.isMDXComponent=!0}}]);