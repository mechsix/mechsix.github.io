"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[41050],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>y});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),d=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=d(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),u=d(n),m=o,y=u["".concat(c,".").concat(m)]||u[m]||p[m]||i;return n?r.createElement(y,l(l({ref:t},s),{},{components:n})):r.createElement(y,l({ref:t},s))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,l=new Array(i);l[0]=m;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a[u]="string"==typeof e?e:o,l[1]=a;for(var d=2;d<i;d++)l[d]=n[d];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},41137:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var r=n(87462),o=(n(67294),n(3905));const i={title:"1290. Convert Binary Number in a Linked List to Integer",sidebar_label:"1290. Binary Num Linked List to Integer",tags:["Leetcode Easy"]},l=void 0,a={unversionedId:"leetcode/1001-1500/bin_linked_list_to_decimal",id:"leetcode/1001-1500/bin_linked_list_to_decimal",title:"1290. Convert Binary Number in a Linked List to Integer",description:"Python",source:"@site/docs/leetcode/1001-1500/1290_bin_linked_list_to_decimal.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/bin_linked_list_to_decimal",permalink:"/docs/leetcode/1001-1500/bin_linked_list_to_decimal",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1290_bin_linked_list_to_decimal.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"}],version:"current",sidebarPosition:1290,frontMatter:{title:"1290. Convert Binary Number in a Linked List to Integer",sidebar_label:"1290. Binary Num Linked List to Integer",tags:["Leetcode Easy"]},sidebar:"docSidebar",previous:{title:"1288. Remove Covered Intervals",permalink:"/docs/leetcode/1001-1500/remove_covered_intervals"},next:{title:"1291. Sequential Digits",permalink:"/docs/leetcode/1001-1500/sequential_digits"}},c={},d=[{value:"Python",id:"python",level:2}],s={toc:d},u="wrapper";function p(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("p",null,"First try, O(2N)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def getDecimalValue(self, head: ListNode) -> int:\n        length = 0\n        node = head\n        while node:\n            length += 1\n            node = node.next\n\n        result = 0\n        exp = length - 1\n\n        node = head\n        while node:\n            result += node.val * (2 ** exp)\n            exp = exp - 1\n            node = node.next\n        return result\n")),(0,o.kt)("p",null,"Second try, optimize version, O(N + logN)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def getDecimalValue(self, head: ListNode) -> int:\n        length = 0\n        node = head\n        while node:\n            length += 1\n            node = node.next\n\n        result = 0\n        exp = 2 ** (length - 1)\n\n        node = head\n        while node:\n            if node.val:\n                result += node.val * exp\n            exp = exp // 2\n            node = node.next\n        return result\n")))}p.isMDXComponent=!0}}]);