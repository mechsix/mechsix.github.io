"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[44407],{89054:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>d,frontMatter:()=>r,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"leetcode/1-500/isomorphic_strings","title":"205. Isomorphic Strings","description":"https://leetcode.com/problems/isomorphic-strings/","source":"@site/docs/leetcode/1-500/205_isomorphic_strings.md","sourceDirName":"leetcode/1-500","slug":"/leetcode/1-500/isomorphic_strings","permalink":"/docs/leetcode/1-500/isomorphic_strings","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Easy","permalink":"/docs/tags/leetcode-easy"},{"inline":true,"label":"Hash","permalink":"/docs/tags/hash"}],"version":"current","sidebarPosition":205,"frontMatter":{"title":"205. Isomorphic Strings","sidebar_label":"205. Isomorphic Strings","tags":["Leetcode Easy","Hash"]},"sidebar":"docSidebar","previous":{"title":"203. Remove Linked List Elements","permalink":"/docs/leetcode/1-500/rm_linked_list_elements"},"next":{"title":"206. Reverse Linked List","permalink":"/docs/leetcode/1-500/reverse_linked_list"}}');var o=s(74848),i=s(28453);const r={title:"205. Isomorphic Strings",sidebar_label:"205. Isomorphic Strings",tags:["Leetcode Easy","Hash"]},c=void 0,l={},a=[{value:"Python",id:"python",level:2}];function p(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{href:"https://leetcode.com/problems/isomorphic-strings/",children:"https://leetcode.com/problems/isomorphic-strings/"})}),"\n",(0,o.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"from collections import defaultdict\n\n\nclass Solution:\n    def isIsomorphic(self, s: str, t: str) -> bool:\n        if len(s) != len(t):\n            return False\n\n        mapper_s, mapper_t = defaultdict(str), defaultdict(str)\n\n        for i in range(len(s)):\n            if s[i] not in mapper_s and t[i] not in mapper_t:\n                mapper_s[s[i]] = t[i]\n                mapper_t[t[i]] = s[i]\n                continue\n\n            if mapper_s[s[i]] != t[i] or mapper_t[t[i]] != s[i]:\n                return False\n\n        return True\n"})})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>c});var n=s(96540);const o={},i=n.createContext(o);function r(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);