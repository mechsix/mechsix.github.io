"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[75144],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},b=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=s(n),b=a,m=p["".concat(c,".").concat(b)]||p[b]||u[b]||i;return n?r.createElement(m,o(o({ref:t},d),{},{components:n})):r.createElement(m,o({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=b;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}b.displayName="MDXCreateElement"},91589:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const i={title:"67. Add Binary",sidebar_label:"67. Add Binary",tags:["Leetcode Easy","Bit Manipulation"]},o=void 0,l={unversionedId:"leetcode/1-500/add_bin",id:"leetcode/1-500/add_bin",title:"67. Add Binary",description:"https://leetcode.com/problems/add-binary",source:"@site/docs/leetcode/1-500/67_add_bin.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/add_bin",permalink:"/docs/leetcode/1-500/add_bin",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/67_add_bin.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Bit Manipulation",permalink:"/docs/tags/bit-manipulation"}],version:"current",sidebarPosition:67,frontMatter:{title:"67. Add Binary",sidebar_label:"67. Add Binary",tags:["Leetcode Easy","Bit Manipulation"]},sidebar:"docSidebar",previous:{title:"66. Plus One",permalink:"/docs/leetcode/1-500/plus_one"},next:{title:"69. Sqrt(x)",permalink:"/docs/leetcode/1-500/sqrt_x"}},c={},s=[{value:"Python",id:"python",level:2},{value:"Convert to number and join back",id:"convert-to-number-and-join-back",level:3},{value:"Bit Manipulation",id:"bit-manipulation",level:3}],d={toc:s},p="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/add-binary"},"https://leetcode.com/problems/add-binary")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("h3",{id:"convert-to-number-and-join-back"},"Convert to number and join back"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        return '{0:b}'.format(int(a, 2) + int(b, 2))\n")),(0,a.kt)("h3",{id:"bit-manipulation"},"Bit Manipulation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        result = []\n\n        items_a = list(a)\n        items_b = list(b)\n\n        carry = 0\n        while items_a or items_b:\n            bit = carry\n            if items_a:\n                bit += 1 if items_a.pop() == '1' else 0\n            if items_b:\n                bit += 1 if items_b.pop() == '1' else 0\n\n            result.append('1' if bit % 2 == 1 else '0')\n            carry = bit >> 1\n\n        if carry:\n            result.append('1')\n\n        return ''.join(result[::-1])\n")))}u.isMDXComponent=!0}}]);