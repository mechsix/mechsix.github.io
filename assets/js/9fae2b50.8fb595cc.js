"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[83829],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,c=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),d=p(n),h=i,f=d["".concat(c,".").concat(h)]||d[h]||u[h]||s;return n?r.createElement(f,o(o({ref:t},l),{},{components:n})):r.createElement(f,o({ref:t},l))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,o=new Array(s);o[0]=h;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a[d]="string"==typeof e?e:i,o[1]=a;for(var p=2;p<s;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},59190:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>p});var r=n(87462),i=(n(67294),n(3905));const s={title:"787. Cheapest Flights Within K Stops",sidebar_label:"787. Cheapest Flights Within K Stops",tags:["Leetcode Medium","Graph","DP","Dijkstra","TODO"]},o=void 0,a={unversionedId:"leetcode/501-1000/cheapest_flights_within_k_stops",id:"leetcode/501-1000/cheapest_flights_within_k_stops",title:"787. Cheapest Flights Within K Stops",description:"https://leetcode.com/problems/cheapest-flights-within-k-stops",source:"@site/docs/leetcode/501-1000/787_cheapest_flights_within_k_stops.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/cheapest_flights_within_k_stops",permalink:"/docs/leetcode/501-1000/cheapest_flights_within_k_stops",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/787_cheapest_flights_within_k_stops.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Graph",permalink:"/docs/tags/graph"},{label:"DP",permalink:"/docs/tags/dp"},{label:"Dijkstra",permalink:"/docs/tags/dijkstra"},{label:"TODO",permalink:"/docs/tags/todo"}],version:"current",sidebarPosition:787,frontMatter:{title:"787. Cheapest Flights Within K Stops",sidebar_label:"787. Cheapest Flights Within K Stops",tags:["Leetcode Medium","Graph","DP","Dijkstra","TODO"]},sidebar:"docSidebar",previous:{title:"785. Is Graph Bipartite?",permalink:"/docs/leetcode/501-1000/is_graph_bipartite"},next:{title:"792. Number of Matching Subsequences",permalink:"/docs/leetcode/501-1000/number_of_matching_subsequences"}},c={},p=[{value:"Python",id:"python",level:2},{value:"BFS DP",id:"bfs-dp",level:3},{value:"Dijkstra",id:"dijkstra",level:3}],l={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/cheapest-flights-within-k-stops"},"https://leetcode.com/problems/cheapest-flights-within-k-stops")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"bfs-dp"},"BFS DP"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from math import inf\nfrom collections import deque, defaultdict\n\n\nclass Solution:\n    def findCheapestPrice(self, n: int, flights: List[List[int]], src: int, dst: int, k: int) -> int:\n        mapper = defaultdict(lambda: defaultdict(lambda: inf))\n\n        for source, dest, price in flights:\n            mapper[source][dest] = min(price, mapper[source][dest])\n\n        dp = [inf for _ in range(n)]\n        dp[src] = 0\n\n        queue = deque([(0, src, 0)])\n\n        path = set([src])\n        while queue:\n            cost, current, stops = queue.popleft()\n            dp[current] = min(dp[current], cost)\n            for cand_dst in mapper[current]:\n                if stops > k:\n                    continue\n                if dp[current] + mapper[current][cand_dst] < dp[cand_dst]:\n                    queue.append(\n                        (dp[current]+mapper[current][cand_dst], cand_dst, stops+1)\n                    )\n\n        return dp[dst] if dp[dst] != inf else -1\n")),(0,i.kt)("h3",{id:"dijkstra"},"Dijkstra"),(0,i.kt)("p",null,"(TODO)"))}u.isMDXComponent=!0}}]);