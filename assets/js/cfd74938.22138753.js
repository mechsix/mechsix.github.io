"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[2918],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return b}});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),l=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(u.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(r),b=a,y=d["".concat(u,".").concat(b)]||d[b]||s[b]||o;return r?n.createElement(y,i(i({ref:t},p),{},{components:r})):n.createElement(y,i({ref:t},p))}));function b(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var c={};for(var u in t)hasOwnProperty.call(t,u)&&(c[u]=t[u]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},7407:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return c},contentTitle:function(){return u},metadata:function(){return l},toc:function(){return p},default:function(){return d}});var n=r(87462),a=r(63366),o=(r(67294),r(3905)),i=["components"],c={title:"Data Operations",sidebar_title:"Data Operations"},u=void 0,l={unversionedId:"javascript/operation",id:"javascript/operation",isDocsHomePage:!1,title:"Data Operations",description:"Object Array to an Object lead by key",source:"@site/docs/javascript/operation.md",sourceDirName:"javascript",slug:"/javascript/operation",permalink:"/docs/javascript/operation",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/javascript/operation.md",tags:[],version:"current",frontMatter:{title:"Data Operations",sidebar_title:"Data Operations"},sidebar:"tutorialSidebar",previous:{title:"Event Bubbling",permalink:"/docs/dom/event_bubbling"},next:{title:"105. Construct Binary Tree from Preorder and Inorder Traversal",permalink:"/docs/leetcode/binary_tree/binary_tree_preorder_inorder"}},p=[{value:"Object Array to an Object lead by key",id:"object-array-to-an-object-lead-by-key",children:[]}],s={toc:p};function d(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"object-array-to-an-object-lead-by-key"},"Object Array to an Object lead by key"),(0,o.kt)("p",null,"Transfer Object Array into an Object lead by id from the items' value"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'// Input\nconst input = [\n    {\n        "key": "uuid-1",\n        "value": "value1"\n    },\n    {\n        "key": "uuid-2",\n        "value": "value2"\n    },\n    {\n        "key": "uuid-3",\n        "value": "value3"\n    }\n]\n\nconst output = input.reduce((obj, item) => ({\n    ...obj,\n    [item.key]: item.value\n}), {})\n\n// Output\n// {\n//     "uuid-1": "value1",\n//     "uuid-2": "value2",\n//     "uuid-3": "value3"\n// }\n')))}d.isMDXComponent=!0}}]);