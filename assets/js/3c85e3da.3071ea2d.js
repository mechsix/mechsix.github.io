"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[57821],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),u=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(i.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),c=u(n),p=a,f=c["".concat(i,".").concat(p)]||c[p]||m[p]||l;return n?r.createElement(f,o(o({ref:t},s),{},{components:n})):r.createElement(f,o({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=p;var d={};for(var i in t)hasOwnProperty.call(t,i)&&(d[i]=t[i]);d.originalType=e,d[c]="string"==typeof e?e:a,o[1]=d;for(var u=2;u<l;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},97135:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>d,toc:()=>u});var r=n(87462),a=(n(67294),n(3905));const l={title:"307. Range Sum Query - Mutable",sidebar_label:"307. Range Sum Query - Mutable",tags:["Leetcode Medium","Segment Tree"]},o=void 0,d={unversionedId:"leetcode/1-500/range_sum_query",id:"leetcode/1-500/range_sum_query",title:"307. Range Sum Query - Mutable",description:"https://leetcode.com/problems/range-sum-query-mutable/",source:"@site/docs/leetcode/1-500/307_range_sum_query.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/range_sum_query",permalink:"/docs/leetcode/1-500/range_sum_query",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/307_range_sum_query.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Segment Tree",permalink:"/docs/tags/segment-tree"}],version:"current",sidebarPosition:307,frontMatter:{title:"307. Range Sum Query - Mutable",sidebar_label:"307. Range Sum Query - Mutable",tags:["Leetcode Medium","Segment Tree"]},sidebar:"docSidebar",previous:{title:"304. Range Sum Query 2D - Immutable",permalink:"/docs/leetcode/1-500/range_sum_query_2d_immutable"},next:{title:"314. Binary Tree Vertical Order Traversal",permalink:"/docs/leetcode/1-500/binary_tree_vertical_order_traversal"}},i={},u=[{value:"Python",id:"python",level:2},{value:"Segment Tree",id:"segment-tree",level:3}],s={toc:u},c="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/range-sum-query-mutable/"},"https://leetcode.com/problems/range-sum-query-mutable/")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("h3",{id:"segment-tree"},"Segment Tree"),(0,a.kt)("p",null,"Space: O(N) # On the tree build time\nTime:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"* Build: O(N)\n* Update: O(logN)\n* Query: O(logN)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from dataclasses import dataclass\n\n\n@dataclass\nclass TreeNode:\n    start: int\n    end: int\n    val: int = 0\n    left: TreeNode = None\n    right: TreeNode = None\n\nclass NumArray:\n    def __init__(self, nums: List[int]):\n        def build(start, end):\n            if start == end:\n                node = TreeNode(start, end, nums[start])\n                return node\n            middle = (start+end) >> 1\n            left = build(start, middle)\n            right = build(middle+1, end)\n            node = TreeNode(\n                start=start,\n                end=end,\n                val=left.val + right.val,\n                left=left,\n                right=right\n            )\n            return node\n        self.tree = build(0, len(nums)-1)\n\n    def update(self, index: int, val: int) -> None:\n        def update_tree(node):\n            if node.start == node.end == index:\n                node.val = val\n                return\n            middle = (node.start+node.end) >> 1\n            if index <= middle:\n                update_tree(node.left)\n            else:\n                update_tree(node.right)\n            node.val = node.left.val + node.right.val\n\n        update_tree(self.tree)\n\n    def sumRange(self, left: int, right: int) -> int:\n        def query_tree(node, left, right):\n            if node.start == left and node.end == right:\n                return node.val\n\n            middle = (node.start+node.end) >> 1\n\n            if right <= middle:\n                return query_tree(node.left, left, right)\n            elif left > middle:\n                return query_tree(node.right, left, right)\n            else:\n                return query_tree(node.left, left, middle) + query_tree(node.right, middle+1, right)\n\n        return query_tree(self.tree, left, right)\n")))}m.isMDXComponent=!0}}]);