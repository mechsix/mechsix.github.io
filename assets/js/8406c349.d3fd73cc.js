"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[44778],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return m}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=u(r),f=o,m=d["".concat(l,".").concat(f)]||d[f]||s[f]||i;return r?n.createElement(m,a(a({ref:t},p),{},{components:r})):n.createElement(m,a({ref:t},p))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=f;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[d]="string"==typeof e?e:o,a[1]=c;for(var u=2;u<i;u++)a[u]=r[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},22177:function(e,t,r){r.r(t),r.d(t,{assets:function(){return l},contentTitle:function(){return a},default:function(){return d},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return u}});var n=r(83117),o=(r(67294),r(3905));const i={title:"1339. Maximum Product of Splitted Binary Tree",sidebar_label:"1339. Maximum Product of Splitted Binary Tree",tags:["Leetcode Medium","Binary Tree"]},a=void 0,c={unversionedId:"leetcode/1001-1500/max_product_of_splited_binary_tree",id:"leetcode/1001-1500/max_product_of_splited_binary_tree",title:"1339. Maximum Product of Splitted Binary Tree",description:"https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/",source:"@site/docs/leetcode/1001-1500/1339_max_product_of_splited_binary_tree.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/max_product_of_splited_binary_tree",permalink:"/docs/leetcode/1001-1500/max_product_of_splited_binary_tree",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1339_max_product_of_splited_binary_tree.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"}],version:"current",sidebarPosition:1339,frontMatter:{title:"1339. Maximum Product of Splitted Binary Tree",sidebar_label:"1339. Maximum Product of Splitted Binary Tree",tags:["Leetcode Medium","Binary Tree"]},sidebar:"docSidebar",previous:{title:"1338. Reduce Array Size to The Half",permalink:"/docs/leetcode/1001-1500/reduce_array_size_to_the_half"},next:{title:"1342. Number of Steps to Reduce a Number to Zero",permalink:"/docs/leetcode/1001-1500/number_steps_to_reduce_num_to_zero"}},l={},u=[{value:"Python",id:"python",level:2},{value:"Postorder for prefix sum",id:"postorder-for-prefix-sum",level:3}],p={toc:u};function d(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/"},"https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"postorder-for-prefix-sum"},"Postorder for prefix sum"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from typing import Optional\n\n\nclass Solution:\n    def maxProduct(self, root: Optional[TreeNode]) -> int:\n        prefix = []\n        def postorder(node):\n            if not node:\n                return 0\n            total = postorder(node.left) + postorder(node.right) + node.val\n            prefix.append(total)\n            return total\n\n        full_total = postorder(root)\n\n        ans = 0\n        for total in prefix:\n            ans = max(ans, total*(full_total-total))\n\n        return ans % (10 ** 9 + 7)\n")))}d.isMDXComponent=!0}}]);