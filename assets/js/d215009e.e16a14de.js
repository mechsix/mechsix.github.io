"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[28996],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},d="mdxType",v={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),d=s(r),p=o,m=d["".concat(c,".").concat(p)]||d[p]||v[p]||i;return r?n.createElement(m,l(l({ref:t},u),{},{components:r})):n.createElement(m,l({ref:t},u))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,l=new Array(i);l[0]=p;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a[d]="string"==typeof e?e:o,l[1]=a;for(var s=2;s<i;s++)l[s]=r[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},32805:function(e,t,r){r.r(t),r.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return i},metadata:function(){return a},toc:function(){return s}});var n=r(83117),o=(r(67294),r(3905));const i={title:"1288. Remove Covered Intervals",sidebar_label:"1288. Remove Covered Intervals",tags:["Leetcode Medium"]},l=void 0,a={unversionedId:"leetcode/1001-1500/remove_covered_intervals",id:"leetcode/1001-1500/remove_covered_intervals",title:"1288. Remove Covered Intervals",description:"https://leetcode.com/problems/remove-covered-intervals/",source:"@site/docs/leetcode/1001-1500/1288_remove_covered_intervals.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/remove_covered_intervals",permalink:"/docs/leetcode/1001-1500/remove_covered_intervals",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1288_remove_covered_intervals.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"}],version:"current",sidebarPosition:1288,frontMatter:{title:"1288. Remove Covered Intervals",sidebar_label:"1288. Remove Covered Intervals",tags:["Leetcode Medium"]},sidebar:"docSidebar",previous:{title:"1268. Search Suggestions System",permalink:"/docs/leetcode/1001-1500/search_suggestions_system"},next:{title:"1290. Binary Num Linked List to Integer",permalink:"/docs/leetcode/1001-1500/bin_linked_list_to_decimal"}},c={},s=[{value:"Python",id:"python",level:2},{value:"Force Busted",id:"force-busted",level:3},{value:"Sort",id:"sort",level:3}],u={toc:s};function d(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/remove-covered-intervals/"},"https://leetcode.com/problems/remove-covered-intervals/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"force-busted"},"Force Busted"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Time: O(nlogn)"),(0,o.kt)("li",{parentName:"ul"},"Space: O(1)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def removeCoveredIntervals(self, intervals: List[List[int]]) -> int:\n        result = len(intervals)\n        for i in range(len(intervals)):\n            for j in range(len(intervals)):\n                if i == j or not intervals[i] or not intervals[j]:\n                    continue\n                if intervals[i][0] <= intervals[j][0] and intervals[i][1] >= intervals[j][1]:\n                    intervals[j] = None\n                    result -= 1\n        return result\n")),(0,o.kt)("h3",{id:"sort"},"Sort"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Solution from leetcode offical"),(0,o.kt)("li",{parentName:"ul"},"Sort the intervals first",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Sort start in incremental"),(0,o.kt)("li",{parentName:"ul"},"Sort end in decremental if start are the same")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from functools import cmp_to_key\n\n\nclass Solution:\n    def removeCoveredIntervals(self, intervals: List[List[int]]) -> int:\n        def comp(cur, pre):\n            start1, end1 = pre\n            start2, end2 = cur\n\n            if start1 == start2:\n                return end1 - end2\n            else:\n                return start2 - start1\n\n        intervals.sort(key=cmp_to_key(comp))\n\n        count = 0\n        prev_end = 0\n        for interval in intervals:\n            end = interval[1]\n            if end > prev_end:\n                count += 1\n                prev_end = end\n        return count\n")))}d.isMDXComponent=!0}}]);