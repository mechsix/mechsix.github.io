"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[20447],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return d}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,m=a(e,["components","mdxType","originalType","parentName"]),u=p(n),f=o,d=u["".concat(c,".").concat(f)]||u[f]||s[f]||i;return n?r.createElement(d,l(l({ref:t},m),{},{components:n})):r.createElement(d,l({ref:t},m))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,l=new Array(i);l[0]=f;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a[u]="string"==typeof e?e:o,l[1]=a;for(var p=2;p<i;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},57548:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return i},metadata:function(){return a},toc:function(){return p}});var r=n(83117),o=(n(67294),n(3905));const i={title:"1770. Maximum Score from Performing Multiplication Operations",sidebar_label:"1770. Maximum Score from Performing Multiplication Operations",tags:["Leetcode Medium","DP"]},l=void 0,a={unversionedId:"leetcode/1501-2000/max_score_from_performing_multiplication_operations",id:"leetcode/1501-2000/max_score_from_performing_multiplication_operations",title:"1770. Maximum Score from Performing Multiplication Operations",description:"Python",source:"@site/docs/leetcode/1501-2000/1770_max_score_from_performing_multiplication_operations.md",sourceDirName:"leetcode/1501-2000",slug:"/leetcode/1501-2000/max_score_from_performing_multiplication_operations",permalink:"/docs/leetcode/1501-2000/max_score_from_performing_multiplication_operations",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1501-2000/1770_max_score_from_performing_multiplication_operations.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"DP",permalink:"/docs/tags/dp"}],version:"current",sidebarPosition:1770,frontMatter:{title:"1770. Maximum Score from Performing Multiplication Operations",sidebar_label:"1770. Maximum Score from Performing Multiplication Operations",tags:["Leetcode Medium","DP"]},sidebar:"docSidebar",previous:{title:"1768. Merge Strings Alternately",permalink:"/docs/leetcode/1501-2000/merge_strings_alternately"},next:{title:"1822. Sign of the Product of an Array",permalink:"/docs/leetcode/1501-2000/sign_of_the_product_of_an_array"}},c={},p=[{value:"Python",id:"python",level:2},{value:"Top Down DP",id:"top-down-dp",level:3},{value:"Bottom Up DP",id:"bottom-up-dp",level:3}],m={toc:p};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"top-down-dp"},"Top Down DP"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u76f4\u63a5",(0,o.kt)("inlineCode",{parentName:"li"},"@cache"),"\u6703memory limit exceed"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"maxsize=2048"),"\u662ftry & error\u8a66\u51fa\u4f86\u7684\uff0c\u9019\u984c\u505aBottom Up\u6703\u7406\u60f3\u4e00\u9ede")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from functools import lru_cache\n\n\nclass Solution:\n    def maximumScore(self, nums: List[int], multipliers: List[int]) -> int:\n        n, m = len(nums), len(multipliers)\n\n        @lru_cache(maxsize=2048)\n        def dp(left: int, right: int):\n            if right == m:\n                return 0\n\n            take_left = nums[left] * multipliers[right] + dp(left+1, right+1)\n            take_right = nums[n-(right-left)-1] * multipliers[right] + dp(left, right+1)\n\n            return max(take_left, take_right)\n\n        return dp(0, 0)\n")),(0,o.kt)("h3",{id:"bottom-up-dp"},"Bottom Up DP"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def maximumScore(self, nums: List[int], multipliers: List[int]) -> int:\n        n, m = len(nums), len(multipliers)\n        dp = [[0]*(m+1) for _ in range(m+1)]\n\n        for step in range(m-1, -1, -1):\n            for left in range(step, -1, -1):\n                dp[step][left] = max(\n                    multipliers[step]*nums[left] + dp[step+1][left+1],\n                    multipliers[step]*nums[n-(step-left)-1] + dp[step+1][left]\n                )\n\n        return dp[0][0]\n")))}u.isMDXComponent=!0}}]);