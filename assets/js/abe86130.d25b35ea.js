"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[61592],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return y}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(r),f=o,y=p["".concat(s,".").concat(f)]||p[f]||d[f]||a;return r?n.createElement(y,i(i({ref:t},u),{},{components:r})):n.createElement(y,i({ref:t},u))}));function y(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=f;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[p]="string"==typeof e?e:o,i[1]=c;for(var l=2;l<a;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},67494:function(e,t,r){r.r(t),r.d(t,{assets:function(){return s},contentTitle:function(){return i},default:function(){return p},frontMatter:function(){return a},metadata:function(){return c},toc:function(){return l}});var n=r(83117),o=(r(67294),r(3905));const a={title:"257. Binary Tree Paths",sidebar_label:"Binary Tree Paths",tags:["Leetcode Easy","Recursive"]},i=void 0,c={unversionedId:"leetcode/1-500/binary-tree-paths",id:"leetcode/1-500/binary-tree-paths",title:"257. Binary Tree Paths",description:"https://leetcode.com/problems/binary-tree-paths/",source:"@site/docs/leetcode/1-500/257_binary-tree-paths.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/binary-tree-paths",permalink:"/docs/leetcode/1-500/binary-tree-paths",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/257_binary-tree-paths.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Recursive",permalink:"/docs/tags/recursive"}],version:"current",sidebarPosition:257,frontMatter:{title:"257. Binary Tree Paths",sidebar_label:"Binary Tree Paths",tags:["Leetcode Easy","Recursive"]},sidebar:"docSidebar",previous:{title:"253. Meeting Rooms II",permalink:"/docs/leetcode/1-500/meeting_room_ii"},next:{title:"258. Add Digits",permalink:"/docs/leetcode/1-500/add_digits"}},s={},l=[{value:"Python",id:"python",level:2},{value:"Javascript",id:"javascript",level:2}],u={toc:l};function p(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/binary-tree-paths/"},"https://leetcode.com/problems/binary-tree-paths/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h2",{id:"javascript"},"Javascript"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"var binaryTreePaths = function(root) {\n  var result = [];\n  \n  var backtrack = function(node, n = []) {\n    if (node) {\n      n.push(node.val)\n      \n      if (node.left === null && node.right === null) {\n        result.push(n.join('->'))\n      } else {\n        backtrack(node.left, n.slice(0));  \n        backtrack(node.right, n.slice(0)); \n      }\n    }\n  }\n\n  backtrack(root);\n  return result;\n};\n\n")))}p.isMDXComponent=!0}}]);