"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[79094],{3905:function(e,t,r){r.d(t,{Zo:function(){return d},kt:function(){return f}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),l=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},d=function(e){var t=l(e.components);return n.createElement(i.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=l(r),m=o,f=u["".concat(i,".").concat(m)]||u[m]||p[m]||a;return r?n.createElement(f,s(s({ref:t},d),{},{components:r})):n.createElement(f,s({ref:t},d))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=m;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c[u]="string"==typeof e?e:o,s[1]=c;for(var l=2;l<a;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},41219:function(e,t,r){r.r(t),r.d(t,{assets:function(){return i},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return a},metadata:function(){return c},toc:function(){return l}});var n=r(83117),o=(r(67294),r(3905));const a={title:"841. Keys and Rooms",sidebar_label:"841. Keys and Rooms",tags:["Leetcode Medium","Graph","DFS"]},s=void 0,c={unversionedId:"leetcode/501-1000/keys_and_rooms",id:"leetcode/501-1000/keys_and_rooms",title:"841. Keys and Rooms",description:"https://leetcode.com/problems/keys-and-rooms/",source:"@site/docs/leetcode/501-1000/841_keys_and_rooms.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/keys_and_rooms",permalink:"/docs/leetcode/501-1000/keys_and_rooms",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/841_keys_and_rooms.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Graph",permalink:"/docs/tags/graph"},{label:"DFS",permalink:"/docs/tags/dfs"}],version:"current",sidebarPosition:841,frontMatter:{title:"841. Keys and Rooms",sidebar_label:"841. Keys and Rooms",tags:["Leetcode Medium","Graph","DFS"]},sidebar:"docSidebar",previous:{title:"835. Image Overlap",permalink:"/docs/leetcode/501-1000/image_overlap"},next:{title:"844. Backspace String Compare",permalink:"/docs/leetcode/501-1000/backspacce_string_compare"}},i={},l=[{value:"Python",id:"python",level:2},{value:"DFS",id:"dfs",level:3}],d={toc:l};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/keys-and-rooms/"},"https://leetcode.com/problems/keys-and-rooms/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"dfs"},"DFS"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def canVisitAllRooms(self, rooms: List[List[int]]) -> bool:\n        all_rooms = set(range(len(rooms)))\n        seen = set([0])\n\n        def dfs(room_id):\n            for key in rooms[room_id]:\n                if key not in seen:\n                    seen.add(key)\n                    dfs(key)\n        dfs(0)\n\n        return not bool(all_rooms - seen)\n")))}u.isMDXComponent=!0}}]);