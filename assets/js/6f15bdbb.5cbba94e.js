"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[84671],{60180:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>m});var o=t(74848),i=t(28453);const r={title:"1423. Maximum Points You Can Obtain from Cards",sidebar_label:"1423. Maximum Points You Can Obtain from Cards",tags:["Leetcode Medium","Prefix Sum"]},s=void 0,a={id:"leetcode/1501-2000/max_points_you_can_obtain_from_cards",title:"1423. Maximum Points You Can Obtain from Cards",description:"https://leetcode.com/problems/maximum-points-you-can-obtain-from-cards/",source:"@site/docs/leetcode/1501-2000/1432_max_points_you_can_obtain_from_cards.md",sourceDirName:"leetcode/1501-2000",slug:"/leetcode/1501-2000/max_points_you_can_obtain_from_cards",permalink:"/docs/leetcode/1501-2000/max_points_you_can_obtain_from_cards",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Prefix Sum",permalink:"/docs/tags/prefix-sum"}],version:"current",sidebarPosition:1432,frontMatter:{title:"1423. Maximum Points You Can Obtain from Cards",sidebar_label:"1423. Maximum Points You Can Obtain from Cards",tags:["Leetcode Medium","Prefix Sum"]},sidebar:"docSidebar",previous:{title:"1498. Number of Subsequences That Satisfy the Given Sum Condition",permalink:"/docs/leetcode/1001-1500/num_of_subsequences_satisfy_the_given_sum_condition"},next:{title:"1502. Can Make Arithmetic Progression From Sequence",permalink:"/docs/leetcode/1501-2000/can_make_arithmetic_progression_from_sequence"}},c={},m=[{value:"Python",id:"python",level:2},{value:"Two Direction Prefix Sum",id:"two-direction-prefix-sum",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://leetcode.com/problems/maximum-points-you-can-obtain-from-cards/",children:"https://leetcode.com/problems/maximum-points-you-can-obtain-from-cards/"})}),"\n",(0,o.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,o.jsx)(n.h3,{id:"two-direction-prefix-sum",children:"Two Direction Prefix Sum"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def maxScore(self, cardPoints: List[int], k: int) -> int:\n        if k >= len(cardPoints):\n            return sum(cardPoints)\n\n        lefts, rights = [0], [0]\n\n        for i in range(0, k+1):\n            lefts.append(lefts[i]+cardPoints[i])\n            rights.append(rights[i]+cardPoints[len(cardPoints)-i-1])\n\n        max_score = 0\n        for i in range(k+1):\n            current = lefts[i] + rights[k-i]\n            max_score = max(max_score, current)\n\n        return max_score\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var o=t(96540);const i={},r=o.createContext(i);function s(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);