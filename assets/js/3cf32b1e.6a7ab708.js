"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[78909],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function u(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?u(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):u(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},u=Object.keys(e);for(r=0;r<u.length;r++)n=u[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(e);for(r=0;r<u.length;r++)n=u[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},s="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,u=e.originalType,l=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),s=c(n),f=a,d=s["".concat(l,".").concat(f)]||s[f]||p[f]||u;return n?r.createElement(d,i(i({ref:t},m),{},{components:n})):r.createElement(d,i({ref:t},m))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var u=n.length,i=new Array(u);i[0]=f;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[s]="string"==typeof e?e:a,i[1]=o;for(var c=2;c<u;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},37107:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return i},default:function(){return s},frontMatter:function(){return u},metadata:function(){return o},toc:function(){return c}});var r=n(83117),a=(n(67294),n(3905));const u={title:"303. Range Sum Query - Immutable",sidebar_label:"303. Range Sum Query - Immutable",tags:["Leetcode Easy"]},i=void 0,o={unversionedId:"leetcode/1-500/range_sum_query_immutable",id:"leetcode/1-500/range_sum_query_immutable",title:"303. Range Sum Query - Immutable",description:"https://leetcode.com/problems/range-sum-query-immutable/",source:"@site/docs/leetcode/1-500/303_range_sum_query_immutable.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/range_sum_query_immutable",permalink:"/docs/leetcode/1-500/range_sum_query_immutable",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/303_range_sum_query_immutable.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"}],version:"current",sidebarPosition:303,frontMatter:{title:"303. Range Sum Query - Immutable",sidebar_label:"303. Range Sum Query - Immutable",tags:["Leetcode Easy"]},sidebar:"docSidebar",previous:{title:"300. Longest Increasing Subsequence",permalink:"/docs/leetcode/1-500/longest_increasing_subsequence"},next:{title:"304. Range Sum Query 2D - Immutable",permalink:"/docs/leetcode/1-500/range_sum_query_2d_immutable"}},l={},c=[{value:"Python",id:"python",level:2},{value:"Cache the sum of ranges on initial",id:"cache-the-sum-of-ranges-on-initial",level:3}],m={toc:c};function s(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/range-sum-query-immutable/"},"https://leetcode.com/problems/range-sum-query-immutable/")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("h3",{id:"cache-the-sum-of-ranges-on-initial"},"Cache the sum of ranges on initial"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"INIT",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Time: O(N)"),(0,a.kt)("li",{parentName:"ul"},"Space: O(N)"))),(0,a.kt)("li",{parentName:"ul"},"Call sumRange",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Time: O(1)"),(0,a.kt)("li",{parentName:"ul"},"Space: O(1)")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class NumArray:\n    def __init__(self, nums: List[int]):\n        cache = [0]*len(nums)\n        cache[0] = nums[0]\n\n        for i in range(1, len(nums)):\n            cache[i] = cache[i-1] + nums[i]\n\n        self.cache = cache\n\n\n    def sumRange(self, left: int, right: int) -> int:\n        if left == 0:\n            return self.cache[right]\n        else:\n            return self.cache[right] - self.cache[left-1]\n")))}s.isMDXComponent=!0}}]);