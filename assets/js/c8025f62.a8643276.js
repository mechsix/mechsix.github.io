"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[3954],{3905:function(e,r,t){t.d(r,{Zo:function(){return d},kt:function(){return v}});var n=t(67294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=n.createContext({}),c=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},d=function(e){var r=c(e.components);return n.createElement(s.Provider,{value:r},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(t),f=a,v=u["".concat(s,".").concat(f)]||u[f]||p[f]||o;return t?n.createElement(v,i(i({ref:r},d),{},{components:t})):n.createElement(v,i({ref:r},d))}));function v(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=f;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=t[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},8214:function(e,r,t){t.r(r),t.d(r,{assets:function(){return s},contentTitle:function(){return i},default:function(){return u},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return c}});var n=t(83117),a=(t(67294),t(3905));const o={title:"987. Vertical Order Traversal of a Binary Tree",sidebar_label:"987. Vertical Order Traversal of a Binary Tree",tags:["Leetcode Hard","Binary Tree","DFS","BFS"]},i=void 0,l={unversionedId:"leetcode/501-1000/vertical_order_traversal_of_a_binary_tree",id:"leetcode/501-1000/vertical_order_traversal_of_a_binary_tree",title:"987. Vertical Order Traversal of a Binary Tree",description:"https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/",source:"@site/docs/leetcode/501-1000/987_vertical_order_traversal_of_a_binary_tree.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/vertical_order_traversal_of_a_binary_tree",permalink:"/docs/leetcode/501-1000/vertical_order_traversal_of_a_binary_tree",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/987_vertical_order_traversal_of_a_binary_tree.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"},{label:"DFS",permalink:"/docs/tags/dfs"},{label:"BFS",permalink:"/docs/tags/bfs"}],version:"current",sidebarPosition:987,frontMatter:{title:"987. Vertical Order Traversal of a Binary Tree",sidebar_label:"987. Vertical Order Traversal of a Binary Tree",tags:["Leetcode Hard","Binary Tree","DFS","BFS"]},sidebar:"docSidebar",previous:{title:"986. Interval List Intersections",permalink:"/docs/leetcode/501-1000/interval_list_intersections"},next:{title:"989. Add to Array-Form of Integer",permalink:"/docs/leetcode/501-1000/add_to_array_form_of_integer"}},s={},c=[{value:"Python",id:"python",level:2},{value:"DFS than sort with different keys",id:"dfs-than-sort-with-different-keys",level:3},{value:"Javascript",id:"javascript",level:2}],d={toc:c};function u(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,n.Z)({},d,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/"},"https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("h3",{id:"dfs-than-sort-with-different-keys"},"DFS than sort with different keys"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from collections import defaultdict\n\n\nclass Solution:\n    def verticalTraversal(self, root: Optional[TreeNode]) -> List[List[int]]:\n        mapper = defaultdict(list)\n\n        def dfs(node, level: int, pos: int):\n            if not node:\n                return\n\n            dfs(node.left, level+1, pos-1)\n            mapper[pos].append((level, node.val))\n            dfs(node.right, level+1, pos+1)\n\n        dfs(root, 0, 0)\n\n        result = []\n        for key in sorted(mapper.keys()):\n            result.append([num for level, num in sorted(mapper[key])])\n        return result\n")),(0,a.kt)("h2",{id:"javascript"},"Javascript"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"var verticalTraversal = function(root) {\n    const queue = [];\n    const tmp = [];\n    let start = Infinity;\n    queue.push([0, 0, root]);\n\n    while (queue.length) {\n        const [row, col, node] = queue.shift();\n\n        tmp.push([row, col, node.val]);\n        start = Math.min(col, start)\n\n        if (node.left) queue.push([row + 1, col - 1, node.left]);\n        if (node.right) queue.push([row + 1, col + 1, node.right]);\n    }\n\n    tmp.sort((a, b) => {\n        // compare col\n        if (a[1] === b[1]) {\n            // compare row\n            if (a[0] === b[0]) {\n                // compare val\n                return a[2] - b[2];\n            } else {\n                return a[0] - b[0];\n            }\n        } else {\n            return a[1] - b[1]\n        }\n    });\n\n    const res = [];\n    let inc = Math.abs(start);\n\n    for (const [,col, val] of tmp) {\n        const idx = col + inc;\n\n        if (res[idx] !== undefined) res[idx].push(val);\n        else res.push([val]);\n    }\n\n    return res;\n};\n")))}u.isMDXComponent=!0}}]);