"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[23499],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return b}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},m="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),m=u(n),p=o,b=m["".concat(c,".").concat(p)]||m[p]||f[p]||a;return n?r.createElement(b,i(i({ref:t},l),{},{components:n})):r.createElement(b,i({ref:t},l))}));function b(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[m]="string"==typeof e?e:o,i[1]=s;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},78181:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return u}});var r=n(83117),o=(n(67294),n(3905));const a={title:"1601. Maximum Number of Achievable Transfer Requests",sidebar_label:"1601. Maximum Number of Achievable Transfer Requests",tags:["Leetcode Hard","DP","Graph","Combinations"]},i=void 0,s={unversionedId:"leetcode/1501-2000/max_num_of_achievable_trans_request",id:"leetcode/1501-2000/max_num_of_achievable_trans_request",title:"1601. Maximum Number of Achievable Transfer Requests",description:"https://leetcode.com/problems/maximum-number-of-achievable-transfer-requests/",source:"@site/docs/leetcode/1501-2000/1601_max_num_of_achievable_trans_request.md",sourceDirName:"leetcode/1501-2000",slug:"/leetcode/1501-2000/max_num_of_achievable_trans_request",permalink:"/docs/leetcode/1501-2000/max_num_of_achievable_trans_request",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1501-2000/1601_max_num_of_achievable_trans_request.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"DP",permalink:"/docs/tags/dp"},{label:"Graph",permalink:"/docs/tags/graph"},{label:"Combinations",permalink:"/docs/tags/combinations"}],version:"current",sidebarPosition:1601,frontMatter:{title:"1601. Maximum Number of Achievable Transfer Requests",sidebar_label:"1601. Maximum Number of Achievable Transfer Requests",tags:["Leetcode Hard","DP","Graph","Combinations"]},sidebar:"docSidebar",previous:{title:"1557. Minimum Number of Vertices to Reach All Nodes",permalink:"/docs/leetcode/1501-2000/min_cost_connect_all_points"},next:{title:"1612. Check If Two Expression Trees are Equivalent",permalink:"/docs/leetcode/1501-2000/check_experssion_trees_equal"}},c={},u=[{value:"Python",id:"python",level:2}],l={toc:u};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/maximum-number-of-achievable-transfer-requests/"},"https://leetcode.com/problems/maximum-number-of-achievable-transfer-requests/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from itertools import combinations\n\n\nclass Solution:\n    def maximumRequests(self, n: int, requests: List[List[int]]) -> int:\n        unchanged = sum([1 for req in requests if req[0] == req[1]])\n        reqs = [req for req in requests if req[0] != req[1]]\n\n        ans = 0\n        for i in range(len(reqs)+1):\n            for combs in list(combinations(reqs, i)):\n                if not combs:\n                    continue\n\n                movement = [0] * n\n                for egress, ingress in combs:\n                    movement[egress] += 1\n                    movement[ingress] -= 1\n\n                if set(movement) == {0}:\n                    ans = max(ans, len(combs))\n\n        return ans + unchanged\n")))}m.isMDXComponent=!0}}]);