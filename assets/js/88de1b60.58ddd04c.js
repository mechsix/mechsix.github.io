"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[74413],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return d}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=c(n),f=o,d=m["".concat(u,".").concat(f)]||m[f]||p[f]||i;return n?r.createElement(d,a(a({ref:t},s),{},{components:n})):r.createElement(d,a({ref:t},s))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=f;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[m]="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},90835:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return a},default:function(){return m},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return c}});var r=n(83117),o=(n(67294),n(3905));const i={title:"1155. Number of Dice Rolls With Target Sum",sidebar_label:"1155. Number of Dice Rolls With Target Sum",tags:["Leetcode Medium","DP"]},a=void 0,l={unversionedId:"leetcode/1001-1500/num_of_rolls_with_target_sum",id:"leetcode/1001-1500/num_of_rolls_with_target_sum",title:"1155. Number of Dice Rolls With Target Sum",description:"Python",source:"@site/docs/leetcode/1001-1500/1155_num_of_rolls_with_target_sum.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/num_of_rolls_with_target_sum",permalink:"/docs/leetcode/1001-1500/num_of_rolls_with_target_sum",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1155_num_of_rolls_with_target_sum.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"DP",permalink:"/docs/tags/dp"}],version:"current",sidebarPosition:1155,frontMatter:{title:"1155. Number of Dice Rolls With Target Sum",sidebar_label:"1155. Number of Dice Rolls With Target Sum",tags:["Leetcode Medium","DP"]},sidebar:"docSidebar",previous:{title:"1143. Longest Common Subsequence",permalink:"/docs/leetcode/1001-1500/longest_common_subsequence"},next:{title:"1161. Maximum Level Sum of a Binary Tree",permalink:"/docs/leetcode/1001-1500/max_level_sum_of_binary_tree"}},u={},c=[{value:"Python",id:"python",level:2},{value:"Bottom Up DP",id:"bottom-up-dp",level:3}],s={toc:c};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"bottom-up-dp"},"Bottom Up DP"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from functools import cache\n\n\nclass Solution:\n    def numRollsToTarget(self, n: int, k: int, target: int) -> int:\n        options = set([v for v in range(1, k+1)])\n        mod = 10**9 + 7\n\n        @cache\n        def dp(i, total):\n            if i == n:\n                if total == target:\n                    return 1\n                return 0\n\n            if total > target:\n                return 0\n\n            ans = 0\n            for value in options:\n                ans += dp(i+1, total+value)\n            return ans % mod\n\n        return dp(0, 0)\n")))}m.isMDXComponent=!0}}]);