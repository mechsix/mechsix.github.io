"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[947],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return f}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),p=s(r),d=o,f=p["".concat(l,".").concat(d)]||p[d]||m[d]||a;return r?n.createElement(f,i(i({ref:t},c),{},{components:r})):n.createElement(f,i({ref:t},c))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var u={};for(var l in t)hasOwnProperty.call(t,l)&&(u[l]=t[l]);u.originalType=e,u[p]="string"==typeof e?e:o,i[1]=u;for(var s=2;s<a;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},61249:function(e,t,r){r.r(t),r.d(t,{assets:function(){return l},contentTitle:function(){return i},default:function(){return p},frontMatter:function(){return a},metadata:function(){return u},toc:function(){return s}});var n=r(83117),o=(r(67294),r(3905));const a={title:"88. Merge Sorted Array",sidebar_label:"88. Merge Sorted Array",tags:["Leetcode Easy","Leetcode Optimable"]},i=void 0,u={unversionedId:"leetcode/1-500/merge_sorted_array",id:"leetcode/1-500/merge_sorted_array",title:"88. Merge Sorted Array",description:"https://leetcode.com/problems/merge-sorted-array",source:"@site/docs/leetcode/1-500/88_merge_sorted_array.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/merge_sorted_array",permalink:"/docs/leetcode/1-500/merge_sorted_array",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/88_merge_sorted_array.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Leetcode Optimable",permalink:"/docs/tags/leetcode-optimable"}],version:"current",sidebarPosition:88,frontMatter:{title:"88. Merge Sorted Array",sidebar_label:"88. Merge Sorted Array",tags:["Leetcode Easy","Leetcode Optimable"]},sidebar:"docSidebar",previous:{title:"86. Partition List",permalink:"/docs/leetcode/1-500/partition_list"},next:{title:"90. Subsets II",permalink:"/docs/leetcode/1-500/subsets_ii"}},l={},s=[{value:"Python",id:"python",level:2},{value:"Merge and sort",id:"merge-and-sort",level:3},{value:"Two pointers",id:"two-pointers",level:3}],c={toc:s};function p(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/merge-sorted-array"},"https://leetcode.com/problems/merge-sorted-array")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"merge-and-sort"},"Merge and sort"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Time: O((n+m)log(n+m))"),(0,o.kt)("li",{parentName:"ul"},"Space: O(n)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from typing import List\n\n\nclass Solution:\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:\n        if not nums2:\n            return\n\n        for i in range(m, len(nums1)):\n            nums1[i] = nums2.pop()\n\n        nums1.sort()\n")),(0,o.kt)("h3",{id:"two-pointers"},"Two pointers"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Time: O(m+n)"),(0,o.kt)("li",{parentName:"ul"},"Space: O(m+n)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from collections import deque\n\n\nclass Solution:\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:\n        """\n        Do not return anything, modify nums1 in-place instead.\n        """\n        queue1 = deque(nums1[:m])\n        queue2 = deque(nums2)\n\n        for cur in range(m+n):\n            if queue1 and queue2:\n                nums1[cur] = queue1.popleft() if queue1[0] <= queue2[0] else queue2.popleft()\n                continue\n\n            if queue1:\n                nums1[cur] = queue1.popleft()\n\n            if queue2:\n                nums1[cur] = queue2.popleft()\n')))}p.isMDXComponent=!0}}]);