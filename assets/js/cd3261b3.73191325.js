"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[53586],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>m});var n=r(67294);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var i=n.createContext({}),l=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},d=function(e){var t=l(e.components);return n.createElement(i.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,a=e.originalType,i=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=l(r),f=s,m=p["".concat(i,".").concat(f)]||p[f]||u[f]||a;return r?n.createElement(m,o(o({ref:t},d),{},{components:r})):n.createElement(m,o({ref:t},d))}));function m(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=r.length,o=new Array(a);o[0]=f;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c[p]="string"==typeof e?e:s,o[1]=c;for(var l=2;l<a;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},88252:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var n=r(87462),s=(r(67294),r(3905));const a={title:"93. Restore IP Addresses",slidebar_label:"93. Restore IP Addresses",tags:["Leetcode Medium","Backtracking"]},o=void 0,c={unversionedId:"leetcode/1-500/restore_ip_addresses",id:"leetcode/1-500/restore_ip_addresses",title:"93. Restore IP Addresses",description:"https://leetcode.com/problems/restore-ip-addresses",source:"@site/docs/leetcode/1-500/93_restore_ip_addresses.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/restore_ip_addresses",permalink:"/docs/leetcode/1-500/restore_ip_addresses",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/93_restore_ip_addresses.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Backtracking",permalink:"/docs/tags/backtracking"}],version:"current",sidebarPosition:93,frontMatter:{title:"93. Restore IP Addresses",slidebar_label:"93. Restore IP Addresses",tags:["Leetcode Medium","Backtracking"]},sidebar:"docSidebar",previous:{title:"92. Reverse Linked List II",permalink:"/docs/leetcode/1-500/reverse_linked_list_ii"},next:{title:"94. Binary Tree Inorder Traversal",permalink:"/docs/leetcode/1-500/binary_tree_inorder"}},i={},l=[{value:"Python",id:"python",level:2},{value:"Backtracking",id:"backtracking",level:3}],d={toc:l},p="wrapper";function u(e){let{components:t,...r}=e;return(0,s.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/restore-ip-addresses"},"https://leetcode.com/problems/restore-ip-addresses")),(0,s.kt)("h2",{id:"python"},"Python"),(0,s.kt)("h3",{id:"backtracking"},"Backtracking"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def restoreIpAddresses(self, s: str) -> List[str]:\n        ans = []\n        def backtracking(left, stack):\n            if len(stack) == 4 and left == len(s):\n                nonlocal ans\n                ans.append('.'.join([str(num) for num in stack]))\n\n            if len(stack) > 3:\n                return\n\n            if left < len(s) and s[left] == '0':\n                stack.append('0')\n                backtracking(left+1, stack)\n                stack.pop()\n                return\n\n            for right in range(left+1, len(s)+1):\n                cand = s[left:right]\n\n                if int(cand) > 255:\n                    continue\n                stack.append(''.join(cand))\n                backtracking(right, stack)\n                stack.pop()\n\n        backtracking(0, [])\n\n        return ans\n")))}u.isMDXComponent=!0}}]);