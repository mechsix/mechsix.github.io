"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[85976],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=r.createContext({}),a=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=a(e.components);return r.createElement(u.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,u=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),m=a(n),p=i,f=m["".concat(u,".").concat(p)]||m[p]||d[p]||o;return n?r.createElement(f,l(l({ref:t},s),{},{components:n})):r.createElement(f,l({ref:t},s))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,l=new Array(o);l[0]=p;var c={};for(var u in t)hasOwnProperty.call(t,u)&&(c[u]=t[u]);c.originalType=e,c[m]="string"==typeof e?e:i,l[1]=c;for(var a=2;a<o;a++)l[a]=n[a];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},20997:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>a});var r=n(87462),i=(n(67294),n(3905));const o={title:"260. Single Number III",sidebar_label:"260. Single Number III",tags:["Leetcode Medium"]},l=void 0,c={unversionedId:"leetcode/1-500/single_number_iii",id:"leetcode/1-500/single_number_iii",title:"260. Single Number III",description:"https://leetcode.com/problems/single-number-iii",source:"@site/docs/leetcode/1-500/260_single_number_iii.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/single_number_iii",permalink:"/docs/leetcode/1-500/single_number_iii",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/260_single_number_iii.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"}],version:"current",sidebarPosition:260,frontMatter:{title:"260. Single Number III",sidebar_label:"260. Single Number III",tags:["Leetcode Medium"]},sidebar:"docSidebar",previous:{title:"258. Add Digits",permalink:"/docs/leetcode/1-500/add_digits"},next:{title:"263. Ugly Number",permalink:"/docs/leetcode/1-500/ugly_number"}},u={},a=[{value:"Python",id:"python",level:2},{value:"Defaultdict",id:"defaultdict",level:3},{value:"Set",id:"set",level:3}],s={toc:a},m="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/single-number-iii"},"https://leetcode.com/problems/single-number-iii")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"defaultdict"},"Defaultdict"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from collections import defaultdict\nclass Solution:\n\n    def singleNumber(self, nums: List[int]) -> List[int]:\n        counters = defaultdict(lambda: 0)\n\n        for num in nums:\n            counters[num] += 1\n\n        return [num for num, count in counters.items() if count < 2]\n")),(0,i.kt)("h3",{id:"set"},"Set"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def singleNumber(self, nums: List[int]) -> List[int]:\n        memory = set()\n\n        for num in nums:\n            if num not in memory:\n                memory.add(num)\n                continue\n\n            memory.remove(num)\n\n        return memory.pop(), memory.pop()\n")))}d.isMDXComponent=!0}}]);