"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[95436],{3905:function(e,t,n){n.d(t,{Zo:function(){return a},kt:function(){return d}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},a=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,a=s(e,["components","mdxType","originalType","parentName"]),m=u(n),f=o,d=m["".concat(c,".").concat(f)]||m[f]||p[f]||i;return n?r.createElement(d,l(l({ref:t},a),{},{components:n})):r.createElement(d,l({ref:t},a))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,l=new Array(i);l[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[m]="string"==typeof e?e:o,l[1]=s;for(var u=2;u<i;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},86100:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return u}});var r=n(83117),o=(n(67294),n(3905));const i={title:"16. 3Sum Closest",sidebar_label:"16. 3Sum Closest",tags:["Leetcode Medium","Number Sum","Two Pointer"]},l=void 0,s={unversionedId:"leetcode/1-500/three_sum_closest",id:"leetcode/1-500/three_sum_closest",title:"16. 3Sum Closest",description:"https://leetcode.com/problems/3sum-closest/",source:"@site/docs/leetcode/1-500/16_three_sum_closest.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/three_sum_closest",permalink:"/docs/leetcode/1-500/three_sum_closest",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/16_three_sum_closest.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Number Sum",permalink:"/docs/tags/number-sum"},{label:"Two Pointer",permalink:"/docs/tags/two-pointer"}],version:"current",sidebarPosition:16,frontMatter:{title:"16. 3Sum Closest",sidebar_label:"16. 3Sum Closest",tags:["Leetcode Medium","Number Sum","Two Pointer"]},sidebar:"docSidebar",previous:{title:"15. 3Sum",permalink:"/docs/leetcode/1-500/three_sum"},next:{title:"17. Letter Combinations of a Phone Number",permalink:"/docs/leetcode/1-500/letter_combinations_of_phone_number"}},c={},u=[{value:"Python",id:"python",level:2}],a={toc:u};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},a,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/3sum-closest/"},"https://leetcode.com/problems/3sum-closest/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Time: O(N^2)"),(0,o.kt)("li",{parentName:"ul"},"Space: O(1)")),(0,o.kt)("p",null,"\u6bdb\u6bdb\u87f2\u5f0fTwo Pointer"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from math import inf\n\n\nclass Solution:\n    def threeSumClosest(self, nums: List[int], target: int) -> int:\n        nums.sort()\n        diff = inf\n\n        for i in range(len(nums)):\n            low, high = i+1, len(nums)-1\n\n            while low < high:\n                total = nums[i] + nums[low] + nums[high]\n\n                if abs(target-total) < abs(diff):\n                    diff = target-total\n\n                if total < target:\n                    low += 1\n                else:\n                    high -= 1\n\n                if diff == 0:\n                    break\n        return target - diff\n")))}m.isMDXComponent=!0}}]);