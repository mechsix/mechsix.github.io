"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[3118],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>f});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},m=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=s(r),u=a,f=p["".concat(c,".").concat(u)]||p[u]||d[u]||o;return r?n.createElement(f,i(i({ref:t},m),{},{components:r})):n.createElement(f,i({ref:t},m))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},5275:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=r(87462),a=(r(67294),r(3905));const o={title:"743. Network Delay Time",sidebar_label:"743. Network Delay Time",tags:["Leetcode Medium","Graph","DFS","Dijkstra Algorithm","TODO"]},i=void 0,l={unversionedId:"leetcode/501-1000/network_delay_time",id:"leetcode/501-1000/network_delay_time",title:"743. Network Delay Time",description:"https://leetcode.com/problems/network-delay-time/",source:"@site/docs/leetcode/501-1000/743_network_delay_time.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/network_delay_time",permalink:"/docs/leetcode/501-1000/network_delay_time",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/743_network_delay_time.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Graph",permalink:"/docs/tags/graph"},{label:"DFS",permalink:"/docs/tags/dfs"},{label:"Dijkstra Algorithm",permalink:"/docs/tags/dijkstra-algorithm"},{label:"TODO",permalink:"/docs/tags/todo"}],version:"current",sidebarPosition:743,frontMatter:{title:"743. Network Delay Time",sidebar_label:"743. Network Delay Time",tags:["Leetcode Medium","Graph","DFS","Dijkstra Algorithm","TODO"]},sidebar:"docSidebar",previous:{title:"740. Delete and Earn",permalink:"/docs/leetcode/501-1000/delete_and_earn"},next:{title:"744. Find Smallest Letter Greater Than Target",permalink:"/docs/leetcode/501-1000/find_smallest_letter_greater_than_target"}},c={},s=[{value:"Python",id:"python",level:2},{value:"DFS",id:"dfs",level:3},{value:"Dijkstra Algorithm",id:"dijkstra-algorithm",level:3}],m={toc:s},p="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/network-delay-time/"},"https://leetcode.com/problems/network-delay-time/")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("h3",{id:"dfs"},"DFS"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from math import inf\n\n\nclass Solution:\n    def networkDelayTime(self, times: List[List[int]], n: int, k: int) -> int:\n        reach_times = [inf for i in range(n)]\n        reach_times[k-1] = 0\n\n        # Convert the graph from a list into dict, for better matching query later\n        mapper = dict()\n        for source, target, latency in times:\n            if source not in mapper:\n                mapper[source] = dict()\n            mapper[source][target] = min(mapper[source].get(target, inf), latency)\n\n        # DFS, or call it backtracking, go through all possible edges\n        def dfs(source: int, accu: int):\n            if source not in mapper:\n                return\n\n            for target in mapper[source]:\n                new_accu = accu + mapper[source][target]\n\n                # Only go deeper while the known cost of path is higher\n                if reach_times[target-1] > new_accu:\n                    reach_times[target-1] = new_accu\n                    dfs(target, new_accu)\n\n        dfs(k, 0)\n\n        max_latency = max(reach_times)\n        return max_latency if max_latency < inf else -1\n")),(0,a.kt)("h3",{id:"dijkstra-algorithm"},"Dijkstra Algorithm"),(0,a.kt)("p",null,"(TODO)"))}d.isMDXComponent=!0}}]);