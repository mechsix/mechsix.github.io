"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[31346],{29320:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var l=n(74848),s=n(28453);const r={title:"1302. Deepest Leaves Sum",sidebar_label:"1302. Deepest Leaves Sum",tags:["Leetcode Medium","Binary Tree"]},o=void 0,a={id:"leetcode/1001-1500/deepest_leaves_sum",title:"1302. Deepest Leaves Sum",description:"https://leetcode.com/problems/deepest-leaves-sum/",source:"@site/docs/leetcode/1001-1500/1302_deepest_leaves_sum.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/deepest_leaves_sum",permalink:"/docs/leetcode/1001-1500/deepest_leaves_sum",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"}],version:"current",sidebarPosition:1302,frontMatter:{title:"1302. Deepest Leaves Sum",sidebar_label:"1302. Deepest Leaves Sum",tags:["Leetcode Medium","Binary Tree"]},sidebar:"docSidebar",previous:{title:"1299. Replace Elements with Greatest Element on Right Side",permalink:"/docs/leetcode/1001-1500/replace_elm_with_greatest_right"},next:{title:"1305. All Elements in Two Binary Search Trees",permalink:"/docs/leetcode/1001-1500/all_elms_in_two_bst"}},i={},c=[{value:"Python",id:"python",level:2},{value:"Sum Levels with preorder travel",id:"sum-levels-with-preorder-travel",level:3},{value:"Javascript",id:"javascript",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(t.p,{children:(0,l.jsx)(t.a,{href:"https://leetcode.com/problems/deepest-leaves-sum/",children:"https://leetcode.com/problems/deepest-leaves-sum/"})}),"\n",(0,l.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,l.jsx)(t.h3,{id:"sum-levels-with-preorder-travel",children:"Sum Levels with preorder travel"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-python",children:"class Solution:\n    def deepestLeavesSum(self, root: Optional[TreeNode]) -> int:\n        level_counts = []\n\n        def preorder(node, level):\n            if not node:\n                return\n\n            if level == len(level_counts):\n                level_counts.append(0)\n\n            level_counts[level] += node.val\n            preorder(node.left, level+1)\n            preorder(node.right, level+1)\n\n        preorder(root, 0)\n\n        return level_counts[-1]\n"})}),"\n",(0,l.jsx)(t.h2,{id:"javascript",children:"Javascript"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-javascript",children:"var deepestLeavesSum = function(root) {\n    const queue = [root];\n    let level = 0;\n    const layer = [];\n\n    while (queue.length) {\n      const total = queue.length;\n      layer.push([]);\n      for (let i = 0; i < total; i++) {\n        const node = queue.shift();\n        layer[level].push(node.val);\n\n        if (node.left) queue.push(node.left);\n        if (node.right) queue.push(node.right);\n      }\n      level++;\n    }\n\n    return layer[layer.length - 1].reduce((acc, cur) => acc + cur, 0)\n}\n"})})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,l.jsx)(t,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var l=n(96540);const s={},r=l.createContext(s);function o(e){const t=l.useContext(r);return l.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),l.createElement(r.Provider,{value:t},e.children)}}}]);