"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[83880],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),p=i,m=d["".concat(l,".").concat(p)]||d[p]||f[p]||o;return n?r.createElement(m,a(a({ref:t},u),{},{components:n})):r.createElement(m,a({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:i,a[1]=s;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},80202:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return a},default:function(){return d},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return c}});var r=n(83117),i=(n(67294),n(3905));const o={title:"95. Unique Binary Search Trees II",sidebar_label:"95. Unique Binary Search Trees II",tags:["Leetcode Medium","BST","DFS","TODO"]},a=void 0,s={unversionedId:"leetcode/1-500/uniq_bin_trees_ii",id:"leetcode/1-500/uniq_bin_trees_ii",title:"95. Unique Binary Search Trees II",description:"https://leetcode.com/problems/unique-binary-search-trees-ii",source:"@site/docs/leetcode/1-500/95_uniq_bin_trees_ii.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/uniq_bin_trees_ii",permalink:"/docs/leetcode/1-500/uniq_bin_trees_ii",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/95_uniq_bin_trees_ii.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"BST",permalink:"/docs/tags/bst"},{label:"DFS",permalink:"/docs/tags/dfs"},{label:"TODO",permalink:"/docs/tags/todo"}],version:"current",sidebarPosition:95,frontMatter:{title:"95. Unique Binary Search Trees II",sidebar_label:"95. Unique Binary Search Trees II",tags:["Leetcode Medium","BST","DFS","TODO"]},sidebar:"docSidebar",previous:{title:"94. Binary Tree Inorder Traversal",permalink:"/docs/leetcode/1-500/binary_tree_inorder"},next:{title:"96. Unique Binary Trees",permalink:"/docs/leetcode/1-500/unique_binary_trees"}},l={},c=[{value:"Python",id:"python",level:2}],u={toc:c};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/unique-binary-search-trees-ii"},"https://leetcode.com/problems/unique-binary-search-trees-ii")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("p",null,"DFS solution with recursion"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def generateTrees(self, n: int) -> List[Optional[TreeNode]]:\n        if n < 1:\n            return []\n\n        return self.generate_dfs(1, n)\n\n    def generate_dfs(self, left: int, right: int):\n        if left > right:\n            return [None]\n\n        result = []\n        for i in range(left, right+1):\n            left_nodes = self.generate_dfs(left, i-1)\n            right_nodes = self.generate_dfs(i+1, right)\n            result += self.generate_tree(\n                    root_val=i,\n                    left_nodes=left_nodes,\n                    right_nodes=right_nodes\n                )\n        return result\n\n    @staticmethod\n    def generate_tree(root_val, left_nodes, right_nodes):\n        trees = []\n        for l_node in left_nodes:\n            for r_node in right_nodes:\n                root = TreeNode(root_val)\n                root.left = l_node\n                root.right = r_node\n                trees.append(root)\n        return trees\n")))}d.isMDXComponent=!0}}]);