"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[83184],{3905:function(e,n,t){t.d(n,{Zo:function(){return a},kt:function(){return m}});var r=t(67294);function u(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){u(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,u=function(e,n){if(null==e)return{};var t,r,u={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(u[t]=e[t]);return u}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(u[t]=e[t])}return u}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},a=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},f="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,u=e.mdxType,o=e.originalType,c=e.parentName,a=i(e,["components","mdxType","originalType","parentName"]),f=s(t),p=u,m=f["".concat(c,".").concat(p)]||f[p]||d[p]||o;return t?r.createElement(m,l(l({ref:n},a),{},{components:t})):r.createElement(m,l({ref:n},a))}));function m(e,n){var t=arguments,u=n&&n.mdxType;if("string"==typeof e||u){var o=t.length,l=new Array(o);l[0]=p;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[f]="string"==typeof e?e:u,l[1]=i;for(var s=2;s<o;s++)l[s]=t[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},30295:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return o},metadata:function(){return i},toc:function(){return s}});var r=t(83117),u=(t(67294),t(3905));const o={title:"622. Design Circular Queue",sidebar_label:"622. Design Circular Queue",tags:["Leetcode Medium","Queue"]},l=void 0,i={unversionedId:"leetcode/501-1000/design_circular_queue",id:"leetcode/501-1000/design_circular_queue",title:"622. Design Circular Queue",description:"https://leetcode.com/problems/design-circular-queue/",source:"@site/docs/leetcode/501-1000/622_design_circular_queue.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/design_circular_queue",permalink:"/docs/leetcode/501-1000/design_circular_queue",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/622_design_circular_queue.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Queue",permalink:"/docs/tags/queue"}],version:"current",sidebarPosition:622,frontMatter:{title:"622. Design Circular Queue",sidebar_label:"622. Design Circular Queue",tags:["Leetcode Medium","Queue"]},sidebar:"docSidebar",previous:{title:"617. Merge Two Binary Trees",permalink:"/docs/leetcode/501-1000/merge_two_binary_trees"},next:{title:"623. Add One Row to Tree",permalink:"/docs/leetcode/501-1000/add_one_row_to_tree"}},c={},s=[{value:"Python",id:"python",level:2}],a={toc:s};function f(e){let{components:n,...t}=e;return(0,u.kt)("wrapper",(0,r.Z)({},a,t,{components:n,mdxType:"MDXLayout"}),(0,u.kt)("p",null,(0,u.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/design-circular-queue/"},"https://leetcode.com/problems/design-circular-queue/")),(0,u.kt)("h2",{id:"python"},"Python"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-python"},"class MyCircularQueue:\n\n    def __init__(self, k: int):\n        self.queue = [-1 for _ in range(k)]\n        self.rear = 0\n        self.front = 0\n        self.count = 0\n        self.cap = k\n\n    def enQueue(self, value: int) -> bool:\n        if self.isFull():\n            return False\n\n        index = (self.front + self.count) % self.cap\n        self.queue[index] = value\n        self.count += 1\n        return True\n\n    def deQueue(self) -> bool:\n        if self.isEmpty():\n            return False\n\n        self.front = (self.front+1) % self.cap\n        self.count -= 1\n\n        return True\n\n    def Front(self) -> int:\n        if self.isEmpty():\n            return -1\n        return self.queue[self.front]\n\n    def Rear(self) -> int:\n        if self.isEmpty():\n            return -1\n        index = (self.front + self.count - 1) % self.cap\n        return self.queue[index]\n\n    def isEmpty(self) -> bool:\n        return self.count == 0\n\n    def isFull(self) -> bool:\n        return self.count == self.cap\n")))}f.isMDXComponent=!0}}]);