"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[61426],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>f});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=r.createContext({}),p=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=p(e.components);return r.createElement(i.Provider,{value:n},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),s=p(t),m=o,f=s["".concat(i,".").concat(m)]||s[m]||u[m]||a;return t?r.createElement(f,l(l({ref:n},d),{},{components:t})):r.createElement(f,l({ref:n},d))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=m;var c={};for(var i in n)hasOwnProperty.call(n,i)&&(c[i]=n[i]);c.originalType=e,c[s]="string"==typeof e?e:o,l[1]=c;for(var p=2;p<a;p++)l[p]=t[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},99042:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>p});var r=t(87462),o=(t(67294),t(3905));const a={title:"133. Clone Graph",sidebar_label:"133. Clone Graph",tags:["Leetcode Medium","Graph"]},l=void 0,c={unversionedId:"leetcode/1-500/clone_graph",id:"leetcode/1-500/clone_graph",title:"133. Clone Graph",description:"https://leetcode.com/problems/clone-graph",source:"@site/docs/leetcode/1-500/133_clone_graph.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/clone_graph",permalink:"/docs/leetcode/1-500/clone_graph",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/133_clone_graph.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Graph",permalink:"/docs/tags/graph"}],version:"current",sidebarPosition:133,frontMatter:{title:"133. Clone Graph",sidebar_label:"133. Clone Graph",tags:["Leetcode Medium","Graph"]},sidebar:"docSidebar",previous:{title:"131. Palindrome Partitioning",permalink:"/docs/leetcode/1-500/palindrome_partitioning"},next:{title:"136. Single Number",permalink:"/docs/leetcode/1-500/single_num"}},i={},p=[{value:"Python",id:"python",level:2},{value:"DFS",id:"dfs",level:3}],d={toc:p},s="wrapper";function u(e){let{components:n,...t}=e;return(0,o.kt)(s,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/clone-graph"},"https://leetcode.com/problems/clone-graph")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"dfs"},"DFS"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def cloneGraph(self, node: 'Node') -> 'Node':\n        seem = dict()\n\n        def dfs(node):\n            if not node:\n                return\n\n            if node.val in seem:\n                return seem[node.val]\n\n            new_node = Node(\n                val=node.val,\n                neighbors=[]\n            )\n\n            seem[node.val] = new_node\n\n            for neighbor in node.neighbors:\n                new_node.neighbors.append(dfs(neighbor))\n\n            return new_node\n\n        return dfs(node)\n")))}u.isMDXComponent=!0}}]);