"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[7606],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return f}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),a=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=a(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=a(n),f=o,y=p["".concat(s,".").concat(f)]||p[f]||u[f]||i;return n?r.createElement(y,l(l({ref:t},d),{},{components:n})):r.createElement(y,l({ref:t},d))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,l=new Array(i);l[0]=p;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,l[1]=c;for(var a=2;a<i;a++)l[a]=n[a];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},94806:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return a},toc:function(){return d},default:function(){return p}});var r=n(87462),o=n(63366),i=(n(67294),n(3905)),l=["components"],c={title:"141. Linked List Cycle",slidebar_label:"141. Linked List Cycle",tags:["Leetcode Easy","Linked List","Floyd's Algorithm","Two Pointer"]},s=void 0,a={unversionedId:"leetcode/1-500/linked_list_cycle",id:"leetcode/1-500/linked_list_cycle",title:"141. Linked List Cycle",description:"https://leetcode.com/problems/linked-list-cycle",source:"@site/docs/leetcode/1-500/141_linked_list_cycle.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/linked_list_cycle",permalink:"/docs/leetcode/1-500/linked_list_cycle",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/141_linked_list_cycle.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Linked List",permalink:"/docs/tags/linked-list"},{label:"Floyd's Algorithm",permalink:"/docs/tags/floyds-algorithm"},{label:"Two Pointer",permalink:"/docs/tags/two-pointer"}],version:"current",sidebarPosition:141,frontMatter:{title:"141. Linked List Cycle",slidebar_label:"141. Linked List Cycle",tags:["Leetcode Easy","Linked List","Floyd's Algorithm","Two Pointer"]},sidebar:"docSidebar",previous:{title:"130. Surrounded Regions",permalink:"/docs/leetcode/1-500/surrounded_regions"},next:{title:"142. Linked List Cycle II",permalink:"/docs/leetcode/1-500/linked_list_cycle_ii"}},d=[{value:"Python",id:"python",children:[],level:2}],u={toc:d};function p(e){var t=e.components,n=(0,o.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/linked-list-cycle"},"https://leetcode.com/problems/linked-list-cycle")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("p",null,"Floyd's Tortoise and Hare Algorithm"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def hasCycle(self, head: Optional[ListNode]) -> bool:\n        slow, fast = head, head\n        is_first = True\n\n        while is_first or slow != fast:\n            is_first = False\n\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n\n        return True\n")))}p.isMDXComponent=!0}}]);