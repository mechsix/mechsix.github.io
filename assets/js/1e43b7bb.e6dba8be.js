"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[4095],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return m}});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},s=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),d=l(r),m=i,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||a;return r?n.createElement(f,o(o({ref:t},s),{},{components:r})):n.createElement(f,o({ref:t},s))}));function m(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=d;var u={};for(var c in t)hasOwnProperty.call(t,c)&&(u[c]=t[c]);u.originalType=e,u.mdxType="string"==typeof e?e:i,o[1]=u;for(var l=2;l<a;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},31557:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return u},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return s},default:function(){return d}});var n=r(87462),i=r(63366),a=(r(67294),r(3905)),o=["components"],u={title:"1306. Jump Game III",sidebar_label:"1306. Jump Game III",tags:["Leetcode Medium","Jump Game"]},c=void 0,l={unversionedId:"leetcode/1001-1500/jump_game_iii",id:"leetcode/1001-1500/jump_game_iii",title:"1306. Jump Game III",description:"Python",source:"@site/docs/leetcode/1001-1500/1306_jump_game_iii.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/jump_game_iii",permalink:"/docs/leetcode/1001-1500/jump_game_iii",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1306_jump_game_iii.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Jump Game",permalink:"/docs/tags/jump-game"}],version:"current",sidebarPosition:1306,frontMatter:{title:"1306. Jump Game III",sidebar_label:"1306. Jump Game III",tags:["Leetcode Medium","Jump Game"]},sidebar:"docSidebar",previous:{title:"1299. Replace Elements with Greatest Element on Right Side",permalink:"/docs/leetcode/1001-1500/replace_elm_with_greatest_right"},next:{title:"1346. Check If N and Its Double Exist",permalink:"/docs/leetcode/1001-1500/check_n_and_its_double_in_arr"}},s=[{value:"Python",id:"python",children:[],level:2}],p={toc:s};function d(e){var t=e.components,r=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("p",null,"First try, time limit exceed"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def canReach(self, arr: List[int], start: int) -> bool:\n        self.upbound = len(arr)-1\n        if not arr:\n            return False\n        return self._travel(arr, [], start)\n\n    def _travel(self, arr, visited, current):\n        if current in visited:\n            return False\n\n        if current > self.upbound or current < 0:\n            return False\n\n        if arr[current] == 0:\n            return True\n\n        visited.append(current)\n\n        return self._travel(arr, visited, current - arr[current]) \\\n            or self._travel(arr, visited, current + arr[current])\n")),(0,a.kt)("p",null,"Second Try, BFS with queue"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def canReach(self, arr: List[int], start: int) -> bool:\n        if not arr:\n            return False\n\n        upbound = len(arr)\n        queue = [start]\n        visited = set([start])\n\n        while queue:\n            current = queue.pop(0)\n\n            if arr[current] == 0:\n                return True\n\n            left = current - arr[current]\n            right = current + arr[current]\n\n            if left >= 0 and left < upbound and left not in visited:\n                visited.add(left)\n                queue.append(left)\n\n            if right >= 0 and right < upbound and right not in visited:\n                visited.add(right)\n                queue.append(right)\n\n        return False\n")))}d.isMDXComponent=!0}}]);