"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[70901],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,y=m["".concat(c,".").concat(d)]||m[d]||s[d]||o;return n?r.createElement(y,l(l({ref:t},u),{},{components:n})):r.createElement(y,l({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},14274:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return u}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),l=["components"],i={title:"223. Rectangle Area",sidebar_label:"223. Rectangle Area",tags:["Leetcode Medium"]},c=void 0,p={unversionedId:"leetcode/1-500/rectangle_area",id:"leetcode/1-500/rectangle_area",title:"223. Rectangle Area",description:"https://leetcode.com/problems/rectangle-area/",source:"@site/docs/leetcode/1-500/223_rectangle_area.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/rectangle_area",permalink:"/docs/leetcode/1-500/rectangle_area",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/223_rectangle_area.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"}],version:"current",sidebarPosition:223,frontMatter:{title:"223. Rectangle Area",sidebar_label:"223. Rectangle Area",tags:["Leetcode Medium"]},sidebar:"docSidebar",previous:{title:"222. Count Complete Tree Nodes",permalink:"/docs/leetcode/1-500/count_complete_bin_tree"},next:{title:"225. Implement Stack using Queues",permalink:"/docs/leetcode/1-500/implement_stack_with_queue"}},u=[{value:"Python",id:"python",children:[],level:2},{value:"Go",id:"go",children:[],level:2}],s={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/rectangle-area/"},"https://leetcode.com/problems/rectangle-area/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def computeArea(self, ax1: int, ay1: int, ax2: int, ay2: int, bx1: int, by1: int, bx2: int, by2: int) -> int:\n\n        overlap_x = min(ax2, bx2) - max(ax1, bx1)\n        overlap_y = min(ay2, by2) - max(ay1, by1)\n\n        overlap = 0\n        if overlap_x > 0 and overlap_y > 0:\n            overlap = overlap_x * overlap_y\n\n        return (ax2-ax1)*(ay2-ay1) + (bx2-bx1)*(by2-by1) - overlap\n")),(0,o.kt)("h2",{id:"go"},"Go"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func computeArea(ax1 int, ay1 int, ax2 int, ay2 int, bx1 int, by1 int, bx2 int, by2 int) int {\n    var xLeft, xRight, xTop, xBottom int\n\n    if (ax2 > bx2) { xRight = bx2 } else { xRight = ax2 }\n    if (ax1 > bx1) { xLeft = ax1 } else { xLeft = bx1 }\n    if (ay2 > by2) { xBottom = by2 } else { xBottom = ay2 }\n    if (ay1 > by1) { xTop = ay1 } else { xTop = by1 }\n\n    overlapX, overlapY := xRight-xLeft, xBottom-xTop\n\n    overlap := 0\n    if overlapX > 0 && overlapY > 0 {\n        overlap = overlapX * overlapY\n    }\n\n    areaA := (ax2-ax1) * (ay2-ay1)\n    areaB := (bx2-bx1) * (by2-by1)\n\n    return areaA + areaB - overlap\n}\n")))}m.isMDXComponent=!0}}]);