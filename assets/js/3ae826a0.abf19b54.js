"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[3671],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var a=r.createContext({}),d=function(e){var t=r.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(a.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,a=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(n),m=i,h=u["".concat(a,".").concat(m)]||u[m]||p[m]||s;return n?r.createElement(h,o(o({ref:t},c),{},{components:n})):r.createElement(h,o({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,o=new Array(s);o[0]=u;var l={};for(var a in t)hasOwnProperty.call(t,a)&&(l[a]=t[a]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var d=2;d<s;d++)o[d]=n[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},71619:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return a},metadata:function(){return d},toc:function(){return c},default:function(){return u}});var r=n(87462),i=n(63366),s=(n(67294),n(3905)),o=["components"],l={title:"23. Merge k Sorted Lists",sidebar_label:"23. Merge k Sorted Lists",tags:["Linked List","Leetcode Hard","Heap"]},a=void 0,d={unversionedId:"leetcode/1-500/merge_k_sorted_lists",id:"leetcode/1-500/merge_k_sorted_lists",title:"23. Merge k Sorted Lists",description:"https://leetcode.com/problems/merge-k-sorted-lists/",source:"@site/docs/leetcode/1-500/23_merge_k_sorted_lists.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/merge_k_sorted_lists",permalink:"/docs/leetcode/1-500/merge_k_sorted_lists",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/23_merge_k_sorted_lists.md",tags:[{label:"Linked List",permalink:"/docs/tags/linked-list"},{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"Heap",permalink:"/docs/tags/heap"}],version:"current",sidebarPosition:23,frontMatter:{title:"23. Merge k Sorted Lists",sidebar_label:"23. Merge k Sorted Lists",tags:["Linked List","Leetcode Hard","Heap"]},sidebar:"docSidebar",previous:{title:"22. Generate Parentheses",permalink:"/docs/leetcode/1-500/generate_parenetheses"},next:{title:"24. Swap Nodes in Pairs",permalink:"/docs/leetcode/1-500/swap_nodes_in_pairs"}},c=[{value:"Python",id:"python",children:[{value:"Heap Sort",id:"heap-sort",children:[],level:3},{value:"Forces Bust (Timeout)",id:"forces-bust-timeout",children:[],level:3}],level:2},{value:"Javascript",id:"javascript",children:[],level:2}],p={toc:c};function u(e){var t=e.components,n=(0,i.Z)(e,o);return(0,s.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/merge-k-sorted-lists/"},"https://leetcode.com/problems/merge-k-sorted-lists/")),(0,s.kt)("h2",{id:"python"},"Python"),(0,s.kt)("h3",{id:"heap-sort"},"Heap Sort"),(0,s.kt)("p",null,"Use the built-in ",(0,s.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/heapq.html"},"heapq")," data structure"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Time: O(n)"),(0,s.kt)("li",{parentName:"ul"},"Space: O(n)")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"from heapq import heappush, heappop\n\n\nclass Solution:\n    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n        heap = []\n        for head in lists:\n            node = head\n            while node:\n                heappush(heap, node.val)\n                node = node.next\n\n        head = ListNode()\n        node = head\n        while heap:\n            node.next = ListNode(val=heappop(heap))\n            node = node.next\n\n        return head.next\n")),(0,s.kt)("h3",{id:"forces-bust-timeout"},"Forces Bust (Timeout)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n        head = ListNode()\n        cur = head\n\n        while any(lists):\n            min_val = 10 ** 4\n            min_index = None\n\n            for index, head_node in enumerate(lists):\n                if head_node is None:\n                    continue\n\n                if head_node.val < min_val:\n                    min_index = index\n                    min_val = head_node.val\n\n            cur.next = ListNode(val=min_val)\n            cur = cur.next\n            lists[min_index] = lists[min_index].next\n\n        return head.next\n")),(0,s.kt)("h2",{id:"javascript"},"Javascript"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"var mergeKLists = function(lists) {\n    if (lists.length === 0) return new ListNode().next;\n    \n    let result = lists[0];\n    for (let i = 1; i < lists.length; i++) {\n        result = mergeList(result, lists[i]);\n    }\n    return result;\n};\n\nvar mergeList = function(list1, list2) {\n    let head = new ListNode();\n    let start = head;\n    \n    while (list1 !== null && list2 !== null) {\n        if (list1.val < list2.val) {\n            start.next = list1;\n            list1 = list1.next;\n        } else {\n            start.next = list2;\n            list2 = list2.next;\n        }\n        start = start.next;\n    }\n    \n    start.next = list1 === null ? list2 : list1;\n    return head.next;\n}\n")))}u.isMDXComponent=!0}}]);