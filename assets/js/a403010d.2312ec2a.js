"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[41348],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,h=p["".concat(l,".").concat(m)]||p[m]||d[m]||i;return n?r.createElement(h,s(s({ref:t},u),{},{components:n})):r.createElement(h,s({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[p]="string"==typeof e?e:a,s[1]=o;for(var c=2;c<i;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},16820:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const i={title:"35. Search Insert Position",sidebar_label:"35. Search Insert Position",tags:["Leetcode Easy","Binary Search","Go","Rust"]},s=void 0,o={unversionedId:"leetcode/1-500/search_insert_pos",id:"leetcode/1-500/search_insert_pos",title:"35. Search Insert Position",description:"https://leetcode.com/problems/search-insert-position",source:"@site/docs/leetcode/1-500/35_search_insert_pos.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/search_insert_pos",permalink:"/docs/leetcode/1-500/search_insert_pos",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/35_search_insert_pos.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Binary Search",permalink:"/docs/tags/binary-search"},{label:"Go",permalink:"/docs/tags/go"},{label:"Rust",permalink:"/docs/tags/rust"}],version:"current",sidebarPosition:35,frontMatter:{title:"35. Search Insert Position",sidebar_label:"35. Search Insert Position",tags:["Leetcode Easy","Binary Search","Go","Rust"]},sidebar:"docSidebar",previous:{title:"34. Find First and Last Position of Element in Sorted Array",permalink:"/docs/leetcode/1-500/find_first_and_last_pos_of_element_in_sorted_array"},next:{title:"36. Valid Sudoku",permalink:"/docs/leetcode/1-500/valid_sudoku"}},l={},c=[{value:"Python",id:"python",level:2},{value:"Force Busted",id:"force-busted",level:2},{value:"Binary Search",id:"binary-search",level:2},{value:"Go",id:"go",level:2},{value:"Binary Search",id:"binary-search-1",level:3},{value:"Rust",id:"rust",level:2},{value:"Binary Search",id:"binary-search-2",level:3},{value:"Build-in Binary Search",id:"build-in-binary-search",level:3}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/search-insert-position"},"https://leetcode.com/problems/search-insert-position")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("h2",{id:"force-busted"},"Force Busted"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        insert_pos = 0\n\n        for index, num in enumerate(nums):\n            if target == num:\n                return index\n            if target > num:\n                insert_pos = index+1\n\n        return insert_pos\n")),(0,a.kt)("h2",{id:"binary-search"},"Binary Search"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        l, r = 0, len(nums)-1\n\n        while l <= r:\n            cur = (l+r) // 2\n            if target == nums[cur]:\n                return cur\n            elif target < nums[cur]:\n                r = cur - 1\n            else:\n                l = cur + 1\n        return l\n")),(0,a.kt)("h2",{id:"go"},"Go"),(0,a.kt)("h3",{id:"binary-search-1"},"Binary Search"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func searchInsert(nums []int, target int) int {\n    l, r := 0, len(nums)-1\n\n    for l <= r {\n        pivot := (l+r) / 2\n        if (target == nums[pivot]) {\n            return pivot\n        } else if (target > nums[pivot]) {\n            l = pivot + 1\n        } else {\n            r = pivot - 1\n        }\n    }\n    return l\n}\n")),(0,a.kt)("h2",{id:"rust"},"Rust"),(0,a.kt)("h3",{id:"binary-search-2"},"Binary Search"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"impl Solution {\n    pub fn search_insert(nums: Vec<i32>, target: i32) -> i32 {\n        let mut l = 0;\n        let mut r = nums.len();\n\n        while l < r {\n            let pivot = (l+r) / 2;\n            let num = nums[pivot];\n            if target == num {\n                return pivot as i32;\n            } else if target > num {\n                l = pivot + 1;\n            } else {\n                r = pivot;\n            }\n        }\n\n        return l as i32;\n    }\n}\n")),(0,a.kt)("h3",{id:"build-in-binary-search"},"Build-in Binary Search"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"impl Solution {\n    pub fn search_insert(nums: Vec<i32>, target: i32) -> i32 {\n        nums.binary_search(&target).unwrap_or_else(|x| x) as i32\n    }\n}\n")))}d.isMDXComponent=!0}}]);