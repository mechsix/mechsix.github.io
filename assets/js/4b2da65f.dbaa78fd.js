"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[5036],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return f}});var r=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,i=e.originalType,l=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),u=c(n),f=s,m=u["".concat(l,".").concat(f)]||u[f]||p[f]||i;return n?r.createElement(m,o(o({ref:t},d),{},{components:n})):r.createElement(m,o({ref:t},d))}));function f(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var i=n.length,o=new Array(i);o[0]=u;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType="string"==typeof e?e:s,o[1]=a;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},68158:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return a},metadata:function(){return c},toc:function(){return d}});var r=n(87462),s=n(63366),i=(n(67294),n(3905)),o=["components"],a={title:"1202. Smallest String With Swaps",sidebar_label:"1202. Smallest String With Swaps",tags:["Leetcode Medium","Graph","DFS"]},l=void 0,c={unversionedId:"leetcode/1001-1500/smallest_string_with_swaps",id:"leetcode/1001-1500/smallest_string_with_swaps",title:"1202. Smallest String With Swaps",description:"https://leetcode.com/problems/smallest-string-with-swaps/",source:"@site/docs/leetcode/1001-1500/1202_smallest_string_with_swaps.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/smallest_string_with_swaps",permalink:"/docs/leetcode/1001-1500/smallest_string_with_swaps",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1202_smallest_string_with_swaps.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Graph",permalink:"/docs/tags/graph"},{label:"DFS",permalink:"/docs/tags/dfs"}],version:"current",sidebarPosition:1202,frontMatter:{title:"1202. Smallest String With Swaps",sidebar_label:"1202. Smallest String With Swaps",tags:["Leetcode Medium","Graph","DFS"]},sidebar:"docSidebar",previous:{title:"1200. Mini Abs Difference",permalink:"/docs/leetcode/1001-1500/min_abs_difference"},next:{title:"1209. Remove All Adjacent Duplicates in String II",permalink:"/docs/leetcode/1001-1500/remove_all_adjacent_duplicates_in_string_ii"}},d=[{value:"Python",id:"python",children:[{value:"DFS",id:"dfs",children:[],level:3}],level:2}],p={toc:d};function u(e){var t=e.components,n=(0,s.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/smallest-string-with-swaps/"},"https://leetcode.com/problems/smallest-string-with-swaps/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"dfs"},"DFS"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from collections import defaultdict\n\n\nclass Solution:\n    def smallestStringWithSwaps(self, s: str, pairs: List[List[int]]) -> str:\n        chars = list(s)\n        visited = set()\n\n        edges = defaultdict(list)\n        for source, dist in pairs:\n            edges[source].append(dist)\n            edges[dist].append(source)\n\n        def dfs(node, result):\n            if node not in edges:\n                return\n\n            result.append(node)\n\n            dests = edges.pop(node)  # while loop end point\n            for dest in dests:\n                dfs(dest, result)\n\n        while edges:\n            node = next(iter(edges))  # Start from whatever node of edges\n\n            # 1. Find all connected nodes which is on of the sub-graph\n            connected_nodes = []\n            dfs(node, connected_nodes)\n\n            # 2. Get the origin values of all the nodes in sub-graph\n            swapped_values = [s[i] for i in connected_nodes]\n\n            # 3. Sort both of them, then the data in these lists will be the\n            #    mini swapped values of the sub-graph\n            connected_nodes.sort()\n            swapped_values.sort()\n\n            # 4. Update the value of sub-graph in place\n            for i, new_value in enumerate(swapped_values):\n                target_index = connected_nodes[i]\n                chars[target_index] = new_value\n\n        return ''.join(chars)\n")))}u.isMDXComponent=!0}}]);