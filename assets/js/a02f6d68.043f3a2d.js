"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[69504],{20296:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"leetcode/501-1000/sort_an_array","title":"912. Sort an Array","description":"https://leetcode.com/problems/sort-an-array/","source":"@site/docs/leetcode/501-1000/912_sort_an_array.md","sourceDirName":"leetcode/501-1000","slug":"/leetcode/501-1000/sort_an_array","permalink":"/docs/leetcode/501-1000/sort_an_array","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Medium","permalink":"/docs/tags/leetcode-medium"},{"inline":true,"label":"Rust","permalink":"/docs/tags/rust"}],"version":"current","sidebarPosition":912,"frontMatter":{"title":"912. Sort an Array","sidebar_label":"912. Sort an Array","tags":["Leetcode Medium","Rust"]},"sidebar":"docSidebar","previous":{"title":"905. Sort Array By Parity","permalink":"/docs/leetcode/501-1000/sort_array_by_parity"},"next":{"title":"916. Word Subsets","permalink":"/docs/leetcode/501-1000/word_subsets"}}');var s=r(74848),i=r(28453);const l={title:"912. Sort an Array",sidebar_label:"912. Sort an Array",tags:["Leetcode Medium","Rust"]},o=void 0,a={},u=[{value:"Python",id:"python",level:2},{value:"Bubble Sort",id:"bubble-sort",level:3},{value:"Binary Search Tree",id:"binary-search-tree",level:3},{value:"Merge Sort - In Place",id:"merge-sort---in-place",level:3},{value:"Merge Sort",id:"merge-sort",level:3},{value:"Rust",id:"rust",level:2},{value:"Built-in Vec::sort()",id:"built-in-vecsort",level:3},{value:"Bubble Sort",id:"bubble-sort-1",level:3},{value:"Prefix Sum",id:"prefix-sum",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/sort-an-array/",children:"https://leetcode.com/problems/sort-an-array/"})}),"\n",(0,s.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,s.jsx)(n.h3,{id:"bubble-sort",children:"Bubble Sort"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Time: O(N^2)"}),"\n",(0,s.jsx)(n.li,{children:"Space: O(1)"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def sortArray(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        for _ in range(n-1):\n            for i in range(1, n):\n                if nums[i-1] > nums[i]:\n                    nums[i], nums[i-1] = nums[i-1], nums[i]\n        return nums\n"})}),"\n",(0,s.jsx)(n.h3,{id:"binary-search-tree",children:"Binary Search Tree"}),"\n",(0,s.jsx)(n.p,{children:"(Timelimit Exceed)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Time: O(N)"}),"\n",(0,s.jsx)(n.li,{children:"Space: O(N)"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class TreeNode:\n    def __init__(self, val=None, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def sortArray(self, nums: List[int]) -> List[int]:\n        def build(node, val):\n            if not node:\n                return TreeNode(val=val)\n            if node.val > val:\n                node.left = build(node.left, val)\n            else:\n                node.right = build(node.right, val)\n            return node\n\n\n        root = TreeNode(val=nums.pop())\n        while nums:\n            num = nums.pop()\n            build(root, num)\n\n        def inorder(node, result):\n            if not node:\n                return result\n\n            inorder(node.left, result)\n            result.append(node.val)\n            inorder(node.right, result)\n\n            return result\n\n        return inorder(root, [])\n"})}),"\n",(0,s.jsx)(n.h3,{id:"merge-sort---in-place",children:"Merge Sort - In Place"}),"\n",(0,s.jsx)(n.p,{children:"(Timelimit Exceed)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Time: O(NlogN)"}),"\n",(0,s.jsx)(n.li,{children:"Space: O(1)"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def sortArray(self, nums: List[int]) -> List[int]:\n        def merge_sort(left, right):\n            if left >= right:\n                return\n\n            pivot = left + (right - left) // 2\n\n            # Split\n            merge_sort(left, pivot)\n            merge_sort(pivot+1, right)\n\n            if nums[pivot] <= nums[pivot+1]:\n                return\n\n            # Merge Result\n            l_start, l_end, r_start, r_end = left, pivot, pivot+1, right\n            while l_start <= l_end and r_start <= r_end:\n                # The partition is already sorted\n                if nums[l_start] <= nums[r_start]:\n                    l_start += 1\n                    continue\n\n                value = nums[r_start]\n                i = r_start\n\n                # Shift all elements to right by 1\n                for i in range(r_start, l_start, -1):\n                    nums[i] = nums[i-1]\n\n                # Place value to first place\n                nums[l_start] = value\n\n                l_start += 1\n                l_end += 1\n                r_start += 1\n\n        merge_sort(0, len(nums)-1)\n\n        return nums\n"})}),"\n",(0,s.jsx)(n.h3,{id:"merge-sort",children:"Merge Sort"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def sortArray(self, nums: List[int]) -> List[int]:\n        def merge(left, right, result):\n            i, j, k = 0, 0, 0\n            while i < len(left) and j < len(right):\n                if left[i] < right[j]:\n                    result[k] = left[i]\n                    i += 1\n                else:\n                    result[k] = right[j]\n                    j += 1\n                k += 1\n            result[k:] = left[i:] if i < len(left) else right[j:]\n\n        def merge_sort(nums):\n            if len(nums) == 1:\n                return\n            mid = len(nums) >> 1\n            left = nums[:mid]\n            right = nums[mid:]\n\n            merge_sort(left)\n            merge_sort(right)\n\n            merge(left, right, nums)\n\n        merge_sort(nums)\n        return nums\n"})}),"\n",(0,s.jsx)(n.h2,{id:"rust",children:"Rust"}),"\n",(0,s.jsx)(n.h3,{id:"built-in-vecsort",children:"Built-in Vec::sort()"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"impl Solution {\n    pub fn sort_array(mut nums:  Vec<i32>) -> Vec<i32> {\n        nums.sort();\n        nums\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"bubble-sort-1",children:"Bubble Sort"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"impl Solution {\n    pub fn sort_array(nums: Vec<i32>) -> Vec<i32> {\n        let mut swapped = true;\n        let mut answer = vec![0; nums.len()];\n        answer[..nums.len()].clone_from_slice(&nums);\n\n        while swapped {\n            swapped = false;\n            for i in 1..answer.len() {\n                if answer[i - 1] > answer[i] {\n                    answer.swap(i - 1, i);\n                    swapped = true\n                }\n            }\n        }\n        answer\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"prefix-sum",children:"Prefix Sum"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"impl Solution {\n    pub fn sort_array(nums: Vec<i32>) -> Vec<i32> {\n        let length = nums.len();\n        let mut v = vec![0; 100001];\n        let mut r = Vec::new();\n\n        for i in 0..length {\n            v[nums[i] as usize + 50000] += 1;\n        }\n        for i in 0..100001 {\n            while v[i] > 0 {\n                r.push(i as i32 - 50000);\n                v[i] -= 1;\n            }\n        }\n        r\n    }\n}\n"})})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>o});var t=r(96540);const s={},i=t.createContext(s);function l(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);