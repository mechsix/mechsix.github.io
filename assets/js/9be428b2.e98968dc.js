"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[68966],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return f}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),d=u(n),f=o,m=d["".concat(s,".").concat(f)]||d[f]||p[f]||i;return n?r.createElement(m,c(c({ref:t},l),{},{components:n})):r.createElement(m,c({ref:t},l))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,c=new Array(i);c[0]=d;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a.mdxType="string"==typeof e?e:o,c[1]=a;for(var u=2;u<i;u++)c[u]=n[u];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},93953:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return a},metadata:function(){return u},toc:function(){return l}});var r=n(87462),o=n(63366),i=(n(67294),n(3905)),c=["components"],a={title:"1473. Paint House III",sidebar_label:"1473. Paint House III",tags:["Leetcode Hard","DP"]},s=void 0,u={unversionedId:"leetcode/1001-1500/paint_house_iii",id:"leetcode/1001-1500/paint_house_iii",title:"1473. Paint House III",description:"https://leetcode.com/problems/paint-house-iii/",source:"@site/docs/leetcode/1001-1500/1473_paint_house_iii.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/paint_house_iii",permalink:"/docs/leetcode/1001-1500/paint_house_iii",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1473_paint_house_iii.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"DP",permalink:"/docs/tags/dp"}],version:"current",sidebarPosition:1473,frontMatter:{title:"1473. Paint House III",sidebar_label:"1473. Paint House III",tags:["Leetcode Hard","DP"]},sidebar:"docSidebar",previous:{title:"1465. Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts",permalink:"/docs/leetcode/1001-1500/max_area_of_piece_of_cake_after_h_w_cuts"},next:{title:"1480. Running Sum of 1d Array",permalink:"/docs/leetcode/1001-1500/running_sum_of_1d_array"}},l=[{value:"Python",id:"python",children:[{value:"Top Down DP",id:"top-down-dp",children:[],level:3}],level:2}],p={toc:l};function d(e){var t=e.components,n=(0,o.Z)(e,c);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/paint-house-iii/"},"https://leetcode.com/problems/paint-house-iii/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"top-down-dp"},"Top Down DP"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u4e09\u7dad\u7684DP...")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from math import inf\nfrom functools import cache\n\n\nclass Solution:\n    def minCost(self, houses: List[int], costs: List[List[int]], m: int, n: int, target: int) -> int:\n        @cache\n        def dp(i: int, count: int, pre_color: int):\n            if i == len(houses):\n                return 0 if count == target else inf\n\n            if count > target:\n                return inf\n\n            min_cost = inf\n\n            if houses[i] != 0:\n                # The house not yet paint\n                new_count = count + (1 if houses[i] != pre_color else 0)\n                return dp(i+1, new_count, houses[i])\n\n            # The house is painted, go over all possible colors\n            for color in range(1, n+1):\n                new_count = count + (1 if color != pre_color else 0)\n                min_cost = min(\n                    min_cost,\n                    costs[i][color-1] + dp(i+1, new_count, color)\n                )\n\n            return min_cost\n\n        min_cost = dp(0, 0, 0)\n        return min_cost if min_cost != inf else -1\n")))}d.isMDXComponent=!0}}]);