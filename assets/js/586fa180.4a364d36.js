"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[27273],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(67294);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var a=n.createContext({}),d=function(e){var t=n.useContext(a),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},u=function(e){var t=d(e.components);return n.createElement(a.Provider,{value:t},e.children)},l="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,o=e.originalType,a=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),l=d(r),p=s,m=l["".concat(a,".").concat(p)]||l[p]||h[p]||o;return r?n.createElement(m,c(c({ref:t},u),{},{components:r})):n.createElement(m,c({ref:t},u))}));function m(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=r.length,c=new Array(o);c[0]=p;var i={};for(var a in t)hasOwnProperty.call(t,a)&&(i[a]=t[a]);i.originalType=e,i[l]="string"==typeof e?e:s,c[1]=i;for(var d=2;d<o;d++)c[d]=r[d];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},7213:function(e,t,r){r.r(t),r.d(t,{assets:function(){return a},contentTitle:function(){return c},default:function(){return l},frontMatter:function(){return o},metadata:function(){return i},toc:function(){return d}});var n=r(83117),s=(r(67294),r(3905));const o={title:"1268. Search Suggestions System",sidebar_label:"1268. Search Suggestions System",tags:["Leetcode Medium","Trie"]},c=void 0,i={unversionedId:"leetcode/1001-1500/search_suggestions_system",id:"leetcode/1001-1500/search_suggestions_system",title:"1268. Search Suggestions System",description:"https://leetcode.com/problems/search-suggestions-system/",source:"@site/docs/leetcode/1001-1500/1268_search_suggestions_system.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/search_suggestions_system",permalink:"/docs/leetcode/1001-1500/search_suggestions_system",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1268_search_suggestions_system.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Trie",permalink:"/docs/tags/trie"}],version:"current",sidebarPosition:1268,frontMatter:{title:"1268. Search Suggestions System",sidebar_label:"1268. Search Suggestions System",tags:["Leetcode Medium","Trie"]},sidebar:"docSidebar",previous:{title:"1260. Shift 2D Grid",permalink:"/docs/leetcode/1001-1500/shift_2d_grid"},next:{title:"1288. Remove Covered Intervals",permalink:"/docs/leetcode/1001-1500/remove_covered_intervals"}},a={},d=[{value:"Python",id:"python",level:2},{value:"Tire Tree with member of matched words",id:"tire-tree-with-member-of-matched-words",level:3},{value:"Javascript",id:"javascript",level:2}],u={toc:d};function l(e){let{components:t,...r}=e;return(0,s.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/search-suggestions-system/"},"https://leetcode.com/problems/search-suggestions-system/")),(0,s.kt)("h2",{id:"python"},"Python"),(0,s.kt)("h3",{id:"tire-tree-with-member-of-matched-words"},"Tire Tree with member of matched words"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    MATCHED_KEY = '#'\n    def suggestedProducts(self, products: List[str], searchWord: str) -> List[List[str]]:\n        products.sort()\n\n        # Build the trie tree, and remember the matched products under a special key: MATCHED_KEY\n        trie = {}\n        cur = trie\n        for product in products:\n            cur = trie\n            for letter in product:\n                cur = cur.setdefault(letter, {})\n                matched = cur.setdefault(self.MATCHED_KEY, [])\n                if len(matched) < 3:\n                    matched.append(product)\n\n\n        # Travel the characters in searchWord, and get the result from the memory\n        result = []\n        cur = trie\n\n        is_matched = True  # Default from empty string, which \"is_matched\" true\n        for i, char in enumerate(searchWord):\n            if char not in cur:\n                is_matched = False\n\n            if not is_matched:\n                result.append([])\n                continue\n\n            cur = cur[char]\n            result.append(cur[self.MATCHED_KEY])\n\n        return result\n")),(0,s.kt)("h2",{id:"javascript"},"Javascript"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'var suggestedProducts = function (products, searchWord) {\n    const trie = new Trie();\n    trie.insert(products);\n    return trie.find(searchWord);\n};\n\nclass Trie {\n    constructor() {\n        this.root = { childs: {} };\n        this.max = 3;\n    }\n\n    insert(products) {\n    for (let product of products) {\n      let node = this.root;\n      for (let char of product) {\n                if (!node.childs[char]) node.childs[char] = { childs: {} };\n        node = node.childs[char];\n      }\n      node.isMatched = product;\n    }\n    }\n\n    find(searchWord) {\n    let node = this.root;\n    const res = [];\n    for (const char of searchWord) {\n      if (node) {\n        res.push(this.deeper(node.childs[char]))\n        node = node.childs[char];\n      } else {\n        res.push([])\n      }\n    }\n    return res;\n    }\n\n  deeper(node, result = []) {\n    if (result.length === this.max || !node) return result;\n    if (node.isMatched) {\n      result.push(node.isMatched)\n    }\n\n        for (let i = "a".charCodeAt(0); i <= "z".charCodeAt(0); i++) {\n            const char = String.fromCharCode(i);\n            if (node.childs[char]) {\n                this.deeper(node.childs[char], result);\n            }\n        }\n    return result;\n  }\n}\n')))}l.isMDXComponent=!0}}]);