"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[5003],{3905:function(e,r,t){t.d(r,{Zo:function(){return d},kt:function(){return f}});var n=t(67294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function c(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?c(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function a(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},c=Object.keys(e);for(n=0;n<c.length;n++)t=c[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)t=c[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=n.createContext({}),s=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},d=function(e){var r=s(e.components);return n.createElement(l.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},p=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,c=e.originalType,l=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),p=s(t),f=o,h=p["".concat(l,".").concat(f)]||p[f]||u[f]||c;return t?n.createElement(h,i(i({ref:r},d),{},{components:t})):n.createElement(h,i({ref:r},d))}));function f(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var c=t.length,i=new Array(c);i[0]=p;var a={};for(var l in r)hasOwnProperty.call(r,l)&&(a[l]=r[l]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var s=2;s<c;s++)i[s]=t[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},98287:function(e,r,t){t.r(r),t.d(r,{frontMatter:function(){return a},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return d},default:function(){return p}});var n=t(87462),o=t(63366),c=(t(67294),t(3905)),i=["components"],a={title:"79. Word Search",sidebar_label:"79. Word Search",tags:["Leetcode Medium","Backtracking"]},l=void 0,s={unversionedId:"leetcode/1-500/word_search",id:"leetcode/1-500/word_search",title:"79. Word Search",description:"https://leetcode.com/problems/word-search/",source:"@site/docs/leetcode/1-500/79_word_search.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/word_search",permalink:"/docs/leetcode/1-500/word_search",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/79_word_search.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Backtracking",permalink:"/docs/tags/backtracking"}],version:"current",sidebarPosition:79,frontMatter:{title:"79. Word Search",sidebar_label:"79. Word Search",tags:["Leetcode Medium","Backtracking"]},sidebar:"docSidebar",previous:{title:"78. Subsets",permalink:"/docs/leetcode/1-500/subsets"},next:{title:"80. Remove Duplicates from Sorted Array II",permalink:"/docs/leetcode/1-500/remove_duplicates_from_sorted_array_ii"}},d=[{value:"Python",id:"python",children:[],level:2},{value:"Javascript",id:"javascript",children:[],level:2}],u={toc:d};function p(e){var r=e.components,t=(0,o.Z)(e,i);return(0,c.kt)("wrapper",(0,n.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/word-search/"},"https://leetcode.com/problems/word-search/")),(0,c.kt)("h2",{id:"python"},"Python"),(0,c.kt)("h2",{id:"javascript"},"Javascript"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-javascript"},"var exist = function (board, word) {\n  const finding = new Finding(board, word);\n\n  for (let row = 0; row < board.length; row++) {\n    for (let col = 0; col < board[row].length; col++) {\n      if (finding.track(row, col)) return true;\n    }\n  }\n  return false;\n};\n\nclass Finding {\n  constructor(board, word) {\n    this.maxRows = board.length;\n    this.maxCols = board[0].length;\n    this.board = board;\n    this.word = word;\n  }\n\n  track(row, col, i = 0) {\n    // matched\n    if (i >= this.word.length) return true;\n\n    if (row < 0 || row >= this.maxRows || col < 0 || col >= this.maxCols || this.word[i] !== this.board[row][col]) {\n      return;\n    }\n    // console.log([row, col], i, this.word[i])\n\n    let res = false;\n    this.board[row][col] = null;\n    // console.log(this.board)\n    \n    const directions = [[1, 0], [-1, 0], [0, 1], [0, -1]];\n    for (const [x, y] of directions) {\n      res = this.track(row + y, col + x, i + 1);\n      if (res) break;\n    }\n    // console.log([row, col], this.word[i])\n    this.board[row][col] = this.word[i]\n\n    return res;\n  }\n}\n")))}p.isMDXComponent=!0}}]);