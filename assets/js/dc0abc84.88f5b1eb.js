"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[5501],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return f}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},s=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),u=d(n),f=i,m=u["".concat(l,".").concat(f)]||u[f]||p[f]||o;return n?r.createElement(m,c(c({ref:t},s),{},{components:n})):r.createElement(m,c({ref:t},s))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,c=new Array(o);c[0]=u;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType="string"==typeof e?e:i,c[1]=a;for(var d=2;d<o;d++)c[d]=n[d];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},79782:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return a},metadata:function(){return d},toc:function(){return s}});var r=n(87462),i=n(63366),o=(n(67294),n(3905)),c=["components"],a={title:"72. Edit Distance",sidebar_label:"72. Edit Distance",tags:["Leetcode Hard","DP"]},l=void 0,d={unversionedId:"leetcode/1-500/edit_distance",id:"leetcode/1-500/edit_distance",title:"72. Edit Distance",description:"https://leetcode.com/problems/edit-distance/",source:"@site/docs/leetcode/1-500/72_edit_distance.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/edit_distance",permalink:"/docs/leetcode/1-500/edit_distance",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/72_edit_distance.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"DP",permalink:"/docs/tags/dp"}],version:"current",sidebarPosition:72,frontMatter:{title:"72. Edit Distance",sidebar_label:"72. Edit Distance",tags:["Leetcode Hard","DP"]},sidebar:"docSidebar",previous:{title:"70. Climbing Stairs",permalink:"/docs/leetcode/1-500/climbing_stairs"},next:{title:"74. Search a 2D Matrix",permalink:"/docs/leetcode/1-500/search_2d_matrix"}},s=[{value:"Python",id:"python",children:[],level:2},{value:"Javascript",id:"javascript",children:[],level:2}],p={toc:s};function u(e){var t=e.components,n=(0,i.Z)(e,c);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/edit-distance/"},"https://leetcode.com/problems/edit-distance/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h2",{id:"javascript"},"Javascript"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var minDistance = function(word1, word2) {\n    const dp = [...new Array(word1.length + 1)].map(() => new Array(word2.length + 1).fill(0))\n    for (let i = 0; i <= word1.length; i++) {\n        for (let j = 0; j <= word2.length; j++) {\n            if (i === 0) dp[i][j] = j;\n            else if (j === 0) dp[i][j] = i;\n            else {\n                if (word1[i - 1] === word2[j - 1]) {\n                    dp[i][j] = dp[i - 1][j - 1];\n                } else {\n                    dp[i][j] = Math.min(\n                        dp[i - 1][j] + 1,\n                        dp[i - 1][j - 1] + 1,\n                        dp[i][j - 1] + 1,\n                    );\n                }\n            }\n        }\n    }\n    \n    return dp[word1.length][word2.length]\n};\n\n/**\n *   " h o r s e\n * " 0 1 2 3 4 5 \n * r 1 1 2 2 3 4\n * o 2 2 1 2 3 4\n * s 3 3 2 2 2 3    \n */\n')))}u.isMDXComponent=!0}}]);