"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[88961],{64396:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"leetcode/501-1000/contiguous_array","title":"525. Contiguous Array","description":"https://leetcode.com/problems/contiguous-array/","source":"@site/docs/leetcode/501-1000/525_contiguous_array.md","sourceDirName":"leetcode/501-1000","slug":"/leetcode/501-1000/contiguous_array","permalink":"/docs/leetcode/501-1000/contiguous_array","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Medium","permalink":"/docs/tags/leetcode-medium"},{"inline":true,"label":"Prefix Sum","permalink":"/docs/tags/prefix-sum"}],"version":"current","sidebarPosition":525,"frontMatter":{"title":"525. Contiguous Array","sidebar_label":"525. Contiguous Array","tags":["Leetcode Medium","Prefix Sum"]},"sidebar":"docSidebar","previous":{"title":"523. Continuous Subarray Sum","permalink":"/docs/leetcode/501-1000/continuous_subarray_sum"},"next":{"title":"528. Random Pick with Weight","permalink":"/docs/leetcode/501-1000/random_pick_with_weight"}}');var i=t(74848),s=t(28453);const r={title:"525. Contiguous Array",sidebar_label:"525. Contiguous Array",tags:["Leetcode Medium","Prefix Sum"]},c=void 0,u={},a=[{value:"Python",id:"python",level:2},{value:"Prefix Sum",id:"prefix-sum",level:3}];function l(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/contiguous-array/",children:"https://leetcode.com/problems/contiguous-array/"})}),"\n",(0,i.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,i.jsx)(n.h3,{id:"prefix-sum",children:"Prefix Sum"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"first_seem"})," key is difference btw zero_count and one_count, value is the first seem index"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"fist_seem"})," inital with ",(0,i.jsx)(n.code,{children:"0 -> -1"})," to ensure the first place able to be calculated from next ",(0,i.jsx)(n.code,{children:"0"}),"s"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def findMaxLength(self, nums: List[int]) -> int:\n        first_seem = {0: -1}\n\n        zero_count = 0\n        one_count = 0\n\n        ans = 0\n\n        for index, num in enumerate(nums):\n            if num == 0:\n                zero_count += 1\n            else:\n                one_count += 1\n\n            diff = zero_count - one_count\n            if diff in first_seem:\n                ans = max(ans, index - first_seem[diff])\n            else:\n                first_seem[diff] = index\n\n        return ans\n"})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var o=t(96540);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);