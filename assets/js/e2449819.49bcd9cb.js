"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[3993],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=p(t),m=o,f=d["".concat(l,".").concat(m)]||d[m]||s[m]||i;return t?r.createElement(f,a(a({ref:n},u),{},{components:t})):r.createElement(f,a({ref:n},u))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var p=2;p<i;p++)a[p]=t[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},80392:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return u}});var r=t(87462),o=t(63366),i=(t(67294),t(3905)),a=["components"],c={title:"322. Coin Change",sidebar_label:"322. Coin Change",tags:["Leetcode Medium","DP","TODO"]},l=void 0,p={unversionedId:"leetcode/1-500/coin_change",id:"leetcode/1-500/coin_change",title:"322. Coin Change",description:"https://leetcode.com/problems/coin-change/",source:"@site/docs/leetcode/1-500/322_coin_change.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/coin_change",permalink:"/docs/leetcode/1-500/coin_change",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/322_coin_change.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"DP",permalink:"/docs/tags/dp"},{label:"TODO",permalink:"/docs/tags/todo"}],version:"current",sidebarPosition:322,frontMatter:{title:"322. Coin Change",sidebar_label:"322. Coin Change",tags:["Leetcode Medium","DP","TODO"]},sidebar:"docSidebar",previous:{title:"314. Binary Tree Vertical Order Traversal",permalink:"/docs/leetcode/1-500/binary_tree_vertical_order_traversal"},next:{title:"328. Odd Even Linked List",permalink:"/docs/leetcode/1-500/odd_even_linklist"}},u=[{value:"Python",id:"python",children:[{value:"DP",id:"dp",children:[],level:3}],level:2}],s={toc:u};function d(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/coin-change/"},"https://leetcode.com/problems/coin-change/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"dp"},"DP"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Time: O(amount * C)"),(0,i.kt)("li",{parentName:"ul"},"Space: O(amount)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from math import inf\n\n\nclass Solution:\n    def coinChange(self, coins: List[int], amount: int) -> int:\n        mapper = [inf] * (amount+1)\n\n        mapper[0] = 0\n        for i in range(1, amount+1):\n            for coin in coins:\n                if i >= coin:\n                    mapper[i] = min(mapper[i], mapper[i-coin]+1)\n\n        if mapper[amount] == inf:\n            return -1\n\n        return mapper[amount]\n")))}d.isMDXComponent=!0}}]);