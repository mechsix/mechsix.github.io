"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[83127],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=u(n),s=a,k=m["".concat(p,".").concat(s)]||m[s]||c[s]||l;return n?r.createElement(k,i(i({ref:t},d),{},{components:n})):r.createElement(k,i({ref:t},d))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=s;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[m]="string"==typeof e?e:a,i[1]=o;for(var u=2;u<l;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},24103:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var r=n(87462),a=(n(67294),n(3905));const l={title:"343. Integer Break",sidebar_label:"343. Integer Break",tags:["Leetcode Medium","DP"]},i=void 0,o={unversionedId:"leetcode/1-500/integer_break",id:"leetcode/1-500/integer_break",title:"343. Integer Break",description:"Python",source:"@site/docs/leetcode/1-500/343_integer_break.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/integer_break",permalink:"/docs/leetcode/1-500/integer_break",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/343_integer_break.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"DP",permalink:"/docs/tags/dp"}],version:"current",sidebarPosition:343,frontMatter:{title:"343. Integer Break",sidebar_label:"343. Integer Break",tags:["Leetcode Medium","DP"]},sidebar:"docSidebar",previous:{title:"342. Power of Four",permalink:"/docs/leetcode/1-500/power_of_4"},next:{title:"344. Reverse String",permalink:"/docs/leetcode/1-500/reverse_string"}},p={},u=[{value:"Python",id:"python",level:2},{value:"Top-Down DP",id:"top-down-dp",level:3},{value:"3s",id:"3s",level:3}],d={toc:u},m="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("h3",{id:"top-down-dp"},"Top-Down DP"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from math import inf\nfrom functools import cache\n\n\nclass Solution:\n    def integerBreak(self, n: int) -> int:\n        @cache\n        def dp(k):\n            if k == 1:\n                return 1\n\n            result = -inf\n            for i in range(1, k):\n                result = max(result, i * dp(k-i), i*(k-i))\n            return result\n        return dp(n)\n")),(0,a.kt)("h3",{id:"3s"},"3s"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Time: O(logN), Space: O(1), \u7b97\u6bd4\u8f03\u5feb\u7684\u89e3\u6cd5"),(0,a.kt)("li",{parentName:"ul"},"\u4e4d\u770b\u4e4b\u4e0b\u6c92\u6709\u898f\u5247\uff0c\u4f46\u628a",(0,a.kt)("inlineCode",{parentName:"li"},"n<10"),"\u62c6\u5b8c\u6703\u767c\u73fe\u898f\u5f8b",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"\u56e0\u70ba",(0,a.kt)("inlineCode",{parentName:"li"},"2*2 > 1*3"),"\uff0c\u76e1\u53ef\u80fd\u5c074\u5206\u89e3\u6210",(0,a.kt)("inlineCode",{parentName:"li"},"2*2"))))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/integer-break/solutions/4135679/93-65-why-3s/"},"\u53c3\u8003"))),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"n"),(0,a.kt)("th",{parentName:"tr",align:null},"breaks"),(0,a.kt)("th",{parentName:"tr",align:null},"memo"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"2"),(0,a.kt)("td",{parentName:"tr",align:null},"1+1"),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"3"),(0,a.kt)("td",{parentName:"tr",align:null},"1+2"),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"4"),(0,a.kt)("td",{parentName:"tr",align:null},"2+2"),(0,a.kt)("td",{parentName:"tr",align:null},"\u4e0d\u8981\u62c6\u62101+3")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"5"),(0,a.kt)("td",{parentName:"tr",align:null},"2+3"),(0,a.kt)("td",{parentName:"tr",align:null},"\u4ee5\u4e0b\u958b\u59cb\u5faa\u74b0")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"6"),(0,a.kt)("td",{parentName:"tr",align:null},"3+3"),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"7"),(0,a.kt)("td",{parentName:"tr",align:null},"3+2+2"),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"8"),(0,a.kt)("td",{parentName:"tr",align:null},"3+3+2"),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"9"),(0,a.kt)("td",{parentName:"tr",align:null},"3+3+3"),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"10"),(0,a.kt)("td",{parentName:"tr",align:null},"3+3+2+2"),(0,a.kt)("td",{parentName:"tr",align:null})))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def integerBreak(self, n: int) -> int:\n        if n <= 3:\n            return n - 1\n\n        pow, remain = divmod(n, 3)\n\n        if remain == 0:\n            return 3 ** pow\n\n        if remain == 1:\n            return 3 ** (pow-1) * 4\n\n        return 3 ** pow * 2\n")))}c.isMDXComponent=!0}}]);