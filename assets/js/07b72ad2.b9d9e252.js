"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[83116],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>y});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(t),f=a,y=p["".concat(c,".").concat(f)]||p[f]||d[f]||o;return t?r.createElement(y,i(i({ref:n},u),{},{components:t})):r.createElement(y,i({ref:n},u))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=f;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},38593:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=t(87462),a=(t(67294),t(3905));const o={title:"941. Valid Mountain Array",sidebar_label:"941. Valid Mountain Array",tags:["Leetcode Easy"]},i=void 0,l={unversionedId:"leetcode/501-1000/valid_mountain_array",id:"leetcode/501-1000/valid_mountain_array",title:"941. Valid Mountain Array",description:"Python",source:"@site/docs/leetcode/501-1000/941_valid_mountain_array.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/valid_mountain_array",permalink:"/docs/leetcode/501-1000/valid_mountain_array",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/941_valid_mountain_array.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"}],version:"current",sidebarPosition:941,frontMatter:{title:"941. Valid Mountain Array",sidebar_label:"941. Valid Mountain Array",tags:["Leetcode Easy"]},sidebar:"docSidebar",previous:{title:"938. Range Sum of BST",permalink:"/docs/leetcode/501-1000/range_sum_bst"},next:{title:"946. Validate Stack Sequences",permalink:"/docs/leetcode/501-1000/validate_stack_sequences"}},c={},s=[{value:"Python",id:"python",level:2},{value:"Single Loop Solution",id:"single-loop-solution",level:3},{value:"Break Loop Solution",id:"break-loop-solution",level:3}],u={toc:s},p="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("h3",{id:"single-loop-solution"},"Single Loop Solution"),(0,a.kt)("p",null,"335 ms, 15.4MB"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def validMountainArray(self, arr: List[int]) -> bool:\n        length = len(arr)\n        if length < 3:\n            return False\n\n        top_index = 0\n        is_reach_top = False\n        \n        for i in range(1, length):\n            # Increasing\n            if arr[i] > arr[i-1] and not is_reach_top:\n                top_index = i\n                continue\n\n            # Decreasing\n            if arr[i] < arr[i-1]:\n                is_reach_top = True\n                continue\n\n            return False\n        \n        return top_index != 0 and top_index != length - 1\n")),(0,a.kt)("h3",{id:"break-loop-solution"},"Break Loop Solution"),(0,a.kt)("p",null,"192 ms, 15.6MB"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def validMountainArray(self, arr: List[int]) -> bool:\n        length = len(arr)\n        if length < 3:\n            return False\n\n        i = 0\n        while i < length-1:\n            if arr[i] < arr[i+1]:\n                i += 1\n            else:\n                break\n\n        if i == 0 or i == length-1:\n            return False\n\n        while i < length-1:\n            if arr[i] > arr[i+1]:\n                i += 1\n            else:\n                break\n\n        return i == length-1\n")))}d.isMDXComponent=!0}}]);