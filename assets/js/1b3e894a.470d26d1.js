"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[65482],{62084:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var l=t(74848),s=t(28453);const o={title:"2. Add Two Numbers",sidebar_label:"2. Add Two Numbers",tags:["Leetcode Medium"]},r=void 0,i={id:"leetcode/1-500/add_two_numbers",title:"2. Add Two Numbers",description:"https://leetcode.com/problems/add-two-numbers",source:"@site/docs/leetcode/1-500/2_add_two_numbers.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/add_two_numbers",permalink:"/docs/leetcode/1-500/add_two_numbers",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"}],version:"current",sidebarPosition:2,frontMatter:{title:"2. Add Two Numbers",sidebar_label:"2. Add Two Numbers",tags:["Leetcode Medium"]},sidebar:"docSidebar",previous:{title:"1. Two Sum",permalink:"/docs/leetcode/1-500/two_sum"},next:{title:"3. Longest Substring Without Repeating Characters",permalink:"/docs/leetcode/1-500/longest_no_repeat_substring"}},a={},c=[{value:"Python",id:"python",level:2},{value:"Convert to list then calculate back",id:"convert-to-list-then-calculate-back",level:3},{value:"One-pass Linked List travsal",id:"one-pass-linked-list-travsal",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://leetcode.com/problems/add-two-numbers",children:"https://leetcode.com/problems/add-two-numbers"})}),"\n",(0,l.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,l.jsx)(n.h3,{id:"convert-to-list-then-calculate-back",children:"Convert to list then calculate back"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from typing import Optional, List\n\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\n\nclass Solution:\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\n        list1, list2 = [], []\n\n        while l1.next is not None:\n            list1.append(l1.val)\n            l1 = l1.next\n        list1.append(l1.val)\n\n        while l2.next is not None:\n            list2.append(l2.val)\n            l2 = l2.next\n        list2.append(l2.val)\n\n        result = list(str(\n            int(''.join([str(i) for i in list1[::-1]])) + \\\n            int(''.join([str(i) for i in list2[::-1]]))\n        ))\n\n        head = ListNode(val=result.pop(), next=None)\n        cur = head\n        while result:\n            cur.next = ListNode(val=result.pop(), next=None)\n            cur = cur.next\n\n        return head\n"})}),"\n",(0,l.jsx)(n.h3,{id:"one-pass-linked-list-travsal",children:"One-pass Linked List travsal"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\n        dummy_head = ListNode()\n        cur = dummy_head\n        \n        cur1, cur2 = l1, l2\n        carry = 0\n        while cur1 or cur2:\n            if not cur1:\n                value = cur2.val + carry\n                cur2 = cur2.next\n            elif not cur2:\n                value = cur1.val + carry\n                cur1 = cur1.next\n            else:\n                value = cur1.val + cur2.val + carry\n                cur1 = cur1.next\n                cur2 = cur2.next\n\n            cur.next = ListNode(val=value%10)\n            carry = value // 10\n            cur = cur.next\n        \n        if carry:\n            cur.next = ListNode(val=carry)\n\n        return dummy_head.next\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var l=t(96540);const s={},o=l.createContext(s);function r(e){const n=l.useContext(o);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),l.createElement(o.Provider,{value:n},e.children)}}}]);