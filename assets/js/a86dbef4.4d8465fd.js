"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[8899],{33451:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=t(74848),o=t(28453);const i={title:"266. Palindrome Permutation",sidebar_label:"266. Palindrome Permutation",tags:["Leetcode Easy","Rust","CTCI"]},s=void 0,l={id:"leetcode/1-500/palindrome_permutation",title:"266. Palindrome Permutation",description:"https://leetcode.com/problems/palindrome-permutation",source:"@site/docs/leetcode/1-500/266_palindrome_permutation.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/palindrome_permutation",permalink:"/docs/leetcode/1-500/palindrome_permutation",draft:!1,unlisted:!1,tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Rust",permalink:"/docs/tags/rust"},{label:"CTCI",permalink:"/docs/tags/ctci"}],version:"current",sidebarPosition:266,frontMatter:{title:"266. Palindrome Permutation",sidebar_label:"266. Palindrome Permutation",tags:["Leetcode Easy","Rust","CTCI"]},sidebar:"docSidebar",previous:{title:"263. Ugly Number",permalink:"/docs/leetcode/1-500/ugly_number"},next:{title:"268. Missing Number",permalink:"/docs/leetcode/1-500/missing_number"}},a={},c=[{value:"Python",id:"python",level:2},{value:"Rust",id:"rust",level:2}];function u(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/palindrome-permutation",children:"https://leetcode.com/problems/palindrome-permutation"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"CTCI 1.4 Palindrome Permutation"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from collections import Counter\n\n\nclass Solution:\n    def canPermutePalindrome(self, s: str) -> bool:\n        counter = Counter(s)\n\n        see_center = False\n        for count in counter.values():\n            if count %2 == 0:\n                continue\n\n            if see_center:\n                return False\n\n            see_center = True\n\n        return True\n"})}),"\n",(0,r.jsx)(n.h2,{id:"rust",children:"Rust"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"impl Solution {\n    pub fn can_permute_palindrome(s: String) -> bool {\n        let mut mapper = [0; 26];\n        for i in s.as_bytes().iter() {\n            mapper[(i-b'a') as usize] += 1\n        }\n\n        let mut see_center = false;\n\n        for i in 0..mapper.len() {\n            let count = mapper[i];\n            if count %2 == 0 {\n                continue;\n            }\n\n            if see_center {\n                return false;\n            }\n\n            see_center = true;\n        }\n\n        true\n    }\n}\n"})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var r=t(96540);const o={},i=r.createContext(o);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);