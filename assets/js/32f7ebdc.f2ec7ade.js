"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[3027],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return p}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var a=n.createContext({}),s=function(e){var t=n.useContext(a),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(a.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),f=s(r),p=o,b=f["".concat(a,".").concat(p)]||f[p]||d[p]||i;return r?n.createElement(b,l(l({ref:t},u),{},{components:r})):n.createElement(b,l({ref:t},u))}));function p(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,l=new Array(i);l[0]=f;var c={};for(var a in t)hasOwnProperty.call(t,a)&&(c[a]=t[a]);c.originalType=e,c.mdxType="string"==typeof e?e:o,l[1]=c;for(var s=2;s<i;s++)l[s]=r[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},84495:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return c},contentTitle:function(){return a},metadata:function(){return s},toc:function(){return u},default:function(){return f}});var n=r(87462),o=r(63366),i=(r(67294),r(3905)),l=["components"],c={title:"605. Can Place Flowers",sidebar_label:"605. Can Place Flowers",tags:["Leetcode Easy","Leetcode Fail Review"]},a=void 0,s={unversionedId:"leetcode/501-1000/place_flowers",id:"leetcode/501-1000/place_flowers",title:"605. Can Place Flowers",description:"Python",source:"@site/docs/leetcode/501-1000/605_place_flowers.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/place_flowers",permalink:"/docs/leetcode/501-1000/place_flowers",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/605_place_flowers.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Leetcode Fail Review",permalink:"/docs/tags/leetcode-fail-review"}],version:"current",sidebarPosition:605,frontMatter:{title:"605. Can Place Flowers",sidebar_label:"605. Can Place Flowers",tags:["Leetcode Easy","Leetcode Fail Review"]},sidebar:"docSidebar",previous:{title:"557. Reverse Words in a String III",permalink:"/docs/leetcode/501-1000/reverse_words_in_string_iii"},next:{title:"617. Merge Two Binary Trees",permalink:"/docs/leetcode/501-1000/merge_two_binary_trees"}},u=[{value:"Python",id:"python",children:[],level:2}],d={toc:u};function f(e){var t=e.components,r=(0,o.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:\n        if not n:\n            return True\n\n        flowerbed = [0] + flowerbed + [0]\n\n        i = 1\n        while i < len(flowerbed)-1:\n            if flowerbed[i] == 1:\n                i += 1\n                continue\n\n            if flowerbed[i-1] == 0 and flowerbed[i+1] == 0:\n                n -= 1\n                flowerbed[i] = 1\n                if n == 0:\n                    return True\n            i += 1\n\n        return False\n")))}f.isMDXComponent=!0}}]);