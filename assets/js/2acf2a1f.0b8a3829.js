"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[34325],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return f}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),c=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=c(e.components);return r.createElement(p.Provider,{value:n},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),s=c(t),d=o,f=s["".concat(p,".").concat(d)]||s[d]||m[d]||a;return t?r.createElement(f,i(i({ref:n},l),{},{components:t})):r.createElement(f,i({ref:n},l))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var u={};for(var p in n)hasOwnProperty.call(n,p)&&(u[p]=n[p]);u.originalType=e,u[s]="string"==typeof e?e:o,i[1]=u;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},74887:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return i},default:function(){return s},frontMatter:function(){return a},metadata:function(){return u},toc:function(){return c}});var r=t(83117),o=(t(67294),t(3905));const a={title:"55. Jump Game",sidebar_label:"55. Jump Game",tags:["Leetcode Medium","DP"]},i=void 0,u={unversionedId:"leetcode/1-500/jump_gamp",id:"leetcode/1-500/jump_gamp",title:"55. Jump Game",description:"https://leetcode.com/problems/jump-game/",source:"@site/docs/leetcode/1-500/55_jump_gamp.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/jump_gamp",permalink:"/docs/leetcode/1-500/jump_gamp",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/55_jump_gamp.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"DP",permalink:"/docs/tags/dp"}],version:"current",sidebarPosition:55,frontMatter:{title:"55. Jump Game",sidebar_label:"55. Jump Game",tags:["Leetcode Medium","DP"]},sidebar:"docSidebar",previous:{title:"54. Spiral Matrix",permalink:"/docs/leetcode/1-500/spiral_matrix"},next:{title:"56. Merge Intervals",permalink:"/docs/leetcode/1-500/merge_intervals"}},p={},c=[{value:"Python",id:"python",level:2},{value:"Bottom Up DP",id:"bottom-up-dp",level:3},{value:"Top Down DP",id:"top-down-dp",level:3},{value:"Javascript",id:"javascript",level:2}],l={toc:c};function s(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/jump-game/"},"https://leetcode.com/problems/jump-game/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"bottom-up-dp"},"Bottom Up DP"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def canJump(self, nums: List[int]) -> bool:\n        if len(nums) < 2:\n            return True\n\n        dp = [0] * (len(nums)-1)\n        dp[0] = nums[0]\n\n        for i in range(1, len(nums)-1):\n            if dp[i-1] < i:\n                return False\n            dp[i] = max(dp[i-1], i+nums[i])\n\n        return dp[-1] >= (len(nums)-1)\n")),(0,o.kt)("h3",{id:"top-down-dp"},"Top Down DP"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from functools import cache\n\n\nclass Solution:\n    def canJump(self, nums: List[int]) -> bool:\n        @cache\n        def dp(i):\n            if i >= len(nums)-1:\n                return True\n\n            for dest in range(i+1, i+nums[i]+1):\n                reached = dp(dest)\n                if reached:\n                    return True\n            return False\n\n        return dp(0)\n")),(0,o.kt)("h2",{id:"javascript"},"Javascript"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar canJump = function(nums) {\n\n    function recursive(idx, memo = {}) {\n        if (memo.hasOwnProperty(idx)) return memo[idx];\n        if (idx === nums.length - 1) return true;\n\n        const steps = nums[idx];\n\n        for (let step = 1; step <= steps; step++) {\n            const nextStep = idx + step;\n\n            if (recursive(nextStep, memo)) {\n                memo[idx] = true;\n                return true;\n            }\n        }\n\n        memo[idx] = false;\n        return false;\n    }\n\n    return recursive(0);\n};\n")))}s.isMDXComponent=!0}}]);