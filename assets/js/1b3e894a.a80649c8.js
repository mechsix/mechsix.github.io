"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[70123],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=s(n),m=o,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||l;return n?r.createElement(f,a(a({ref:t},u),{},{components:n})):r.createElement(f,a({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,a=new Array(l);a[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[d]="string"==typeof e?e:o,a[1]=i;for(var s=2;s<l;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},32553:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return a},default:function(){return d},frontMatter:function(){return l},metadata:function(){return i},toc:function(){return s}});var r=n(83117),o=(n(67294),n(3905));const l={title:"2. Add Two Numbers",sidebar_label:"2. Add Two Numbers",tags:["Leetcode Medium"]},a=void 0,i={unversionedId:"leetcode/1-500/add_two_numbers",id:"leetcode/1-500/add_two_numbers",title:"2. Add Two Numbers",description:"https://leetcode.com/problems/add-two-numbers",source:"@site/docs/leetcode/1-500/2_add_two_numbers.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/add_two_numbers",permalink:"/docs/leetcode/1-500/add_two_numbers",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/2_add_two_numbers.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"}],version:"current",sidebarPosition:2,frontMatter:{title:"2. Add Two Numbers",sidebar_label:"2. Add Two Numbers",tags:["Leetcode Medium"]},sidebar:"docSidebar",previous:{title:"1. Two Sum",permalink:"/docs/leetcode/1-500/two_sum"},next:{title:"3. Longest Substring Without Repeating Characters",permalink:"/docs/leetcode/1-500/longest_no_repeat_substring"}},c={},s=[{value:"Python",id:"python",level:2},{value:"Convert to list then calculate back",id:"convert-to-list-then-calculate-back",level:3},{value:"One-pass Linked List travsal",id:"one-pass-linked-list-travsal",level:3}],u={toc:s};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/add-two-numbers"},"https://leetcode.com/problems/add-two-numbers")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"convert-to-list-then-calculate-back"},"Convert to list then calculate back"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from typing import Optional, List\n\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\n\nclass Solution:\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\n        list1, list2 = [], []\n\n        while l1.next is not None:\n            list1.append(l1.val)\n            l1 = l1.next\n        list1.append(l1.val)\n\n        while l2.next is not None:\n            list2.append(l2.val)\n            l2 = l2.next\n        list2.append(l2.val)\n\n        result = list(str(\n            int(''.join([str(i) for i in list1[::-1]])) + \\\n            int(''.join([str(i) for i in list2[::-1]]))\n        ))\n\n        head = ListNode(val=result.pop(), next=None)\n        cur = head\n        while result:\n            cur.next = ListNode(val=result.pop(), next=None)\n            cur = cur.next\n\n        return head\n")),(0,o.kt)("h3",{id:"one-pass-linked-list-travsal"},"One-pass Linked List travsal"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\n        dummy_head = ListNode()\n        cur = dummy_head\n        \n        cur1, cur2 = l1, l2\n        carry = 0\n        while cur1 or cur2:\n            if not cur1:\n                value = cur2.val + carry\n                cur2 = cur2.next\n            elif not cur2:\n                value = cur1.val + carry\n                cur1 = cur1.next\n            else:\n                value = cur1.val + cur2.val + carry\n                cur1 = cur1.next\n                cur2 = cur2.next\n\n            cur.next = ListNode(val=value%10)\n            carry = value // 10\n            cur = cur.next\n        \n        if carry:\n            cur.next = ListNode(val=carry)\n\n        return dummy_head.next\n")))}d.isMDXComponent=!0}}]);