"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[32259],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>k});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=l(r),m=o,k=p["".concat(s,".").concat(m)]||p[m]||u[m]||a;return r?n.createElement(k,i(i({ref:t},d),{},{components:r})):n.createElement(k,i({ref:t},d))}));function k(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[p]="string"==typeof e?e:o,i[1]=c;for(var l=2;l<a;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},33026:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var n=r(87462),o=(r(67294),r(3905));const a={title:"25. Reverse Nodes in k-Group",sidebar_label:"25. Reverse Nodes in k-Group",tags:["Leetcode Hard","Linked List","Stack"]},i=void 0,c={unversionedId:"leetcode/1-500/reverse_nodes_in_k_group",id:"leetcode/1-500/reverse_nodes_in_k_group",title:"25. Reverse Nodes in k-Group",description:"https://leetcode.com/problems/reverse-nodes-in-k-group/",source:"@site/docs/leetcode/1-500/25_reverse_nodes_in_k_group.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/reverse_nodes_in_k_group",permalink:"/docs/leetcode/1-500/reverse_nodes_in_k_group",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/25_reverse_nodes_in_k_group.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"Linked List",permalink:"/docs/tags/linked-list"},{label:"Stack",permalink:"/docs/tags/stack"}],version:"current",sidebarPosition:25,frontMatter:{title:"25. Reverse Nodes in k-Group",sidebar_label:"25. Reverse Nodes in k-Group",tags:["Leetcode Hard","Linked List","Stack"]},sidebar:"docSidebar",previous:{title:"24. Swap Nodes in Pairs",permalink:"/docs/leetcode/1-500/swap_nodes_in_pairs"},next:{title:"26. Remove Duplicates from Sorted Array",permalink:"/docs/leetcode/1-500/rm_duplicate_from_sorted_array"}},s={},l=[{value:"Python",id:"python",level:2},{value:"Stack and detect length",id:"stack-and-detect-length",level:3}],d={toc:l},p="wrapper";function u(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/reverse-nodes-in-k-group/"},"https://leetcode.com/problems/reverse-nodes-in-k-group/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"stack-and-detect-length"},"Stack and detect length"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Time: O(N+k)"),(0,o.kt)("li",{parentName:"ul"},"Space: O(k)  # Used on the stack")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'class Solution:\n    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        if k < 2:\n            # If k == 1, nothing to be changed\n            return head\n\n        stack = []\n        dummy = ListNode(next=head)\n\n        # gpre stands for group pervious pointer\n        gpre, cur = dummy, head\n\n        while cur:\n            stack.append(cur)\n\n            if len(stack) % k == 0:\n                # Nodes in stack is ready to be reversed\n                origin_next = cur.next\n                print("Reversing {} -> {} -> {}:".format(\n                    gpre.val,\n                    [node.val for node in stack],\n                    cur.next.val if cur.next else None\n                ))\n\n                # Dummy head of the reversing part\n                rhead = ListNode()\n                rcur = rhead\n                while stack:\n                    rcur.next = stack.pop()\n                    rcur = rcur.next\n                    rcur.next = None # To prevent loop, add back after while\n\n                # The rcur now point to the new end of the reversed linked list\n                # Maintain the pointers\n                rcur.next = origin_next\n                gpre.next = rhead.next\n                gpre = rcur\n                cur = rcur.next\n            else:\n                cur = cur.next\n\n        return dummy.next\n')))}u.isMDXComponent=!0}}]);