"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[92514],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>g});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=u(n),p=o,g=d["".concat(l,".").concat(p)]||d[p]||m[p]||i;return n?r.createElement(g,a(a({ref:t},s),{},{components:n})):r.createElement(g,a({ref:t},s))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=p;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[d]="string"==typeof e?e:o,a[1]=c;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},83687:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var r=n(87462),o=(n(67294),n(3905));const i={title:"1351. Count Negative Numbers in a Sorted Matrix",sidebar_label:"1351. Count Negative Numbers in a Sorted Matrix",tags:["Leetcode Easy","Matrix","Go","Rust"]},a=void 0,c={unversionedId:"leetcode/1001-1500/count_negative_num_in_a_sorted_matrix",id:"leetcode/1001-1500/count_negative_num_in_a_sorted_matrix",title:"1351. Count Negative Numbers in a Sorted Matrix",description:"https://leetcode.com/problems/count-negative-numbers-in-a-sorted-matrix/",source:"@site/docs/leetcode/1001-1500/1351_count_negative_num_in_a_sorted_matrix.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/count_negative_num_in_a_sorted_matrix",permalink:"/docs/leetcode/1001-1500/count_negative_num_in_a_sorted_matrix",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1351_count_negative_num_in_a_sorted_matrix.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Matrix",permalink:"/docs/tags/matrix"},{label:"Go",permalink:"/docs/tags/go"},{label:"Rust",permalink:"/docs/tags/rust"}],version:"current",sidebarPosition:1351,frontMatter:{title:"1351. Count Negative Numbers in a Sorted Matrix",sidebar_label:"1351. Count Negative Numbers in a Sorted Matrix",tags:["Leetcode Easy","Matrix","Go","Rust"]},sidebar:"docSidebar",previous:{title:"1346. Check If N and Its Double Exist",permalink:"/docs/leetcode/1001-1500/check_n_and_its_double_in_arr"},next:{title:"1372. Longest ZigZag Path in a Binary Tree",permalink:"/docs/leetcode/1001-1500/longest_zigzag_path_in_binary_tree"}},l={},u=[{value:"Python",id:"python",level:2},{value:"Go",id:"go",level:2},{value:"Rust",id:"rust",level:2}],s={toc:u},d="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/count-negative-numbers-in-a-sorted-matrix/"},"https://leetcode.com/problems/count-negative-numbers-in-a-sorted-matrix/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution(object):\n    def countNegatives(self, grid):\n        m, n = len(grid), len(grid[0])\n\n        count = 0\n        for i in range(m):\n            if grid[i][0] < 0:\n                count += (m-i)*n\n                break\n\n            for j in range(n):\n                if grid[i][j] < 0:\n                    count += n-j\n                    break\n\n        return count\n")),(0,o.kt)("h2",{id:"go"},"Go"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"class Solution(object):\n    def countNegatives(self, grid):\n        m, n = len(grid), len(grid[0])\n\n        count = 0\n        for i in range(m):\n            if grid[i][0] < 0:\n                count += (m-i)*n\n                break\n\n            for j in range(n):\n                if grid[i][j] < 0:\n                    count += n-j\n                    break\n\n        return count\n")),(0,o.kt)("h2",{id:"rust"},"Rust"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"impl Solution {\n    pub fn count_negatives(grid: Vec<Vec<i32>>) -> i32 {\n        let m = grid.len();\n        let n = grid[0].len();\n\n        let mut count = 0;\n        for i in 0..m {\n            if grid[i][0] < 0 {\n                count += ((m-i) * n) as i32;\n                break;\n            }\n            for j in 0..n {\n                if grid[i][j] < 0 {\n                    count += (n-j) as i32;\n                    break;\n                }\n            }\n        }\n        count\n    }\n}\n")))}m.isMDXComponent=!0}}]);