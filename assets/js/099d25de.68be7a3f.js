"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[6780],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return f}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),a=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=a(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,c=e.originalType,l=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),p=a(t),f=o,m=p["".concat(l,".").concat(f)]||p[f]||u[f]||c;return t?r.createElement(m,i(i({ref:n},s),{},{components:t})):r.createElement(m,i({ref:n},s))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var c=t.length,i=new Array(c);i[0]=p;var d={};for(var l in n)hasOwnProperty.call(n,l)&&(d[l]=n[l]);d.originalType=e,d.mdxType="string"==typeof e?e:o,i[1]=d;for(var a=2;a<c;a++)i[a]=t[a];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},37746:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return d},contentTitle:function(){return l},metadata:function(){return a},toc:function(){return s},default:function(){return p}});var r=t(87462),o=t(63366),c=(t(67294),t(3905)),i=["components"],d={title:"535. Encode and Decode TinyURL",sidebar_label:"535. Encode and Decode TinyURL",tags:["Leetcode Medium"]},l=void 0,a={unversionedId:"leetcode/501-1000/encode_decode_tinyurl",id:"leetcode/501-1000/encode_decode_tinyurl",title:"535. Encode and Decode TinyURL",description:"Python",source:"@site/docs/leetcode/501-1000/535_encode_decode_tinyurl.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/encode_decode_tinyurl",permalink:"/docs/leetcode/501-1000/encode_decode_tinyurl",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/535_encode_decode_tinyurl.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"}],version:"current",sidebarPosition:535,frontMatter:{title:"535. Encode and Decode TinyURL",sidebar_label:"535. Encode and Decode TinyURL",tags:["Leetcode Medium"]},sidebar:"docSidebar",previous:{title:"528. Random Pick with Weight",permalink:"/docs/leetcode/501-1000/random_pick_with_weight"},next:{title:"540. Single Element in a Sorted Array",permalink:"/docs/leetcode/501-1000/single_elm_in_sotrted_array"}},s=[{value:"Python",id:"python",children:[],level:2}],u={toc:s};function p(e){var n=e.components,t=(0,o.Z)(e,i);return(0,c.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,c.kt)("h2",{id:"python"},"Python"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-python"},'import random\nfrom urllib.parse import urljoin\nfrom string import ascii_letters, digits\n\nclass Codec:\n    CHARS = ascii_letters + digits\n    BASE_URL = \'https://tinyurl.com/\'\n\n    def __init__(self):\n        self.mapper = dict()\n        self.used = set()\n\n    def _generate(self):\n        return \'\'.join([random.choice(self.CHARS) for i in range(8)])\n\n    def encode(self, longUrl: str) -> str:\n        """Encodes a URL to a shortened URL.\n        """\n        cand = self._generate()\n        while cand in self.used:\n            cand = self._generate()\n\n        url = urljoin(self.BASE_URL, cand)\n        self.mapper[url] = longUrl\n        self.used.add(cand)\n        return url\n\n    def decode(self, shortUrl: str) -> str:\n        """Decodes a shortened URL to its original URL.\n        """\n        if shortUrl not in self.mapper:\n            return\n        return self.mapper[shortUrl]\n\n# Your Codec object will be instantiated and called as such:\n# codec = Codec()\n# codec.decode(codec.encode(url))\n')))}p.isMDXComponent=!0}}]);