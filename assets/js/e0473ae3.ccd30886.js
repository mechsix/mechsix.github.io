"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[1931],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>b});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=l(n),d=i,b=p["".concat(s,".").concat(d)]||p[d]||m[d]||o;return n?r.createElement(b,c(c({ref:t},u),{},{components:n})):r.createElement(b,c({ref:t},u))}));function b(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,c=new Array(o);c[0]=d;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[p]="string"==typeof e?e:i,c[1]=a;for(var l=2;l<o;l++)c[l]=n[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},18579:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var r=n(87462),i=(n(67294),n(3905));const o={title:"334. Increasing Triplet Subsequence",sidebar_label:"334. Increasing Triplet Subsequence",tags:["Leetcode Medium","Greedy"]},c=void 0,a={unversionedId:"leetcode/1-500/increasing_triplet_subsequence",id:"leetcode/1-500/increasing_triplet_subsequence",title:"334. Increasing Triplet Subsequence",description:"https://leetcode.com/problems/increasing-triplet-subsequence/",source:"@site/docs/leetcode/1-500/334_increasing_triplet_subsequence.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/increasing_triplet_subsequence",permalink:"/docs/leetcode/1-500/increasing_triplet_subsequence",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/334_increasing_triplet_subsequence.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Greedy",permalink:"/docs/tags/greedy"}],version:"current",sidebarPosition:334,frontMatter:{title:"334. Increasing Triplet Subsequence",sidebar_label:"334. Increasing Triplet Subsequence",tags:["Leetcode Medium","Greedy"]},sidebar:"docSidebar",previous:{title:"329. Longest Increasing Path in a Matrix",permalink:"/docs/leetcode/1-500/longest_increasing_path_in_matrix"},next:{title:"336. Palindrome Pairs",permalink:"/docs/leetcode/1-500/palindrome_pairs"}},s={},l=[{value:"Python",id:"python",level:2}],u={toc:l},p="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/increasing-triplet-subsequence/"},"https://leetcode.com/problems/increasing-triplet-subsequence/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def increasingTriplet(self, nums: List[int]) -> bool:\n        if len(nums) < 3:\n            return False\n        \n        maximum = max(nums)\n        left, mid = maximum, maximum\n\n        for num in nums:\n            if num <= left:\n                left = num\n            elif num <= mid:\n                mid = num\n            else:\n                return True\n        \n        return False\n")))}m.isMDXComponent=!0}}]);