"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[8584],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=l(r),m=o,f=p["".concat(c,".").concat(m)]||p[m]||d[m]||s;return r?n.createElement(f,i(i({ref:t},u),{},{components:r})):n.createElement(f,i({ref:t},u))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=r.length,i=new Array(s);i[0]=p;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var l=2;l<s;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},22430:function(e,t,r){r.r(t),r.d(t,{contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return u}});var n=r(87462),o=r(63366),s=(r(67294),r(3905)),i=["components"],a={title:"916. Word Subsets",sidebar_label:"916. Word Subsets",tags:["Leetcode Medium","Hash"]},c=void 0,l={unversionedId:"leetcode/501-1000/word_subsets",id:"leetcode/501-1000/word_subsets",title:"916. Word Subsets",description:"https://leetcode.com/problems/word-subsets/",source:"@site/docs/leetcode/501-1000/916_word_subsets.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/word_subsets",permalink:"/docs/leetcode/501-1000/word_subsets",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/916_word_subsets.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Hash",permalink:"/docs/tags/hash"}],version:"current",sidebarPosition:916,frontMatter:{title:"916. Word Subsets",sidebar_label:"916. Word Subsets",tags:["Leetcode Medium","Hash"]},sidebar:"docSidebar",previous:{title:"905. Sort Array By Parity",permalink:"/docs/leetcode/501-1000/sort_array_by_parity"},next:{title:"931. Minimum Falling Path Sum",permalink:"/docs/leetcode/501-1000/minimum_falling_path_sum"}},u=[{value:"Python",id:"python",children:[],level:2}],d={toc:u};function p(e){var t=e.components,r=(0,o.Z)(e,i);return(0,s.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/word-subsets/"},"https://leetcode.com/problems/word-subsets/")),(0,s.kt)("h2",{id:"python"},"Python"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"\u6ce8\u610fwords2\u88e1\u9762\u53ef\u80fd\u55ae\u4e00\u500bword\u6709\u591a\u500bcharacter\uff0c\u4f8b\u5982",(0,s.kt)("inlineCode",{parentName:"li"},"oo"),"\u5982\u679c\u5b58\u5728\uff0c",(0,s.kt)("inlineCode",{parentName:"li"},"o"),"\u7684\u8a08\u7b97\u5176\u5be6\u7121\u95dc\u7dca\u8981")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"from collections import Counter, defaultdict\n\n\nclass Solution:\n    def wordSubsets(self, words1: List[str], words2: List[str]) -> List[str]:\n        map2 = defaultdict(int)\n        for word in words2:\n            for letter, count in Counter(word).items():\n                map2[letter] = max(map2[letter], count)\n\n        result = []\n        for word in words1:\n            map1 = Counter(word)\n            for letter, count in map2.items():\n                if count > map1.get(letter, 0):\n                    break\n            else:\n                result.append(word)\n        return result\n")))}p.isMDXComponent=!0}}]);