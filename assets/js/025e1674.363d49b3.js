"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[23019],{9249:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>a,frontMatter:()=>i,metadata:()=>o,toc:()=>m});var s=t(74848),r=t(28453);const i={title:"15. 3Sum",sidebar_label:"15. 3Sum",tags:["Leetcode Medium","Number Sum","Prefix Sum","Two Pointer"]},l=void 0,o={id:"leetcode/1-500/three_sum",title:"15. 3Sum",description:"https://leetcode.com/problems/3sum",source:"@site/docs/leetcode/1-500/15_three_sum.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/three_sum",permalink:"/docs/leetcode/1-500/three_sum",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Number Sum",permalink:"/docs/tags/number-sum"},{label:"Prefix Sum",permalink:"/docs/tags/prefix-sum"},{label:"Two Pointer",permalink:"/docs/tags/two-pointer"}],version:"current",sidebarPosition:15,frontMatter:{title:"15. 3Sum",sidebar_label:"15. 3Sum",tags:["Leetcode Medium","Number Sum","Prefix Sum","Two Pointer"]},sidebar:"docSidebar",previous:{title:"14. Longest Common Prefix",permalink:"/docs/leetcode/1-500/longest_common_prefix"},next:{title:"16. 3Sum Closest",permalink:"/docs/leetcode/1-500/three_sum_closest"}},u={},m=[{value:"Python",id:"python",level:2},{value:"Three Pointers",id:"three-pointers",level:3},{value:"Brute Force (Timelimit Exceed)",id:"brute-force-timelimit-exceed",level:3},{value:"Prefix Sum",id:"prefix-sum",level:3},{value:"Javascript",id:"javascript",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/3sum",children:"https://leetcode.com/problems/3sum"})}),"\n",(0,s.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,s.jsx)(n.h3,{id:"three-pointers",children:"Three Pointers"}),"\n",(0,s.jsx)(n.p,{children:"\u5927\u6982\u5c31\u662fTwo Pointer\u7684Two Pointer\uff0c\u5148\u6392\u5e8f\u904e\u518d\u7528\u4e09\u500b\u6307\u6a19\u8d70\u8a2a"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"L: \u5de6\u754c"}),"\n",(0,s.jsx)(n.li,{children:"M: \u5f9eL+1\u79fb\u52d5\u5230R-1"}),"\n",(0,s.jsx)(n.li,{children:"R: \u53f3\u754c\uff0c\u7bc4\u570d\u5167\u7684\u6700\u5927\u503c"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["\u6392\u5e8f\u904e\uff0c\u6240\u4ee5\u53ef\u4ee5\u5229\u7528\u7576\u4e0b\u7684",(0,s.jsx)(n.code,{children:"total"}),"\u5927\u65bc\u5c0f\u65bc0\u7684\u95dc\u4fc2\uff0c\u6c7a\u5b9a\u8981\u79fb\u52d5\u54ea\u4e00\u500bpointer (m or r)"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",metastring:'title="Origin Version which prevent duplicate via set(tuple)"',children:"class Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        if len(nums) < 3:\n            return []\n\n        nums.sort()\n        result = set()\n\n        for l in range(0, len(nums)-2):\n            m = l + 1\n            r = len(nums)-1\n\n            while m < r:\n                total = sum([nums[l], nums[m], nums[r]])\n\n                if total == 0:\n                    result.add((nums[l], nums[m], nums[r]))\n                    # Move m, r at the same time is ok, because the l has its own loop\n                    m += 1\n                    r -= 1\n                elif total < 0:\n                    # Total too small, increase it from increment the cur (the m)\n                    m += 1\n                else:\n                    # Total too large, reduce it from decreasing the upbound\n                    r -= 1\n\n        return list(result)\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",metastring:'title="Skip duplicate values with result in array"',children:"class Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        if len(nums) < 3:\n            return []\n\n        nums.sort()\n        result = []\n\n        for l in range(0, len(nums)-2):\n            if l > 0 and nums[l] == nums[l-1]:\n                continue\n\n            m = l + 1\n            r = len(nums)-1\n\n            while m < r:\n                if m > l+1 and nums[m] == nums[m-1]:\n                    m += 1\n                    continue\n\n                total = sum([nums[l], nums[m], nums[r]])\n\n                if total == 0:\n                    result.append([nums[l], nums[m], nums[r]])\n                    m += 1\n                    r -= 1\n                elif total < 0:\n                    m += 1\n                else:\n                    r -= 1\n\n        return result\n"})}),"\n",(0,s.jsx)(n.h3,{id:"brute-force-timelimit-exceed",children:"Brute Force (Timelimit Exceed)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from itertools import combinations\n\n\nclass Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        if len(nums) < 3:\n            return []\n\n        combs = set()\n        for comb in combinations(nums, r=3):\n            combs.add(tuple(sorted(comb)))\n\n\n        return [comb for comb in combs if sum(comb) == 0]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"prefix-sum",children:"Prefix Sum"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"No-Sort solution"}),"\n",(0,s.jsxs)(n.li,{children:["Idea of ",(0,s.jsx)(n.code,{children:"seen"})," hashmap is pre-calcualted memory, which like prefix-sum"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        if len(nums) < 3:\n            return []\n\n        result = set()\n        duplicates = set() # Prevent edge case, e.g. 3000 zerons\n        seen = dict()  # key: remains to 0; value: index\n\n        for i, first in enumerate(nums):\n            if first in duplicates:\n                continue\n\n            duplicates.add(first)\n            for j, second in enumerate(nums[i+1:]):\n                remains = 0 - (first + second)\n                if seen.get(remains) == i:\n                    result.add(tuple(sorted([first, second, remains])))\n                seen[second] = i\n        return result\n"})}),"\n",(0,s.jsx)(n.h2,{id:"javascript",children:"Javascript"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"var threeSum = function(nums = []) {\n  const sortedNums = [...nums].sort((a, b) => a - b);\n  let result = []\n\n  for (let i = 0; i < sortedNums.length; i++) {\n    if (sortedNums[i - 1] !== sortedNums[i]) {\n      const target = sortedNums[i];\n      console.log(target, i+ 1, sortedNums.length - 1)\n      const res = calc(-target, i + 1, sortedNums.length - 1, sortedNums);\n      if (res.length) result = result.concat(res);\n    }\n\t}\n  return result;\n};\n\nconst calc = (target, left, right, nums) => {\n  const res = [];\n\n\twhile (left < right) {\n\t\tif (target === nums[left] + nums[right]) {\n\t\t\tres.push([-target, nums[left++], nums[right--]]);\n      while(left < right && nums[left - 1] === nums[left]) {\n        left++;\n      }\n\t\t} else if (target > nums[left] + nums[right]) {\n\t\t\tleft++;\n\t\t} else {\n\t\t\tright--;\n\t\t}\n\t}\n\n\treturn res;\n}\n"})})]})}function a(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var s=t(96540);const r={},i=s.createContext(r);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);