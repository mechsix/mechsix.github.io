"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[42507],{63934:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var i=t(74848),s=t(28453);const r={title:"1209. Remove All Adjacent Duplicates in String II",sidebar_label:"1209. Remove All Adjacent Duplicates in String II",tags:["Leetcode Medium","Stack"]},c=void 0,a={id:"leetcode/1001-1500/remove_all_adjacent_duplicates_in_string_ii",title:"1209. Remove All Adjacent Duplicates in String II",description:"Python",source:"@site/docs/leetcode/1001-1500/1209_remove_all_adjacent_duplicates_in_string_ii.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/remove_all_adjacent_duplicates_in_string_ii",permalink:"/docs/leetcode/1001-1500/remove_all_adjacent_duplicates_in_string_ii",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Stack",permalink:"/docs/tags/stack"}],version:"current",sidebarPosition:1209,frontMatter:{title:"1209. Remove All Adjacent Duplicates in String II",sidebar_label:"1209. Remove All Adjacent Duplicates in String II",tags:["Leetcode Medium","Stack"]},sidebar:"docSidebar",previous:{title:"1202. Smallest String With Swaps",permalink:"/docs/leetcode/1001-1500/smallest_string_with_swaps"},next:{title:"1217. Min Cost Move to Same Pos",permalink:"/docs/leetcode/1001-1500/min_cost_move_chips_to_same_pos"}},o={},l=[{value:"Python",id:"python",level:2},{value:"Recusive (Timelimit Exceed)",id:"recusive-timelimit-exceed",level:3},{value:"Count with Stack",id:"count-with-stack",level:3}];function d(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,i.jsx)(n.h3,{id:"recusive-timelimit-exceed",children:"Recusive (Timelimit Exceed)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from typing import List\n\n\nclass Solution:\n    def removeDuplicates(self, s: str, k: int) -> str:\n        remove_periods = self.find_remove_periods(s, k)\n        if not remove_periods:\n            return s\n\n        s_array = []\n        cur = 0\n        for start, end in remove_periods:\n            s_array.append(s[cur:start])\n            cur = end + 1\n        s_array.append(s[cur:])\n\n        return self.removeDuplicates(''.join(s_array), k)\n\n    def find_remove_periods(self, s: str, k: int) -> List:\n        pre = ''\n        count = k\n        remove_periods = []\n        for i, char in enumerate(s):\n            if char == pre:\n                count -= 1\n                if count == 1:\n                    remove_periods.append((i-k+1, i))\n            else:\n                count = k\n                pre = char\n        return remove_periods\n"})}),"\n",(0,i.jsx)(n.h3,{id:"count-with-stack",children:"Count with Stack"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Time: O(N)"}),"\n",(0,i.jsx)(n.li,{children:"Space: O(N)  # The addition space for stack"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def removeDuplicates(self, s: str, k: int) -> str:\n        stack = []\n\n        for i, char in enumerate(s):\n            if not stack:\n                stack.append([char, 1])\n                continue\n\n            if stack[-1][0] == char:\n                stack[-1][1] += 1\n            else:\n                stack.append([char, 1])\n\n            if stack[-1][1] == k:\n                stack.pop()\n\n        s_array = []\n        for char, count in stack:\n            s_array.append(char*count)\n\n        return ''.join(s_array)\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>a});var i=t(96540);const s={},r=i.createContext(s);function c(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);