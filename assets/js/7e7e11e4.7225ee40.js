"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[933],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return m}});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=l(t),m=i,f=p["".concat(s,".").concat(m)]||p[m]||u[m]||o;return t?r.createElement(f,a(a({ref:n},d),{},{components:t})):r.createElement(f,a({ref:n},d))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=p;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:i,a[1]=c;for(var l=2;l<o;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},63120:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return d}});var r=t(87462),i=t(63366),o=(t(67294),t(3905)),a=["components"],c={title:"1091. Shortest Path in Binary Matrix",sidebar_label:"1091. Shortest Path in Binary Matrix",tags:["Leetcode Medium","BFS","Matrix"]},s=void 0,l={unversionedId:"leetcode/1001-1500/shortest_path_in_binary_matrix",id:"leetcode/1001-1500/shortest_path_in_binary_matrix",title:"1091. Shortest Path in Binary Matrix",description:"https://leetcode.com/problems/shortest-path-in-binary-matrix/",source:"@site/docs/leetcode/1001-1500/1091_shortest_path_in_binary_matrix.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/shortest_path_in_binary_matrix",permalink:"/docs/leetcode/1001-1500/shortest_path_in_binary_matrix",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1091_shortest_path_in_binary_matrix.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"BFS",permalink:"/docs/tags/bfs"},{label:"Matrix",permalink:"/docs/tags/matrix"}],version:"current",sidebarPosition:1091,frontMatter:{title:"1091. Shortest Path in Binary Matrix",sidebar_label:"1091. Shortest Path in Binary Matrix",tags:["Leetcode Medium","BFS","Matrix"]},sidebar:"docSidebar",previous:{title:"1089. Duplicate Zeros",permalink:"/docs/leetcode/1001-1500/duplicate_zeros"},next:{title:"1094. Car Pooling",permalink:"/docs/leetcode/1001-1500/car_pooling"}},d=[{value:"Python",id:"python",children:[{value:"DFS with cache (Timelimit Exceed)",id:"dfs-with-cache-timelimit-exceed",children:[],level:3},{value:"BFS and remember the distance in place",id:"bfs-and-remember-the-distance-in-place",children:[],level:3}],level:2}],u={toc:d};function p(e){var n=e.components,t=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/shortest-path-in-binary-matrix/"},"https://leetcode.com/problems/shortest-path-in-binary-matrix/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"dfs-with-cache-timelimit-exceed"},"DFS with cache (Timelimit Exceed)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from math import inf\nfrom functools import cache\n\n\nclass Solution:\n    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:\n        if grid[0][0] != 0:\n            return -1\n\n        n = len(grid)\n        visited = set()\n        options = [\n            (1, 0), (-1, 0), (0, 1),   (0, -1),\n            (1, 1), (-1, 1), (-1, -1), (1, -1)\n        ]\n        min_cost = inf\n\n        @cache\n        def dfs(cost, row, col):\n            nonlocal min_cost\n\n            if row == n-1 and col == n-1:\n                min_cost = min(min_cost, cost)\n                return\n\n            if cost > min_cost:\n                return\n\n            for rx, cx in options:\n                nr, nc = row+rx, col+cx\n                if (nr, nc) not in visited \\\n                   and nr >= 0 and nr < n \\\n                   and nc >= 0 and nc < n \\\n                   and grid[nr][nc] == 0:\n                    # print((row, col), ">", (nr, nc), visited)\n                    visited.add((nr, nc))\n                    dfs(cost+1, nr, nc)\n                    visited.remove((nr, nc))\n\n        dfs(1, 0, 0)\n\n        return min_cost if min_cost != inf else -1\n')),(0,o.kt)("h3",{id:"bfs-and-remember-the-distance-in-place"},"BFS and remember the distance in place"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from collections import deque\n\n\nclass Solution:\n    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:\n        if grid[0][0] != 0:\n            return -1\n\n        n = len(grid)\n\n        directions = [\n            (1, 0), (-1, 0), (0, 1),   (0, -1),\n            (1, 1), (-1, 1), (-1, -1), (1, -1)\n        ]\n\n        queue = deque([(0, 0)])\n        grid[0][0] = 1\n\n        while queue:\n            row, col = queue.popleft()\n\n            if row == n-1 and col == n-1:\n                return grid[row][col]\n\n            for rx, cx in directions:\n                nr, nc = row+rx, col+cx\n                if nr >= 0 and nr < n \\\n                   and nc >= 0 and nc < n \\\n                   and grid[nr][nc] == 0:\n                    grid[nr][nc] = grid[row][col] + 1\n                    queue.append((nr, nc))\n\n        return -1\n")))}p.isMDXComponent=!0}}]);