"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[70549],{34113:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"leetcode/1-500/jump_gamp","title":"55. Jump Game","description":"https://leetcode.com/problems/jump-game/","source":"@site/docs/leetcode/1-500/55_jump_gamp.md","sourceDirName":"leetcode/1-500","slug":"/leetcode/1-500/jump_gamp","permalink":"/docs/leetcode/1-500/jump_gamp","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Medium","permalink":"/docs/tags/leetcode-medium"},{"inline":true,"label":"DP","permalink":"/docs/tags/dp"}],"version":"current","sidebarPosition":55,"frontMatter":{"title":"55. Jump Game","sidebar_label":"55. Jump Game","tags":["Leetcode Medium","DP"]},"sidebar":"docSidebar","previous":{"title":"54. Spiral Matrix","permalink":"/docs/leetcode/1-500/spiral_matrix"},"next":{"title":"56. Merge Intervals","permalink":"/docs/leetcode/1-500/merge_intervals"}}');var s=t(74848),o=t(28453);const i={title:"55. Jump Game",sidebar_label:"55. Jump Game",tags:["Leetcode Medium","DP"]},a=void 0,c={},l=[{value:"Python",id:"python",level:2},{value:"Bottom Up DP",id:"bottom-up-dp",level:3},{value:"Top Down DP",id:"top-down-dp",level:3},{value:"Javascript",id:"javascript",level:2}];function u(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/jump-game/",children:"https://leetcode.com/problems/jump-game/"})}),"\n",(0,s.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,s.jsx)(n.h3,{id:"bottom-up-dp",children:"Bottom Up DP"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def canJump(self, nums: List[int]) -> bool:\n        if len(nums) < 2:\n            return True\n\n        dp = [0] * (len(nums)-1)\n        dp[0] = nums[0]\n\n        for i in range(1, len(nums)-1):\n            if dp[i-1] < i:\n                return False\n            dp[i] = max(dp[i-1], i+nums[i])\n\n        return dp[-1] >= (len(nums)-1)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"top-down-dp",children:"Top Down DP"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from functools import cache\n\n\nclass Solution:\n    def canJump(self, nums: List[int]) -> bool:\n        @cache\n        def dp(i):\n            if i >= len(nums)-1:\n                return True\n\n            for dest in range(i+1, i+nums[i]+1):\n                reached = dp(dest)\n                if reached:\n                    return True\n            return False\n\n        return dp(0)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"javascript",children:"Javascript"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar canJump = function(nums) {\n\n    function recursive(idx, memo = {}) {\n        if (memo.hasOwnProperty(idx)) return memo[idx];\n        if (idx === nums.length - 1) return true;\n\n        const steps = nums[idx];\n\n        for (let step = 1; step <= steps; step++) {\n            const nextStep = idx + step;\n\n            if (recursive(nextStep, memo)) {\n                memo[idx] = true;\n                return true;\n            }\n        }\n\n        memo[idx] = false;\n        return false;\n    }\n\n    return recursive(0);\n};\n"})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var r=t(96540);const s={},o=r.createContext(s);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);