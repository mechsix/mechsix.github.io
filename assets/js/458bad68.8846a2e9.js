"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[81445],{84452:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"leetcode/1-500/serialize_descrialize_bt","title":"297. Serialize and Deserialize Binary Tree","description":"https://leetcode.com/problems/serialize-and-deserialize-binary-tree","source":"@site/docs/leetcode/1-500/297_serialize_descrialize_bt.md","sourceDirName":"leetcode/1-500","slug":"/leetcode/1-500/serialize_descrialize_bt","permalink":"/docs/leetcode/1-500/serialize_descrialize_bt","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Hard","permalink":"/docs/tags/leetcode-hard"},{"inline":true,"label":"Binary Tree","permalink":"/docs/tags/binary-tree"}],"version":"current","sidebarPosition":297,"frontMatter":{"title":"297. Serialize and Deserialize Binary Tree","sidebar_label":"297. Serialize and Deserialize Binary Tree","tags":["Leetcode Hard","Binary Tree"]},"sidebar":"docSidebar","previous":{"title":"295. Find Median from Data Stream","permalink":"/docs/leetcode/1-500/find_median_from_data_stream"},"next":{"title":"299. Bulls and Cows","permalink":"/docs/leetcode/1-500/bulls_and_cows"}}');var i=r(74848),s=r(28453);const a={title:"297. Serialize and Deserialize Binary Tree",sidebar_label:"297. Serialize and Deserialize Binary Tree",tags:["Leetcode Hard","Binary Tree"]},l=void 0,o={},d=[{value:"Python",id:"python",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/serialize-and-deserialize-binary-tree",children:"https://leetcode.com/problems/serialize-and-deserialize-binary-tree"})}),"\n",(0,i.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class Codec:\n    EMPTY_CHAR = "-"\n    def serialize(self, root: TreeNode) -> str:\n        """Encodes a tree to a single string.\n\n        :type root: TreeNode\n        :rtype: str\n        """\n\n        result = self._serialize(root, [])\n\n        return " ".join(result) if result else ""\n\n    def _serialize(self, node: TreeNode, holder: list) -> list:\n        if not node:\n            holder.append(self.EMPTY_CHAR)\n            return\n\n        holder.append(str(node.val))\n        self._serialize(node.left, holder)\n        self._serialize(node.right, holder)\n\n        return holder\n\n\n    def deserialize(self, data: str) -> TreeNode:\n        """Decodes your encoded data to tree.\n\n        :type data: str\n        :rtype: TreeNode\n        """\n        if not data:\n            return\n\n        vals = data.split(\' \')[::-1]\n\n        return self._deserialize(vals)\n\n    def _deserialize(self, vals: list) -> TreeNode:\n        val = vals.pop()\n\n        if val == self.EMPTY_CHAR:\n            return None\n\n        node = TreeNode(int(val))\n        node.left = self._deserialize(vals)\n        node.right = self._deserialize(vals)\n        return node\n\n\n# Your Codec object will be instantiated and called as such:\n# ser = Codec()\n# deser = Codec()\n# ans = deser.deserialize(ser.serialize(root))\n'})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>l});var t=r(96540);const i={},s=t.createContext(i);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);