"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[591],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return d}});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),p=l(r),d=a,f=p["".concat(s,".").concat(d)]||p[d]||m[d]||o;return r?n.createElement(f,i(i({ref:t},c),{},{components:r})):n.createElement(f,i({ref:t},c))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=p;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u.mdxType="string"==typeof e?e:a,i[1]=u;for(var l=2;l<o;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},71269:function(e,t,r){r.r(t),r.d(t,{contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return u},metadata:function(){return l},toc:function(){return c}});var n=r(87462),a=r(63366),o=(r(67294),r(3905)),i=["components"],u={title:"1695. Maximum Erasure Value",sidebar_label:"1695. Maximum Erasure Value",tags:["Leetcode Medium","Hash","Two Pointer"]},s=void 0,l={unversionedId:"leetcode/1501-2000/max_erasure_value",id:"leetcode/1501-2000/max_erasure_value",title:"1695. Maximum Erasure Value",description:"https://leetcode.com/problems/maximum-erasure-value/",source:"@site/docs/leetcode/1501-2000/1695_max_erasure_value.md",sourceDirName:"leetcode/1501-2000",slug:"/leetcode/1501-2000/max_erasure_value",permalink:"/docs/leetcode/1501-2000/max_erasure_value",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1501-2000/1695_max_erasure_value.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Hash",permalink:"/docs/tags/hash"},{label:"Two Pointer",permalink:"/docs/tags/two-pointer"}],version:"current",sidebarPosition:1695,frontMatter:{title:"1695. Maximum Erasure Value",sidebar_label:"1695. Maximum Erasure Value",tags:["Leetcode Medium","Hash","Two Pointer"]},sidebar:"docSidebar",previous:{title:"1679. Max Number of K-Sum Pairs",permalink:"/docs/leetcode/1501-2000/max_num_of_k_sum_pairs"},next:{title:"1721. Swapping Nodes in a Linked List",permalink:"/docs/leetcode/1501-2000/swap_nodes_in_linked_list"}},c=[{value:"Python",id:"python",children:[{value:"Two Pointers with Hashmap",id:"two-pointers-with-hashmap",children:[],level:3}],level:2}],m={toc:c};function p(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/maximum-erasure-value/"},"https://leetcode.com/problems/maximum-erasure-value/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"two-pointers-with-hashmap"},"Two Pointers with Hashmap"),(0,o.kt)("p",null,"(Catepillar Two Pointer, Same Direction Two Pointer)"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Time: O()"),(0,o.kt)("li",{parentName:"ul"},"Space: O()")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def maximumUniqueSubarray(self, nums: List[int]) -> int:\n        seen = set()\n        score, max_score = 0, 0\n        start = 0\n\n        for end in range(len(nums)):\n            while nums[end] in seen:\n                seen.remove(nums[start])\n                score -= nums[start]\n                start += 1\n\n            score += nums[end]\n            seen.add(nums[end])\n\n            max_score = max(max_score, score)\n\n        return max_score\n")))}p.isMDXComponent=!0}}]);