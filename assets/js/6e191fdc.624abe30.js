"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[92232],{92858:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"leetcode/1-500/diagonal_traverse","title":"498. Diagonal Traverse","description":"https://leetcode.com/problems/diagonal-traverse","source":"@site/docs/leetcode/1-500/498_diagonal_traverse.md","sourceDirName":"leetcode/1-500","slug":"/leetcode/1-500/diagonal_traverse","permalink":"/docs/leetcode/1-500/diagonal_traverse","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Medium","permalink":"/docs/tags/leetcode-medium"},{"inline":true,"label":"Matrix","permalink":"/docs/tags/matrix"}],"version":"current","sidebarPosition":498,"frontMatter":{"title":"498. Diagonal Traverse","sidebar_label":"498. Diagonal Traverse","tags":["Leetcode Medium","Matrix"]},"sidebar":"docSidebar","previous":{"title":"495. Teemo Attacking","permalink":"/docs/leetcode/1-500/teemo_attack"},"next":{"title":"502. IPO","permalink":"/docs/leetcode/501-1000/ipo"}}');var a=n(74848),i=n(28453);const o={title:"498. Diagonal Traverse",sidebar_label:"498. Diagonal Traverse",tags:["Leetcode Medium","Matrix"]},s=void 0,l={},c=[{value:"Python",id:"python",level:2},{value:"Re-assemble",id:"re-assemble",level:3}];function d(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://leetcode.com/problems/diagonal-traverse",children:"https://leetcode.com/problems/diagonal-traverse"})}),"\n",(0,a.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,a.jsx)(t.h3,{id:"re-assemble",children:"Re-assemble"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Time: O(n*m)"}),"\n",(0,a.jsx)(t.li,{children:"Space: O(n*m)"}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"from collections import defaultdict\n\n\nclass Solution:\n    def findDiagonalOrder(self, mat: List[List[int]]) -> List[int]:\n        mapper = defaultdict(list)\n\n        for i in range(len(mat)):\n            for j in range(len(mat[i])):\n                mapper[i+j].append(mat[i][j])\n\n        result = []\n        for key in sorted(mapper.keys()):\n            if key % 2 == 0:\n                result += mapper[key][::-1]\n                continue\n            result += mapper[key]\n\n        return result\n"})})]})}function m(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>s});var r=n(96540);const a={},i=r.createContext(a);function o(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);