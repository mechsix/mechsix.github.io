"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[2198],{3905:function(e,t,r){r.d(t,{Zo:function(){return d},kt:function(){return m}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=s(r),p=o,m=u["".concat(l,".").concat(p)]||u[p]||f[p]||a;return r?n.createElement(m,i(i({ref:t},d),{},{components:r})):n.createElement(m,i({ref:t},d))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=p;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[u]="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},325:function(e,t,r){r.r(t),r.d(t,{assets:function(){return l},contentTitle:function(){return i},default:function(){return u},frontMatter:function(){return a},metadata:function(){return c},toc:function(){return s}});var n=r(83117),o=(r(67294),r(3905));const a={title:"543. Diameter of Binary Tree",sidebar_label:"543. Diameter of Binary Tree",tags:["Leetcode Easy","Binary Tree"]},i=void 0,c={unversionedId:"leetcode/501-1000/diameter_of_binary_tree",id:"leetcode/501-1000/diameter_of_binary_tree",title:"543. Diameter of Binary Tree",description:"https://leetcode.com/problems/diameter-of-binary-tree/",source:"@site/docs/leetcode/501-1000/543_diameter_of_binary_tree.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/diameter_of_binary_tree",permalink:"/docs/leetcode/501-1000/diameter_of_binary_tree",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/543_diameter_of_binary_tree.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"}],version:"current",sidebarPosition:543,frontMatter:{title:"543. Diameter of Binary Tree",sidebar_label:"543. Diameter of Binary Tree",tags:["Leetcode Easy","Binary Tree"]},sidebar:"docSidebar",previous:{title:"540. Single Element in a Sorted Array",permalink:"/docs/leetcode/501-1000/single_elm_in_sotrted_array"},next:{title:"560. Subarray Sum Equals K",permalink:"/docs/leetcode/501-1000/subarray_sum_equals_k"}},l={},s=[{value:"Python",id:"python",level:2},{value:"DFS",id:"dfs",level:3}],d={toc:s};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/diameter-of-binary-tree/"},"https://leetcode.com/problems/diameter-of-binary-tree/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"dfs"},"DFS"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def diameterOfBinaryTree(self, root: Optional[TreeNode]) -> int:\n        ans = 0\n        def dfs(node):\n            if not node:\n                return 0\n            nonlocal ans\n            left_depth = dfs(node.left)\n            right_depth = dfs(node.right)\n            ans = max(ans, left_depth+right_depth)\n            return 1 + max(left_depth, right_depth)\n\n        dfs(root)\n\n        return ans\n")))}u.isMDXComponent=!0}}]);