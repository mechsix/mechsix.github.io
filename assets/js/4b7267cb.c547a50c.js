"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[89216],{3905:function(e,r,t){t.d(r,{Zo:function(){return a},kt:function(){return m}});var n=t(67294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function c(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?c(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function u(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},c=Object.keys(e);for(n=0;n<c.length;n++)t=c[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)t=c[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),l=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},a=function(e){var r=l(e.components);return n.createElement(s.Provider,{value:r},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,c=e.originalType,s=e.parentName,a=u(e,["components","mdxType","originalType","parentName"]),d=l(t),f=o,m=d["".concat(s,".").concat(f)]||d[f]||p[f]||c;return t?n.createElement(m,i(i({ref:r},a),{},{components:t})):n.createElement(m,i({ref:r},a))}));function m(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var c=t.length,i=new Array(c);i[0]=f;var u={};for(var s in r)hasOwnProperty.call(r,s)&&(u[s]=r[s]);u.originalType=e,u[d]="string"==typeof e?e:o,i[1]=u;for(var l=2;l<c;l++)i[l]=t[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},32258:function(e,r,t){t.r(r),t.d(r,{assets:function(){return s},contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return c},metadata:function(){return u},toc:function(){return l}});var n=t(83117),o=(t(67294),t(3905));const c={title:"207. Course Schedule",sidebar_label:"207. Course Schedule",tags:["Leetcode Medium","Graph","BFS"]},i=void 0,u={unversionedId:"leetcode/1-500/course_schedule",id:"leetcode/1-500/course_schedule",title:"207. Course Schedule",description:"https://leetcode.com/problems/course-schedule/",source:"@site/docs/leetcode/1-500/207_course_schedule.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/course_schedule",permalink:"/docs/leetcode/1-500/course_schedule",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/207_course_schedule.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Graph",permalink:"/docs/tags/graph"},{label:"BFS",permalink:"/docs/tags/bfs"}],version:"current",sidebarPosition:207,frontMatter:{title:"207. Course Schedule",sidebar_label:"207. Course Schedule",tags:["Leetcode Medium","Graph","BFS"]},sidebar:"docSidebar",previous:{title:"206. Reverse Linked List",permalink:"/docs/leetcode/1-500/reverse_linked_list"},next:{title:"208. Implement Trie (Prefix Tree)",permalink:"/docs/leetcode/1-500/trie_tree"}},s={},l=[{value:"Python",id:"python",level:2},{value:"BFS",id:"bfs",level:3}],a={toc:l};function d(e){let{components:r,...t}=e;return(0,o.kt)("wrapper",(0,n.Z)({},a,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/course-schedule/"},"https://leetcode.com/problems/course-schedule/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"bfs"},"BFS"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from collections import defaultdict, deque\n\n\nclass Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\n        graph = defaultdict(set)\n        ingress = [0] * numCourses\n\n        for edge in prerequisites:\n            graph[edge[1]].add(edge[0])\n            ingress[edge[0]] += 1\n\n        queue = deque()\n        for course in range(numCourses):\n            if ingress[course] == 0:\n                queue.append(course)\n\n        while queue:\n            course = queue.popleft()\n            for prereq in graph[course]:\n                ingress[prereq] -= 1\n                if ingress[prereq] == 0:\n                    queue.append(prereq)\n\n        return all(item == 0 for item in ingress)\n")))}d.isMDXComponent=!0}}]);