"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[8005],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return f}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),a=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=a(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=a(r),f=o,m=d["".concat(s,".").concat(f)]||d[f]||u[f]||i;return r?n.createElement(m,l(l({ref:t},p),{},{components:r})):n.createElement(m,l({ref:t},p))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,l=new Array(i);l[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,l[1]=c;for(var a=2;a<i;a++)l[a]=r[a];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},54663:function(e,t,r){r.r(t),r.d(t,{contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return c},metadata:function(){return a},toc:function(){return p}});var n=r(87462),o=r(63366),i=(r(67294),r(3905)),l=["components"],c={title:"583. Delete Operation for Two Strings",sidebar_label:"583. Delete Operation for Two Strings",tags:["Leetcode Medium","DP"]},s=void 0,a={unversionedId:"leetcode/501-1000/delete_operation_for_two_strings",id:"leetcode/501-1000/delete_operation_for_two_strings",title:"583. Delete Operation for Two Strings",description:"https://leetcode.com/problems/delete-operation-for-two-strings/",source:"@site/docs/leetcode/501-1000/583_delete_operation_for_two_strings.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/delete_operation_for_two_strings",permalink:"/docs/leetcode/501-1000/delete_operation_for_two_strings",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/583_delete_operation_for_two_strings.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"DP",permalink:"/docs/tags/dp"}],version:"current",sidebarPosition:583,frontMatter:{title:"583. Delete Operation for Two Strings",sidebar_label:"583. Delete Operation for Two Strings",tags:["Leetcode Medium","DP"]},sidebar:"docSidebar",previous:{title:"581. Shortest Unsorted Continuous Subarray",permalink:"/docs/leetcode/501-1000/sortest_unsorted_continuous_subarray"},next:{title:"588. Design In-Memory File System",permalink:"/docs/leetcode/501-1000/design_in_memory_file_system"}},p=[{value:"Python",id:"python",children:[{value:"Bottom-up DP with LCS",id:"bottom-up-dp-with-lcs",children:[],level:3}],level:2}],u={toc:p};function d(e){var t=e.components,r=(0,o.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/delete-operation-for-two-strings/"},"https://leetcode.com/problems/delete-operation-for-two-strings/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"bottom-up-dp-with-lcs"},"Bottom-up DP with LCS"),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"/docs/leetcode/1001-1500/longest_common_subsequence"},"1143. Longest Common Subsequence")," for detail"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def minDistance(self, word1: str, word2: str) -> int:\n        lcs = self.longestCommonSubsequence(word1, word2)\n        return len(word1)-lcs + len(word2)-lcs\n    \n    \n    def longestCommonSubsequence(self, text1: str, text2: str) -> int:\n        dp = [[0]*(len(text2)+1) for _ in range(len(text1)+1)]\n\n        for col in range(len(text2)-1, -1, -1):\n            for row in range(len(text1)-1, -1, -1):\n                if text2[col] == text1[row]:\n                    dp[row][col] = 1 + dp[row+1][col+1]\n                else:\n                    dp[row][col] = max(dp[row+1][col], dp[row][col+1])\n        return dp[0][0]\n")))}d.isMDXComponent=!0}}]);