"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[99551],{90307:(r,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>d,toc:()=>s});var e=o(74848),a=o(28453);const t={title:"723. Candy Crush",sidebar_label:"723. Candy Crush",tags:["Two Pointer","Leetcode Medium"]},c=void 0,d={id:"leetcode/501-1000/candy_crush",title:"723. Candy Crush",description:"https://leetcode.com/problems/candy-crush/",source:"@site/docs/leetcode/501-1000/723_candy_crush.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/candy_crush",permalink:"/docs/leetcode/501-1000/candy_crush",draft:!1,unlisted:!1,tags:[{label:"Two Pointer",permalink:"/docs/tags/two-pointer"},{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"}],version:"current",sidebarPosition:723,frontMatter:{title:"723. Candy Crush",sidebar_label:"723. Candy Crush",tags:["Two Pointer","Leetcode Medium"]},sidebar:"docSidebar",previous:{title:"718. Maximum Length of Repeated Subarray",permalink:"/docs/leetcode/501-1000/max_length_of_repeated_subarray"},next:{title:"724. Find Pivot Index",permalink:"/docs/leetcode/501-1000/find_pivot_index"}},l={},s=[{value:"Python",id:"python",level:2},{value:"Javascript",id:"javascript",level:2}];function i(r){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...r.components};return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.p,{children:(0,e.jsx)(n.a,{href:"https://leetcode.com/problems/candy-crush/",children:"https://leetcode.com/problems/candy-crush/"})}),"\n",(0,e.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def candyCrush(self, board: List[List[int]]) -> List[List[int]]:\n        while self.crash(board):\n            self.drop(board)\n\n        return board\n\n    def crash(self, board) -> bool:\n        m = len(board)\n        n = len(board[0])\n\n        should_crash = set()\n        for row in range(m):\n            for col in range(n):\n                if board[row][col] == 0:\n                    continue\n\n                if row > 1 and board[row][col] == board[row-1][col] == board[row-2][col]:\n                    should_crash.add((row, col))\n                    should_crash.add((row-1, col))\n                    should_crash.add((row-2, col))\n\n                if col > 1 and board[row][col] == board[row][col-1] == board[row][col-2]:\n                    should_crash.add((row, col))\n                    should_crash.add((row, col-1))\n                    should_crash.add((row, col-2))\n\n        if should_crash:\n            for row, col in should_crash:\n                board[row][col] = 0\n            return True\n\n        return False\n\n    def drop(self, board):\n        m = len(board)\n        n = len(board[0])\n\n        for col in range(n):\n            idx = len(board)-1\n            for row in range(m-1, -1, -1):\n                if board[row][col]>0:\n                    board[idx][col] = board[row][col]\n                    idx -= 1\n\n            for row in range(idx+1):\n                board[row][col] = 0\n"})}),"\n",(0,e.jsx)(n.h2,{id:"javascript",children:"Javascript"}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-javascript",children:"var candyCrush = function(board) {\n   let crush = false;\n  // row\n  for (let r = 0; r < board.length; r++) {\n    for (let c = 0; c < board[r].length - 2; c++) {\n      const target = Math.abs(board[r][c]);\n      const allEqual = (target === Math.abs(board[r][c + 1])) && (target === Math.abs(board[r][c + 2]));\n      if (board[r][c] !== 0 && allEqual) {\n        board[r][c] = board[r][c + 1] = board[r][c + 2] = -target;\n        crush = true;\n      }\n    }\n  }\n\n  // col\n  for (let c = 0; c < board[0].length; c++) {\n    for (let r = 0; r < board.length - 2; r++) {\n      const target = Math.abs(board[r][c]);\n      const allEqual = (target === Math.abs(board[r + 1][c])) && (target === Math.abs(board[r + 2][c]));\n\n      if (board[r][c] !== 0 && allEqual) {\n        board[r][c] = board[r + 1][c] = board[r + 2][c] = -target;\n        crush = true;\n      }\n    }\n  }\n\n  for (let c = 0; c < board[0].length; c++) {\n    let tmp = board.length - 1;\n    for (let r = board.length - 1; r >= 0; r--) {\n      if (board[r][c] > 0) {\n        board[tmp--][c] = board[r][c]\n      }\n    }\n    while (tmp >= 0) board[tmp--][c] = 0;\n  }\n  // console.log(board)\n\n  if (crush) return candyCrush(board);\n  else return board;\n};\n"})})]})}function h(r={}){const{wrapper:n}={...(0,a.R)(),...r.components};return n?(0,e.jsx)(n,{...r,children:(0,e.jsx)(i,{...r})}):i(r)}},28453:(r,n,o)=>{o.d(n,{R:()=>c,x:()=>d});var e=o(96540);const a={},t=e.createContext(a);function c(r){const n=e.useContext(t);return e.useMemo((function(){return"function"==typeof r?r(n):{...n,...r}}),[n,r])}function d(r){let n;return n=r.disableParentContext?"function"==typeof r.components?r.components(a):r.components||a:c(r.components),e.createElement(t.Provider,{value:n},r.children)}}}]);