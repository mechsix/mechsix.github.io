"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[67878],{93216:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=t(74848),l=t(28453);const i={title:"2628. JSON Deep Equal",sidebar_label:"2628. JSON Deep Equal",tags:["Leetcode Easy","JS 30 Days Challenge"]},s=void 0,o={id:"leetcode/2000/json_deep_equal",title:"2628. JSON Deep Equal",description:"https://leetcode.com/problems/json-deep-equal/",source:"@site/docs/leetcode/2000/2628_json_deep_equal.md",sourceDirName:"leetcode/2000",slug:"/leetcode/2000/json_deep_equal",permalink:"/docs/leetcode/2000/json_deep_equal",draft:!1,unlisted:!1,tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"JS 30 Days Challenge",permalink:"/docs/tags/js-30-days-challenge"}],version:"current",sidebarPosition:2628,frontMatter:{title:"2628. JSON Deep Equal",sidebar_label:"2628. JSON Deep Equal",tags:["Leetcode Easy","JS 30 Days Challenge"]},sidebar:"docSidebar",previous:{title:"2627. Debounce",permalink:"/docs/leetcode/2000/debounce"},next:{title:"2629. Function Composition",permalink:"/docs/leetcode/2000/function_composition"}},a={},c=[{value:"Javascript",id:"javascript",level:2},{value:"Typescript",id:"typescript",level:2}];function f(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/json-deep-equal/",children:"https://leetcode.com/problems/json-deep-equal/"})}),"\n",(0,r.jsx)(n.h2,{id:"javascript",children:"Javascript"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var areDeeplyEqual = function(o1, o2) {\n    function dfs(left, right) {\n        const leftType = typeof left\n        const rightType = typeof right\n\n        // 1. Check type\n        if (leftType !== rightType) {\n            return false\n        }\n\n        // 2. Check simple type (bool, number, string, undefined, null, NaN)\n        if (typeof left !== 'object' || left === null || right === null) {\n            return left === right\n        }\n\n\n        // 3. Check Array\n        if (Array.isArray(left) && Array.isArray(right)) {\n            if (left.length !== right.length) {\n                return false\n            }\n            for (let i=0; i < left.length; i++) {\n                if (!dfs(left[i], right[i])) {\n                    return false\n                }\n            }\n            return true\n        }\n\n        if (Array.isArray(left) || Array.isArray(right)) {\n            return false\n        }\n\n        // 4. Check Object\n        const leftChildren = Object.keys(left)\n        const rightChildren = Object.keys(right)\n\n        if (leftChildren.length !== rightChildren.length) {\n            return false\n        }\n\n        for (const key of leftChildren) {\n            if (!dfs(left[key], right[key])) {\n                return false\n            }\n        }\n\n        // 5. Otherwise, they're equal\n        return true\n    }\n\n    return dfs(o1, o2)\n};\n"})}),"\n",(0,r.jsx)(n.h2,{id:"typescript",children:"Typescript"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"function areDeeplyEqual(o1: any, o2: any): boolean {\n    function dfs(left: any, right: any) {\n        const leftType = typeof left\n        const rightType = typeof right\n\n        // 1. Check type\n        if (leftType !== rightType) {\n            return false\n        }\n\n        // 2. Check simple type (bool, number, string, undefined, null, NaN)\n        if (typeof left !== 'object' || left === null || right === null) {\n            return left === right\n        }\n\n\n        // 3. Check Array\n        if (Array.isArray(left) && Array.isArray(right)) {\n            if (left.length !== right.length) {\n                return false\n            }\n            for (let i = 0; i < left.length; i++) {\n                if (!dfs(left[i], right[i])) {\n                    return false\n                }\n            }\n            return true\n        }\n\n        if (Array.isArray(left) || Array.isArray(right)) {\n            return false\n        }\n\n        // 4. Check Object\n        const leftChildren = Object.keys(left)\n        const rightChildren = Object.keys(right)\n\n        if (leftChildren.length !== rightChildren.length) {\n            return false\n        }\n\n        for (const key of leftChildren) {\n            if (!dfs(left[key], right[key])) {\n                return false\n            }\n        }\n\n        // 5. Otherwise, they're equal\n        return true\n    }\n\n    return dfs(o1, o2)\n};\n"})})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(f,{...e})}):f(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var r=t(96540);const l={},i=r.createContext(l);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);