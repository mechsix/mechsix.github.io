"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[81598],{99338:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"leetcode/1-500/range_sum_query_2d_immutable","title":"304. Range Sum Query 2D - Immutable","description":"https://leetcode.com/problems/range-sum-query-2d-immutable/","source":"@site/docs/leetcode/1-500/304_range_sum_query_2d_immutable.md","sourceDirName":"leetcode/1-500","slug":"/leetcode/1-500/range_sum_query_2d_immutable","permalink":"/docs/leetcode/1-500/range_sum_query_2d_immutable","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Medium","permalink":"/docs/tags/leetcode-medium"},{"inline":true,"label":"Matrix","permalink":"/docs/tags/matrix"}],"version":"current","sidebarPosition":304,"frontMatter":{"title":"304. Range Sum Query 2D - Immutable","sidebar_label":"304. Range Sum Query 2D - Immutable","tags":["Leetcode Medium","Matrix"]},"sidebar":"docSidebar","previous":{"title":"303. Range Sum Query - Immutable","permalink":"/docs/leetcode/1-500/range_sum_query_immutable"},"next":{"title":"307. Range Sum Query - Mutable","permalink":"/docs/leetcode/1-500/range_sum_query"}}');var o=t(74848),c=t(28453);const i={title:"304. Range Sum Query 2D - Immutable",sidebar_label:"304. Range Sum Query 2D - Immutable",tags:["Leetcode Medium","Matrix"]},a=void 0,l={},u=[{value:"Python",id:"python",level:2},{value:"Query in runtime",id:"query-in-runtime",level:3},{value:"Cache on built",id:"cache-on-built",level:3}];function s(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://leetcode.com/problems/range-sum-query-2d-immutable/",children:"https://leetcode.com/problems/range-sum-query-2d-immutable/"})}),"\n",(0,o.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,o.jsx)(n.h3,{id:"query-in-runtime",children:"Query in runtime"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from functools import cache\n\nclass NumMatrix:\n\n    def __init__(self, matrix: List[List[int]]):\n        self.matrix = matrix\n\n    @cache\n    def sumRegion(self, row1: int, col1: int, row2: int, col2: int) -> int:\n        total = 0\n        for row in range(row1, row2+1):\n            total += sum(self.matrix[row][col1:col2+1])\n        return total\n"})}),"\n",(0,o.jsx)(n.h3,{id:"cache-on-built",children:"Cache on built"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"class NumMatrix:\n\n    def __init__(self, matrix: List[List[int]]):\n        m, n = len(matrix), len(matrix[0])\n\n        cache = [[0]*(n+1) for i in range(m+1)]\n        for row in range(m):\n            for col in range(n):\n                cache[row+1][col+1] = \\\n                cache[row+1][col] + cache[row][col+1] + matrix[row][col] - cache[row][col]\n        self.cache = cache\n\n\n    def sumRegion(self, row1: int, col1: int, row2: int, col2: int) -> int:\n        cache = self.cache\n        return cache[row2+1][col2+1] - cache[row1][col2+1] - cache[row2+1][col1] + cache[row1][col1]\n"})})]})}function m(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(s,{...e})}):s(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var r=t(96540);const o={},c=r.createContext(o);function i(e){const n=r.useContext(c);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(c.Provider,{value:n},e.children)}}}]);