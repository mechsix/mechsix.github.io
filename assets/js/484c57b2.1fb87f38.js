"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[94008],{93821:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>d,toc:()=>a});var o=t(74848),r=t(28453);const i={title:"111. Minimum Depth of Binary Tree",slidebar_label:"111. Minimum Depth of Binary Tree",tags:["Leetcode Easy","Binary Tree","DFS","BFS"]},s=void 0,d={id:"leetcode/1-500/min_depth_of_binary_tree",title:"111. Minimum Depth of Binary Tree",description:"https://leetcode.com/problems/minimum-depth-of-binary-tree/",source:"@site/docs/leetcode/1-500/111_min_depth_of_binary_tree.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/min_depth_of_binary_tree",permalink:"/docs/leetcode/1-500/min_depth_of_binary_tree",draft:!1,unlisted:!1,tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"},{label:"DFS",permalink:"/docs/tags/dfs"},{label:"BFS",permalink:"/docs/tags/bfs"}],version:"current",sidebarPosition:111,frontMatter:{title:"111. Minimum Depth of Binary Tree",slidebar_label:"111. Minimum Depth of Binary Tree",tags:["Leetcode Easy","Binary Tree","DFS","BFS"]},sidebar:"docSidebar",previous:{title:"110. Balanced Binary Tree",permalink:"/docs/leetcode/1-500/balanced_binary_tree"},next:{title:"112. Path Sum",permalink:"/docs/leetcode/1-500/path_sum"}},l={},a=[{value:"Python",id:"python",level:2},{value:"DFS Postfix",id:"dfs-postfix",level:3},{value:"BFS",id:"bfs",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://leetcode.com/problems/minimum-depth-of-binary-tree/",children:"https://leetcode.com/problems/minimum-depth-of-binary-tree/"})}),"\n",(0,o.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,o.jsx)(n.h3,{id:"dfs-postfix",children:"DFS Postfix"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def minDepth(self, root: Optional[TreeNode]) -> int:\n        def dfs(node):\n            if not node:\n                return 0\n\n            if node.right is None:\n                return dfs(node.left) + 1\n            if node.left is None:\n                return dfs(node.right) + 1\n\n            left, right = dfs(node.left), dfs(node.right)\n            return min(left, right) + 1\n\n        return dfs(root)\n"})}),"\n",(0,o.jsx)(n.h3,{id:"bfs",children:"BFS"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from collections import deque\n\n\nclass Solution:\n    def minDepth(self, root: Optional[TreeNode]) -> int:\n        if not root:\n            return 0\n\n        level, queue = 0, deque([root])\n\n        while queue:\n            level += 1\n\n            for _ in range(len(queue)):\n                node = queue.popleft()\n\n                if not node.left and not node.right:\n                    return level\n\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>d});var o=t(96540);const r={},i=o.createContext(r);function s(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);