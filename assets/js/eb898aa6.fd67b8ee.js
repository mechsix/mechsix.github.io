"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[83410],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return m}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},f="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),f=c(r),d=o,m=f["".concat(l,".").concat(d)]||f[d]||p[d]||a;return r?n.createElement(m,i(i({ref:t},s),{},{components:r})):n.createElement(m,i({ref:t},s))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var u={};for(var l in t)hasOwnProperty.call(t,l)&&(u[l]=t[l]);u.originalType=e,u[f]="string"==typeof e?e:o,i[1]=u;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},13979:function(e,t,r){r.r(t),r.d(t,{assets:function(){return l},contentTitle:function(){return i},default:function(){return f},frontMatter:function(){return a},metadata:function(){return u},toc:function(){return c}});var n=r(83117),o=(r(67294),r(3905));const a={title:"2348. Number of Zero-Filled Subarrays",sidebar_label:"2348. Number of Zero-Filled Subarrays",tags:["Leetcode Medium"]},i=void 0,u={unversionedId:"leetcode/2000/num_of_zero_filled_subarrays",id:"leetcode/2000/num_of_zero_filled_subarrays",title:"2348. Number of Zero-Filled Subarrays",description:"https://leetcode.com/problems/number-of-zero-filled-subarrays",source:"@site/docs/leetcode/2000/2348_num_of_zero_filled_subarrays.md",sourceDirName:"leetcode/2000",slug:"/leetcode/2000/num_of_zero_filled_subarrays",permalink:"/docs/leetcode/2000/num_of_zero_filled_subarrays",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/2000/2348_num_of_zero_filled_subarrays.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"}],version:"current",sidebarPosition:2348,frontMatter:{title:"2348. Number of Zero-Filled Subarrays",sidebar_label:"2348. Number of Zero-Filled Subarrays",tags:["Leetcode Medium"]},sidebar:"docSidebar",previous:{title:"2300. Successful Pairs of Spells and Potions",permalink:"/docs/leetcode/2000/successful_pairs_of_spells_and_potions"},next:{title:"2477. Minimum Fuel Cost to Report to the Capital",permalink:"/docs/leetcode/2000/min_fuel_cost_to_report_to_the_capital"}},l={},c=[{value:"Python",id:"python",level:2}],s={toc:c};function f(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/number-of-zero-filled-subarrays"},"https://leetcode.com/problems/number-of-zero-filled-subarrays")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def zeroFilledSubarray(self, nums: List[int]) -> int:\n        segments = []\n\n        count = 0\n        for i, num in enumerate(nums):\n            if num == 0:\n                count += 1\n                continue\n\n            if count:\n                segments.append(count)\n            count = 0\n\n        if count:\n            segments.append(count)\n\n        # Trapezoidal area\n        return sum([(n**2 + n)//2 for n in segments])\n")))}f.isMDXComponent=!0}}]);