"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[85519],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return d}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(r),f=o,d=p["".concat(s,".").concat(f)]||p[f]||y[f]||i;return r?n.createElement(d,a(a({ref:t},u),{},{components:r})):n.createElement(d,a({ref:t},u))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=f;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[p]="string"==typeof e?e:o,a[1]=c;for(var l=2;l<i;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},52072:function(e,t,r){r.r(t),r.d(t,{assets:function(){return s},contentTitle:function(){return a},default:function(){return p},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return l}});var n=r(83117),o=(r(67294),r(3905));const i={title:"905. Sort Array By Parity",sidebar_label:"905. Sort Array By Parity",tags:["Leetcode Easy","Two Pointer"]},a=void 0,c={unversionedId:"leetcode/501-1000/sort_array_by_parity",id:"leetcode/501-1000/sort_array_by_parity",title:"905. Sort Array By Parity",description:"Python",source:"@site/docs/leetcode/501-1000/905_sort_array_by_parity.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/sort_array_by_parity",permalink:"/docs/leetcode/501-1000/sort_array_by_parity",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/905_sort_array_by_parity.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Two Pointer",permalink:"/docs/tags/two-pointer"}],version:"current",sidebarPosition:905,frontMatter:{title:"905. Sort Array By Parity",sidebar_label:"905. Sort Array By Parity",tags:["Leetcode Easy","Two Pointer"]},sidebar:"docSidebar",previous:{title:"897. Increasing Order Search Tree",permalink:"/docs/leetcode/501-1000/increasing_order_bst"},next:{title:"912. Sort an Array",permalink:"/docs/leetcode/501-1000/sort_an_array"}},s={},l=[{value:"Python",id:"python",level:2},{value:"Two Pointer - Slow and Fast",id:"two-pointer---slow-and-fast",level:3},{value:"Two Pointer - Left Right Approaching",id:"two-pointer---left-right-approaching",level:3}],u={toc:l};function p(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"two-pointer---slow-and-fast"},"Two Pointer - Slow and Fast"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def sortArrayByParity(self, nums: List[int]) -> List[int]:\n        if len(nums) < 2:\n            return nums\n\n        cur, r = 0, 0\n\n        while r < len(nums):\n            if nums[cur] % 2 == 0:\n                cur += 1\n                r = cur\n                continue\n\n            if nums[r] % 2 != 0:\n                r += 1\n                continue\n\n            nums[cur], nums[r] = nums[r], nums[cur]\n            cur += 1\n\n        return nums\n")),(0,o.kt)("h3",{id:"two-pointer---left-right-approaching"},"Two Pointer - Left Right Approaching"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def sortArrayByParity(self, nums: List[int]) -> List[int]:\n        if len(nums) < 2:\n            return nums\n\n        left, right = 0, len(nums)-1\n\n        while left < right:\n            if nums[left] % 2 == 0:\n                left += 1\n            elif nums[right] % 2 != 0:\n                right -= 1\n            else:\n                nums[left], nums[right] = nums[right], nums[left]\n                left += 1\n                right -= 1\n\n        return nums\n")))}p.isMDXComponent=!0}}]);