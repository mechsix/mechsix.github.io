"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[497],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(r),d=a,f=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return r?n.createElement(f,i(i({ref:t},p),{},{components:r})):n.createElement(f,i({ref:t},p))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},99350:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=r(87462),a=(r(67294),r(3905));const o={title:"1337. The K Weakest Rows in a Matrix",sidebar_label:"1337. The K Weakest Rows in a Matrix",tags:["Leetcode Easy","Heap"]},i=void 0,s={unversionedId:"leetcode/1001-1500/k_weakest_rows_in_matrix",id:"leetcode/1001-1500/k_weakest_rows_in_matrix",title:"1337. The K Weakest Rows in a Matrix",description:"https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix/",source:"@site/docs/leetcode/1001-1500/1337_k_weakest_rows_in_matrix.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/k_weakest_rows_in_matrix",permalink:"/docs/leetcode/1001-1500/k_weakest_rows_in_matrix",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1337_k_weakest_rows_in_matrix.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Heap",permalink:"/docs/tags/heap"}],version:"current",sidebarPosition:1337,frontMatter:{title:"1337. The K Weakest Rows in a Matrix",sidebar_label:"1337. The K Weakest Rows in a Matrix",tags:["Leetcode Easy","Heap"]},sidebar:"docSidebar",previous:{title:"1335. Minimum Difficulty of a Job Schedule",permalink:"/docs/leetcode/1001-1500/min_difficulty_of_job_schedule"},next:{title:"1338. Reduce Array Size to The Half",permalink:"/docs/leetcode/1001-1500/reduce_array_size_to_the_half"}},l={},c=[{value:"Python",id:"python",level:2},{value:"Min Heap",id:"min-heap",level:3}],p={toc:c},u="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix/"},"https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix/")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("h3",{id:"min-heap"},"Min Heap"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import heapq\n\n\nclass Solution:\n    def kWeakestRows(self, mat: List[List[int]], k: int) -> List[int]:\n        heap = []\n        for row in mat:\n            total = 0\n            for num in row:\n                if num == 1:\n                    total += 1\n                else:\n                    break\n            heap.append(total)\n\n        return [\n            index for index, _ in\n            heapq.nsmallest(\n                k, enumerate(heap), key=lambda item: item[1]\n            )\n        ]\n")))}m.isMDXComponent=!0}}]);