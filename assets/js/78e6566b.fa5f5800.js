"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[72555],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return f}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=n.createContext({}),s=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(u.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=s(r),m=o,f=p["".concat(u,".").concat(m)]||p[m]||d[m]||a;return r?n.createElement(f,l(l({ref:t},c),{},{components:r})):n.createElement(f,l({ref:t},c))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=m;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[p]="string"==typeof e?e:o,l[1]=i;for(var s=2;s<a;s++)l[s]=r[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8976:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return a},metadata:function(){return i},toc:function(){return s}});var n=r(83117),o=(r(67294),r(3905));const a={title:"Binary Tree"},l=void 0,i={unversionedId:"leetcode_note/binary_search",id:"leetcode_note/binary_search",title:"Binary Tree",description:"Binary Tree Traversal",source:"@site/docs/leetcode_note/binary_search.md",sourceDirName:"leetcode_note",slug:"/leetcode_note/binary_search",permalink:"/docs/leetcode_note/binary_search",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode_note/binary_search.md",tags:[],version:"current",frontMatter:{title:"Binary Tree"},sidebar:"docSidebar",previous:{title:"Backtracking",permalink:"/docs/leetcode_note/backtracking"},next:{title:"Heap",permalink:"/docs/leetcode_note/heap"}},u={},s=[{value:"Binary Tree Traversal",id:"binary-tree-traversal",level:2},{value:"Tips of Binary Tree Problem",id:"tips-of-binary-tree-problem",level:2},{value:"Resolve Top Down",id:"resolve-top-down",level:3},{value:"Resolve Bottom Up",id:"resolve-bottom-up",level:3},{value:"Binary Tree Problems",id:"binary-tree-problems",level:2},{value:"Maximum Depth of Binary Tree",id:"maximum-depth-of-binary-tree",level:3},{value:"Symmetric Tree",id:"symmetric-tree",level:3},{value:"Path Sum",id:"path-sum",level:3},{value:"Count Univalue Subtrees",id:"count-univalue-subtrees",level:3}],c={toc:s};function p(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"binary-tree-traversal"},"Binary Tree Traversal"),(0,o.kt)("p",null,"The example code node definitions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n")),(0,o.kt)("p",null,"Example Problems"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/leetcode/1-500/binary_tree_inorder"},"94. Binary Tree Inorder Traversal")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/leetcode/1-500/binary_tree_preorder"},"144. Binary Tree Preorder Traversal")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/leetcode/1-500/binary_tree_postorder"},"145. Binary Tree Postorder Traversal")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/leetcode/1-500/binary_tree_levelorder"},"102. Binary Tree Level Order Traversal"))),(0,o.kt)("h2",{id:"tips-of-binary-tree-problem"},"Tips of Binary Tree Problem"),(0,o.kt)("h3",{id:"resolve-top-down"},"Resolve Top Down"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"End case, return null from leaf node"),(0,o.kt)("li",{parentName:"ol"},"Update the answer"),(0,o.kt)("li",{parentName:"ol"},"left = top_down(node.left, params)"),(0,o.kt)("li",{parentName:"ol"},"right = top_down(node.right, params)"),(0,o.kt)("li",{parentName:"ol"},"return the answer")),(0,o.kt)("h3",{id:"resolve-bottom-up"},"Resolve Bottom Up"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"End case, return null from leaf node"),(0,o.kt)("li",{parentName:"ol"},"left = bottom_up(node.left)"),(0,o.kt)("li",{parentName:"ol"},"right = bottom_up(node.right)"),(0,o.kt)("li",{parentName:"ol"},"return answers")),(0,o.kt)("h2",{id:"binary-tree-problems"},"Binary Tree Problems"),(0,o.kt)("h3",{id:"maximum-depth-of-binary-tree"},"Maximum Depth of Binary Tree"),(0,o.kt)("p",null,"Leetcode ",(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/explore/learn/card/data-structure-tree/17/solve-problems-recursively/535/"},"Link")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def maxDepth(self, root: Optional[TreeNode]) -> int:\n        if not root:\n            return 0\n        return self._travel(0, root)\n\n    def _travel(self, deepth: int, node) -> int:\n        if not node:\n            return deepth\n        return max(self._travel(deepth+1, node.left), self._travel(deepth+1, node.right))\n")),(0,o.kt)("h3",{id:"symmetric-tree"},"Symmetric Tree"),(0,o.kt)("p",null,"Leetcode ",(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/explore/learn/card/data-structure-tree/17/solve-problems-recursively/536/"},"Link")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def isSymmetric(self, root: Optional[TreeNode]) -> bool:\n        if not root:\n            return False\n        return self._equal(root.left, root.right)\n\n    def _equal(self, left: Optional[TreeNode], right: Optional[TreeNode]) -> bool:\n        if not left and not right:\n            return True\n\n        if not left or not right:\n            return False\n\n        if left.val != right.val:\n            return False\n\n        return self._equal(left.left, right.right) and self._equal(left.right, right.left)\n")),(0,o.kt)("h3",{id:"path-sum"},"Path Sum"),(0,o.kt)("p",null,"Leetcode ",(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/explore/learn/card/data-structure-tree/17/solve-problems-recursively/537/"},"Link")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -> bool:\n        return self._travel(0, root, targetSum)\n\n    def _travel(self, total: int, node: Optional[TreeNode], targetSum: int) -> bool:\n        if not node:\n            return False\n\n        if not node.left and not node.right and total + node.val == targetSum:\n            return True\n\n        return self._travel(total+node.val, node.left, targetSum) \\\n            or self._travel(total+node.val, node.right, targetSum)\n")),(0,o.kt)("h3",{id:"count-univalue-subtrees"},"Count Univalue Subtrees"),(0,o.kt)("p",null,"Leetcode ",(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/explore/learn/card/data-structure-tree/17/solve-problems-recursively/538/"},"Link")))}p.isMDXComponent=!0}}]);