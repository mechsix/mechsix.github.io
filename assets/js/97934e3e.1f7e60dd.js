"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[1922],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return g}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),a=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=a(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=a(t),g=o,m=p["".concat(c,".").concat(g)]||p[g]||d[g]||i;return t?r.createElement(m,s(s({ref:n},u),{},{components:t})):r.createElement(m,s({ref:n},u))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,s=new Array(i);s[0]=p;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,s[1]=l;for(var a=2;a<i;a++)s[a]=t[a];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},25761:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return l},metadata:function(){return a},toc:function(){return u}});var r=t(87462),o=t(63366),i=(t(67294),t(3905)),s=["components"],l={title:"5. Longest Palindromic Substring",sidebar_label:"5. Longest Palindromic Substring",tags:["Leetcode Medium"]},c=void 0,a={unversionedId:"leetcode/1-500/longest_palindromic_substring",id:"leetcode/1-500/longest_palindromic_substring",title:"5. Longest Palindromic Substring",description:"https://leetcode.com/problems/longest-palindromic-substring/",source:"@site/docs/leetcode/1-500/5_longest_palindromic_substring.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/longest_palindromic_substring",permalink:"/docs/leetcode/1-500/longest_palindromic_substring",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/5_longest_palindromic_substring.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"}],version:"current",sidebarPosition:5,frontMatter:{title:"5. Longest Palindromic Substring",sidebar_label:"5. Longest Palindromic Substring",tags:["Leetcode Medium"]},sidebar:"docSidebar",previous:{title:"3. Longest Substring Without Repeating Characters",permalink:"/docs/leetcode/1-500/longest_no_repeat_substring"},next:{title:"7. Reverse Integer",permalink:"/docs/leetcode/1-500/reverse_int"}},u=[{value:"Python",id:"python",children:[{value:"Forces Bust (Timeout)",id:"forces-bust-timeout",children:[],level:3},{value:"Expand from center",id:"expand-from-center",children:[],level:3}],level:2}],d={toc:u};function p(e){var n=e.components,t=(0,o.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/longest-palindromic-substring/"},"https://leetcode.com/problems/longest-palindromic-substring/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"forces-bust-timeout"},"Forces Bust (Timeout)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class Solution:\n    def longestPalindrome(self, s: str) -> str:\n        if len(s) < 2:\n            return s\n\n        longest = ""\n        for left in range(len(s)):\n            for right in range(left, len(s)):\n                candidate = s[left:right+1]\n                if candidate == candidate[::-1]:\n                    longest = candidate if len(candidate) > len(longest) else longest\n        return longest\n')),(0,i.kt)("h3",{id:"expand-from-center"},"Expand from center"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def longestPalindrome(self, s: str) -> str:\n        segment = s[0]\n\n        for cur in range(len(s)):\n            # Consider cur as middle (length are odd)\n            for step in range(1, len(s)//2+1):\n                if cur - step < 0 or cur + step > len(s)-1:\n                    break\n                if s[cur-step] == s[cur+step]:\n                    if step*2+1 > len(segment):\n                        segment = s[cur-step:cur+step+1]\n                else:\n                    break\n\n            # Consider center is between cur & cur+1 (length are even)\n            if cur + 1 >= len(s):\n                continue\n\n            left, right = cur, cur+1\n            if s[left] != s[right]:\n                continue\n\n            while left-1 >= 0 and right+1 < len(s):\n                if s[left-1] == s[right+1]:\n                    left -= 1\n                    right += 1\n                else:\n                    break\n\n            if right - left + 1 > len(segment):\n                segment = s[left:right+1]\n\n        return segment\n")))}p.isMDXComponent=!0}}]);