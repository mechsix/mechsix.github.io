"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[38361],{3905:function(e,n,t){t.d(n,{Zo:function(){return f},kt:function(){return d}});var r=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,l=function(e,n){if(null==e)return{};var t,r,l={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},f=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},y=r.forwardRef((function(e,n){var t=e.components,l=e.mdxType,i=e.originalType,c=e.parentName,f=a(e,["components","mdxType","originalType","parentName"]),u=s(t),y=l,d=u["".concat(c,".").concat(y)]||u[y]||p[y]||i;return t?r.createElement(d,o(o({ref:n},f),{},{components:t})):r.createElement(d,o({ref:n},f))}));function d(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var i=t.length,o=new Array(i);o[0]=y;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a[u]="string"==typeof e?e:l,o[1]=a;for(var s=2;s<i;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}y.displayName="MDXCreateElement"},50670:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return i},metadata:function(){return a},toc:function(){return s}});var r=t(83117),l=(t(67294),t(3905));const i={title:"2628. JSON Deep Equal",sidebar_label:"2628. JSON Deep Equal",tags:["Leetcode Easy","JS 30 Days Challenge"]},o=void 0,a={unversionedId:"leetcode/2000/json_deep_equal",id:"leetcode/2000/json_deep_equal",title:"2628. JSON Deep Equal",description:"https://leetcode.com/problems/json-deep-equal/",source:"@site/docs/leetcode/2000/2628_json_deep_equal.md",sourceDirName:"leetcode/2000",slug:"/leetcode/2000/json_deep_equal",permalink:"/docs/leetcode/2000/json_deep_equal",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/2000/2628_json_deep_equal.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"JS 30 Days Challenge",permalink:"/docs/tags/js-30-days-challenge"}],version:"current",sidebarPosition:2628,frontMatter:{title:"2628. JSON Deep Equal",sidebar_label:"2628. JSON Deep Equal",tags:["Leetcode Easy","JS 30 Days Challenge"]},sidebar:"docSidebar",previous:{title:"2627. Debounce",permalink:"/docs/leetcode/2000/debounce"},next:{title:"2629. Function Composition",permalink:"/docs/leetcode/2000/function_composition"}},c={},s=[{value:"Javascript",id:"javascript",level:2},{value:"Typescript",id:"typescript",level:2}],f={toc:s};function u(e){let{components:n,...t}=e;return(0,l.kt)("wrapper",(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/json-deep-equal/"},"https://leetcode.com/problems/json-deep-equal/")),(0,l.kt)("h2",{id:"javascript"},"Javascript"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"var areDeeplyEqual = function(o1, o2) {\n    function dfs(left, right) {\n        const leftType = typeof left\n        const rightType = typeof right\n\n        // 1. Check type\n        if (leftType !== rightType) {\n            return false\n        }\n\n        // 2. Check simple type (bool, number, string, undefined, null, NaN)\n        if (typeof left !== 'object' || left === null || right === null) {\n            return left === right\n        }\n\n\n        // 3. Check Array\n        if (Array.isArray(left) && Array.isArray(right)) {\n            if (left.length !== right.length) {\n                return false\n            }\n            for (let i=0; i < left.length; i++) {\n                if (!dfs(left[i], right[i])) {\n                    return false\n                }\n            }\n            return true\n        }\n\n        if (Array.isArray(left) || Array.isArray(right)) {\n            return false\n        }\n\n        // 4. Check Object\n        const leftChildren = Object.keys(left)\n        const rightChildren = Object.keys(right)\n\n        if (leftChildren.length !== rightChildren.length) {\n            return false\n        }\n\n        for (const key of leftChildren) {\n            if (!dfs(left[key], right[key])) {\n                return false\n            }\n        }\n\n        // 5. Otherwise, they're equal\n        return true\n    }\n\n    return dfs(o1, o2)\n};\n")),(0,l.kt)("h2",{id:"typescript"},"Typescript"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"function areDeeplyEqual(o1: any, o2: any): boolean {\n    function dfs(left: any, right: any) {\n        const leftType = typeof left\n        const rightType = typeof right\n\n        // 1. Check type\n        if (leftType !== rightType) {\n            return false\n        }\n\n        // 2. Check simple type (bool, number, string, undefined, null, NaN)\n        if (typeof left !== 'object' || left === null || right === null) {\n            return left === right\n        }\n\n\n        // 3. Check Array\n        if (Array.isArray(left) && Array.isArray(right)) {\n            if (left.length !== right.length) {\n                return false\n            }\n            for (let i = 0; i < left.length; i++) {\n                if (!dfs(left[i], right[i])) {\n                    return false\n                }\n            }\n            return true\n        }\n\n        if (Array.isArray(left) || Array.isArray(right)) {\n            return false\n        }\n\n        // 4. Check Object\n        const leftChildren = Object.keys(left)\n        const rightChildren = Object.keys(right)\n\n        if (leftChildren.length !== rightChildren.length) {\n            return false\n        }\n\n        for (const key of leftChildren) {\n            if (!dfs(left[key], right[key])) {\n                return false\n            }\n        }\n\n        // 5. Otherwise, they're equal\n        return true\n    }\n\n    return dfs(o1, o2)\n};\n")))}u.isMDXComponent=!0}}]);