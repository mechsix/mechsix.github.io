"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[42094],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},m="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=u(n),d=o,f=m["".concat(c,".").concat(d)]||m[d]||s[d]||a;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[m]="string"==typeof e?e:o,i[1]=l;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},98759:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return u}});var r=n(83117),o=(n(67294),n(3905));const a={title:"1329. Sort the Matrix Diagonally",sidebar_label:"1329. Sort the Matrix Diagonally",tags:["Leetcode Medium","Matrix"]},i=void 0,l={unversionedId:"leetcode/1001-1500/sort_matrix_diagonally",id:"leetcode/1001-1500/sort_matrix_diagonally",title:"1329. Sort the Matrix Diagonally",description:"Python",source:"@site/docs/leetcode/1001-1500/1329_sort_matrix_diagonally.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/sort_matrix_diagonally",permalink:"/docs/leetcode/1001-1500/sort_matrix_diagonally",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1329_sort_matrix_diagonally.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Matrix",permalink:"/docs/tags/matrix"}],version:"current",sidebarPosition:1329,frontMatter:{title:"1329. Sort the Matrix Diagonally",sidebar_label:"1329. Sort the Matrix Diagonally",tags:["Leetcode Medium","Matrix"]},sidebar:"docSidebar",previous:{title:"1328. Break a Palindrome",permalink:"/docs/leetcode/1001-1500/break_palindrome"},next:{title:"1332. Remove Palindromic Subsequences",permalink:"/docs/leetcode/1001-1500/remove_palindromic_subsequences"}},c={},u=[{value:"Python",id:"python",level:2},{value:"Build Map, Sort, Put back",id:"build-map-sort-put-back",level:3},{value:"Build with Heap",id:"build-with-heap",level:2}],p={toc:u};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"build-map-sort-put-back"},"Build Map, Sort, Put back"),(0,o.kt)("p",null,"N\u662frow*col\u7684matrix\u7e3d\u6578"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Time: O(NlogN)  # sorting"),(0,o.kt)("li",{parentName:"ul"},"Space: O(N)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from collections import defaultdict, deque\n\n\nclass Solution:\n    def diagonalSort(self, mat: List[List[int]]) -> List[List[int]]:\n        m, n = len(mat), len(mat[0])\n        mapper = defaultdict(list)\n\n        # Build the map\n        for row in range(m):\n            for col in range(n):\n                mapper[row-col].append(mat[row][col])\n\n        # Sort them\n        for id in mapper.keys():\n            mapper[id].sort()\n            mapper[id] = deque(mapper[id])\n\n        # Put back\n        for row in range(m):\n            for col in range(n):\n                mat[row][col] = mapper[row-col].popleft()\n        return mat\n")),(0,o.kt)("h2",{id:"build-with-heap"},"Build with Heap"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u5c11\u4e00\u6b21loop\uff0cbuild\u7684\u6642\u5019\u5c31\u6392\u597d"),(0,o.kt)("li",{parentName:"ul"},"\u6703\u5feb\u4e00\u9ede\u9ede")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import heapq\nfrom collections import defaultdict\n\n\nclass Solution:\n    def diagonalSort(self, mat: List[List[int]]) -> List[List[int]]:\n        m, n = len(mat), len(mat[0])\n        mapper = defaultdict(list)\n\n        for row in range(m):\n            for col in range(n):\n                heapq.heappush(mapper[row-col], mat[row][col])\n\n        for row in range(m):\n            for col in range(n):\n                mat[row][col] = heapq.heappop(mapper[row-col])\n\n        return mat\n")))}m.isMDXComponent=!0}}]);