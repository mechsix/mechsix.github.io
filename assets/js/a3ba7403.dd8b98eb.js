"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[67805],{3905:function(e,t,r){r.d(t,{Zo:function(){return l},kt:function(){return f}});var n=r(67294);function c(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){c(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,c=function(e,t){if(null==e)return{};var r,n,c={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(c[r]=e[r]);return c}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(c[r]=e[r])}return c}var i=n.createContext({}),p=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},l=function(e){var t=p(e.components);return n.createElement(i.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,c=e.mdxType,o=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(r),d=c,f=u["".concat(i,".").concat(d)]||u[d]||m[d]||o;return r?n.createElement(f,a(a({ref:t},l),{},{components:r})):n.createElement(f,a({ref:t},l))}));function f(e,t){var r=arguments,c=t&&t.mdxType;if("string"==typeof e||c){var o=r.length,a=new Array(o);a[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[u]="string"==typeof e?e:c,a[1]=s;for(var p=2;p<o;p++)a[p]=r[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2094:function(e,t,r){r.r(t),r.d(t,{assets:function(){return i},contentTitle:function(){return a},default:function(){return u},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return p}});var n=r(83117),c=(r(67294),r(3905));const o={title:"844. Backspace String Compare",sidebar_label:"844. Backspace String Compare",tags:["Leetcode Easy","Stack"]},a=void 0,s={unversionedId:"leetcode/501-1000/backspacce_string_compare",id:"leetcode/501-1000/backspacce_string_compare",title:"844. Backspace String Compare",description:"https://leetcode.com/problems/backspace-string-compare/",source:"@site/docs/leetcode/501-1000/844_backspacce_string_compare.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/backspacce_string_compare",permalink:"/docs/leetcode/501-1000/backspacce_string_compare",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/844_backspacce_string_compare.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Stack",permalink:"/docs/tags/stack"}],version:"current",sidebarPosition:844,frontMatter:{title:"844. Backspace String Compare",sidebar_label:"844. Backspace String Compare",tags:["Leetcode Easy","Stack"]},sidebar:"docSidebar",previous:{title:"841. Keys and Rooms",permalink:"/docs/leetcode/501-1000/keys_and_rooms"},next:{title:"858. Mirror Reflection",permalink:"/docs/leetcode/501-1000/mirror_reflection"}},i={},p=[{value:"Python",id:"python",level:2},{value:"Go",id:"go",level:2}],l={toc:p};function u(e){let{components:t,...r}=e;return(0,c.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/backspace-string-compare/"},"https://leetcode.com/problems/backspace-string-compare/")),(0,c.kt)("h2",{id:"python"},"Python"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def backspaceCompare(self, s: str, t: str) -> bool:\n        return self.convert(s) == self.convert(t)\n\n    @staticmethod\n    def convert(s: str):\n        stack = []\n        for char in s:\n            if char == '#':\n                if stack:\n                    stack.pop()\n                continue\n            stack.append(char)\n\n        return ''.join(stack)\n")),(0,c.kt)("h2",{id:"go"},"Go"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-go"},"func backspaceCompare(s string, t string) bool {\n    return convert(s) == convert(t)\n}\n\nfunc convert(s string) string {\n    stack := []byte{}\n    for i := range s {\n        if s[i] == '#' {\n            if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n            }\n        } else {\n            stack = append(stack, s[i])\n        }\n    }\n    return string(stack)\n}\n")))}u.isMDXComponent=!0}}]);