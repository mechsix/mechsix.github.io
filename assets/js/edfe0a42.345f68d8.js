"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[18362],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return p}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=r.createContext({}),c=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(d.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,d=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),s=c(n),p=o,m=s["".concat(d,".").concat(p)]||s[p]||f[p]||l;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,i=new Array(l);i[0]=s;var a={};for(var d in t)hasOwnProperty.call(t,d)&&(a[d]=t[d]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var c=2;c<l;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},87923:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return d},default:function(){return s},frontMatter:function(){return a},metadata:function(){return c},toc:function(){return u}});var r=n(87462),o=n(63366),l=(n(67294),n(3905)),i=["components"],a={title:"450. Delete Node in a BST",sidebar_label:"450. Delete Node in a BST",tags:["Leetcode Medium","BST"]},d=void 0,c={unversionedId:"leetcode/1-500/delete_bst_node",id:"leetcode/1-500/delete_bst_node",title:"450. Delete Node in a BST",description:"https://leetcode.com/problems/delete-node-in-a-bst",source:"@site/docs/leetcode/1-500/450_delete_bst_node.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/delete_bst_node",permalink:"/docs/leetcode/1-500/delete_bst_node",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/450_delete_bst_node.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"BST",permalink:"/docs/tags/bst"}],version:"current",sidebarPosition:450,frontMatter:{title:"450. Delete Node in a BST",sidebar_label:"450. Delete Node in a BST",tags:["Leetcode Medium","BST"]},sidebar:"docSidebar",previous:{title:"448. Find All Numbers Disappeared in an Array",permalink:"/docs/leetcode/1-500/find_all_nums_disappeared_in_array"},next:{title:"451. Sort Characters By Frequency",permalink:"/docs/leetcode/1-500/sort_char_by_frequency"}},u=[{value:"Python",id:"python",children:[],level:2}],f={toc:u};function s(e){var t=e.components,n=(0,o.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/delete-node-in-a-bst"},"https://leetcode.com/problems/delete-node-in-a-bst")),(0,l.kt)("h2",{id:"python"},"Python"),(0,l.kt)("p",null,"Steps"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Find the target node"),(0,l.kt)("li",{parentName:"ul"},"If target node at leaf, delete it"),(0,l.kt)("li",{parentName:"ul"},"If target node has children, replace it with the Max(left) or Min(right)")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Replace with Min Right"',title:'"Replace',with:!0,Min:!0,'Right"':!0},"class Solution:\n    def deleteNode(self, root: Optional[TreeNode], key: int) -> Optional[TreeNode]:\n        if not root:\n            return\n\n        if root.val == key:\n            if not root.left:\n                return root.right\n            if not root.right:\n                return root.left\n\n            min_node = self.find_min(root.right)\n            root.right = self.deleteNode(root.right, min_node.val)\n\n            min_node.left = root.left\n            min_node.right = root.right\n\n            root = min_node\n\n        elif root.val > key:\n            root.left = self.deleteNode(root.left, key)\n\n        elif root.val < key:\n            root.right = self.deleteNode(root.right, key)\n\n        return root\n\n\n    def find_min(self, node):\n        if not node:\n            return\n        cur = node\n        while cur.left:\n            cur = cur.left\n        return cur\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Replace with Max Left"',title:'"Replace',with:!0,Max:!0,'Left"':!0},"class Solution:\n    def deleteNode(self, root: Optional[TreeNode], key: int) -> Optional[TreeNode]:\n        if not root:\n            return\n\n        if root.val == key:\n            if not root.left:\n                return root.right\n            if not root.right:\n                return root.left\n\n            max_node = self.find_max(root.left)\n            root.left = self.deleteNode(root.left, max_node.val)\n\n            max_node.left = root.left\n            max_node.right = root.right\n\n            root = max_node\n\n        elif root.val > key:\n            root.left = self.deleteNode(root.left, key)\n\n        elif root.val < key:\n            root.right = self.deleteNode(root.right, key)\n\n        return root\n\n    def find_max(self, node):\n        if not node:\n            return\n        cur = node\n        while cur.right:\n            cur = cur.right\n\n        return cur\n")))}s.isMDXComponent=!0}}]);