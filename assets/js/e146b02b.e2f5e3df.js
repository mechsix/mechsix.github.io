"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[42094],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),p=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},m="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(r),d=a,f=m["".concat(c,".").concat(d)]||m[d]||s[d]||o;return r?n.createElement(f,i(i({ref:t},u),{},{components:r})):n.createElement(f,i({ref:t},u))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[m]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},98759:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>s,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=r(87462),a=(r(67294),r(3905));const o={title:"1329. Sort the Matrix Diagonally",sidebar_label:"1329. Sort the Matrix Diagonally",tags:["Leetcode Medium","Matrix"]},i=void 0,l={unversionedId:"leetcode/1001-1500/sort_matrix_diagonally",id:"leetcode/1001-1500/sort_matrix_diagonally",title:"1329. Sort the Matrix Diagonally",description:"Python",source:"@site/docs/leetcode/1001-1500/1329_sort_matrix_diagonally.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/sort_matrix_diagonally",permalink:"/docs/leetcode/1001-1500/sort_matrix_diagonally",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1329_sort_matrix_diagonally.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Matrix",permalink:"/docs/tags/matrix"}],version:"current",sidebarPosition:1329,frontMatter:{title:"1329. Sort the Matrix Diagonally",sidebar_label:"1329. Sort the Matrix Diagonally",tags:["Leetcode Medium","Matrix"]},sidebar:"docSidebar",previous:{title:"1328. Break a Palindrome",permalink:"/docs/leetcode/1001-1500/break_palindrome"},next:{title:"1332. Remove Palindromic Subsequences",permalink:"/docs/leetcode/1001-1500/remove_palindromic_subsequences"}},c={},p=[{value:"Python",id:"python",level:2},{value:"Build Map, Sort, Put back",id:"build-map-sort-put-back",level:3},{value:"Build with Heap",id:"build-with-heap",level:2}],u={toc:p},m="wrapper";function s(e){let{components:t,...r}=e;return(0,a.kt)(m,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("h3",{id:"build-map-sort-put-back"},"Build Map, Sort, Put back"),(0,a.kt)("p",null,"N\u662frow*col\u7684matrix\u7e3d\u6578"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Time: O(NlogN)  # sorting"),(0,a.kt)("li",{parentName:"ul"},"Space: O(N)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from collections import defaultdict, deque\n\n\nclass Solution:\n    def diagonalSort(self, mat: List[List[int]]) -> List[List[int]]:\n        m, n = len(mat), len(mat[0])\n        mapper = defaultdict(list)\n\n        # Build the map\n        for row in range(m):\n            for col in range(n):\n                mapper[row-col].append(mat[row][col])\n\n        # Sort them\n        for id in mapper.keys():\n            mapper[id].sort()\n            mapper[id] = deque(mapper[id])\n\n        # Put back\n        for row in range(m):\n            for col in range(n):\n                mat[row][col] = mapper[row-col].popleft()\n        return mat\n")),(0,a.kt)("h2",{id:"build-with-heap"},"Build with Heap"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u5c11\u4e00\u6b21loop\uff0cbuild\u7684\u6642\u5019\u5c31\u6392\u597d"),(0,a.kt)("li",{parentName:"ul"},"\u6703\u5feb\u4e00\u9ede\u9ede")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import heapq\nfrom collections import defaultdict\n\n\nclass Solution:\n    def diagonalSort(self, mat: List[List[int]]) -> List[List[int]]:\n        m, n = len(mat), len(mat[0])\n        mapper = defaultdict(list)\n\n        for row in range(m):\n            for col in range(n):\n                heapq.heappush(mapper[row-col], mat[row][col])\n\n        for row in range(m):\n            for col in range(n):\n                mat[row][col] = heapq.heappop(mapper[row-col])\n\n        return mat\n")))}s.isMDXComponent=!0}}]);