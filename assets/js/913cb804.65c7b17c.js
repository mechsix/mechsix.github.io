"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[49463],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var a=r.createContext({}),c=function(e){var t=r.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(a.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(n),f=o,m=p["".concat(a,".").concat(f)]||p[f]||u[f]||i;return n?r.createElement(m,l(l({ref:t},d),{},{components:n})):r.createElement(m,l({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,l=new Array(i);l[0]=f;var s={};for(var a in t)hasOwnProperty.call(t,a)&&(s[a]=t[a]);s.originalType=e,s[p]="string"==typeof e?e:o,l[1]=s;for(var c=2;c<i;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},54663:function(e,t,n){n.r(t),n.d(t,{assets:function(){return a},contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return c}});var r=n(83117),o=(n(67294),n(3905));const i={title:"583. Delete Operation for Two Strings",sidebar_label:"583. Delete Operation for Two Strings",tags:["Leetcode Medium","DP"]},l=void 0,s={unversionedId:"leetcode/501-1000/delete_operation_for_two_strings",id:"leetcode/501-1000/delete_operation_for_two_strings",title:"583. Delete Operation for Two Strings",description:"https://leetcode.com/problems/delete-operation-for-two-strings/",source:"@site/docs/leetcode/501-1000/583_delete_operation_for_two_strings.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/delete_operation_for_two_strings",permalink:"/docs/leetcode/501-1000/delete_operation_for_two_strings",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/583_delete_operation_for_two_strings.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"DP",permalink:"/docs/tags/dp"}],version:"current",sidebarPosition:583,frontMatter:{title:"583. Delete Operation for Two Strings",sidebar_label:"583. Delete Operation for Two Strings",tags:["Leetcode Medium","DP"]},sidebar:"docSidebar",previous:{title:"581. Shortest Unsorted Continuous Subarray",permalink:"/docs/leetcode/501-1000/sortest_unsorted_continuous_subarray"},next:{title:"588. Design In-Memory File System",permalink:"/docs/leetcode/501-1000/design_in_memory_file_system"}},a={},c=[{value:"Python",id:"python",level:2},{value:"Bottom-up DP with LCS",id:"bottom-up-dp-with-lcs",level:3},{value:"JS",id:"js",level:2}],d={toc:c};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/delete-operation-for-two-strings/"},"https://leetcode.com/problems/delete-operation-for-two-strings/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"bottom-up-dp-with-lcs"},"Bottom-up DP with LCS"),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"/docs/leetcode/1001-1500/longest_common_subsequence"},"1143. Longest Common Subsequence")," for detail"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def minDistance(self, word1: str, word2: str) -> int:\n        lcs = self.longestCommonSubsequence(word1, word2)\n        return len(word1)-lcs + len(word2)-lcs\n    \n    \n    def longestCommonSubsequence(self, text1: str, text2: str) -> int:\n        dp = [[0]*(len(text2)+1) for _ in range(len(text1)+1)]\n\n        for col in range(len(text2)-1, -1, -1):\n            for row in range(len(text1)-1, -1, -1):\n                if text2[col] == text1[row]:\n                    dp[row][col] = 1 + dp[row+1][col+1]\n                else:\n                    dp[row][col] = max(dp[row+1][col], dp[row][col+1])\n        return dp[0][0]\n")),(0,o.kt)("h2",{id:"js"},"JS"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var minDistance = function(word1, word2) {\n    // if (word1 === word2) return 0;\n    const dp = [...new Array(word1.length + 1)].map(() => new Array(word2.length + 1).fill(0));\n    \n    for (let i = 0; i <= word1.length; i++) {\n        for (let j = 0; j <= word2.length; j++) {\n            if (i === 0 || j === 0 ) dp[i][j] = 0;\n            else {\n                if (word1[i - 1] === word2[j - 1]) {\n                    dp[i][j] = dp[i - 1][j - 1] + 1;\n                } else {\n                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n    }\n    // console.log(dp)\n    return (word1.length + word2.length) - 2 * dp[word1.length][word2.length];\n};\n\n/***\n *   " s e a    " a\n * " 0 0 0 0  " 0 0\n * e 0 0 1 1  b 0 0\n * a 0 0 1 2\n * t 0 0 1 2\n */\n')))}p.isMDXComponent=!0}}]);