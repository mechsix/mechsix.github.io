"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[73732],{3905:function(e,t,n){n.d(t,{Zo:function(){return a},kt:function(){return m}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):u(u({},t),e)),n},a=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,a=s(e,["components","mdxType","originalType","parentName"]),p=c(n),f=o,m=p["".concat(l,".").concat(f)]||p[f]||d[f]||i;return n?r.createElement(m,u(u({ref:t},a),{},{components:n})):r.createElement(m,u({ref:t},a))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,u=new Array(i);u[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:o,u[1]=s;for(var c=2;c<i;c++)u[c]=n[c];return r.createElement.apply(null,u)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},37585:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return u},default:function(){return p},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return c}});var r=n(83117),o=(n(67294),n(3905));const i={title:"7. Reverse Integer",sidebar_label:"7. Reverse Integer",tags:["Leetcode Medium"]},u=void 0,s={unversionedId:"leetcode/1-500/reverse_int",id:"leetcode/1-500/reverse_int",title:"7. Reverse Integer",description:"https://leetcode.com/problems/reverse-integer/",source:"@site/docs/leetcode/1-500/7_reverse_int.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/reverse_int",permalink:"/docs/leetcode/1-500/reverse_int",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/7_reverse_int.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"}],version:"current",sidebarPosition:7,frontMatter:{title:"7. Reverse Integer",sidebar_label:"7. Reverse Integer",tags:["Leetcode Medium"]},sidebar:"docSidebar",previous:{title:"6. Zigzag Conversion",permalink:"/docs/leetcode/1-500/zigzag_conversion"},next:{title:"8. String to Integer (atoi)",permalink:"/docs/leetcode/1-500/atoi"}},l={},c=[{value:"Python",id:"python",level:2},{value:"Forces Bust",id:"forces-bust",level:3},{value:"Queue",id:"queue",level:3}],a={toc:c};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},a,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/reverse-integer/"},"https://leetcode.com/problems/reverse-integer/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"forces-bust"},"Forces Bust"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def reverse(self, x: int) -> int:\n        digits = str(x)[::-1]\n        \n        \n        if digits[-1] == '-':\n            result = -int(digits[:-1])\n        else:\n            result = int(digits)\n            \n        return result if result > 1-2**31 and result < 2**31-1 else 0\n")),(0,o.kt)("h3",{id:"queue"},"Queue"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from collections import deque\n\n\nclass Solution:\n    def reverse(self, x: int) -> int:\n        queue = deque()\n        \n        # Check is native or not\n        if x < 0:\n            is_native = True\n            x = abs(x)\n        else:\n            is_native = False\n        \n        # Push to queue\n        while x // 10 > 0:\n            queue.append(x % 10)\n            x //= 10\n        queue.append(x)\n        \n        # Pop from queue and accumulate to the reversed num\n        power = len(queue) - 1\n        result = 0\n        while queue:\n            result += queue.popleft() * (10 ** power)\n            power -= 1\n            \n        if is_native:\n            result = -result\n\n        return result if result > 1-2**31 and result < 2**31-1 else 0\n")))}p.isMDXComponent=!0}}]);