"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[6731],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return f}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):u(u({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),p=c(n),f=o,b=p["".concat(l,".").concat(f)]||p[f]||d[f]||i;return n?r.createElement(b,u(u({ref:t},s),{},{components:n})):r.createElement(b,u({ref:t},s))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,u=new Array(i);u[0]=p;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType="string"==typeof e?e:o,u[1]=a;for(var c=2;c<i;c++)u[c]=n[c];return r.createElement.apply(null,u)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},31736:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return a},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return s},default:function(){return p}});var r=n(87462),o=n(63366),i=(n(67294),n(3905)),u=["components"],a={title:"250. Count Univalue Subtrees",sidebar_label:"250. Count Univalue Subtrees",tags:["Leetcode Medium","Binary Tree"]},l=void 0,c={unversionedId:"leetcode/count_univalue_subtree",id:"leetcode/count_univalue_subtree",title:"250. Count Univalue Subtrees",description:"Python",source:"@site/docs/leetcode/250_count_univalue_subtree.md",sourceDirName:"leetcode",slug:"/leetcode/count_univalue_subtree",permalink:"/docs/leetcode/count_univalue_subtree",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/250_count_univalue_subtree.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"}],version:"current",sidebarPosition:250,frontMatter:{title:"250. Count Univalue Subtrees",sidebar_label:"250. Count Univalue Subtrees",tags:["Leetcode Medium","Binary Tree"]},sidebar:"docSidebar",previous:{title:"230. Kth Smallest Element in a BST",permalink:"/docs/leetcode/kth_smallest_elm_in_bst"},next:{title:"260. Single Number III",permalink:"/docs/leetcode/single_number_iii"}},s=[{value:"Python",id:"python",children:[],level:2}],d={toc:s};function p(e){var t=e.components,n=(0,o.Z)(e,u);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def __init__(self):\n        self.ans = 0\n\n    def countUnivalSubtrees(self, root: Optional[TreeNode]) -> int:\n        if not root:\n            return 0\n\n        if self.check_tree(root, root.val):\n            self.ans += 1\n\n        self.countUnivalSubtrees(root.left)\n        self.countUnivalSubtrees(root.right)\n\n        return self.ans\n\n    def check_tree(self, node: Optional[TreeNode], parent_var: int) -> int:\n        if not node:\n            return True\n\n        if  node.val == parent_var \\\n        and self.check_tree(node.left, parent_var) \\\n        and self.check_tree(node.right, parent_var):\n            return True\n\n        return False\n")))}p.isMDXComponent=!0}}]);