"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[4073],{3905:function(e,n,t){t.d(n,{Zo:function(){return a},kt:function(){return p}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var d=r.createContext({}),u=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},a=function(e){var n=u(e.components);return r.createElement(d.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,d=e.parentName,a=l(e,["components","mdxType","originalType","parentName"]),m=u(t),p=o,f=m["".concat(d,".").concat(p)]||m[p]||s[p]||i;return t?r.createElement(f,c(c({ref:n},a),{},{components:t})):r.createElement(f,c({ref:n},a))}));function p(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,c=new Array(i);c[0]=m;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l.mdxType="string"==typeof e?e:o,c[1]=l;for(var u=2;u<i;u++)c[u]=t[u];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},41842:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return d},metadata:function(){return u},toc:function(){return a},default:function(){return m}});var r=t(87462),o=t(63366),i=(t(67294),t(3905)),c=["components"],l={title:"19. Remove Nth Node From End of List",sidebar_label:"19. Remove Nth Node From End of List",tags:["Linked List","Leetcode Medium"]},d=void 0,u={unversionedId:"leetcode/1-500/remove_nth_from_eof_linked_list",id:"leetcode/1-500/remove_nth_from_eof_linked_list",title:"19. Remove Nth Node From End of List",description:"https://leetcode.com/problems/remove-nth-node-from-end-of-list",source:"@site/docs/leetcode/1-500/19_remove_nth_from_eof_linked_list.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/remove_nth_from_eof_linked_list",permalink:"/docs/leetcode/1-500/remove_nth_from_eof_linked_list",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/19_remove_nth_from_eof_linked_list.md",tags:[{label:"Linked List",permalink:"/docs/tags/linked-list"},{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"}],version:"current",sidebarPosition:19,frontMatter:{title:"19. Remove Nth Node From End of List",sidebar_label:"19. Remove Nth Node From End of List",tags:["Linked List","Leetcode Medium"]},sidebar:"docSidebar",previous:{title:"15. 3Sum",permalink:"/docs/leetcode/1-500/three_sum"},next:{title:"20. Valid Parentheses",permalink:"/docs/leetcode/1-500/valid_parentheses"}},a=[{value:"Python",id:"python",children:[{value:"(First Run)",id:"first-run",children:[],level:3},{value:"(Second Run)",id:"second-run",children:[],level:3}],level:2},{value:"Javascript",id:"javascript",children:[],level:2}],s={toc:a};function m(e){var n=e.components,t=(0,o.Z)(e,c);return(0,i.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/remove-nth-node-from-end-of-list"},"https://leetcode.com/problems/remove-nth-node-from-end-of-list")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"first-run"},"(First Run)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:\n        dummy = ListNode(val=-1, next=head)\n        cur_1 = dummy\n        cur_2 = dummy\n\n        for i in range(0, n+1):\n            cur_1 = cur_1.next\n\n        while cur_1 is not None:\n            cur_1 = cur_1.next\n            cur_2 = cur_2.next\n\n        cur_2.next = cur_2.next.next\n        return dummy.next\n")),(0,i.kt)("h3",{id:"second-run"},"(Second Run)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:\n        cur = head\n        length = 0\n\n        while cur:\n            cur = cur.next\n            length += 1\n\n        dummy = ListNode(val=-1, next=head)\n        cur = dummy\n        for i in range(length-n):\n            cur = cur.next\n\n        cur.next = cur.next.next if cur.next else cur.next\n        return dummy.next\n")),(0,i.kt)("h2",{id:"javascript"},"Javascript"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"var removeNthFromEnd = function(head, n) {\n    let prevNode = null;\n    let currNode = head;\n    \n    while (currNode !== null) {\n      const nextNode = currNode.next;\n      currNode.next = prevNode;\n      \n      prevNode = currNode;\n      currNode = nextNode;\n    }\n  \n  \n    currNode = new ListNode(0, prevNode);\n    prevNode = null;\n    let count = 0\n  \n    while (currNode !== null) {\n      const nextNode = n - 1 === count ? currNode.next.next : currNode.next;\n      currNode.next = prevNode;\n      \n      prevNode = count === 0 ? prevNode : currNode;\n      currNode = nextNode;\n      \n      count++;\n    }\n  \n    return prevNode;\n};\n")))}m.isMDXComponent=!0}}]);