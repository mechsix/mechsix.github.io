"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[71740],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=d(n),f=o,m=c["".concat(l,".").concat(f)]||c[f]||u[f]||a;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:o,i[1]=s;for(var d=2;d<a;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},82951:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var r=n(87462),o=(n(67294),n(3905));const a={title:"24. Swap Nodes in Pairs",sidebar_label:"24. Swap Nodes in Pairs",tags:["Leetcode Medium","Linked List","Go"]},i=void 0,s={unversionedId:"leetcode/1-500/swap_nodes_in_pairs",id:"leetcode/1-500/swap_nodes_in_pairs",title:"24. Swap Nodes in Pairs",description:"https://leetcode.com/problems/swap-nodes-in-pairs",source:"@site/docs/leetcode/1-500/24_swap_nodes_in_pairs.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/swap_nodes_in_pairs",permalink:"/docs/leetcode/1-500/swap_nodes_in_pairs",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/24_swap_nodes_in_pairs.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Linked List",permalink:"/docs/tags/linked-list"},{label:"Go",permalink:"/docs/tags/go"}],version:"current",sidebarPosition:24,frontMatter:{title:"24. Swap Nodes in Pairs",sidebar_label:"24. Swap Nodes in Pairs",tags:["Leetcode Medium","Linked List","Go"]},sidebar:"docSidebar",previous:{title:"23. Merge k Sorted Lists",permalink:"/docs/leetcode/1-500/merge_k_sorted_lists"},next:{title:"25. Reverse Nodes in k-Group",permalink:"/docs/leetcode/1-500/reverse_nodes_in_k_group"}},l={},d=[{value:"Python",id:"python",level:2},{value:"Go",id:"go",level:2}],p={toc:d},c="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/swap-nodes-in-pairs"},"https://leetcode.com/problems/swap-nodes-in-pairs")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"First Try")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        if not head:\n            return\n\n        cur = head\n        dummy_head = ListNode(val=None, next=head)\n        pre = dummy_head\n        while cur and cur.next:\n            next_cur = cur.next.next\n            new_left = self._swap(cur, cur.next)\n            pre.next = new_left\n            pre = new_left.next\n            cur = next_cur\n\n        return dummy_head.next\n\n    def _swap(self, left, right):\n        if not right:\n            return left\n        left.next, right.next = right.next, left\n        return right\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Second Try, more clear")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        if not head or not head.next:\n            return head\n\n        left = head\n        right = head.next\n\n        left.next = self.swapPairs(right.next)\n        right.next = left\n\n        return right\n")),(0,o.kt)("h2",{id:"go"},"Go"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func swapPairs(head *ListNode) *ListNode {\n    if (head == nil || head.Next == nil) {\n        return head\n    }\n\n    left := head\n    right := head.Next\n\n    left.Next = swapPairs(right.Next)\n    right.Next = left\n\n    return right\n}\n")))}u.isMDXComponent=!0}}]);