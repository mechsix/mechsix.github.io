"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[53586],{3905:function(e,t,r){r.d(t,{Zo:function(){return d},kt:function(){return m}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),l=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},d=function(e){var t=l(e.components);return n.createElement(i.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,s=e.originalType,i=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=l(r),f=o,m=p["".concat(i,".").concat(f)]||p[f]||u[f]||s;return r?n.createElement(m,a(a({ref:t},d),{},{components:r})):n.createElement(m,a({ref:t},d))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=r.length,a=new Array(s);a[0]=f;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c[p]="string"==typeof e?e:o,a[1]=c;for(var l=2;l<s;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},88252:function(e,t,r){r.r(t),r.d(t,{assets:function(){return i},contentTitle:function(){return a},default:function(){return p},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return l}});var n=r(83117),o=(r(67294),r(3905));const s={title:"93. Restore IP Addresses",slidebar_label:"93. Restore IP Addresses",tags:["Leetcode Medium","Backtracking"]},a=void 0,c={unversionedId:"leetcode/1-500/restore_ip_addresses",id:"leetcode/1-500/restore_ip_addresses",title:"93. Restore IP Addresses",description:"https://leetcode.com/problems/restore-ip-addresses",source:"@site/docs/leetcode/1-500/93_restore_ip_addresses.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/restore_ip_addresses",permalink:"/docs/leetcode/1-500/restore_ip_addresses",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/93_restore_ip_addresses.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Backtracking",permalink:"/docs/tags/backtracking"}],version:"current",sidebarPosition:93,frontMatter:{title:"93. Restore IP Addresses",slidebar_label:"93. Restore IP Addresses",tags:["Leetcode Medium","Backtracking"]},sidebar:"docSidebar",previous:{title:"92. Reverse Linked List II",permalink:"/docs/leetcode/1-500/reverse_linked_list_ii"},next:{title:"94. Binary Tree Inorder Traversal",permalink:"/docs/leetcode/1-500/binary_tree_inorder"}},i={},l=[{value:"Python",id:"python",level:2},{value:"Backtracking",id:"backtracking",level:3}],d={toc:l};function p(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/restore-ip-addresses"},"https://leetcode.com/problems/restore-ip-addresses")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"backtracking"},"Backtracking"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def restoreIpAddresses(self, s: str) -> List[str]:\n        ans = []\n        def backtracking(left, stack):\n            if len(stack) == 4 and left == len(s):\n                nonlocal ans\n                ans.append('.'.join([str(num) for num in stack]))\n\n            if len(stack) > 3:\n                return\n\n            if left < len(s) and s[left] == '0':\n                stack.append('0')\n                backtracking(left+1, stack)\n                stack.pop()\n                return\n\n            for right in range(left+1, len(s)+1):\n                cand = s[left:right]\n\n                if int(cand) > 255:\n                    continue\n                stack.append(''.join(cand))\n                backtracking(right, stack)\n                stack.pop()\n\n        backtracking(0, [])\n\n        return ans\n")))}p.isMDXComponent=!0}}]);