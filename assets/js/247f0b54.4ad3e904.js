"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[56683],{4488:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>m});var o=n(74848),r=n(28453);const a={title:"1161. Maximum Level Sum of a Binary Tree",sidebar_label:"1161. Maximum Level Sum of a Binary Tree",tags:["Leetcode Medium","Binary Tree"]},i=void 0,l={id:"leetcode/1001-1500/max_level_sum_of_binary_tree",title:"1161. Maximum Level Sum of a Binary Tree",description:"https://leetcode.com/problems/maximum-level-sum-of-a-binary-tree",source:"@site/docs/leetcode/1001-1500/1161_max_level_sum_of_binary_tree.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/max_level_sum_of_binary_tree",permalink:"/docs/leetcode/1001-1500/max_level_sum_of_binary_tree",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"}],version:"current",sidebarPosition:1161,frontMatter:{title:"1161. Maximum Level Sum of a Binary Tree",sidebar_label:"1161. Maximum Level Sum of a Binary Tree",tags:["Leetcode Medium","Binary Tree"]},sidebar:"docSidebar",previous:{title:"1155. Number of Dice Rolls With Target Sum",permalink:"/docs/leetcode/1001-1500/num_of_rolls_with_target_sum"},next:{title:"1167. Minimum Cost to Connect Sticks",permalink:"/docs/leetcode/1001-1500/min_cost_to_connect_sticks"}},s={},m=[{value:"Python",id:"python",level:2}];function c(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{href:"https://leetcode.com/problems/maximum-level-sum-of-a-binary-tree",children:"https://leetcode.com/problems/maximum-level-sum-of-a-binary-tree"})}),"\n",(0,o.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"from collections import defaultdict\n\n\nclass Solution:\n    def maxLevelSum(self, root: Optional[TreeNode]) -> int:\n        mapper = defaultdict(int)\n\n        def dfs(node, level):\n            if not node:\n                return\n            \n            mapper[level] += node.val\n\n            dfs(node.left, level+1)\n            dfs(node.right, level+1)\n        \n        dfs(root, 1)\n\n        reverse_map = defaultdict(list)\n        for key, value in mapper.items():\n            reverse_map[value].append(key)\n        \n        return min(reverse_map[max(mapper.values())])\n"})})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>l});var o=n(96540);const r={},a=o.createContext(r);function i(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);