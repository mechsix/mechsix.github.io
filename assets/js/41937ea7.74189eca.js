"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[15634],{66:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>f,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>u,toc:()=>a});var t=i(74848),s=i(28453);const r={title:"1658. Minimum Operations to Reduce X to Zero",sidebar_label:"1658. Minimum Operations to Reduce X to Zero",tags:["Leetcode Medium","Prefix Sum","Binary Search"]},o=void 0,u={id:"leetcode/1501-2000/min_operations_to_reduce_x_to_zero",title:"1658. Minimum Operations to Reduce X to Zero",description:"Python",source:"@site/docs/leetcode/1501-2000/1658_min_operations_to_reduce_x_to_zero.md",sourceDirName:"leetcode/1501-2000",slug:"/leetcode/1501-2000/min_operations_to_reduce_x_to_zero",permalink:"/docs/leetcode/1501-2000/min_operations_to_reduce_x_to_zero",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Prefix Sum",permalink:"/docs/tags/prefix-sum"},{label:"Binary Search",permalink:"/docs/tags/binary-search"}],version:"current",sidebarPosition:1658,frontMatter:{title:"1658. Minimum Operations to Reduce X to Zero",sidebar_label:"1658. Minimum Operations to Reduce X to Zero",tags:["Leetcode Medium","Prefix Sum","Binary Search"]},sidebar:"docSidebar",previous:{title:"1650. Lowest Common Ancestor of a Binary Tree III",permalink:"/docs/leetcode/1501-2000/lowest_common_ancestor_of_a_binary_tree_iii"},next:{title:"1662. Check If Two String Arrays are Equivalent",permalink:"/docs/leetcode/1501-2000/check_if_two_string_arrays_are_equivalent"}},f={},a=[{value:"Python",id:"python",level:2},{value:"DFS with Prefix/Suffix Sum",id:"dfs-with-prefixsuffix-sum",level:3},{value:"Prefix Sum with Binary Search",id:"prefix-sum-with-binary-search",level:3}];function p(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,t.jsx)(n.h3,{id:"dfs-with-prefixsuffix-sum",children:"DFS with Prefix/Suffix Sum"}),"\n",(0,t.jsx)(n.p,{children:"(Timelimit Exceed)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from functools import cache\nfrom math import inf\n\nclass Solution:\n    def minOperations(self, nums: List[int], x: int) -> int:\n        n = len(nums)\n        prefix_sum = [0, nums[0]]\n        suffix_sum = [0, nums[-1]]\n\n        for i in range(1, n):\n            prefix_sum.append(prefix_sum[i] + nums[i])\n            suffix_sum.append(suffix_sum[i] + nums[len(nums)-i-1])\n\n        @cache\n        def dfs(pre_i, suf_i):\n            if pre_i == n or suf_i == n:\n                return inf\n\n            current_total = prefix_sum[pre_i] + suffix_sum[suf_i]\n\n            if current_total > x:\n                return inf\n\n            if current_total == x:\n                print("HIT", pre_i, suf_i)\n                return pre_i + suf_i\n\n            left_steps = dfs(pre_i+1, suf_i)\n            right_steps = dfs(pre_i, suf_i+1)\n            print(pre_i, suf_i, left_steps, right_steps)\n            return min(left_steps, right_steps)\n\n        steps = dfs(0, 0)\n        return -1 if steps == inf else steps\n'})}),"\n",(0,t.jsx)(n.h3,{id:"prefix-sum-with-binary-search",children:"Prefix Sum with Binary Search"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from functools import cache\nfrom math import inf\n\nclass Solution:\n    def minOperations(self, nums: List[int], x: int) -> int:\n        n = len(nums)\n\n        prefix_sum = [0, nums[0]]\n        suffix_sum = [0, nums[-1]]\n        for i in range(1, n):\n            prefix_sum.append(prefix_sum[i] + nums[i])\n            suffix_sum.append(suffix_sum[i] + nums[len(nums)-i-1])\n\n        # print(prefix_sum, suffix_sum)\n\n        if prefix_sum[-1] < x:\n            # sum(nums) less than x, which is not possible to find ans\n            return -1\n\n        steps = inf\n        for pre_step in range(n+1):\n            pre = prefix_sum[pre_step]\n            suf_step = self._bsearch(suffix_sum, x-pre)\n            # print(pre_step, suf_step)\n            if suf_step != -1:\n                steps = min(steps, pre_step+suf_step)\n\n        return -1 if steps == inf else steps\n\n    @staticmethod\n    def _bsearch(arr, target):\n        left, right = 0, len(arr)-1\n\n        while left <= right:\n            pivot = (left + right) >> 1\n\n            value = arr[pivot]\n            if value == target:\n                return pivot\n            elif value < target:\n                left = pivot + 1\n            else:\n                right = pivot - 1\n\n        return -1\n"})})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>u});var t=i(96540);const s={},r=t.createContext(s);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function u(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);