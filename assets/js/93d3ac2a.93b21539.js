"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[57577],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>f});var o=t(67294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function c(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function a(e,r){if(null==e)return{};var t,o,n=function(e,r){if(null==e)return{};var t,o,n={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var l=o.createContext({}),d=function(e){var r=o.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):c(c({},r),e)),t},p=function(e){var r=d(e.components);return o.createElement(l.Provider,{value:r},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},m=o.forwardRef((function(e,r){var t=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),s=d(t),m=n,f=s["".concat(l,".").concat(m)]||s[m]||u[m]||i;return t?o.createElement(f,c(c({ref:r},p),{},{components:t})):o.createElement(f,c({ref:r},p))}));function f(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var i=t.length,c=new Array(i);c[0]=m;var a={};for(var l in r)hasOwnProperty.call(r,l)&&(a[l]=r[l]);a.originalType=e,a[s]="string"==typeof e?e:n,c[1]=a;for(var d=2;d<i;d++)c[d]=t[d];return o.createElement.apply(null,c)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},51321:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var o=t(87462),n=(t(67294),t(3905));const i={title:"869. Reordered Power of 2",sidebar_label:"869. Reordered Power of 2",tags:["Leetcode Medium","Bit Manipulation"]},c=void 0,a={unversionedId:"leetcode/501-1000/recordered_power_of_2",id:"leetcode/501-1000/recordered_power_of_2",title:"869. Reordered Power of 2",description:"https://leetcode.com/problems/reordered-power-of-2/",source:"@site/docs/leetcode/501-1000/869_recordered_power_of_2.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/recordered_power_of_2",permalink:"/docs/leetcode/501-1000/recordered_power_of_2",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/869_recordered_power_of_2.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Bit Manipulation",permalink:"/docs/tags/bit-manipulation"}],version:"current",sidebarPosition:869,frontMatter:{title:"869. Reordered Power of 2",sidebar_label:"869. Reordered Power of 2",tags:["Leetcode Medium","Bit Manipulation"]},sidebar:"docSidebar",previous:{title:"867. Transpose Matrix",permalink:"/docs/leetcode/501-1000/transpose_matrix"},next:{title:"871. Minimum Number of Refueling Stops",permalink:"/docs/leetcode/501-1000/minimum_number_of_refueling_stops"}},l={},d=[{value:"Python",id:"python",level:2}],p={toc:d},s="wrapper";function u(e){let{components:r,...t}=e;return(0,n.kt)(s,(0,o.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/reordered-power-of-2/"},"https://leetcode.com/problems/reordered-power-of-2/")),(0,n.kt)("h2",{id:"python"},"Python"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"from collections import Counter\nfrom itertools import permutations\n\n\nclass Solution:\n    def reorderedPowerOf2(self, n: int) -> bool:\n        nums = [int(''.join(cand)) for cand in permutations(str(n)) if cand[0] != '0']\n        return any(self.is_power_4(num) for num in nums)\n\n    @staticmethod\n    def is_power_4(num: int):\n        return bin(num).count('1') == 1\n")))}u.isMDXComponent=!0}}]);