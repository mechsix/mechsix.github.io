"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[37560],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),a=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=a(e.components);return r.createElement(c.Provider,{value:n},e.children)},d="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,s=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=a(t),p=i,m=d["".concat(c,".").concat(p)]||d[p]||f[p]||s;return t?r.createElement(m,o(o({ref:n},u),{},{components:t})):r.createElement(m,o({ref:n},u))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var s=t.length,o=new Array(s);o[0]=p;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[d]="string"==typeof e?e:i,o[1]=l;for(var a=2;a<s;a++)o[a]=t[a];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},41264:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>f,frontMatter:()=>s,metadata:()=>l,toc:()=>a});var r=t(87462),i=(t(67294),t(3905));const s={title:"161. One Edit Distance",sidebar_label:"161. One Edit Distance",tags:["Leetcode Medium","CTCI"]},o=void 0,l={unversionedId:"leetcode/1-500/one_edit_distance",id:"leetcode/1-500/one_edit_distance",title:"161. One Edit Distance",description:"https://leetcode.com/problems/one-edit-distance",source:"@site/docs/leetcode/1-500/161_one_edit_distance.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/one_edit_distance",permalink:"/docs/leetcode/1-500/one_edit_distance",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/161_one_edit_distance.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"CTCI",permalink:"/docs/tags/ctci"}],version:"current",sidebarPosition:161,frontMatter:{title:"161. One Edit Distance",sidebar_label:"161. One Edit Distance",tags:["Leetcode Medium","CTCI"]},sidebar:"docSidebar",previous:{title:"160. Intersection of Two Linked Lists",permalink:"/docs/leetcode/1-500/intersection_two_linked_lists"},next:{title:"165. Compare Version Numbers",permalink:"/docs/leetcode/1-500/compare_version_numbers"}},c={},a=[{value:"Python",id:"python",level:2},{value:"Rust",id:"rust",level:2}],u={toc:a},d="wrapper";function f(e){let{components:n,...t}=e;return(0,i.kt)(d,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/one-edit-distance"},"https://leetcode.com/problems/one-edit-distance")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"CTCI 1.5 One Away")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def isOneEditDistance(self, s: str, t: str) -> bool:\n        if s == t:\n            return False\n        elif len(s) == len(t):\n            return self.one_edit_replace(s, t)\n        elif len(s)+1 == len(t):\n            return self.one_edit_insert(s, t)\n        elif len(s)-1 == len(t):\n            return self.one_edit_insert(t, s)\n\n        return False\n\n    def one_edit_insert(self, s1, s2) -> bool:\n        cur1, cur2 = 0, 0\n        while cur1 < len(s1) and cur2 < len(s2):\n            if s1[cur1] != s2[cur2]:\n                if cur1 != cur2:\n                    return False\n                cur2 += 1\n            else:\n                cur1 += 1\n                cur2 += 1\n        return True\n\n    def one_edit_replace(self, s1, s2) -> bool:\n        see_diff = False\n        for i in range(len(s1)):\n            if s1[i] != s2[i]:\n                if see_diff:\n                    return False\n                see_diff = True\n        return True\n")),(0,i.kt)("h2",{id:"rust"},"Rust"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"impl Solution {\n    pub fn is_one_edit_distance(s: String, t: String) -> bool {\n        if s == t {\n            return false;\n        } else if s.len() == t.len() {\n            return Solution::one_edit_replace(s, t);\n        } else if s.len()+1 == t.len() {\n            return Solution::one_edit_insert(s, t);\n        } else if s.len()-1 == t.len() {\n            return Solution::one_edit_insert(t, s);\n        }\n\n        false\n    }\n\n    pub fn one_edit_insert(s1: String, s2: String) -> bool {\n        let mut cur1: usize = 0;\n        let mut cur2: usize = 0;\n\n        while cur1 < s1.len() && cur2 < s2.len() {\n            if s1.chars().nth(cur1) != s2.chars().nth(cur2) {\n                if cur1 != cur2 {\n                    return false;\n                }\n                cur2 += 1;\n            } else {\n                cur1 += 1;\n                cur2 += 1;\n            }\n        }\n        true\n    }\n\n    pub fn one_edit_replace(s1: String, s2: String) -> bool {\n        let mut see_diff = false;\n        for i in 0..s1.len() {\n            if s1.chars().nth(i) != s2.chars().nth(i) {\n                if see_diff {\n                    return false;\n                }\n                see_diff = true;\n            }\n        }\n        true\n    }\n}\n")))}f.isMDXComponent=!0}}]);