"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[8650],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),a=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=a(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=a(n),d=o,f=m["".concat(c,".").concat(d)]||m[d]||p[d]||l;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,i=new Array(l);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var a=2;a<l;a++)i[a]=n[a];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},27617:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return s},metadata:function(){return a},toc:function(){return u}});var r=n(87462),o=n(63366),l=(n(67294),n(3905)),i=["components"],s={title:"75. Sort Colors",sidebar_label:"75. Sort Colors",tags:["Leetcode Easy","Sort","Two Pointer"]},c=void 0,a={unversionedId:"leetcode/1-500/sort_colors",id:"leetcode/1-500/sort_colors",title:"75. Sort Colors",description:"https://leetcode.com/problems/sort-colors/",source:"@site/docs/leetcode/1-500/75_sort_colors.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/sort_colors",permalink:"/docs/leetcode/1-500/sort_colors",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/75_sort_colors.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Sort",permalink:"/docs/tags/sort"},{label:"Two Pointer",permalink:"/docs/tags/two-pointer"}],version:"current",sidebarPosition:75,frontMatter:{title:"75. Sort Colors",sidebar_label:"75. Sort Colors",tags:["Leetcode Easy","Sort","Two Pointer"]},sidebar:"docSidebar",previous:{title:"74. Search a 2D Matrix",permalink:"/docs/leetcode/1-500/search_2d_matrix"},next:{title:"77. Combinations",permalink:"/docs/leetcode/1-500/combinations"}},u=[{value:"Python",id:"python",children:[{value:"Bubble Sort",id:"bubble-sort",children:[],level:3},{value:"Two Pointer",id:"two-pointer",children:[],level:3}],level:2}],p={toc:u};function m(e){var t=e.components,n=(0,o.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/sort-colors/"},"https://leetcode.com/problems/sort-colors/")),(0,l.kt)("h2",{id:"python"},"Python"),(0,l.kt)("h3",{id:"bubble-sort"},"Bubble Sort"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Time: O(N^2)"),(0,l.kt)("li",{parentName:"ul"},"Space: O(1)")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def sortColors(self, nums: List[int]) -> None:\n        for i in range(len(nums)):\n            for j in range(len(nums)):\n                if nums[i] < nums[j]:\n                    nums[i], nums[j] = nums[j], nums[i]                    \n")),(0,l.kt)("h3",{id:"two-pointer"},"Two Pointer"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Time: O(N)"),(0,l.kt)("li",{parentName:"ul"},"Space: O(1)")),(0,l.kt)("p",null,"Since the only possible value in nums are 0, 1, 2\nExhaustive the values with one-pass loop"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def sortColors(self, nums: List[int]) -> None:\n        p0, p1, p2 = 0, 0, len(nums)-1\n        \n        while p1 <= p2:\n            # print(p0, p1, p2, nums)\n            if nums[p1] == 0:\n                nums[p0], nums[p1] = nums[p1], nums[p0]\n                p0 += 1\n                p1 += 1  # Prevnt infinity loop\n                continue\n            \n            if nums[p1] == 2:\n                nums[p1], nums[p2] = nums[p2], nums[p1]\n                p2 -= 1\n                continue\n\n            # nums[p1] == 1\n            p1 += 1\n")))}m.isMDXComponent=!0}}]);