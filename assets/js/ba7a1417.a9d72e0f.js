"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[43779],{19670:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>h,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>t,toc:()=>c});var i=s(74848),r=s(28453);const a={title:"1539. Kth Missing Positive Number",sidebar_label:"1539. Kth Missing Positive Number",tags:["Leetcode Easy","Binary Search"]},l=void 0,t={id:"leetcode/1501-2000/kth_missing_possitive_num",title:"1539. Kth Missing Positive Number",description:"https://leetcode.com/problems/kth-missing-positive-number/",source:"@site/docs/leetcode/1501-2000/1539_kth_missing_possitive_num.md",sourceDirName:"leetcode/1501-2000",slug:"/leetcode/1501-2000/kth_missing_possitive_num",permalink:"/docs/leetcode/1501-2000/kth_missing_possitive_num",draft:!1,unlisted:!1,tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Binary Search",permalink:"/docs/tags/binary-search"}],version:"current",sidebarPosition:1539,frontMatter:{title:"1539. Kth Missing Positive Number",sidebar_label:"1539. Kth Missing Positive Number",tags:["Leetcode Easy","Binary Search"]},sidebar:"docSidebar",previous:{title:"1527. Patients With a Condition",permalink:"/docs/leetcode/1501-2000/patients_with_a_condition"},next:{title:"1557. Minimum Number of Vertices to Reach All Nodes",permalink:"/docs/leetcode/1501-2000/min_number_vertice_reach_all_nodes"}},h={},c=[{value:"Python",id:"python",level:2},{value:"Linear Search",id:"linear-search",level:3},{value:"Binary Search",id:"binary-search",level:3},{value:"Considering",id:"considering",level:4},{value:"Optim Linear Search",id:"optim-linear-search",level:3}];function m(e){const n={a:"a",annotation:"annotation",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",math:"math",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",ol:"ol",p:"p",pre:"pre",semantics:"semantics",span:"span",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/kth-missing-positive-number/",children:"https://leetcode.com/problems/kth-missing-positive-number/"})}),"\n",(0,i.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,i.jsx)(n.h3,{id:"linear-search",children:"Linear Search"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Time: O(N)"}),"\n",(0,i.jsx)(n.li,{children:"Space: O(1)"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        low, high = arr[0], arr[-1]\n\n        # The lowest larger than k, won't need to search missing within arr\n        if low > k:\n            return k\n\n        k = k - low + 1\n        i = 0\n        last_missed = None\n\n        for num in range(low, high+1):\n            if k == 0:\n                return last_missed\n\n            # Num is not the missing\n            if num == arr[i]:\n                i += 1\n                continue\n\n            # Missing found, num not in arr\n            last_missed = num\n            k -= 1\n\n        # There are remains k after search missing within arr, ans is the highest arr num + k\n        return high + k\n"})}),"\n",(0,i.jsx)(n.h3,{id:"binary-search",children:"Binary Search"}),"\n",(0,i.jsx)(n.p,{children:"Leetcode offical solution"}),"\n",(0,i.jsx)(n.h4,{id:"considering",children:"Considering"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"\u89c0\u5bdfarr value\u8207index\u7684\u95dc\u4fc2"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"\u4ee5 [2,3,4,7.11]\u70ba\u4f8b"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"numValue"}),(0,i.jsx)(n.th,{children:"numIndex"}),(0,i.jsx)(n.th,{children:"missingCount"}),(0,i.jsx)(n.th,{children:"relation"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"2"}),(0,i.jsx)(n.td,{children:"0"}),(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"2 - (0 + 1)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"3"}),(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"3 - (2 + 1)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"4"}),(0,i.jsx)(n.td,{children:"2"}),(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"4 - (2 + 1)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"7"}),(0,i.jsx)(n.td,{children:"3"}),(0,i.jsx)(n.td,{children:"3"}),(0,i.jsx)(n.td,{children:"7 - (3 + 1)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"11"}),(0,i.jsx)(n.td,{children:"4"}),(0,i.jsx)(n.td,{children:"6"}),(0,i.jsx)(n.td,{children:"11 - (4 + 1)"})]})]})]}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"\u6b78\u7d0d\u51fa\u898f\u5247"}),"\n"]}),"\n",(0,i.jsx)(n.span,{className:"katex-display",children:(0,i.jsxs)(n.span,{className:"katex",children:[(0,i.jsx)(n.span,{className:"katex-mathml",children:(0,i.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block",children:(0,i.jsxs)(n.semantics,{children:[(0,i.jsxs)(n.mrow,{children:[(0,i.jsx)(n.mi,{children:"m"}),(0,i.jsx)(n.mi,{children:"i"}),(0,i.jsx)(n.mi,{children:"s"}),(0,i.jsx)(n.mi,{children:"s"}),(0,i.jsx)(n.mi,{children:"i"}),(0,i.jsx)(n.mi,{children:"n"}),(0,i.jsx)(n.mi,{children:"g"}),(0,i.jsx)(n.mi,{children:"C"}),(0,i.jsx)(n.mi,{children:"o"}),(0,i.jsx)(n.mi,{children:"u"}),(0,i.jsx)(n.mi,{children:"n"}),(0,i.jsx)(n.mi,{children:"t"}),(0,i.jsx)(n.mo,{children:"="}),(0,i.jsx)(n.mi,{children:"n"}),(0,i.jsx)(n.mi,{children:"u"}),(0,i.jsx)(n.mi,{children:"m"}),(0,i.jsx)(n.mi,{children:"V"}),(0,i.jsx)(n.mi,{children:"a"}),(0,i.jsx)(n.mi,{children:"l"}),(0,i.jsx)(n.mi,{children:"u"}),(0,i.jsx)(n.mi,{children:"e"}),(0,i.jsx)(n.mo,{children:"\u2212"}),(0,i.jsx)(n.mo,{stretchy:"false",children:"("}),(0,i.jsx)(n.mi,{children:"n"}),(0,i.jsx)(n.mi,{children:"u"}),(0,i.jsx)(n.mi,{children:"m"}),(0,i.jsx)(n.mi,{children:"I"}),(0,i.jsx)(n.mi,{children:"n"}),(0,i.jsx)(n.mi,{children:"d"}),(0,i.jsx)(n.mi,{children:"e"}),(0,i.jsx)(n.mi,{children:"x"}),(0,i.jsx)(n.mo,{children:"+"}),(0,i.jsx)(n.mn,{children:"1"}),(0,i.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,i.jsx)(n.annotation,{encoding:"application/x-tex",children:"missingCount = numValue - (numIndex + 1)"})]})})}),(0,i.jsxs)(n.span,{className:"katex-html","aria-hidden":"true",children:[(0,i.jsxs)(n.span,{className:"base",children:[(0,i.jsx)(n.span,{className:"strut",style:{height:"0.8778em",verticalAlign:"-0.1944em"}}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"mi"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"ss"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"in"}),(0,i.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,i.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.07153em"},children:"C"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"o"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"u"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"t"}),(0,i.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,i.jsx)(n.span,{className:"mrel",children:"="}),(0,i.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,i.jsxs)(n.span,{className:"base",children:[(0,i.jsx)(n.span,{className:"strut",style:{height:"0.7778em",verticalAlign:"-0.0833em"}}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"u"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"mVa"}),(0,i.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"u"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"e"}),(0,i.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,i.jsx)(n.span,{className:"mbin",children:"\u2212"}),(0,i.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,i.jsxs)(n.span,{className:"base",children:[(0,i.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(n.span,{className:"mopen",children:"("}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"u"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"m"}),(0,i.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.07847em"},children:"I"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"d"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"e"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"x"}),(0,i.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,i.jsx)(n.span,{className:"mbin",children:"+"}),(0,i.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,i.jsxs)(n.span,{className:"base",children:[(0,i.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(n.span,{className:"mord",children:"1"}),(0,i.jsx)(n.span,{className:"mclose",children:")"})]})]})]})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u4e8c\u5206\u641c\u5c0b\u627e\u53f3\u754c\uff0c\u7b2c\u4e00\u500b\u4e0d\u5c0f\u65bck\u7684\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f\u7b2c\u4e00\u500b\u6e1bk\u70ba\u96f6\u7684\u4f4d\u7f6e"}),"\n"]}),"\n",(0,i.jsx)(n.li,{}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            pivot = (left + right) // 2\n            if arr[pivot] - pivot - 1 < k:\n                left = pivot + 1\n            else:\n                right = pivot - 1\n\n        # At the end of the loop, left = right + 1,\n        # and the kth missing is in-between arr[right] and arr[left].\n        # The number of integers missing before arr[right] is\n        # arr[right] - right - 1 --\x3e\n        # the number to return is\n        # arr[right] + k - (arr[right] - right - 1) = k + left\n        return left + k\n\n"})}),"\n",(0,i.jsx)(n.h3,{id:"optim-linear-search",children:"Optim Linear Search"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Skip search smaller than low bound or higher than the up bound"}),"\n"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Time: O(N)"}),"\n",(0,i.jsx)(n.li,{children:"Space: O(1)"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        low, high = arr[0], arr[-1]\n\n        # The lowest larger than k, won't need to search missing within arr\n        if low > k:\n            return k\n\n        k = k - low + 1\n\n        # kth missing number btw low and high\n        i = 0\n        for num in range(low, high+1):\n            if num == arr[i]:\n                i += 1\n                continue\n            k -= 1\n            if k == 0:\n                return num\n\n        # kth missing number larger than high\n        return high + k\n"})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>t});var i=s(96540);const r={},a=i.createContext(r);function l(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);