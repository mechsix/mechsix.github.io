"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[74798],{32351:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"leetcode/1001-1500/duplicate_zeros","title":"1089. Duplicate Zeros","description":"Python","source":"@site/docs/leetcode/1001-1500/1089_duplicate_zeros.md","sourceDirName":"leetcode/1001-1500","slug":"/leetcode/1001-1500/duplicate_zeros","permalink":"/docs/leetcode/1001-1500/duplicate_zeros","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Easy","permalink":"/docs/tags/leetcode-easy"},{"inline":true,"label":"Leetcode Optimable","permalink":"/docs/tags/leetcode-optimable"}],"version":"current","sidebarPosition":1089,"frontMatter":{"title":"1089. Duplicate Zeros","sidebar_label":"1089. Duplicate Zeros","tags":["Leetcode Easy","Leetcode Optimable"]},"sidebar":"docSidebar","previous":{"title":"1065. Index Pairs of a String","permalink":"/docs/leetcode/1001-1500/index_pairs_of_string"},"next":{"title":"1091. Shortest Path in Binary Matrix","permalink":"/docs/leetcode/1001-1500/shortest_path_in_binary_matrix"}}');var o=n(74848),i=n(28453);const a={title:"1089. Duplicate Zeros",sidebar_label:"1089. Duplicate Zeros",tags:["Leetcode Easy","Leetcode Optimable"]},s=void 0,c={},l=[{value:"Python",id:"python",level:2}];function d(e){const t={code:"code",h2:"h2",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'class Solution:\n    def duplicateZeros(self, arr: List[int]) -> None:\n        """\n        Do not return anything, modify arr in-place instead.\n        """\n        length = len(arr)\n        for i in range(0, length):\n            if arr[i] == 0:\n                for j in range(length-1, i+1, -1):\n                    arr[j] = arr[j-1]\n                if i+1 < length:\n                    arr[i+1] = \'-\'\n        for i in range(0, length):\n            if arr[i] == \'-\':\n                arr[i] = 0\n'})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>s});var r=n(96540);const o={},i=r.createContext(o);function a(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);