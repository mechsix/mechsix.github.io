"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[1674],{3905:function(e,r,t){t.d(r,{Zo:function(){return c},kt:function(){return f}});var n=t(67294);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,i=function(e,r){if(null==e)return{};var t,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=n.createContext({}),d=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},c=function(e){var r=d(e.components);return n.createElement(s.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},p=n.forwardRef((function(e,r){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=d(t),f=i,y=p["".concat(s,".").concat(f)]||p[f]||u[f]||a;return t?n.createElement(y,o(o({ref:r},c),{},{components:t})):n.createElement(y,o({ref:r},c))}));function f(e,r){var t=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=p;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var d=2;d<a;d++)o[d]=t[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},82406:function(e,r,t){t.r(r),t.d(r,{contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return c}});var n=t(87462),i=t(63366),a=(t(67294),t(3905)),o=["components"],l={title:"297. Serialize and Deserialize Binary Tree",sidebar_label:"297. Serialize and Deserialize Binary Tree",tags:["Leetcode Hard","Binary Tree"]},s=void 0,d={unversionedId:"leetcode/1-500/serialize_descrialize_bt",id:"leetcode/1-500/serialize_descrialize_bt",title:"297. Serialize and Deserialize Binary Tree",description:"https://leetcode.com/problems/serialize-and-deserialize-binary-tree",source:"@site/docs/leetcode/1-500/297_serialize_descrialize_bt.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/serialize_descrialize_bt",permalink:"/docs/leetcode/1-500/serialize_descrialize_bt",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/297_serialize_descrialize_bt.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"}],version:"current",sidebarPosition:297,frontMatter:{title:"297. Serialize and Deserialize Binary Tree",sidebar_label:"297. Serialize and Deserialize Binary Tree",tags:["Leetcode Hard","Binary Tree"]},sidebar:"docSidebar",previous:{title:"295. Find Median from Data Stream",permalink:"/docs/leetcode/1-500/find_median_from_data_stream"},next:{title:"314. Binary Tree Vertical Order Traversal",permalink:"/docs/leetcode/1-500/binary_tree_vertical_order_traversal"}},c=[{value:"Python",id:"python",children:[],level:2}],u={toc:c};function p(e){var r=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,n.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/serialize-and-deserialize-binary-tree"},"https://leetcode.com/problems/serialize-and-deserialize-binary-tree")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'class Codec:\n    EMPTY_CHAR = "-"\n    def serialize(self, root: TreeNode) -> str:\n        """Encodes a tree to a single string.\n\n        :type root: TreeNode\n        :rtype: str\n        """\n\n        result = self._serialize(root, [])\n\n        return " ".join(result) if result else ""\n\n    def _serialize(self, node: TreeNode, holder: list) -> list:\n        if not node:\n            holder.append(self.EMPTY_CHAR)\n            return\n\n        holder.append(str(node.val))\n        self._serialize(node.left, holder)\n        self._serialize(node.right, holder)\n\n        return holder\n\n\n    def deserialize(self, data: str) -> TreeNode:\n        """Decodes your encoded data to tree.\n\n        :type data: str\n        :rtype: TreeNode\n        """\n        if not data:\n            return\n\n        vals = data.split(\' \')[::-1]\n\n        return self._deserialize(vals)\n\n    def _deserialize(self, vals: list) -> TreeNode:\n        val = vals.pop()\n\n        if val == self.EMPTY_CHAR:\n            return None\n\n        node = TreeNode(int(val))\n        node.left = self._deserialize(vals)\n        node.right = self._deserialize(vals)\n        return node\n\n\n# Your Codec object will be instantiated and called as such:\n# ser = Codec()\n# deser = Codec()\n# ans = deser.deserialize(ser.serialize(root))\n')))}p.isMDXComponent=!0}}]);