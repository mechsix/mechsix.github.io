"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[38338],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return d}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=s(r),f=o,d=m["".concat(l,".").concat(f)]||m[f]||p[f]||a;return r?n.createElement(d,c(c({ref:t},u),{},{components:r})):n.createElement(d,c({ref:t},u))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,c=new Array(a);c[0]=f;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[m]="string"==typeof e?e:o,c[1]=i;for(var s=2;s<a;s++)c[s]=r[s];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},64e3:function(e,t,r){r.r(t),r.d(t,{assets:function(){return l},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return a},metadata:function(){return i},toc:function(){return s}});var n=r(83117),o=(r(67294),r(3905));const a={title:"1672. Richest Customer Wealth",sidebar_label:"1672. Richest Customer Wealth",tags:["Leetcode Easy","Go"]},c=void 0,i={unversionedId:"leetcode/1501-2000/richest_customer_wealth",id:"leetcode/1501-2000/richest_customer_wealth",title:"1672. Richest Customer Wealth",description:"Python",source:"@site/docs/leetcode/1501-2000/1672_richest_customer_wealth.md",sourceDirName:"leetcode/1501-2000",slug:"/leetcode/1501-2000/richest_customer_wealth",permalink:"/docs/leetcode/1501-2000/richest_customer_wealth",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1501-2000/1672_richest_customer_wealth.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Go",permalink:"/docs/tags/go"}],version:"current",sidebarPosition:1672,frontMatter:{title:"1672. Richest Customer Wealth",sidebar_label:"1672. Richest Customer Wealth",tags:["Leetcode Easy","Go"]},sidebar:"docSidebar",previous:{title:"1662. Check If Two String Arrays are Equivalent",permalink:"/docs/leetcode/1501-2000/check_if_two_string_arrays_are_equivalent"},next:{title:"1679. Max Number of K-Sum Pairs",permalink:"/docs/leetcode/1501-2000/max_num_of_k_sum_pairs"}},l={},s=[{value:"Python",id:"python",level:2},{value:"Go",id:"go",level:2}],u={toc:s};function m(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def maximumWealth(self, accounts: List[List[int]]) -> int:\n        return max([sum(wealths) for wealths in accounts])\n")),(0,o.kt)("h2",{id:"go"},"Go"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func maximumWealth(accounts [][]int) int {\n    max := 0\n    for _, wealths := range accounts {\n        total := sum(wealths)\n        if (total > max) {\n            max = total\n        }\n    }\n    return max\n}\n\nfunc sum(list []int) int {\n    total := 0\n    for _, v := range list {\n        total += v\n    }\n    return total\n}\n")))}m.isMDXComponent=!0}}]);