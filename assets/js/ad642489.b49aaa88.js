"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[39882],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return d}});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var a=r.createContext({}),s=function(e){var n=r.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(a.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,a=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=s(t),d=i,f=m["".concat(a,".").concat(d)]||m[d]||p[d]||o;return t?r.createElement(f,c(c({ref:n},u),{},{components:t})):r.createElement(f,c({ref:n},u))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,c=new Array(o);c[0]=m;var l={};for(var a in n)hasOwnProperty.call(n,a)&&(l[a]=n[a]);l.originalType=e,l.mdxType="string"==typeof e?e:i,c[1]=l;for(var s=2;s<o;s++)c[s]=t[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},79988:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return a},default:function(){return m},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var r=t(87462),i=t(63366),o=(t(67294),t(3905)),c=["components"],l={title:"300. Longest Increasing Subsequence",sidebar_label:"300. Longest Increasing Subsequence",tags:["Leetcode Medium","DP"]},a=void 0,s={unversionedId:"leetcode/1-500/longest_increasing_subsequence",id:"leetcode/1-500/longest_increasing_subsequence",title:"300. Longest Increasing Subsequence",description:"https://leetcode.com/problems/longest-increasing-subsequence/",source:"@site/docs/leetcode/1-500/300_longest_increasing_subsequence.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/longest_increasing_subsequence",permalink:"/docs/leetcode/1-500/longest_increasing_subsequence",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/300_longest_increasing_subsequence.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"DP",permalink:"/docs/tags/dp"}],version:"current",sidebarPosition:300,frontMatter:{title:"300. Longest Increasing Subsequence",sidebar_label:"300. Longest Increasing Subsequence",tags:["Leetcode Medium","DP"]},sidebar:"docSidebar",previous:{title:"297. Serialize and Deserialize Binary Tree",permalink:"/docs/leetcode/1-500/serialize_descrialize_bt"},next:{title:"303. Range Sum Query - Immutable",permalink:"/docs/leetcode/1-500/range_sum_query_immutable"}},u=[{value:"Python",id:"python",children:[{value:"Bottom-Up DP",id:"bottom-up-dp",children:[],level:3}],level:2},{value:"Javascript",id:"javascript",children:[],level:2}],p={toc:u};function m(e){var n=e.components,t=(0,i.Z)(e,c);return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/longest-increasing-subsequence/"},"https://leetcode.com/problems/longest-increasing-subsequence/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"bottom-up-dp"},"Bottom-Up DP"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Time: O(N**2)"),(0,o.kt)("li",{parentName:"ul"},"Space: O(N)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def lengthOfLIS(self, nums: List[int]) -> int:\n        dp = [1]*len(nums)\n\n        for i in range(len(nums)):\n            for j in range(i):\n                if nums[i] > nums[j]:\n                    dp[i] = max(dp[i], dp[j]+1)\n\n        return max(dp)\n")),(0,o.kt)("h2",{id:"javascript"},"Javascript"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar lengthOfLIS = function(nums) {\n  const dp = [];\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    let left = 0;\n    let right = dp.length;\n    while (left < right) {\n      let mid = left + right >> 1;\n      if (num > dp[mid]) left = mid + 1;\n      else right = mid;\n    }\n    dp[left] = num;\n  }\n\n  return dp.length;\n  /*\n    const dp = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (i === 0) dp[i] = 1;\n        else {\n            let tmp = 0;\n            for (let j = 0; j < i; j++) {\n                if (nums[j] < nums[i]) {\n                    tmp = Math.max(tmp, dp[j])\n                }\n            }\n            dp[i] = tmp + 1;\n        }\n    }\n\n    return Math.max.apply(null, dp)\n    */\n};\n")))}m.isMDXComponent=!0}}]);