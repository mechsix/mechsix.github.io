"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[28707],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>b});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),d=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},s=function(e){var t=d(e.components);return n.createElement(i.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=d(r),f=a,b=p["".concat(i,".").concat(f)]||p[f]||u[f]||o;return r?n.createElement(b,l(l({ref:t},s),{},{components:r})):n.createElement(b,l({ref:t},s))}));function b(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=f;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c[p]="string"==typeof e?e:a,l[1]=c;for(var d=2;d<o;d++)l[d]=r[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},4490:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var n=r(87462),a=(r(67294),r(3905));const o={title:"110. Balanced Binary Tree",slidebar_label:"110. Balanced Binary Tree",tags:["Leetcode Easy","Binary Tree"]},l=void 0,c={unversionedId:"leetcode/1-500/balanced_binary_tree",id:"leetcode/1-500/balanced_binary_tree",title:"110. Balanced Binary Tree",description:"https://leetcode.com/problems/balanced-binary-tree/",source:"@site/docs/leetcode/1-500/110_balanced_binary_tree.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/balanced_binary_tree",permalink:"/docs/leetcode/1-500/balanced_binary_tree",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/110_balanced_binary_tree.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"}],version:"current",sidebarPosition:110,frontMatter:{title:"110. Balanced Binary Tree",slidebar_label:"110. Balanced Binary Tree",tags:["Leetcode Easy","Binary Tree"]},sidebar:"docSidebar",previous:{title:"109. Convert Sorted List to Binary Search Tree",permalink:"/docs/leetcode/1-500/convert_sorted_list_to_hight_balanced_bst"},next:{title:"111. Minimum Depth of Binary Tree",permalink:"/docs/leetcode/1-500/min_depth_of_binary_tree"}},i={},d=[{value:"Python",id:"python",level:2}],s={toc:d},p="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/balanced-binary-tree/"},"https://leetcode.com/problems/balanced-binary-tree/")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u96d9\u5c64\u7684recursion...")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def get_depth(self, node):\n        if not node:\n            return -1\n        return 1 + max(self.get_depth(node.left), self.get_depth(node.right))\n\n    def check(self, node):\n        if not node:\n            return True\n        return abs(self.get_depth(node.left) - self.get_depth(node.right)) <= 1 \\\n            and self.check(node.left) \\\n            and self.check(node.right)\n\n    def isBalanced(self, root: Optional[TreeNode]) -> bool:\n        return self.check(root)\n")))}u.isMDXComponent=!0}}]);