"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[19645],{33941:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"leetcode/1-500/range_sum_query","title":"307. Range Sum Query - Mutable","description":"https://leetcode.com/problems/range-sum-query-mutable/","source":"@site/docs/leetcode/1-500/307_range_sum_query.md","sourceDirName":"leetcode/1-500","slug":"/leetcode/1-500/range_sum_query","permalink":"/docs/leetcode/1-500/range_sum_query","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Medium","permalink":"/docs/tags/leetcode-medium"},{"inline":true,"label":"Segment Tree","permalink":"/docs/tags/segment-tree"}],"version":"current","sidebarPosition":307,"frontMatter":{"title":"307. Range Sum Query - Mutable","sidebar_label":"307. Range Sum Query - Mutable","tags":["Leetcode Medium","Segment Tree"]},"sidebar":"docSidebar","previous":{"title":"304. Range Sum Query 2D - Immutable","permalink":"/docs/leetcode/1-500/range_sum_query_2d_immutable"},"next":{"title":"314. Binary Tree Vertical Order Traversal","permalink":"/docs/leetcode/1-500/binary_tree_vertical_order_traversal"}}');var d=t(74848),l=t(28453);const i={title:"307. Range Sum Query - Mutable",sidebar_label:"307. Range Sum Query - Mutable",tags:["Leetcode Medium","Segment Tree"]},a=void 0,s={},o=[{value:"Python",id:"python",level:2},{value:"Segment Tree",id:"segment-tree",level:3}];function u(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.p,{children:(0,d.jsx)(n.a,{href:"https://leetcode.com/problems/range-sum-query-mutable/",children:"https://leetcode.com/problems/range-sum-query-mutable/"})}),"\n",(0,d.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,d.jsx)(n.h3,{id:"segment-tree",children:"Segment Tree"}),"\n",(0,d.jsx)(n.p,{children:"Space: O(N) # On the tree build time\nTime:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Build: O(N)"}),"\n",(0,d.jsx)(n.li,{children:"Update: O(logN)"}),"\n",(0,d.jsx)(n.li,{children:"Query: O(logN)"}),"\n"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"from dataclasses import dataclass\n\n\n@dataclass\nclass TreeNode:\n    start: int\n    end: int\n    val: int = 0\n    left: TreeNode = None\n    right: TreeNode = None\n\nclass NumArray:\n    def __init__(self, nums: List[int]):\n        def build(start, end):\n            if start == end:\n                node = TreeNode(start, end, nums[start])\n                return node\n            middle = (start+end) >> 1\n            left = build(start, middle)\n            right = build(middle+1, end)\n            node = TreeNode(\n                start=start,\n                end=end,\n                val=left.val + right.val,\n                left=left,\n                right=right\n            )\n            return node\n        self.tree = build(0, len(nums)-1)\n\n    def update(self, index: int, val: int) -> None:\n        def update_tree(node):\n            if node.start == node.end == index:\n                node.val = val\n                return\n            middle = (node.start+node.end) >> 1\n            if index <= middle:\n                update_tree(node.left)\n            else:\n                update_tree(node.right)\n            node.val = node.left.val + node.right.val\n\n        update_tree(self.tree)\n\n    def sumRange(self, left: int, right: int) -> int:\n        def query_tree(node, left, right):\n            if node.start == left and node.end == right:\n                return node.val\n\n            middle = (node.start+node.end) >> 1\n\n            if right <= middle:\n                return query_tree(node.left, left, right)\n            elif left > middle:\n                return query_tree(node.right, left, right)\n            else:\n                return query_tree(node.left, left, middle) + query_tree(node.right, middle+1, right)\n\n        return query_tree(self.tree, left, right)\n"})})]})}function c(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(u,{...e})}):u(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var r=t(96540);const d={},l=r.createContext(d);function i(e){const n=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:i(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);