"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[41387],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>h});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},m=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=c(r),u=a,h=p["".concat(s,".").concat(u)]||p[u]||d[u]||o;return r?n.createElement(h,i(i({ref:t},m),{},{components:r})):n.createElement(h,i({ref:t},m))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},78836:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=r(87462),a=(r(67294),r(3905));const o={title:"378. Kth Smallest Element in a Sorted Matrix",sidebar_label:"378. Kth Smallest Element in a Sorted Matrix",tags:["Leetcode Medium","Heap"]},i=void 0,l={unversionedId:"leetcode/1-500/kth_smallest_elm_in_sorted_martrix",id:"leetcode/1-500/kth_smallest_elm_in_sorted_martrix",title:"378. Kth Smallest Element in a Sorted Matrix",description:"Python",source:"@site/docs/leetcode/1-500/378_kth_smallest_elm_in_sorted_martrix.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/kth_smallest_elm_in_sorted_martrix",permalink:"/docs/leetcode/1-500/kth_smallest_elm_in_sorted_martrix",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/378_kth_smallest_elm_in_sorted_martrix.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Heap",permalink:"/docs/tags/heap"}],version:"current",sidebarPosition:378,frontMatter:{title:"378. Kth Smallest Element in a Sorted Matrix",sidebar_label:"378. Kth Smallest Element in a Sorted Matrix",tags:["Leetcode Medium","Heap"]},sidebar:"docSidebar",previous:{title:"377. Combination Sum IV",permalink:"/docs/leetcode/1-500/combination_sum_iv"},next:{title:"382. Linked List Random Node",permalink:"/docs/leetcode/1-500/linked_list_rand_node"}},s={},c=[{value:"Python",id:"python",level:2},{value:"Min Heap",id:"min-heap",level:3}],m={toc:c},p="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("h3",{id:"min-heap"},"Min Heap"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Time: O(N*M)"),(0,a.kt)("li",{parentName:"ul"},"Space: O(N*M)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import heapq\n\n\nclass Solution:\n    def kthSmallest(self, matrix: List[List[int]], k: int) -> int:\n        heap = []\n        for row in matrix:\n            for num in row:\n                heapq.heappush(heap, num)\n\n        return heapq.nsmallest(k, heap)[-1]\n")))}d.isMDXComponent=!0}}]);