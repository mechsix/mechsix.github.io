"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[75897],{3905:function(e,r,n){n.d(r,{Zo:function(){return l},kt:function(){return f}});var t=n(67294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function c(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function d(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=t.createContext({}),a=function(e){var r=t.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):c(c({},r),e)),n},l=function(e){var r=a(e.components);return t.createElement(s.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},p=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,l=d(e,["components","mdxType","originalType","parentName"]),p=a(n),f=o,m=p["".concat(s,".").concat(f)]||p[f]||u[f]||i;return n?t.createElement(m,c(c({ref:r},l),{},{components:n})):t.createElement(m,c({ref:r},l))}));function f(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=n.length,c=new Array(i);c[0]=p;var d={};for(var s in r)hasOwnProperty.call(r,s)&&(d[s]=r[s]);d.originalType=e,d.mdxType="string"==typeof e?e:o,c[1]=d;for(var a=2;a<i;a++)c[a]=n[a];return t.createElement.apply(null,c)}return t.createElement.apply(null,n)}p.displayName="MDXCreateElement"},46168:function(e,r,n){n.r(r),n.d(r,{contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return d},metadata:function(){return a},toc:function(){return l}});var t=n(87462),o=n(63366),i=(n(67294),n(3905)),c=["components"],d={title:"820. Short Encoding of Words",sidebar_label:"820. Short Encoding of Words",tags:["Leetcode Medium","Trie"]},s=void 0,a={unversionedId:"leetcode/501-1000/short_encoding_of_words",id:"leetcode/501-1000/short_encoding_of_words",title:"820. Short Encoding of Words",description:"https://leetcode.com/problems/short-encoding-of-words/",source:"@site/docs/leetcode/501-1000/820_short_encoding_of_words.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/short_encoding_of_words",permalink:"/docs/leetcode/501-1000/short_encoding_of_words",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/820_short_encoding_of_words.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Trie",permalink:"/docs/tags/trie"}],version:"current",sidebarPosition:820,frontMatter:{title:"820. Short Encoding of Words",sidebar_label:"820. Short Encoding of Words",tags:["Leetcode Medium","Trie"]},sidebar:"docSidebar",previous:{title:"814. Binary Tree Pruning",permalink:"/docs/leetcode/501-1000/binary_tree_pruning"},next:{title:"823. Binary Trees With Factors",permalink:"/docs/leetcode/501-1000/binary_tree_with_factors"}},l=[{value:"Python",id:"python",children:[{value:"Reversed words in Trie",id:"reversed-words-in-trie",children:[],level:3}],level:2}],u={toc:l};function p(e){var r=e.components,n=(0,o.Z)(e,c);return(0,i.kt)("wrapper",(0,t.Z)({},u,n,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/short-encoding-of-words/"},"https://leetcode.com/problems/short-encoding-of-words/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"reversed-words-in-trie"},"Reversed words in Trie"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def minimumLengthEncoding(self, words: List[str]) -> int:\n        words = set(words)\n\n        trie = dict()\n        for word in words:\n            cur = trie\n            for char in word[::-1]:\n                cur = cur.setdefault(char, dict())\n\n        ans = 0\n        for word in words:\n            node = trie\n            for char in word[::-1]:\n                if char in node:\n                    node = node[char]\n                    continue\n                break\n\n            # node is leaf, which present the prefix without overlap\n            if len(node) == 0:\n                ans += len(word)+1\n        return ans\n")))}p.isMDXComponent=!0}}]);