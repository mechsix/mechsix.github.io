"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[16678],{52998:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>i,contentTitle:()=>d,default:()=>u,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var s=o(74848),n=o(28453);const r={title:"916. Word Subsets",sidebar_label:"916. Word Subsets",tags:["Leetcode Medium","Hash"]},d=void 0,c={id:"leetcode/501-1000/word_subsets",title:"916. Word Subsets",description:"https://leetcode.com/problems/word-subsets/",source:"@site/docs/leetcode/501-1000/916_word_subsets.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/word_subsets",permalink:"/docs/leetcode/501-1000/word_subsets",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Hash",permalink:"/docs/tags/hash"}],version:"current",sidebarPosition:916,frontMatter:{title:"916. Word Subsets",sidebar_label:"916. Word Subsets",tags:["Leetcode Medium","Hash"]},sidebar:"docSidebar",previous:{title:"912. Sort an Array",permalink:"/docs/leetcode/501-1000/sort_an_array"},next:{title:"926. Flip String to Monotone Increasing",permalink:"/docs/leetcode/501-1000/flip_string_to_monotone_increasing"}},i={},l=[{value:"Python",id:"python",level:2}];function a(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://leetcode.com/problems/word-subsets/",children:"https://leetcode.com/problems/word-subsets/"})}),"\n",(0,s.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["\u6ce8\u610fwords2\u88e1\u9762\u53ef\u80fd\u55ae\u4e00\u500bword\u6709\u591a\u500bcharacter\uff0c\u4f8b\u5982",(0,s.jsx)(t.code,{children:"oo"}),"\u5982\u679c\u5b58\u5728\uff0c",(0,s.jsx)(t.code,{children:"o"}),"\u7684\u8a08\u7b97\u5176\u5be6\u7121\u95dc\u7dca\u8981"]}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"from collections import Counter, defaultdict\n\n\nclass Solution:\n    def wordSubsets(self, words1: List[str], words2: List[str]) -> List[str]:\n        map2 = defaultdict(int)\n        for word in words2:\n            for letter, count in Counter(word).items():\n                map2[letter] = max(map2[letter], count)\n\n        result = []\n        for word in words1:\n            map1 = Counter(word)\n            for letter, count in map2.items():\n                if count > map1.get(letter, 0):\n                    break\n            else:\n                result.append(word)\n        return result\n"})})]})}function u(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},28453:(e,t,o)=>{o.d(t,{R:()=>d,x:()=>c});var s=o(96540);const n={},r=s.createContext(n);function d(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:d(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);