"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[16010],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=l(n),m=i,f=p["".concat(c,".").concat(m)]||p[m]||d[m]||o;return n?r.createElement(f,s(s({ref:t},u),{},{components:n})):r.createElement(f,s({ref:t},u))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,s=new Array(o);s[0]=m;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a[p]="string"==typeof e?e:i,s[1]=a;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3711:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return o},metadata:function(){return a},toc:function(){return l}});var r=n(83117),i=(n(67294),n(3905));const o={title:"647. Palindromic Substrings",sidebar_label:"647. Palindromic Substrings",tags:["Leetcode Medium","DP","TODO"]},s=void 0,a={unversionedId:"leetcode/501-1000/palindromic_substrings",id:"leetcode/501-1000/palindromic_substrings",title:"647. Palindromic Substrings",description:"https://leetcode.com/problems/palindromic-substrings/",source:"@site/docs/leetcode/501-1000/647_palindromic_substrings.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/palindromic_substrings",permalink:"/docs/leetcode/501-1000/palindromic_substrings",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/647_palindromic_substrings.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"DP",permalink:"/docs/tags/dp"},{label:"TODO",permalink:"/docs/tags/todo"}],version:"current",sidebarPosition:647,frontMatter:{title:"647. Palindromic Substrings",sidebar_label:"647. Palindromic Substrings",tags:["Leetcode Medium","DP","TODO"]},sidebar:"docSidebar",previous:{title:"645. Set Mismatch",permalink:"/docs/leetcode/501-1000/set_mismatch"},next:{title:"652. Find Duplicate Subtrees",permalink:"/docs/leetcode/501-1000/find_duplicate_subtrees"}},c={},l=[{value:"Python",id:"python",level:2},{value:"Bottom-Up DP",id:"bottom-up-dp",level:3}],u={toc:l};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/palindromic-substrings/"},"https://leetcode.com/problems/palindromic-substrings/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"bottom-up-dp"},"Bottom-Up DP"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def countSubstrings(self, s: str) -> int:\n        n = len(s)\n\n\n        dp = [[0]*n for _ in range(n)]\n        result = 0\n\n        # Initial of DP matrix, with diagonal has value 1\n        # Since every single character is a palindromic substring\n        #  a a a\n        #a 1 0 0\n        #a 0 1 0\n        #a 0 0 1\n        for i in range(n):\n            dp[i][i] = 1\n            result += 1\n\n        # If the neighbor char is the same to self,\n        # the pair of neighbor is a palindromic substring\n        for i in range(n-1):\n            if s[i] == s[i+1]:\n                dp[i][i+1] = 1\n                result += 1\n\n        for length in range(3, n+1):\n            for i in range(n-length+1):\n                j = i+length-1\n                if dp[i+1][j-1] and s[i] == s[j]:\n                    dp[i][j] = 1\n                    result += 1\n\n        return result\n")))}p.isMDXComponent=!0}}]);