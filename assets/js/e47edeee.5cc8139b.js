"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[11116],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return d}});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var u=r.createContext({}),c=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=c(e.components);return r.createElement(u.Provider,{value:n},e.children)},s="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,u=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),s=c(t),f=i,d=s["".concat(u,".").concat(f)]||s[f]||p[f]||a;return t?r.createElement(d,o(o({ref:n},m),{},{components:t})):r.createElement(d,o({ref:n},m))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=f;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l[s]="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},53333:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return o},default:function(){return s},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return c}});var r=t(83117),i=(t(67294),t(3905));const a={title:"456. 132 Pattern",sidebar_label:"456. 132 Pattern",tags:["Leetcode Medium","Prefix Sum","Stack"]},o=void 0,l={unversionedId:"leetcode/1-500/p132_pattern",id:"leetcode/1-500/p132_pattern",title:"456. 132 Pattern",description:"https://leetcode.com/problems/132-pattern/",source:"@site/docs/leetcode/1-500/456_p132_pattern.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/p132_pattern",permalink:"/docs/leetcode/1-500/p132_pattern",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/456_p132_pattern.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Prefix Sum",permalink:"/docs/tags/prefix-sum"},{label:"Stack",permalink:"/docs/tags/stack"}],version:"current",sidebarPosition:456,frontMatter:{title:"456. 132 Pattern",sidebar_label:"456. 132 Pattern",tags:["Leetcode Medium","Prefix Sum","Stack"]},sidebar:"docSidebar",previous:{title:"453. Minimum Moves to Equal Array Elements",permalink:"/docs/leetcode/1-500/minimum_moves_to_equal_array_elements"},next:{title:"458. Poor Pigs",permalink:"/docs/leetcode/1-500/poor_pigs"}},u={},c=[{value:"Python",id:"python",level:2},{value:"Brute Force (Timelimit Exceed)",id:"brute-force-timelimit-exceed",level:3},{value:"Brute Force - Remeber Min i (Timelimit Exceed)",id:"brute-force---remeber-min-i-timelimit-exceed",level:3},{value:"Prefix Sum (Min) with stack",id:"prefix-sum-min-with-stack",level:3}],m={toc:c};function s(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/132-pattern/"},"https://leetcode.com/problems/132-pattern/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"brute-force-timelimit-exceed"},"Brute Force (Timelimit Exceed)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Time: O(n^3)"),(0,i.kt)("li",{parentName:"ul"},"Space: O(1)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def find132pattern(self, nums: List[int]) -> bool:\n        n = len(nums)\n\n        if n < 3:\n            return False\n\n        for i in range(n-1):\n            for j in range(i+1, n-1):\n                if nums[i] > nums[j]:\n                    continue\n                for k in range(j+1, n):\n                    if nums[i] < nums[k] and nums[k] < nums[j]:\n                        return True\n\n        return False\n")),(0,i.kt)("h3",{id:"brute-force---remeber-min-i-timelimit-exceed"},"Brute Force - Remeber Min i (Timelimit Exceed)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Time: O(n^2)"),(0,i.kt)("li",{parentName:"ul"},"Space: O(1)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"import math\n\n\nclass Solution:\n    def find132pattern(self, nums: List[int]) -> bool:\n        n = len(nums)\n\n        if n < 3:\n            return False\n\n        min_i = math.inf\n        for j in range(n-1):\n            min_i = min(min_i, nums[j])\n            for k in range(j+1, n):\n                if min_i < nums[k] < nums[j]:\n                    return True\n\n        return False\n")),(0,i.kt)("h3",{id:"prefix-sum-min-with-stack"},"Prefix Sum (Min) with stack"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Time: O(n)"),(0,i.kt)("li",{parentName:"ul"},"Space: O(n)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def find132pattern(self, nums: List[int]) -> bool:\n        n = len(nums)\n\n        if n < 3:\n            return False\n\n        prefix_min = [nums[0]]\n        for i in range(1, n):\n            prefix_min.append(min(prefix_min[-1], nums[i]))\n\n        stack = []\n        for j in range(n-1, -1, -1):\n            if nums[j] <= prefix_min[j]:\n                continue\n\n            while stack and stack[-1] <= prefix_min[j]:\n                stack.pop()\n\n            if stack and stack[-1] < nums[j]:\n                return True\n\n            stack.append(nums[j])\n\n        return False\n")))}s.isMDXComponent=!0}}]);