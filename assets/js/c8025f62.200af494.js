"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[35237],{34063:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=t(74848),a=t(28453);const o={title:"987. Vertical Order Traversal of a Binary Tree",sidebar_label:"987. Vertical Order Traversal of a Binary Tree",tags:["Leetcode Hard","Binary Tree","DFS","BFS"]},s=void 0,l={id:"leetcode/501-1000/vertical_order_traversal_of_a_binary_tree",title:"987. Vertical Order Traversal of a Binary Tree",description:"https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/",source:"@site/docs/leetcode/501-1000/987_vertical_order_traversal_of_a_binary_tree.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/vertical_order_traversal_of_a_binary_tree",permalink:"/docs/leetcode/501-1000/vertical_order_traversal_of_a_binary_tree",draft:!1,unlisted:!1,tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"},{label:"DFS",permalink:"/docs/tags/dfs"},{label:"BFS",permalink:"/docs/tags/bfs"}],version:"current",sidebarPosition:987,frontMatter:{title:"987. Vertical Order Traversal of a Binary Tree",sidebar_label:"987. Vertical Order Traversal of a Binary Tree",tags:["Leetcode Hard","Binary Tree","DFS","BFS"]},sidebar:"docSidebar",previous:{title:"986. Interval List Intersections",permalink:"/docs/leetcode/501-1000/interval_list_intersections"},next:{title:"989. Add to Array-Form of Integer",permalink:"/docs/leetcode/501-1000/add_to_array_form_of_integer"}},i={},c=[{value:"Python",id:"python",level:2},{value:"DFS than sort with different keys",id:"dfs-than-sort-with-different-keys",level:3},{value:"Javascript",id:"javascript",level:2}];function d(e){const r={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.p,{children:(0,n.jsx)(r.a,{href:"https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/",children:"https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/"})}),"\n",(0,n.jsx)(r.h2,{id:"python",children:"Python"}),"\n",(0,n.jsx)(r.h3,{id:"dfs-than-sort-with-different-keys",children:"DFS than sort with different keys"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:"from collections import defaultdict\n\n\nclass Solution:\n    def verticalTraversal(self, root: Optional[TreeNode]) -> List[List[int]]:\n        mapper = defaultdict(list)\n\n        def dfs(node, level: int, pos: int):\n            if not node:\n                return\n\n            dfs(node.left, level+1, pos-1)\n            mapper[pos].append((level, node.val))\n            dfs(node.right, level+1, pos+1)\n\n        dfs(root, 0, 0)\n\n        result = []\n        for key in sorted(mapper.keys()):\n            result.append([num for level, num in sorted(mapper[key])])\n        return result\n"})}),"\n",(0,n.jsx)(r.h2,{id:"javascript",children:"Javascript"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-javascript",children:"var verticalTraversal = function(root) {\n    const queue = [];\n    const tmp = [];\n    let start = Infinity;\n    queue.push([0, 0, root]);\n\n    while (queue.length) {\n        const [row, col, node] = queue.shift();\n\n        tmp.push([row, col, node.val]);\n        start = Math.min(col, start)\n\n        if (node.left) queue.push([row + 1, col - 1, node.left]);\n        if (node.right) queue.push([row + 1, col + 1, node.right]);\n    }\n\n    tmp.sort((a, b) => {\n        // compare col\n        if (a[1] === b[1]) {\n            // compare row\n            if (a[0] === b[0]) {\n                // compare val\n                return a[2] - b[2];\n            } else {\n                return a[0] - b[0];\n            }\n        } else {\n            return a[1] - b[1]\n        }\n    });\n\n    const res = [];\n    let inc = Math.abs(start);\n\n    for (const [,col, val] of tmp) {\n        const idx = col + inc;\n\n        if (res[idx] !== undefined) res[idx].push(val);\n        else res.push([val]);\n    }\n\n    return res;\n};\n"})})]})}function p(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},28453:(e,r,t)=>{t.d(r,{R:()=>s,x:()=>l});var n=t(96540);const a={},o=n.createContext(a);function s(e){const r=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),n.createElement(o.Provider,{value:r},e.children)}}}]);