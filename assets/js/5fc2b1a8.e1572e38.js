"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[13573],{5751:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"leetcode/1-500/reverse_linked_list","title":"206. Reverse Linked List","description":"https://leetcode.com/problems/reverse-linked-list","source":"@site/docs/leetcode/1-500/206_reverse_linked_list.md","sourceDirName":"leetcode/1-500","slug":"/leetcode/1-500/reverse_linked_list","permalink":"/docs/leetcode/1-500/reverse_linked_list","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Easy","permalink":"/docs/tags/leetcode-easy"},{"inline":true,"label":"Linked List","permalink":"/docs/tags/linked-list"},{"inline":true,"label":"Go","permalink":"/docs/tags/go"}],"version":"current","sidebarPosition":206,"frontMatter":{"title":"206. Reverse Linked List","sidebar_label":"206. Reverse Linked List","tags":["Leetcode Easy","Linked List","Go"]},"sidebar":"docSidebar","previous":{"title":"205. Isomorphic Strings","permalink":"/docs/leetcode/1-500/isomorphic_strings"},"next":{"title":"207. Course Schedule","permalink":"/docs/leetcode/1-500/course_schedule"}}');var r=t(74848),i=t(28453);const o={title:"206. Reverse Linked List",sidebar_label:"206. Reverse Linked List",tags:["Leetcode Easy","Linked List","Go"]},l=void 0,d={},c=[{value:"Python",id:"python",level:2},{value:"Recursion",id:"recursion",level:3},{value:"Loop",id:"loop",level:3},{value:"Go",id:"go",level:2},{value:"Recursion",id:"recursion-1",level:3}];function a(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/reverse-linked-list",children:"https://leetcode.com/problems/reverse-linked-list"})}),"\n",(0,r.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,r.jsx)(n.h3,{id:"recursion",children:"Recursion"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Solution:\n   def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n       return self._travel(head, None)\n\n   def _travel(self, node, prev):\n       if not node:\n           return prev\n\n       origin_next = node.next\n       node.next = prev\n\n       return self._travel(origin_next, node)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"loop",children:"Loop"}),"\n",(0,r.jsxs)(n.p,{children:["(This is be used in ",(0,r.jsx)(n.a,{href:"/docs/leetcode/1-500/reorder_list",children:"143. Reorder List"}),")"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        if not head:\n            return\n\n        prev = None\n        while head:\n            head.next, prev, head =  prev, head, head.next\n\n        return prev\n"})}),"\n",(0,r.jsx)(n.h2,{id:"go",children:"Go"}),"\n",(0,r.jsx)(n.h3,{id:"recursion-1",children:"Recursion"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func reverseList(head *ListNode) *ListNode {\n    return travel(head, nil)\n}\n\nfunc travel(node *ListNode, prev *ListNode) *ListNode {\n    if node == nil {\n        return prev\n    }\n\n    originNext := node.Next\n    node.Next = prev\n\n   return travel(originNext, node)\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var s=t(96540);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);