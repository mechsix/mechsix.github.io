"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[72691],{84706:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>c,metadata:()=>s,toc:()=>a});var r=n(74848),t=n(28453);const c={title:"79. Word Search",sidebar_label:"79. Word Search",tags:["Leetcode Medium","Backtracking"]},i=void 0,s={id:"leetcode/1-500/word_search",title:"79. Word Search",description:"https://leetcode.com/problems/word-search/",source:"@site/docs/leetcode/1-500/79_word_search.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/word_search",permalink:"/docs/leetcode/1-500/word_search",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Backtracking",permalink:"/docs/tags/backtracking"}],version:"current",sidebarPosition:79,frontMatter:{title:"79. Word Search",sidebar_label:"79. Word Search",tags:["Leetcode Medium","Backtracking"]},sidebar:"docSidebar",previous:{title:"78. Subsets",permalink:"/docs/leetcode/1-500/subsets"},next:{title:"80. Remove Duplicates from Sorted Array II",permalink:"/docs/leetcode/1-500/remove_duplicates_from_sorted_array_ii"}},d={},a=[{value:"Python",id:"python",level:2},{value:"Javascript",id:"javascript",level:2}];function l(e){const o={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(o.p,{children:(0,r.jsx)(o.a,{href:"https://leetcode.com/problems/word-search/",children:"https://leetcode.com/problems/word-search/"})}),"\n",(0,r.jsx)(o.h2,{id:"python",children:"Python"}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-python",children:"class Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:\n        row_limit = len(board)\n        col_limit = len(board[0])\n\n        used = set()\n\n        def backtrack(row, col, index):\n            if index == len(word):\n                return True\n\n            if board[row][col] != word[index]:\n                return False\n\n            up = down = right = left = False\n            used.add((row, col))\n\n            next_index = index + 1\n            if row - 1 >= 0 and (row-1, col) not in used:\n                up = backtrack(row-1, col, next_index)\n\n            if row + 1 < row_limit and (row+1, col) not in used:\n                down = backtrack(row+1, col, next_index)\n\n            if col - 1 >= 0 and (row, col-1) not in used:\n                left = backtrack(row, col-1, next_index)\n\n            if col + 1 < col_limit and (row, col+1) not in used:\n                right = backtrack(row, col+1, next_index)\n\n            used.remove((row, col))\n            # print(row, col, board[row][col], up, down, left, right, used)\n            return up or down or right or left or index == len(word)-1\n\n        for row in range(row_limit):\n            for col in range(col_limit):\n                if backtrack(row, col, 0):\n                    return True\n        return False\n"})}),"\n",(0,r.jsx)(o.h2,{id:"javascript",children:"Javascript"}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-javascript",children:"var exist = function (board, word) {\n  const finding = new Finding(board, word);\n\n  for (let row = 0; row < board.length; row++) {\n    for (let col = 0; col < board[row].length; col++) {\n      if (finding.track(row, col)) return true;\n    }\n  }\n  return false;\n};\n\nclass Finding {\n  constructor(board, word) {\n    this.maxRows = board.length;\n    this.maxCols = board[0].length;\n    this.board = board;\n    this.word = word;\n  }\n\n  track(row, col, i = 0) {\n    // matched\n    if (i >= this.word.length) return true;\n\n    if (row < 0 || row >= this.maxRows || col < 0 || col >= this.maxCols || this.word[i] !== this.board[row][col]) {\n      return;\n    }\n    // console.log([row, col], i, this.word[i])\n\n    let res = false;\n    this.board[row][col] = null;\n    // console.log(this.board)\n\n    const directions = [[1, 0], [-1, 0], [0, 1], [0, -1]];\n    for (const [x, y] of directions) {\n      res = this.track(row + y, col + x, i + 1);\n      if (res) break;\n    }\n    // console.log([row, col], this.word[i])\n    this.board[row][col] = this.word[i]\n\n    return res;\n  }\n}\n"})})]})}function u(e={}){const{wrapper:o}={...(0,t.R)(),...e.components};return o?(0,r.jsx)(o,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,o,n)=>{n.d(o,{R:()=>i,x:()=>s});var r=n(96540);const t={},c=r.createContext(t);function i(e){const o=r.useContext(c);return r.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function s(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(c.Provider,{value:o},e.children)}}}]);