"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[72797],{3905:function(e,r,n){n.d(r,{Zo:function(){return u},kt:function(){return m}});var t=n(67294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function c(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=t.createContext({}),d=function(e){var r=t.useContext(l),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},u=function(e){var r=d(e.components);return t.createElement(l.Provider,{value:r},e.children)},s="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},f=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),s=d(n),f=a,m=s["".concat(l,".").concat(f)]||s[f]||p[f]||o;return n?t.createElement(m,i(i({ref:r},u),{},{components:n})):t.createElement(m,i({ref:r},u))}));function m(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=f;var c={};for(var l in r)hasOwnProperty.call(r,l)&&(c[l]=r[l]);c.originalType=e,c[s]="string"==typeof e?e:a,i[1]=c;for(var d=2;d<o;d++)i[d]=n[d];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}f.displayName="MDXCreateElement"},12833:function(e,r,n){n.r(r),n.d(r,{assets:function(){return l},contentTitle:function(){return i},default:function(){return s},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return d}});var t=n(83117),a=(n(67294),n(3905));const o={title:"1382. Balance a Binary Search Tree",sidebar_label:"1382. Balance a Binary Search Tree",tags:["Leetcode Medium","BST"]},i=void 0,c={unversionedId:"leetcode/1001-1500/balance_a_bst",id:"leetcode/1001-1500/balance_a_bst",title:"1382. Balance a Binary Search Tree",description:"https://leetcode.com/problems/balance-a-binary-search-tree",source:"@site/docs/leetcode/1001-1500/1382_balance_a_bst.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/balance_a_bst",permalink:"/docs/leetcode/1001-1500/balance_a_bst",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1382_balance_a_bst.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"BST",permalink:"/docs/tags/bst"}],version:"current",sidebarPosition:1382,frontMatter:{title:"1382. Balance a Binary Search Tree",sidebar_label:"1382. Balance a Binary Search Tree",tags:["Leetcode Medium","BST"]},sidebar:"docSidebar",previous:{title:"1379. Find a Corresponding Node of a Binary Tree in a Clone of That Tree",permalink:"/docs/leetcode/1001-1500/find_corresponding_node_of_binary_tree_in_cloned"},next:{title:"1383. Maximum Performance of a Team",permalink:"/docs/leetcode/1001-1500/max_performance_of_team"}},l={},d=[{value:"Python",id:"python",level:2},{value:"In-order and rebuild",id:"in-order-and-rebuild",level:3}],u={toc:d};function s(e){let{components:r,...n}=e;return(0,a.kt)("wrapper",(0,t.Z)({},u,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/balance-a-binary-search-tree"},"https://leetcode.com/problems/balance-a-binary-search-tree")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("h3",{id:"in-order-and-rebuild"},"In-order and rebuild"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def balanceBST(self, root: TreeNode) -> TreeNode:\n        def inorder(node, result):\n            if not node:\n                return\n\n            inorder(node.left, result)\n            result.append(node.val)\n            inorder(node.right, result)\n\n        nums = []\n        inorder(root, nums)\n\n        def build(left, right):\n            if left > right:\n                return\n\n            mid = (left+right) >> 1\n            return TreeNode(nums[mid], build(left,mid-1), build(mid+1,right))\n\n        return build(0, len(nums)-1)\n")))}s.isMDXComponent=!0}}]);