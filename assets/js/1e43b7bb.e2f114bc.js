"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[4095],{3905:function(e,r,t){t.d(r,{Zo:function(){return s},kt:function(){return m}});var n=t(67294);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function u(e,r){if(null==e)return{};var t,n,i=function(e,r){if(null==e)return{};var t,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=n.createContext({}),l=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},s=function(e){var r=l(e.components);return n.createElement(c.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),d=l(t),m=i,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||a;return t?n.createElement(f,o(o({ref:r},s),{},{components:t})):n.createElement(f,o({ref:r},s))}));function m(e,r){var t=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=d;var u={};for(var c in r)hasOwnProperty.call(r,c)&&(u[c]=r[c]);u.originalType=e,u.mdxType="string"==typeof e?e:i,o[1]=u;for(var l=2;l<a;l++)o[l]=t[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},31557:function(e,r,t){t.r(r),t.d(r,{contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return u},metadata:function(){return l},toc:function(){return s}});var n=t(87462),i=t(63366),a=(t(67294),t(3905)),o=["components"],u={title:"1306. Jump Game III",sidebar_label:"1306. Jump Game III",tags:["Leetcode Medium","Jump Game"]},c=void 0,l={unversionedId:"leetcode/1001-1500/jump_game_iii",id:"leetcode/1001-1500/jump_game_iii",title:"1306. Jump Game III",description:"Python",source:"@site/docs/leetcode/1001-1500/1306_jump_game_iii.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/jump_game_iii",permalink:"/docs/leetcode/1001-1500/jump_game_iii",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1306_jump_game_iii.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Jump Game",permalink:"/docs/tags/jump-game"}],version:"current",sidebarPosition:1306,frontMatter:{title:"1306. Jump Game III",sidebar_label:"1306. Jump Game III",tags:["Leetcode Medium","Jump Game"]},sidebar:"docSidebar",previous:{title:"1305. All Elements in Two Binary Search Trees",permalink:"/docs/leetcode/1001-1500/all_elms_in_two_bst"},next:{title:"1328. Break a Palindrome",permalink:"/docs/leetcode/1001-1500/break_palindrome"}},s=[{value:"Python",id:"python",children:[],level:2}],p={toc:s};function d(e){var r=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("p",null,"First try, time limit exceed"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def canReach(self, arr: List[int], start: int) -> bool:\n        self.upbound = len(arr)-1\n        if not arr:\n            return False\n        return self._travel(arr, [], start)\n\n    def _travel(self, arr, visited, current):\n        if current in visited:\n            return False\n\n        if current > self.upbound or current < 0:\n            return False\n\n        if arr[current] == 0:\n            return True\n\n        visited.append(current)\n\n        return self._travel(arr, visited, current - arr[current]) \\\n            or self._travel(arr, visited, current + arr[current])\n")),(0,a.kt)("p",null,"Second Try, BFS with queue"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def canReach(self, arr: List[int], start: int) -> bool:\n        if not arr:\n            return False\n\n        upbound = len(arr)\n        queue = [start]\n        visited = set([start])\n\n        while queue:\n            current = queue.pop(0)\n\n            if arr[current] == 0:\n                return True\n\n            left = current - arr[current]\n            right = current + arr[current]\n\n            if left >= 0 and left < upbound and left not in visited:\n                visited.add(left)\n                queue.append(left)\n\n            if right >= 0 and right < upbound and right not in visited:\n                visited.add(right)\n                queue.append(right)\n\n        return False\n")))}d.isMDXComponent=!0}}]);