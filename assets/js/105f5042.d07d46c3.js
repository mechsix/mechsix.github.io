"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[79094],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>f});var o=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=o.createContext({}),i=function(e){var t=o.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},d=function(e){var t=i(e.components);return o.createElement(c.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=i(r),u=n,f=p["".concat(c,".").concat(u)]||p[u]||m[u]||a;return r?o.createElement(f,s(s({ref:t},d),{},{components:r})):o.createElement(f,s({ref:t},d))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,s=new Array(a);s[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:n,s[1]=l;for(var i=2;i<a;i++)s[i]=r[i];return o.createElement.apply(null,s)}return o.createElement.apply(null,r)}u.displayName="MDXCreateElement"},41219:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>i});var o=r(87462),n=(r(67294),r(3905));const a={title:"841. Keys and Rooms",sidebar_label:"841. Keys and Rooms",tags:["Leetcode Medium","Graph","DFS"]},s=void 0,l={unversionedId:"leetcode/501-1000/keys_and_rooms",id:"leetcode/501-1000/keys_and_rooms",title:"841. Keys and Rooms",description:"https://leetcode.com/problems/keys-and-rooms/",source:"@site/docs/leetcode/501-1000/841_keys_and_rooms.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/keys_and_rooms",permalink:"/docs/leetcode/501-1000/keys_and_rooms",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/841_keys_and_rooms.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Graph",permalink:"/docs/tags/graph"},{label:"DFS",permalink:"/docs/tags/dfs"}],version:"current",sidebarPosition:841,frontMatter:{title:"841. Keys and Rooms",sidebar_label:"841. Keys and Rooms",tags:["Leetcode Medium","Graph","DFS"]},sidebar:"docSidebar",previous:{title:"835. Image Overlap",permalink:"/docs/leetcode/501-1000/image_overlap"},next:{title:"844. Backspace String Compare",permalink:"/docs/leetcode/501-1000/backspacce_string_compare"}},c={},i=[{value:"Python",id:"python",level:2},{value:"DFS",id:"dfs",level:3}],d={toc:i},p="wrapper";function m(e){let{components:t,...r}=e;return(0,n.kt)(p,(0,o.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/keys-and-rooms/"},"https://leetcode.com/problems/keys-and-rooms/")),(0,n.kt)("h2",{id:"python"},"Python"),(0,n.kt)("h3",{id:"dfs"},"DFS"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def canVisitAllRooms(self, rooms: List[List[int]]) -> bool:\n        all_rooms = set(range(len(rooms)))\n        seen = set([0])\n\n        def dfs(room_id):\n            for key in rooms[room_id]:\n                if key not in seen:\n                    seen.add(key)\n                    dfs(key)\n        dfs(0)\n\n        return not bool(all_rooms - seen)\n")))}m.isMDXComponent=!0}}]);