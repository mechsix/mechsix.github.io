"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[7037],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return d}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),a=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=a(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,m=u(e,["components","mdxType","originalType","parentName"]),p=a(n),d=o,f=p["".concat(s,".").concat(d)]||p[d]||c[d]||i;return n?r.createElement(f,l(l({ref:t},m),{},{components:n})):r.createElement(f,l({ref:t},m))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,l=new Array(i);l[0]=p;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u.mdxType="string"==typeof e?e:o,l[1]=u;for(var a=2;a<i;a++)l[a]=n[a];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},49717:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return u},contentTitle:function(){return s},metadata:function(){return a},toc:function(){return m},default:function(){return p}});var r=n(87462),o=n(63366),i=(n(67294),n(3905)),l=["components"],u={title:"15. 3Sum",sidebar_label:"15. 3Sum",tags:["Leetcode Medium","Number Sum","Two Pointer"]},s=void 0,a={unversionedId:"leetcode/1-500/three_sum",id:"leetcode/1-500/three_sum",title:"15. 3Sum",description:"https://leetcode.com/problems/3sum",source:"@site/docs/leetcode/1-500/15_three_sum.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/three_sum",permalink:"/docs/leetcode/1-500/three_sum",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/15_three_sum.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Number Sum",permalink:"/docs/tags/number-sum"},{label:"Two Pointer",permalink:"/docs/tags/two-pointer"}],version:"current",sidebarPosition:15,frontMatter:{title:"15. 3Sum",sidebar_label:"15. 3Sum",tags:["Leetcode Medium","Number Sum","Two Pointer"]},sidebar:"docSidebar",previous:{title:"8. String to Integer (atoi)",permalink:"/docs/leetcode/1-500/atoi"},next:{title:"19. Remove Nth Node From End of List",permalink:"/docs/leetcode/1-500/remove_nth_from_eof_linked_list"}},m=[{value:"Python",id:"python",children:[{value:"Three Pointers",id:"three-pointers",children:[],level:3}],level:2}],c={toc:m};function p(e){var t=e.components,n=(0,o.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/3sum"},"https://leetcode.com/problems/3sum")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"three-pointers"},"Three Pointers"),(0,i.kt)("p",null,"\u5927\u6982\u5c31\u662fTwo Pointer\u7684Two Pointer\uff0c\u5148\u6392\u5e8f\u904e\u518d\u7528\u4e09\u500b\u6307\u6a19\u8d70\u8a2a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"L: \u5de6\u754c"),(0,i.kt)("li",{parentName:"ul"},"M: \u5f9eL+1\u79fb\u52d5\u5230R-1"),(0,i.kt)("li",{parentName:"ul"},"R: \u53f3\u754c\uff0c\u7bc4\u570d\u5167\u7684\u6700\u5927\u503c")),(0,i.kt)("p",null,"\u6392\u5e8f\u904e\uff0c\u6240\u4ee5\u53ef\u4ee5\u5229\u7528\u7576\u4e0b\u7684",(0,i.kt)("inlineCode",{parentName:"p"},"total"),"\u5927\u65bc\u5c0f\u65bc0\u7684\u95dc\u4fc2\uff0c\u6c7a\u5b9a\u8981\u79fb\u52d5\u54ea\u4e00\u500bpointer (m or r)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Origin Version which prevent duplicate via set(tuple)"',title:'"Origin',Version:!0,which:!0,prevent:!0,duplicate:!0,via:!0,'set(tuple)"':!0},"class Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        if len(nums) < 3:\n            return []\n\n        nums.sort()\n        result = set()\n\n        for l in range(0, len(nums)-2):\n            m = l + 1\n            r = len(nums)-1\n\n            while m < r:\n                total = sum([nums[l], nums[m], nums[r]])\n\n                if total == 0:\n                    result.add((nums[l], nums[m], nums[r]))\n                    # Move m, r at the same time is ok, because the l has its own loop\n                    m += 1\n                    r -= 1\n                elif total < 0:\n                    # Total too small, increase it from increment the cur (the m)\n                    m += 1\n                else:\n                    # Total too large, reduce it from decreasing the upbound\n                    r -= 1\n\n        return list(result)\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Skip duplicate values with result in array"',title:'"Skip',duplicate:!0,values:!0,with:!0,result:!0,in:!0,'array"':!0},"class Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        if len(nums) < 3:\n            return []\n\n        nums.sort()\n        result = []\n\n        for l in range(0, len(nums)-2):\n            if l > 0 and nums[l] == nums[l-1]:\n                continue\n\n            m = l + 1\n            r = len(nums)-1\n\n            while m < r:\n                if m > l+1 and nums[m] == nums[m-1]:\n                    m += 1\n                    continue\n\n                total = sum([nums[l], nums[m], nums[r]])\n\n                if total == 0:\n                    result.append([nums[l], nums[m], nums[r]])\n                    m += 1\n                    r -= 1\n                elif total < 0:\n                    m += 1\n                else:\n                    r -= 1\n\n        return result\n")))}p.isMDXComponent=!0}}]);