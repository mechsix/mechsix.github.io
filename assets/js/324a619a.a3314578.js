"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[94652],{95343:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var i=t(74848),r=t(28453);const o={title:"502. IPO",sidebar_label:"502. IPO",tags:["Leetcode Hard","Heap","Greedy"]},a=void 0,s={id:"leetcode/501-1000/ipo",title:"502. IPO",description:"Python",source:"@site/docs/leetcode/501-1000/502_ipo.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/ipo",permalink:"/docs/leetcode/501-1000/ipo",draft:!1,unlisted:!1,tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"Heap",permalink:"/docs/tags/heap"},{label:"Greedy",permalink:"/docs/tags/greedy"}],version:"current",sidebarPosition:502,frontMatter:{title:"502. IPO",sidebar_label:"502. IPO",tags:["Leetcode Hard","Heap","Greedy"]},sidebar:"docSidebar",previous:{title:"498. Diagonal Traverse",permalink:"/docs/leetcode/1-500/diagonal_traverse"},next:{title:"509. Fibonacci Number",permalink:"/docs/leetcode/501-1000/fibonacci_number"}},l={},c=[{value:"Python",id:"python",level:2},{value:"Max Heap",id:"max-heap",level:3}];function d(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,i.jsx)(n.h3,{id:"max-heap",children:"Max Heap"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u5b98\u65b9\u89e3\u6cd5"}),"\n",(0,i.jsxs)(n.li,{children:["\u5728\u6bcf\u500b\u6b65\u9a5f\uff0c\u6709\u5169\u500b\u5b50\u554f\u984c","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\u627e\u5230\u4e0b\u4e00\u500b\u53ef\u627f\u63a5\u7684\u6848\u5b50","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u4e0b\u4e00\u500b\u6240\u9700\u9810\u7b97\u6700\u5c11\u7684\u6848\u5b50"}),"\n",(0,i.jsx)(n.li,{children:"\u5148\u5c07\u9810\u7b97\u4ee5\u5c0f\u5230\u5927\u6392\u5e8f\u904e"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\u627e\u5230\u7576\u524d\u9810\u7b97\u53ef\u627f\u64d4\u7684\u72c0\u6cc1\u4e0b\uff0c\u80fd\u5920\u63a5\u4e0b\u7684\u6700\u6709profit\u7684\u5c08\u6848","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u4f7f\u7528max heap\u7dad\u8b77\u5269\u9918\u7684\u6848\u5b50"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from heapq import heappush, heappop\n\n\nclass Solution:\n    def findMaximizedCapital(self, k: int, w: int, profits: List[int], capitals: List[int]) -> int:\n        fund = w\n\n        projects = list(zip(capitals, profits))\n        projects.sort()\n\n        max_heap = []\n        ptr = 0\n\n        for i in range(k):\n            while ptr < len(projects) and projects[ptr][0] <= fund:\n                profit = projects[ptr][1]\n                heappush(max_heap, -profit) # Add new available project\n                ptr += 1\n\n            if not max_heap:\n                break\n\n            # Choose the best project and remove it\n            fund += -heappop(max_heap)\n\n        return fund\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var i=t(96540);const r={},o=i.createContext(r);function a(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);