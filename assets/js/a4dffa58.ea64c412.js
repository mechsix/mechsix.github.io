"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[38711],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=s(n),m=o,b=p["".concat(c,".").concat(m)]||p[m]||d[m]||i;return n?r.createElement(b,l(l({ref:t},u),{},{components:n})):r.createElement(b,l({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,l=new Array(i);l[0]=p;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:o,l[1]=a;for(var s=2;s<i;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},56823:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return u}});var r=n(87462),o=n(63366),i=(n(67294),n(3905)),l=["components"],a={title:"148. Sort List",sidebar_label:"148. Sort List",tags:["Leetcode Medium","Linked List"]},c=void 0,s={unversionedId:"leetcode/1-500/sort_list",id:"leetcode/1-500/sort_list",title:"148. Sort List",description:"https://leetcode.com/problems/sort-list/",source:"@site/docs/leetcode/1-500/148_sort_list.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/sort_list",permalink:"/docs/leetcode/1-500/sort_list",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/148_sort_list.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Linked List",permalink:"/docs/tags/linked-list"}],version:"current",sidebarPosition:148,frontMatter:{title:"148. Sort List",sidebar_label:"148. Sort List",tags:["Leetcode Medium","Linked List"]},sidebar:"docSidebar",previous:{title:"147. Insertion Sort List",permalink:"/docs/leetcode/1-500/insertion_sort_list"},next:{title:"151. Reverse Words in a String",permalink:"/docs/leetcode/1-500/reverse_words_in_string"}},u=[{value:"Python",id:"python",children:[{value:"Convert to Array than build Linked List back",id:"convert-to-array-than-build-linked-list-back",children:[],level:3},{value:"Rust",id:"rust",children:[],level:3},{value:"Convert to Array than build Linked List back",id:"convert-to-array-than-build-linked-list-back-1",children:[],level:3}],level:2}],d={toc:u};function p(e){var t=e.components,n=(0,o.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/sort-list/"},"https://leetcode.com/problems/sort-list/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"convert-to-array-than-build-linked-list-back"},"Convert to Array than build Linked List back"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Time: O(N)"),(0,i.kt)("li",{parentName:"ul"},"Space: O(N)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        elements = []\n\n        cur = head\n        while cur:\n            elements.append(cur.val)\n            cur = cur.next\n        elements.sort(reverse=True)\n\n        new_head = ListNode()\n        cur = new_head\n        while elements:\n            elm = elements.pop()\n            cur.next = ListNode(val=elm)\n            cur = cur.next\n\n        return new_head.next\n")),(0,i.kt)("h3",{id:"rust"},"Rust"),(0,i.kt)("h3",{id:"convert-to-array-than-build-linked-list-back-1"},"Convert to Array than build Linked List back"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"impl Solution {\n    pub fn sort_list(mut head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n        let mut vec: Vec<i32> = vec![];\n        while let Some(mut node) = head {\n            vec.push(node.val);\n            head = node.next;\n        }\n        vec.sort();\n        let mut next = None;\n        while let Some(val) = vec.pop() {\n            next = Some(Box::new(ListNode{next, val}))\n        }\n        next\n    }\n}\n")))}p.isMDXComponent=!0}}]);