"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[66812],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,f=u["".concat(s,".").concat(m)]||u[m]||p[m]||i;return n?r.createElement(f,a(a({ref:t},d),{},{components:n})):r.createElement(f,a({ref:t},d))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},40316:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(87462),o=(n(67294),n(3905));const i={title:"200. Number of Islands",sidebar_label:"200. Number of Islands",tags:["Leetcode Medium","Matrix"]},a=void 0,l={unversionedId:"leetcode/1-500/number_of_islands",id:"leetcode/1-500/number_of_islands",title:"200. Number of Islands",description:"https://leetcode.com/problems/number-of-islands/",source:"@site/docs/leetcode/1-500/200_number_of_islands.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/number_of_islands",permalink:"/docs/leetcode/1-500/number_of_islands",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/200_number_of_islands.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Matrix",permalink:"/docs/tags/matrix"}],version:"current",sidebarPosition:200,frontMatter:{title:"200. Number of Islands",sidebar_label:"200. Number of Islands",tags:["Leetcode Medium","Matrix"]},sidebar:"docSidebar",previous:{title:"199. Binary Tree Right Side View",permalink:"/docs/leetcode/1-500/binary_tree_right_side_view"},next:{title:"202. Happy Number",permalink:"/docs/leetcode/1-500/happy_number"}},s={},c=[{value:"Python",id:"python",level:2},{value:"DFS with Hashmap",id:"dfs-with-hashmap",level:3}],d={toc:c},u="wrapper";function p(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/number-of-islands/"},"https://leetcode.com/problems/number-of-islands/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"dfs-with-hashmap"},"DFS with Hashmap"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Time: O(M*N)"),(0,o.kt)("li",{parentName:"ul"},"Space: O(K)  # K present the block with")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        m, n = len(grid), len(grid[0])\n        offsets = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        visited = set()\n\n\n        def dfs(row: int, col: int, island: set):\n            if grid[row][col] == \"0\":\n                return set()\n\n            island.add((row, col))\n\n            for rx, cx in offsets:\n                if row+rx < 0 or row+rx >= m or col+cx < 0 or col+cx >= n:\n                    continue\n                if (row+rx, col+cx) in island:\n                    continue\n                island |= dfs(row+rx, col+cx, island)\n\n            return island\n\n        ans = 0\n        for row in range(m):\n            for col in range(n):\n                if grid[row][col] == '0' or (row, col) in visited:\n                    continue\n                ans += 1\n                visited |= dfs(row, col, set())\n\n        return ans\n")))}p.isMDXComponent=!0}}]);