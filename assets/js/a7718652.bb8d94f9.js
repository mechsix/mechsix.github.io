"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[4603],{3905:function(e,r,n){n.d(r,{Zo:function(){return s},kt:function(){return f}});var t=n(67294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function c(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function i(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=t.createContext({}),u=function(e){var r=t.useContext(l),n=r;return e&&(n="function"==typeof e?e(r):c(c({},r),e)),n},s=function(e){var r=u(e.components);return t.createElement(l.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=u(n),f=o,y=d["".concat(l,".").concat(f)]||d[f]||p[f]||a;return n?t.createElement(y,c(c({ref:r},s),{},{components:n})):t.createElement(y,c({ref:r},s))}));function f(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=d;var i={};for(var l in r)hasOwnProperty.call(r,l)&&(i[l]=r[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var u=2;u<a;u++)c[u]=n[u];return t.createElement.apply(null,c)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},61997:function(e,r,n){n.r(r),n.d(r,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return s},default:function(){return d}});var t=n(87462),o=n(63366),a=(n(67294),n(3905)),c=["components"],i={title:"704. Binary Search",sidebar_label:"704. Binary Search",tags:["Leetcode Easy"]},l=void 0,u={unversionedId:"leetcode/501-1000/binary_search",id:"leetcode/501-1000/binary_search",title:"704. Binary Search",description:"Python",source:"@site/docs/leetcode/501-1000/704_binary_search.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/binary_search",permalink:"/docs/leetcode/501-1000/binary_search",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/704_binary_search.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"}],version:"current",sidebarPosition:704,frontMatter:{title:"704. Binary Search",sidebar_label:"704. Binary Search",tags:["Leetcode Easy"]},sidebar:"docSidebar",previous:{title:"701. Insert into a Binary Search Tree",permalink:"/docs/leetcode/501-1000/insert_bst_node"},next:{title:"739. Daily Temperatures",permalink:"/docs/leetcode/501-1000/daily_temperatures"}},s=[{value:"Python",id:"python",children:[],level:2},{value:"Go",id:"go",children:[],level:2}],p={toc:s};function d(e){var r=e.components,n=(0,o.Z)(e,c);return(0,a.kt)("wrapper",(0,t.Z)({},p,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        l, r = 0, len(nums)-1\n\n        while l <= r:\n            cur = (l+r) // 2\n            if nums[cur] == target:\n                return cur\n            if nums[cur] < target:\n                l = cur + 1\n            else:\n                r = cur - 1\n\n        return -1\n")),(0,a.kt)("h2",{id:"go"},"Go"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func search(nums []int, target int) int {\n    var l int = 0\n    var r int = len(nums)-1\n\n    for l <= r {\n        cur := (l+r) / 2\n        if (nums[cur] == target) {\n            return cur\n        } else if (nums[cur] < target) {\n            l = cur + 1\n        } else {\n            r = cur - 1\n        }\n    }\n    return -1\n}\n")))}d.isMDXComponent=!0}}]);