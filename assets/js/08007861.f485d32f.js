"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[43501],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),h=o,f=u["".concat(l,".").concat(h)]||u[h]||d[h]||a;return n?r.createElement(f,s(s({ref:t},p),{},{components:n})):r.createElement(f,s({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:o,s[1]=i;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},94382:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return a},metadata:function(){return i},toc:function(){return c}});var r=n(83117),o=(n(67294),n(3905));const a={title:"1046. Last Stone Weight",sidebar_label:"1046. Last Stone Weight",tags:["Leetcode Easy","Heap"]},s=void 0,i={unversionedId:"leetcode/1001-1500/last_stone_weight",id:"leetcode/1001-1500/last_stone_weight",title:"1046. Last Stone Weight",description:"https://leetcode.com/problems/last-stone-weight/",source:"@site/docs/leetcode/1001-1500/1046_last_stone_weight.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/last_stone_weight",permalink:"/docs/leetcode/1001-1500/last_stone_weight",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1046_last_stone_weight.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Heap",permalink:"/docs/tags/heap"}],version:"current",sidebarPosition:1046,frontMatter:{title:"1046. Last Stone Weight",sidebar_label:"1046. Last Stone Weight",tags:["Leetcode Easy","Heap"]},sidebar:"docSidebar",previous:{title:"1020. Number of Enclaves",permalink:"/docs/leetcode/1001-1500/number_of_enclaves"},next:{title:"1047. Remove All Adjacent Duplicates In String",permalink:"/docs/leetcode/1001-1500/remove_all_adjacent_duplicates_in_string"}},l={},c=[{value:"Python",id:"python",level:2},{value:"Max Heap",id:"max-heap",level:3}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/last-stone-weight/"},"https://leetcode.com/problems/last-stone-weight/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"max-heap"},"Max Heap"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import heapq\n\n\nclass Solution:\n    def lastStoneWeight(self, stones: List[int]) -> int:\n        if len(stones) < 2:\n            # Constraints indicate the len(stones) min to 1\n            return stones[0]\n\n        # Build the max heap\n        for i in range(len(stones)):\n            stones[i] = -stones[i]\n        \n        heapq.heapify(stones)\n        \n        \n        while len(stones) > 1:\n            largest_1 = heapq.heappop(stones)  # miniumn native is the largest\n            largest_2 = heapq.heappop(stones)\n\n            if largest_1 != largest_2:\n                heapq.heappush(stones, largest_1-largest_2)\n        \n        return -heapq.heappop(stones) if stones else 0\n")))}u.isMDXComponent=!0}}]);