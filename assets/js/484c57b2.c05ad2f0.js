"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[99353],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},s="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),s=u(n),f=o,m=s["".concat(c,".").concat(f)]||s[f]||p[f]||i;return n?r.createElement(m,a(a({ref:t},d),{},{components:n})):r.createElement(m,a({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=f;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[s]="string"==typeof e?e:o,a[1]=l;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},47356:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return a},default:function(){return s},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return u}});var r=n(83117),o=(n(67294),n(3905));const i={title:"111. Minimum Depth of Binary Tree",slidebar_label:"111. Minimum Depth of Binary Tree",tags:["Leetcode Easy","Binary Tree","DFS","BFS"]},a=void 0,l={unversionedId:"leetcode/1-500/min_depth_of_binary_tree",id:"leetcode/1-500/min_depth_of_binary_tree",title:"111. Minimum Depth of Binary Tree",description:"https://leetcode.com/problems/minimum-depth-of-binary-tree/",source:"@site/docs/leetcode/1-500/111_min_depth_of_binary_tree.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/min_depth_of_binary_tree",permalink:"/docs/leetcode/1-500/min_depth_of_binary_tree",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/111_min_depth_of_binary_tree.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"},{label:"DFS",permalink:"/docs/tags/dfs"},{label:"BFS",permalink:"/docs/tags/bfs"}],version:"current",sidebarPosition:111,frontMatter:{title:"111. Minimum Depth of Binary Tree",slidebar_label:"111. Minimum Depth of Binary Tree",tags:["Leetcode Easy","Binary Tree","DFS","BFS"]},sidebar:"docSidebar",previous:{title:"110. Balanced Binary Tree",permalink:"/docs/leetcode/1-500/balanced_binary_tree"},next:{title:"112. Path Sum",permalink:"/docs/leetcode/1-500/path_sum"}},c={},u=[{value:"Python",id:"python",level:2},{value:"DFS Postfix",id:"dfs-postfix",level:3},{value:"BFS",id:"bfs",level:3}],d={toc:u};function s(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/minimum-depth-of-binary-tree/"},"https://leetcode.com/problems/minimum-depth-of-binary-tree/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"dfs-postfix"},"DFS Postfix"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def minDepth(self, root: Optional[TreeNode]) -> int:\n        def dfs(node):\n            if not node:\n                return 0\n\n            if node.right is None:\n                return dfs(node.left) + 1\n            if node.left is None:\n                return dfs(node.right) + 1\n\n            left, right = dfs(node.left), dfs(node.right)\n            return min(left, right) + 1\n\n        return dfs(root)\n")),(0,o.kt)("h3",{id:"bfs"},"BFS"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from collections import deque\n\n\nclass Solution:\n    def minDepth(self, root: Optional[TreeNode]) -> int:\n        if not root:\n            return 0\n\n        level, queue = 0, deque([root])\n\n        while queue:\n            level += 1\n\n            for _ in range(len(queue)):\n                node = queue.popleft()\n\n                if not node.left and not node.right:\n                    return level\n\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n")))}s.isMDXComponent=!0}}]);