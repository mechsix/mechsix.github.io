"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[96746],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return u}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),u=o,y=m["".concat(l,".").concat(u)]||m[u]||d[u]||i;return n?r.createElement(y,a(a({ref:t},p),{},{components:n})):r.createElement(y,a({ref:t},p))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},52625:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var r=n(87462),o=n(63366),i=(n(67294),n(3905)),a=["components"],s={title:"588. Design In-Memory File System",sidebar_label:"588. Design In-Memory File System",tags:["Leetcode Hard","TODO","Trie"]},l=void 0,c={unversionedId:"leetcode/501-1000/design_in_memory_file_system",id:"leetcode/501-1000/design_in_memory_file_system",title:"588. Design In-Memory File System",description:"https://leetcode.com/problems/design-in-memory-file-system/",source:"@site/docs/leetcode/501-1000/588_design_in_memory_file_system.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/design_in_memory_file_system",permalink:"/docs/leetcode/501-1000/design_in_memory_file_system",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/588_design_in_memory_file_system.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"TODO",permalink:"/docs/tags/todo"},{label:"Trie",permalink:"/docs/tags/trie"}],version:"current",sidebarPosition:588,frontMatter:{title:"588. Design In-Memory File System",sidebar_label:"588. Design In-Memory File System",tags:["Leetcode Hard","TODO","Trie"]},sidebar:"docSidebar",previous:{title:"583. Delete Operation for Two Strings",permalink:"/docs/leetcode/501-1000/delete_operation_for_two_strings"},next:{title:"589. N-ary Tree Preorder Traversal",permalink:"/docs/leetcode/501-1000/nary_tree_preorder_traversal"}},p=[{value:"Python",id:"python",children:[],level:2},{value:"Javascript",id:"javascript",children:[],level:2}],d={toc:p};function m(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/design-in-memory-file-system/"},"https://leetcode.com/problems/design-in-memory-file-system/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h2",{id:"javascript"},"Javascript"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"}," var FileSystem = function() {\n  this.root = { childs: {} };\n};\n\n/**\n * @param {string} path\n * @return {string[]}\n */\nFileSystem.prototype.ls = function(path) {\n  const node = this.traverse(path);\n\n  const ary = [];\n  if (node.isFile) {\n    ary.push(node.name);\n  } else {\n    for (const key in node.childs) {\n      const child = node.childs[key];\n      ary.push(child.name)\n    }\n  }\n  ary.sort();\n  return ary;\n};\n\n/**\n * @param {string} path\n * @return {void}\n */\nFileSystem.prototype.mkdir = function(path) {\n  this.traverse(path);\n};\n\n/**\n * @param {string} filePath\n * @param {string} content\n * @return {void}\n */\nFileSystem.prototype.addContentToFile = function(filePath, content) {\n    const node = this.traverse(filePath)\n  node.isFile = true;\n  node.content = (node.content || '') + content;\n};\n\n/**\n * @param {string} filePath\n * @return {string}\n */\nFileSystem.prototype.readContentFromFile = function(filePath) {\n  const node = this.traverse(filePath);\n  return node.content;\n\n};\n\nFileSystem.prototype.traverse = function(filePath) {\n  const paths = filePath.split('/')\n  let node = this.root;\n  for (let i = 1; i < paths.length; i++) {\n    const path = paths[i];\n    if (path) {\n      if (!node.childs[path]) {\n        node.childs[path] = { childs: {}, name: path };\n      }\n      node = node.childs[path];\n    }\n  }\n  return node;\n}\n")))}m.isMDXComponent=!0}}]);