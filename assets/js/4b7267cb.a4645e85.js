"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[3276],{84817:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>u,contentTitle:()=>c,default:()=>a,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=n(74848),t=n(28453);const o={title:"207. Course Schedule",sidebar_label:"207. Course Schedule",tags:["Leetcode Medium","Graph","BFS"]},c=void 0,i={id:"leetcode/1-500/course_schedule",title:"207. Course Schedule",description:"https://leetcode.com/problems/course-schedule/",source:"@site/docs/leetcode/1-500/207_course_schedule.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/course_schedule",permalink:"/docs/leetcode/1-500/course_schedule",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Graph",permalink:"/docs/tags/graph"},{label:"BFS",permalink:"/docs/tags/bfs"}],version:"current",sidebarPosition:207,frontMatter:{title:"207. Course Schedule",sidebar_label:"207. Course Schedule",tags:["Leetcode Medium","Graph","BFS"]},sidebar:"docSidebar",previous:{title:"206. Reverse Linked List",permalink:"/docs/leetcode/1-500/reverse_linked_list"},next:{title:"208. Implement Trie (Prefix Tree)",permalink:"/docs/leetcode/1-500/trie_tree"}},u={},l=[{value:"Python",id:"python",level:2},{value:"BFS",id:"bfs",level:3}];function d(e){const s={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"https://leetcode.com/problems/course-schedule/",children:"https://leetcode.com/problems/course-schedule/"})}),"\n",(0,r.jsx)(s.h2,{id:"python",children:"Python"}),"\n",(0,r.jsx)(s.h3,{id:"bfs",children:"BFS"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"from collections import defaultdict, deque\n\n\nclass Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\n        graph = defaultdict(set)\n        ingress = [0] * numCourses\n\n        for edge in prerequisites:\n            graph[edge[1]].add(edge[0])\n            ingress[edge[0]] += 1\n\n        queue = deque()\n        for course in range(numCourses):\n            if ingress[course] == 0:\n                queue.append(course)\n\n        while queue:\n            course = queue.popleft()\n            for prereq in graph[course]:\n                ingress[prereq] -= 1\n                if ingress[prereq] == 0:\n                    queue.append(prereq)\n\n        return all(item == 0 for item in ingress)\n"})})]})}function a(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>c,x:()=>i});var r=n(96540);const t={},o=r.createContext(t);function c(e){const s=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),r.createElement(o.Provider,{value:s},e.children)}}}]);