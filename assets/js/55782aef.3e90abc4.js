"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[80320],{3905:(e,t,n)=>{n.d(t,{Zo:()=>f,kt:()=>h});var r=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var a=r.createContext({}),l=function(e){var t=r.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},f=function(e){var t=l(e.components);return r.createElement(a.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,a=e.parentName,f=c(e,["components","mdxType","originalType","parentName"]),u=l(n),p=s,h=u["".concat(a,".").concat(p)]||u[p]||d[p]||o;return n?r.createElement(h,i(i({ref:t},f),{},{components:n})):r.createElement(h,i({ref:t},f))}));function h(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,i=new Array(o);i[0]=p;var c={};for(var a in t)hasOwnProperty.call(t,a)&&(c[a]=t[a]);c.originalType=e,c[u]="string"==typeof e?e:s,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},56801:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var r=n(87462),s=(n(67294),n(3905));const o={title:"389. Find the Difference",sidebar_label:"389. Find the Difference",tags:["Leetcode Easy","Go"]},i=void 0,c={unversionedId:"leetcode/1-500/find_the_difference",id:"leetcode/1-500/find_the_difference",title:"389. Find the Difference",description:"https://leetcode.com/problems/find-the-difference/submissions/",source:"@site/docs/leetcode/1-500/389_find_the_difference.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/find_the_difference",permalink:"/docs/leetcode/1-500/find_the_difference",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/389_find_the_difference.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Go",permalink:"/docs/tags/go"}],version:"current",sidebarPosition:389,frontMatter:{title:"389. Find the Difference",sidebar_label:"389. Find the Difference",tags:["Leetcode Easy","Go"]},sidebar:"docSidebar",previous:{title:"387. First Unique Character in a String",permalink:"/docs/leetcode/1-500/first_unique_char_in_string"},next:{title:"392. Is Subsequence",permalink:"/docs/leetcode/1-500/is_subsequence"}},a={},l=[{value:"Python",id:"python",level:2},{value:"Go",id:"go",level:2}],f={toc:l},u="wrapper";function d(e){let{components:t,...n}=e;return(0,s.kt)(u,(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/find-the-difference/submissions/"},"https://leetcode.com/problems/find-the-difference/submissions/")),(0,s.kt)("h2",{id:"python"},"Python"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def findTheDifference(self, s: str, t: str) -> str:\n        chars_s = list(s)\n        chars_t = list(t)\n\n        chars_s.sort()\n        chars_t.sort()\n\n        for i in range(len(chars_s)):\n            if chars_s[i] != chars_t[i]:\n                return chars_t[i]\n        return chars_t[-1]\n")),(0,s.kt)("h2",{id:"go"},"Go"),(0,s.kt)("p",null,"Sorting of rune reference ",(0,s.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/22688651/golang-how-to-sort-string-or-byte"},"here")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},"type sortRunes []rune\n\nfunc (s sortRunes) Less(i, j int) bool {\n    return s[i] < s[j]\n}\n\nfunc (s sortRunes) Swap(i, j int) {\n    s[i], s[j] = s[j], s[i]\n}\n\nfunc (s sortRunes) Len() int {\n    return len(s)\n}\n\nfunc findTheDifference(s string, t string) byte {\n    chars_s := []rune(s)\n    chars_t := []rune(t)\n\n    sort.Sort(sortRunes(chars_s))\n    sort.Sort(sortRunes(chars_t))\n\n    for i, char := range(chars_s) {\n        if char != chars_t[i] {\n            return byte(chars_t[i])\n        }\n    }\n    return byte(chars_t[len(chars_t)-1])\n}\n")))}d.isMDXComponent=!0}}]);