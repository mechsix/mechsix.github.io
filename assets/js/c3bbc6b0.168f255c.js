"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[66800],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return p}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),d=c(n),p=o,f=d["".concat(s,".").concat(p)]||d[p]||m[p]||i;return n?r.createElement(f,a(a({ref:t},l),{},{components:n})):r.createElement(f,a({ref:t},l))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u.mdxType="string"==typeof e?e:o,a[1]=u;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4526:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return u},metadata:function(){return c},toc:function(){return l}});var r=n(87462),o=n(63366),i=(n(67294),n(3905)),a=["components"],u={title:"6207. Count Subarrays With Fixed Bounds",sidebar_label:"6207. Count Subarrays With Fixed Bounds",tags:["Leetcode Hard","Two Pointer","Contest"]},s=void 0,c={unversionedId:"leetcode/2000/count_subarray_with_fixed_bounds",id:"leetcode/2000/count_subarray_with_fixed_bounds",title:"6207. Count Subarrays With Fixed Bounds",description:"https://leetcode.com/contest/weekly-contest-315/problems/count-subarrays-with-fixed-bounds/",source:"@site/docs/leetcode/2000/6207_count_subarray_with_fixed_bounds.md",sourceDirName:"leetcode/2000",slug:"/leetcode/2000/count_subarray_with_fixed_bounds",permalink:"/docs/leetcode/2000/count_subarray_with_fixed_bounds",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/2000/6207_count_subarray_with_fixed_bounds.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"Two Pointer",permalink:"/docs/tags/two-pointer"},{label:"Contest",permalink:"/docs/tags/contest"}],version:"current",sidebarPosition:6207,frontMatter:{title:"6207. Count Subarrays With Fixed Bounds",sidebar_label:"6207. Count Subarrays With Fixed Bounds",tags:["Leetcode Hard","Two Pointer","Contest"]},sidebar:"docSidebar",previous:{title:"6205. Count Number of Distinct Integers After Reverse Operations",permalink:"/docs/leetcode/2000/count_num_of_distinct_int_after_reverse_operation"},next:{title:"6219. Sum of Number and Its Reverse",permalink:"/docs/leetcode/2000/sum_of_num_an_its_reverse"}},l=[{value:"Python",id:"python",children:[{value:"Brute Force (Timelimit Exceed)",id:"brute-force-timelimit-exceed",children:[],level:3},{value:"Two Pointer",id:"two-pointer",children:[],level:3}],level:2}],m={toc:l};function d(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/contest/weekly-contest-315/problems/count-subarrays-with-fixed-bounds/"},"https://leetcode.com/contest/weekly-contest-315/problems/count-subarrays-with-fixed-bounds/")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Contest 315")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"brute-force-timelimit-exceed"},"Brute Force (Timelimit Exceed)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Time: O(N**2):"),(0,i.kt)("li",{parentName:"ul"},"Space: O(1)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def countSubarrays(self, nums: List[int], minK: int, maxK: int) -> int:\n        if minK not in nums or maxK not in nums:\n            return 0\n\n        ans = 0\n        for i in range(len(nums)):\n            cmin, cmax = nums[i], nums[i]\n\n            for j in range(i, len(nums)):\n                cmax, cmin = max(cmax, nums[j]), min(cmin, nums[j])\n                if cmax > maxK or cmin < minK:\n                    break\n                if cmin == minK and cmax == maxK:\n                    ans += 1\n                # print([i, j], (cmin, cmax), nums[i:j+1])\n        return ans\n")),(0,i.kt)("h3",{id:"two-pointer"},"Two Pointer"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Anser from No.1 of Contest 315: ",(0,i.kt)("a",{parentName:"li",href:"https://leetcode.cn/981377660LMT"},"981377660lmt"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def countSubarrays(self, nums: List[int], minK: int, maxK: int) -> int:\n        n = len(nums)\n        res, left = 0, 0\n        pos1, pos2 = -1, -1\n        for right in range(n):\n            if nums[right] == minK:\n                pos1 = right\n            if nums[right] == maxK:\n                pos2 = right\n            if nums[right] < minK or nums[right] > maxK:\n                left = right + 1\n            res += max(0, min(pos1, pos2) - left + 1)\n\n        return res\n")))}d.isMDXComponent=!0}}]);