"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[26797],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return f}});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var u=r.createContext({}),m=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=m(e.components);return r.createElement(u.Provider,{value:n},e.children)},l="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,u=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),l=m(t),d=i,f=l["".concat(u,".").concat(d)]||l[d]||p[d]||o;return t?r.createElement(f,a(a({ref:n},s),{},{components:t})):r.createElement(f,a({ref:n},s))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=d;var c={};for(var u in n)hasOwnProperty.call(n,u)&&(c[u]=n[u]);c.originalType=e,c[l]="string"==typeof e?e:i,a[1]=c;for(var m=2;m<o;m++)a[m]=t[m];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},98784:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return a},default:function(){return l},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return m}});var r=t(83117),i=(t(67294),t(3905));const o={title:"1689. Partitioning Into Minimum Number Of Deci-Binary Numbers",sidebar_label:"1689. Partitioning Into Minimum Number Of Deci-Binary Numbers",tags:["Leetcode Medium"]},a=void 0,c={unversionedId:"leetcode/1501-2000/partitioning_into_min_num_of_deci_binary_nums",id:"leetcode/1501-2000/partitioning_into_min_num_of_deci_binary_nums",title:"1689. Partitioning Into Minimum Number Of Deci-Binary Numbers",description:"https://leetcode.com/problems/partitioning-into-minimum-number-of-deci-binary-numbers/",source:"@site/docs/leetcode/1501-2000/1689_partitioning_into_min_num_of_deci_binary_nums.md",sourceDirName:"leetcode/1501-2000",slug:"/leetcode/1501-2000/partitioning_into_min_num_of_deci_binary_nums",permalink:"/docs/leetcode/1501-2000/partitioning_into_min_num_of_deci_binary_nums",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1501-2000/1689_partitioning_into_min_num_of_deci_binary_nums.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"}],version:"current",sidebarPosition:1689,frontMatter:{title:"1689. Partitioning Into Minimum Number Of Deci-Binary Numbers",sidebar_label:"1689. Partitioning Into Minimum Number Of Deci-Binary Numbers",tags:["Leetcode Medium"]},sidebar:"docSidebar",previous:{title:"1680. Concatenation of Consecutive Binary Numbers",permalink:"/docs/leetcode/1501-2000/concatenation_of_consecutive_bin_nums"},next:{title:"1695. Maximum Erasure Value",permalink:"/docs/leetcode/1501-2000/max_erasure_value"}},u={},m=[{value:"Python",id:"python",level:2}],s={toc:m};function l(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/partitioning-into-minimum-number-of-deci-binary-numbers/"},"https://leetcode.com/problems/partitioning-into-minimum-number-of-deci-binary-numbers/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def minPartitions(self, n: str) -> int:\n        return int(max(n))\n")))}l.isMDXComponent=!0}}]);