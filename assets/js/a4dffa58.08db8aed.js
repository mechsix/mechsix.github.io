"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[38711],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),a=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=a(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=a(r),m=o,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||i;return r?n.createElement(f,l(l({ref:t},u),{},{components:r})):n.createElement(f,l({ref:t},u))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,l=new Array(i);l[0]=p;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,l[1]=c;for(var a=2;a<i;a++)l[a]=r[a];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},56823:function(e,t,r){r.r(t),r.d(t,{contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return c},metadata:function(){return a},toc:function(){return u}});var n=r(87462),o=r(63366),i=(r(67294),r(3905)),l=["components"],c={title:"148. Sort List",sidebar_label:"148. Sort List",tags:["Leetcode Medium","Linked List"]},s=void 0,a={unversionedId:"leetcode/1-500/sort_list",id:"leetcode/1-500/sort_list",title:"148. Sort List",description:"https://leetcode.com/problems/sort-list/",source:"@site/docs/leetcode/1-500/148_sort_list.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/sort_list",permalink:"/docs/leetcode/1-500/sort_list",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/148_sort_list.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Linked List",permalink:"/docs/tags/linked-list"}],version:"current",sidebarPosition:148,frontMatter:{title:"148. Sort List",sidebar_label:"148. Sort List",tags:["Leetcode Medium","Linked List"]},sidebar:"docSidebar",previous:{title:"147. Insertion Sort List",permalink:"/docs/leetcode/1-500/insertion_sort_list"},next:{title:"151. Reverse Words in a String",permalink:"/docs/leetcode/1-500/reverse_words_in_string"}},u=[{value:"Python",id:"python",children:[{value:"Convert to Array than build Linked List back",id:"convert-to-array-than-build-linked-list-back",children:[],level:3}],level:2}],d={toc:u};function p(e){var t=e.components,r=(0,o.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/sort-list/"},"https://leetcode.com/problems/sort-list/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"convert-to-array-than-build-linked-list-back"},"Convert to Array than build Linked List back"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Time: O(N)"),(0,i.kt)("li",{parentName:"ul"},"Space: O(N)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        elements = []\n\n        cur = head\n        while cur:\n            elements.append(cur.val)\n            cur = cur.next\n        elements.sort(reverse=True)\n\n        new_head = ListNode()\n        cur = new_head\n        while elements:\n            elm = elements.pop()\n            cur.next = ListNode(val=elm)\n            cur = cur.next\n\n        return new_head.next\n")))}p.isMDXComponent=!0}}]);