"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[65180],{77405:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"leetcode/1-500/merge_sorted_array","title":"88. Merge Sorted Array","description":"https://leetcode.com/problems/merge-sorted-array","source":"@site/docs/leetcode/1-500/88_merge_sorted_array.md","sourceDirName":"leetcode/1-500","slug":"/leetcode/1-500/merge_sorted_array","permalink":"/docs/leetcode/1-500/merge_sorted_array","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Easy","permalink":"/docs/tags/leetcode-easy"},{"inline":true,"label":"Leetcode Optimable","permalink":"/docs/tags/leetcode-optimable"}],"version":"current","sidebarPosition":88,"frontMatter":{"title":"88. Merge Sorted Array","sidebar_label":"88. Merge Sorted Array","tags":["Leetcode Easy","Leetcode Optimable"]},"sidebar":"docSidebar","previous":{"title":"86. Partition List","permalink":"/docs/leetcode/1-500/partition_list"},"next":{"title":"90. Subsets II","permalink":"/docs/leetcode/1-500/subsets_ii"}}');var o=t(74848),s=t(28453);const i={title:"88. Merge Sorted Array",sidebar_label:"88. Merge Sorted Array",tags:["Leetcode Easy","Leetcode Optimable"]},l=void 0,a={},c=[{value:"Python",id:"python",level:2},{value:"Merge and sort",id:"merge-and-sort",level:3},{value:"Two pointers",id:"two-pointers",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://leetcode.com/problems/merge-sorted-array",children:"https://leetcode.com/problems/merge-sorted-array"})}),"\n",(0,o.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,o.jsx)(n.h3,{id:"merge-and-sort",children:"Merge and sort"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Time: O((n+m)log(n+m))"}),"\n",(0,o.jsx)(n.li,{children:"Space: O(n)"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from typing import List\n\n\nclass Solution:\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:\n        if not nums2:\n            return\n\n        for i in range(m, len(nums1)):\n            nums1[i] = nums2.pop()\n\n        nums1.sort()\n"})}),"\n",(0,o.jsx)(n.h3,{id:"two-pointers",children:"Two pointers"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Time: O(m+n)"}),"\n",(0,o.jsx)(n.li,{children:"Space: O(m+n)"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from collections import deque\n\n\nclass Solution:\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:\n        """\n        Do not return anything, modify nums1 in-place instead.\n        """\n        queue1 = deque(nums1[:m])\n        queue2 = deque(nums2)\n\n        for cur in range(m+n):\n            if queue1 and queue2:\n                nums1[cur] = queue1.popleft() if queue1[0] <= queue2[0] else queue2.popleft()\n                continue\n\n            if queue1:\n                nums1[cur] = queue1.popleft()\n\n            if queue2:\n                nums1[cur] = queue2.popleft()\n'})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var r=t(96540);const o={},s=r.createContext(o);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);