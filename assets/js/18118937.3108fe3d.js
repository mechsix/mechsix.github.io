"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[92601],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return h}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),d=u(n),f=o,h=d["".concat(l,".").concat(f)]||d[f]||p[f]||i;return n?r.createElement(h,c(c({ref:t},s),{},{components:n})):r.createElement(h,c({ref:t},s))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,c=new Array(i);c[0]=f;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[d]="string"==typeof e?e:o,c[1]=a;for(var u=2;u<i;u++)c[u]=n[u];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},16585:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return i},metadata:function(){return a},toc:function(){return u}});var r=n(83117),o=(n(67294),n(3905));const i={title:"63. Unique Paths II",sidebar_label:"63. Unique Paths II",tags:["Leetcode Medium","DFS"]},c=void 0,a={unversionedId:"leetcode/1-500/unique_paths_ii",id:"leetcode/1-500/unique_paths_ii",title:"63. Unique Paths II",description:"Python",source:"@site/docs/leetcode/1-500/63_unique_paths_ii.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/unique_paths_ii",permalink:"/docs/leetcode/1-500/unique_paths_ii",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/63_unique_paths_ii.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"DFS",permalink:"/docs/tags/dfs"}],version:"current",sidebarPosition:63,frontMatter:{title:"63. Unique Paths II",sidebar_label:"63. Unique Paths II",tags:["Leetcode Medium","DFS"]},sidebar:"docSidebar",previous:{title:"62. Unique Paths",permalink:"/docs/leetcode/1-500/unique_paths"},next:{title:"66. Plus One",permalink:"/docs/leetcode/1-500/plus_one"}},l={},u=[{value:"Python",id:"python",level:2},{value:"DFS with cache",id:"dfs-with-cache",level:3}],s={toc:u};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"dfs-with-cache"},"DFS with cache"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from functools import cache\n\n\nclass Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n        m, n = len(obstacleGrid), len(obstacleGrid[0])\n\n        if obstacleGrid[0][0] == 1 or obstacleGrid[m-1][n-1] == 1:\n            return 0\n\n        @cache\n        def dfs(row, col):\n            if row == m-1 and col == n-1:\n                if path or obstacleGrid[row][col] == 0:\n                    return 1\n                else:\n                    return 0\n\n            down_reachable, right_reachable = 0, 0\n            if row + 1 < m and obstacleGrid[row+1][col] == 0:\n                down_reachable = dfs(row+1, col)\n\n            if col + 1 < n and obstacleGrid[row][col+1] == 0:\n                right_reachable = dfs(row, col+1)\n\n            return down_reachable + right_reachable\n\n        result = dfs(0, 0)\n\n        return result\n")))}d.isMDXComponent=!0}}]);