"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[8702],{42336:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"leetcode/501-1000/find_duplicate_subtrees","title":"652. Find Duplicate Subtrees","description":"Python","source":"@site/docs/leetcode/501-1000/652_find_duplicate_subtrees.md","sourceDirName":"leetcode/501-1000","slug":"/leetcode/501-1000/find_duplicate_subtrees","permalink":"/docs/leetcode/501-1000/find_duplicate_subtrees","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Binary Tree","permalink":"/docs/tags/binary-tree"},{"inline":true,"label":"Leetcode Medium","permalink":"/docs/tags/leetcode-medium"},{"inline":true,"label":"Leetcode Optimable","permalink":"/docs/tags/leetcode-optimable"}],"version":"current","sidebarPosition":652,"frontMatter":{"title":"652. Find Duplicate Subtrees","sidebar_label":"652. Find Duplicate Subtrees","tags":["Binary Tree","Leetcode Medium","Leetcode Optimable"]},"sidebar":"docSidebar","previous":{"title":"647. Palindromic Substrings","permalink":"/docs/leetcode/501-1000/palindromic_substrings"},"next":{"title":"653. Two Sum IV - Input is a BST","permalink":"/docs/leetcode/501-1000/two_sum_4_bst_input"}}');var s=n(74848),o=n(28453);const i={title:"652. Find Duplicate Subtrees",sidebar_label:"652. Find Duplicate Subtrees",tags:["Binary Tree","Leetcode Medium","Leetcode Optimable"]},l=void 0,d={},a=[{value:"Python",id:"python",level:2}];function c(e){const t={code:"code",h2:"h2",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"class Solution:\n    def __init__(self):\n        self.seem = set()\n        self.result = []\n\n    def findDuplicateSubtrees(self, root: Optional[TreeNode]) -> List[Optional[TreeNode]]:\n        self.seem = set()\n        self.result = dict()\n\n        self.travel(root)\n\n        return self.result.values()\n\n    def travel(self, node: Optional[TreeNode]):\n        if not node:\n            return\n\n        preorder_travel = tuple(self.get_subtree(node, []))\n        if preorder_travel in self.seem:\n            self.result[preorder_travel] = node # Prevent duplicate in result\n        else:\n            self.seem.add(preorder_travel)\n\n        self.travel(node.left)\n        self.travel(node.right)\n\n    def get_subtree(self, node:  Optional[TreeNode], preorder: List):\n        if not node:\n            preorder.append(None)\n            return\n\n        preorder.append(node.val)\n        self.get_subtree(node.left, preorder)\n        self.get_subtree(node.right, preorder)\n        return preorder\n"})})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>l});var r=n(96540);const s={},o=r.createContext(s);function i(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);