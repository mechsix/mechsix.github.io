"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[39128],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>f});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),l=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=l(e.components);return r.createElement(u.Provider,{value:n},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=l(t),d=a,f=c["".concat(u,".").concat(d)]||c[d]||p[d]||o;return t?r.createElement(f,i(i({ref:n},m),{},{components:t})):r.createElement(f,i({ref:n},m))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var s={};for(var u in n)hasOwnProperty.call(n,u)&&(s[u]=n[u]);s.originalType=e,s[c]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},74915:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=t(87462),a=(t(67294),t(3905));const o={title:"1911. Maximum Alternating Subsequence Sum",sidebar_label:"1911. Maximum Alternating Subsequence Sum",tags:["Leetcode Medium","DP"]},i=void 0,s={unversionedId:"leetcode/1501-2000/maximum_alternating_subsequence_sum",id:"leetcode/1501-2000/maximum_alternating_subsequence_sum",title:"1911. Maximum Alternating Subsequence Sum",description:"https://leetcode.com/problems/maximum-alternating-subsequence-sum/",source:"@site/docs/leetcode/1501-2000/1911_maximum_alternating_subsequence_sum.md",sourceDirName:"leetcode/1501-2000",slug:"/leetcode/1501-2000/maximum_alternating_subsequence_sum",permalink:"/docs/leetcode/1501-2000/maximum_alternating_subsequence_sum",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1501-2000/1911_maximum_alternating_subsequence_sum.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"DP",permalink:"/docs/tags/dp"}],version:"current",sidebarPosition:1911,frontMatter:{title:"1911. Maximum Alternating Subsequence Sum",sidebar_label:"1911. Maximum Alternating Subsequence Sum",tags:["Leetcode Medium","DP"]},sidebar:"docSidebar",previous:{title:"1857. Largest Color Value in a Directed Graph",permalink:"/docs/leetcode/1501-2000/largest_color_value_in_a_directed_graph"},next:{title:"1996. The Number of Weak Characters in the Game",permalink:"/docs/leetcode/1501-2000/number_of_weak_character_in_the_game"}},u={},l=[{value:"Python",id:"python",level:2},{value:"Bottom Up DP",id:"bottom-up-dp",level:3},{value:"Top Down DP",id:"top-down-dp",level:3},{value:"Javascript",id:"javascript",level:2}],m={toc:l},c="wrapper";function p(e){let{components:n,...t}=e;return(0,a.kt)(c,(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/maximum-alternating-subsequence-sum/"},"https://leetcode.com/problems/maximum-alternating-subsequence-sum/")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("h3",{id:"bottom-up-dp"},"Bottom Up DP"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def maxAlternatingSum(self, nums: List[int]) -> int:\n        dp_odd = [0]\n        dp_even = [0]\n\n        for num in nums:\n            dp_odd.append( max(dp_odd[-1],  dp_even[-1]+num))\n            dp_even.append(max(dp_even[-1], dp_odd[-1]-num ))\n\n        return max(dp_even[-1], dp_odd[-1])\n")),(0,a.kt)("h3",{id:"top-down-dp"},"Top Down DP"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from functools import cache\n\n\nclass Solution:\n    def maxAlternatingSum(self, nums: List[int]) -> int:\n        @cache\n        def dp(i: int, is_choosed: bool):\n            if i == len(nums):\n                return 0\n\n            num = nums[i] if is_choosed else -nums[i]\n\n            total_choosed = num + dp(i+1, not is_choosed)\n            total_skipped = dp(i+1, is_choosed)\n\n            return max(total_choosed, total_skipped)\n\n        return dp(0, True)\n")),(0,a.kt)("h2",{id:"javascript"},"Javascript"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"var maxAlternatingSum = function(nums) {\n    let isUp = false;\n    let ans = 0;\n    for (let i = 0; i < nums.length; i++) {\n        if (isUp && nums[i] < nums[i + 1]) {\n            ans -= nums[i]\n            isUp = false\n        } else if (!isUp && nums[i] > nums[i + 1]) {\n            ans += nums[i]\n            isUp = true;\n        }\n        // console.log(ans)\n    }\n    if (!isUp) ans += nums[nums.length - 1];\n    return ans;\n};\n")))}p.isMDXComponent=!0}}]);