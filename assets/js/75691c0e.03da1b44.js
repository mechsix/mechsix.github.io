"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[5261],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var a=r.createContext({}),l=function(e){var t=r.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(a.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),d=o,f=u["".concat(a,".").concat(d)]||u[d]||m[d]||i;return n?r.createElement(f,c(c({ref:t},p),{},{components:n})):r.createElement(f,c({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,c=new Array(i);c[0]=u;var s={};for(var a in t)hasOwnProperty.call(t,a)&&(s[a]=t[a]);s.originalType=e,s.mdxType="string"==typeof e?e:o,c[1]=s;for(var l=2;l<i;l++)c[l]=n[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},75028:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return a},default:function(){return u},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p}});var r=n(87462),o=n(63366),i=(n(67294),n(3905)),c=["components"],s={title:"746. Min Cost Climbing Stairs",sidebar_label:"746. Min Cost Climbing Stairs",tags:["Leetcode Easy","DP"]},a=void 0,l={unversionedId:"leetcode/501-1000/min_cost_climbing_stairs",id:"leetcode/501-1000/min_cost_climbing_stairs",title:"746. Min Cost Climbing Stairs",description:"https://leetcode.com/problems/min-cost-climbing-stairs/",source:"@site/docs/leetcode/501-1000/746_min_cost_climbing_stairs.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/min_cost_climbing_stairs",permalink:"/docs/leetcode/501-1000/min_cost_climbing_stairs",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/746_min_cost_climbing_stairs.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"DP",permalink:"/docs/tags/dp"}],version:"current",sidebarPosition:746,frontMatter:{title:"746. Min Cost Climbing Stairs",sidebar_label:"746. Min Cost Climbing Stairs",tags:["Leetcode Easy","DP"]},sidebar:"docSidebar",previous:{title:"740. Delete and Earn",permalink:"/docs/leetcode/501-1000/delete_and_earn"},next:{title:"779. K-th Symbol in Grammar",permalink:"/docs/leetcode/501-1000/kth_symbol_in_grammar"}},p=[{value:"Python",id:"python",children:[{value:"Bottom-up DP",id:"bottom-up-dp",children:[],level:3},{value:"Top-down DP",id:"top-down-dp",children:[],level:3}],level:2}],m={toc:p};function u(e){var t=e.components,n=(0,o.Z)(e,c);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/min-cost-climbing-stairs/"},"https://leetcode.com/problems/min-cost-climbing-stairs/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"bottom-up-dp"},"Bottom-up DP"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def minCostClimbingStairs(self, cost: List[int]) -> int:\n        if len(cost) < 3:\n            return min(cost)\n\n        dp = [0] * (len(cost)+1)\n\n        for i in range(2, len(cost)+1):\n            take_one = dp[i-1] + cost[i-1]\n            take_two = dp[i-2] + cost[i-2]\n            dp[i] = min(take_one, take_two)\n\n        return dp[-1]\n")),(0,i.kt)("h3",{id:"top-down-dp"},"Top-down DP"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from functools import cache\n\n\nclass Solution:\n    def minCostClimbingStairs(self, cost: List[int]) -> int:\n        if len(cost) < 3:\n            return min(cost)\n\n        @cache\n        def dp(stair: int) -> int:\n            if stair < 2:\n                return 0\n            down_1 = cost[stair-1] + dp(stair-1)\n            down_2 = cost[stair-2] + dp(stair-2)\n            return min(down_1, down_2)\n\n        return dp(len(cost))\n\n")))}u.isMDXComponent=!0}}]);