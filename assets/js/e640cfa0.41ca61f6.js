"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[34644],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(67294);function l(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){l(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,l=function(e,t){if(null==e)return{};var r,n,l={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(l[r]=e[r]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(l[r]=e[r])}return l}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=c(r),d=l,f=p["".concat(s,".").concat(d)]||p[d]||m[d]||o;return r?n.createElement(f,i(i({ref:t},u),{},{components:r})):n.createElement(f,i({ref:t},u))}));function f(e,t){var r=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=r.length,i=new Array(o);i[0]=d;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[p]="string"==typeof e?e:l,i[1]=a;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},33950:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var n=r(87462),l=(r(67294),r(3905));const o={title:"43. Multiply Strings",sidebar_label:"43. Multiply Strings",tags:["Leetcode Medium"]},i=void 0,a={unversionedId:"leetcode/1-500/multiply_strings",id:"leetcode/1-500/multiply_strings",title:"43. Multiply Strings",description:"https://leetcode.com/problems/multiply-strings",source:"@site/docs/leetcode/1-500/43_multiply_strings.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/multiply_strings",permalink:"/docs/leetcode/1-500/multiply_strings",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/43_multiply_strings.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"}],version:"current",sidebarPosition:43,frontMatter:{title:"43. Multiply Strings",sidebar_label:"43. Multiply Strings",tags:["Leetcode Medium"]},sidebar:"docSidebar",previous:{title:"42. Trapping Rain Water",permalink:"/docs/leetcode/1-500/trapping_rain_water"},next:{title:"45. Jump Game II",permalink:"/docs/leetcode/1-500/jump_game_ii"}},s={},c=[{value:"Python",id:"python",level:2},{value:"Use enumerate index as pos",id:"use-enumerate-index-as-pos",level:3},{value:"Self-calculate power",id:"self-calculate-power",level:3}],u={toc:c},p="wrapper";function m(e){let{components:t,...r}=e;return(0,l.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/multiply-strings"},"https://leetcode.com/problems/multiply-strings")),(0,l.kt)("h2",{id:"python"},"Python"),(0,l.kt)("h3",{id:"use-enumerate-index-as-pos"},"Use enumerate index as pos"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def multiply(self, num1: str, num2: str) -> str:\n        result = 0\n        for pos1, char1 in enumerate(num1[::-1]):\n            for pos2, char2 in enumerate(num2[::-1]):\n                result += int(char1) * int(char2) * (10**(pos1+pos2))\n        return str(result)\n")),(0,l.kt)("h3",{id:"self-calculate-power"},"Self-calculate power"),(0,l.kt)("p",null,"(Second try, not that better solution)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def multiply(self, num1: str, num2: str) -> str:\n        ans = 0\n        power = 0\n\n        for ns1 in num1[::-1]:\n            level_total = 0\n            level_pwr = 0\n            for ns2 in num2[::-1]:\n                n1 = ord(ns1) - ord('0')\n                n2 = ord(ns2) - ord('0')\n                mult = n1 * n2\n\n                level_total += mult * (10**level_pwr)\n                level_pwr += 1\n\n            ans += level_total*(10**power)\n            power += 1\n\n        return str(ans)\n")))}m.isMDXComponent=!0}}]);