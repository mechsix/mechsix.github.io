"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[57418],{3905:(e,r,t)=>{t.d(r,{Zo:()=>d,kt:()=>g});var o=t(67294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,o,n=function(e,r){if(null==e)return{};var t,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var s=o.createContext({}),c=function(e){var r=o.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},d=function(e){var r=c(e.components);return o.createElement(s.Provider,{value:r},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},m=o.forwardRef((function(e,r){var t=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(t),m=n,g=p["".concat(s,".").concat(m)]||p[m]||u[m]||a;return t?o.createElement(g,i(i({ref:r},d),{},{components:t})):o.createElement(g,i({ref:r},d))}));function g(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var a=t.length,i=new Array(a);i[0]=m;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l[p]="string"==typeof e?e:n,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},21060:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var o=t(87462),n=(t(67294),t(3905));const a={title:"617. Merge Two Binary Trees",sidebar_label:"617. Merge Two Binary Trees",tags:["Leetcode Easy","Binary Tree","Go"]},i=void 0,l={unversionedId:"leetcode/501-1000/merge_two_binary_trees",id:"leetcode/501-1000/merge_two_binary_trees",title:"617. Merge Two Binary Trees",description:"https://leetcode.com/problems/merge-two-binary-trees/",source:"@site/docs/leetcode/501-1000/617_merge_two_binary_trees.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/merge_two_binary_trees",permalink:"/docs/leetcode/501-1000/merge_two_binary_trees",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/617_merge_two_binary_trees.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"},{label:"Go",permalink:"/docs/tags/go"}],version:"current",sidebarPosition:617,frontMatter:{title:"617. Merge Two Binary Trees",sidebar_label:"617. Merge Two Binary Trees",tags:["Leetcode Easy","Binary Tree","Go"]},sidebar:"docSidebar",previous:{title:"609. Find Duplicate File in System",permalink:"/docs/leetcode/501-1000/find_duplicate_file_in_system"},next:{title:"622. Design Circular Queue",permalink:"/docs/leetcode/501-1000/design_circular_queue"}},s={},c=[{value:"Python",id:"python",level:2},{value:"Go",id:"go",level:2}],d={toc:c},p="wrapper";function u(e){let{components:r,...t}=e;return(0,n.kt)(p,(0,o.Z)({},d,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/merge-two-binary-trees/"},"https://leetcode.com/problems/merge-two-binary-trees/")),(0,n.kt)("h2",{id:"python"},"Python"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:\n        if not root1 or not root2:\n            return root1 if root1 else root2\n\n        node = TreeNode(val=root1.val+root2.val)\n        node.left = self.mergeTrees(root1.left, root2.left)\n        node.right = self.mergeTrees(root1.right, root2.right)\n\n        return node\n")),(0,n.kt)("h2",{id:"go"},"Go"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"func mergeTrees(root1 *TreeNode, root2 *TreeNode) *TreeNode {\n    if root1 == nil || root2 == nil {\n        if root1 != nil {\n            return root1\n        } else {\n            return root2\n        }\n    }\n\n    node := new(TreeNode)\n    node.Val = root1.Val + root2.Val\n    node.Left = mergeTrees(root1.Left, root2.Left)\n    node.Right = mergeTrees(root1.Right, root2.Right)\n\n    return node\n}\n")))}u.isMDXComponent=!0}}]);