"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[2259],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return m}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=l(t),m=o,f=p["".concat(s,".").concat(m)]||p[m]||u[m]||i;return t?r.createElement(f,a(a({ref:n},d),{},{components:t})):r.createElement(f,a({ref:n},d))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=p;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var l=2;l<i;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},33026:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return d},default:function(){return p}});var r=t(87462),o=t(63366),i=(t(67294),t(3905)),a=["components"],c={title:"25. Reverse Nodes in k-Group",sidebar_label:"25. Reverse Nodes in k-Group",tags:["Leetcode Hard","Linked List","Stack"]},s=void 0,l={unversionedId:"leetcode/1-500/reverse_nodes_in_k_group",id:"leetcode/1-500/reverse_nodes_in_k_group",title:"25. Reverse Nodes in k-Group",description:"https://leetcode.com/problems/reverse-nodes-in-k-group/",source:"@site/docs/leetcode/1-500/25_reverse_nodes_in_k_group.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/reverse_nodes_in_k_group",permalink:"/docs/leetcode/1-500/reverse_nodes_in_k_group",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/25_reverse_nodes_in_k_group.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"Linked List",permalink:"/docs/tags/linked-list"},{label:"Stack",permalink:"/docs/tags/stack"}],version:"current",sidebarPosition:25,frontMatter:{title:"25. Reverse Nodes in k-Group",sidebar_label:"25. Reverse Nodes in k-Group",tags:["Leetcode Hard","Linked List","Stack"]},sidebar:"docSidebar",previous:{title:"24. Swap Nodes in Pairs",permalink:"/docs/leetcode/1-500/swap_nodes_in_pairs"},next:{title:"26. Remove Duplicates from Sorted Array",permalink:"/docs/leetcode/1-500/rm_duplicate_from_sorted_array"}},d=[{value:"Python",id:"python",children:[{value:"Stack and detect length",id:"stack-and-detect-length",children:[],level:3}],level:2}],u={toc:d};function p(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/reverse-nodes-in-k-group/"},"https://leetcode.com/problems/reverse-nodes-in-k-group/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"stack-and-detect-length"},"Stack and detect length"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Time: O(N+k)"),(0,i.kt)("li",{parentName:"ul"},"Space: O(k)  # Used on the stack")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class Solution:\n    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        if k < 2:\n            # If k == 1, nothing to be changed\n            return head\n\n        stack = []\n        dummy = ListNode(next=head)\n\n        # gpre stands for group pervious pointer\n        gpre, cur = dummy, head\n\n        while cur:\n            stack.append(cur)\n\n            if len(stack) % k == 0:\n                # Nodes in stack is ready to be reversed\n                origin_next = cur.next\n                print("Reversing {} -> {} -> {}:".format(\n                    gpre.val,\n                    [node.val for node in stack],\n                    cur.next.val if cur.next else None\n                ))\n\n                # Dummy head of the reversing part\n                rhead = ListNode()\n                rcur = rhead\n                while stack:\n                    rcur.next = stack.pop()\n                    rcur = rcur.next\n                    rcur.next = None # To prevent loop, add back after while\n\n                # The rcur now point to the new end of the reversed linked list\n                # Maintain the pointers\n                rcur.next = origin_next\n                gpre.next = rhead.next\n                gpre = rcur\n                cur = rcur.next\n            else:\n                cur = cur.next\n\n        return dummy.next\n')))}p.isMDXComponent=!0}}]);