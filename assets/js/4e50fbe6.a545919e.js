"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[67564],{61940:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"leetcode/1-500/spiral_matrix","title":"54. Spiral Matrix","description":"https://leetcode.com/problems/spiral-matrix/","source":"@site/docs/leetcode/1-500/54_spiral_matrix.md","sourceDirName":"leetcode/1-500","slug":"/leetcode/1-500/spiral_matrix","permalink":"/docs/leetcode/1-500/spiral_matrix","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Medium","permalink":"/docs/tags/leetcode-medium"},{"inline":true,"label":"Matrix","permalink":"/docs/tags/matrix"}],"version":"current","sidebarPosition":54,"frontMatter":{"title":"54. Spiral Matrix","sidebar_label":"54. Spiral Matrix","tags":["Leetcode Medium","Matrix"]},"sidebar":"docSidebar","previous":{"title":"53. Maximum Subarray","permalink":"/docs/leetcode/1-500/max_subarray"},"next":{"title":"55. Jump Game","permalink":"/docs/leetcode/1-500/jump_gamp"}}');var r=n(74848),s=n(28453);const l={title:"54. Spiral Matrix",sidebar_label:"54. Spiral Matrix",tags:["Leetcode Medium","Matrix"]},a=void 0,o={},d=[{value:"Python",id:"python",level:2}];function c(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://leetcode.com/problems/spiral-matrix/",children:"https://leetcode.com/problems/spiral-matrix/"})}),"\n",(0,r.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Time: O(m*n)"}),"\n",(0,r.jsx)(t.li,{children:"Space: O(m*n)   # the visited hashmap"}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"class Solution:\n    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:\n        m = len(matrix)\n        n = len(matrix[0])\n\n        limit = m*n\n        visited = set()\n        result = []\n\n        direction = 'right'\n        x, y = 0, 0\n        while len(result) < limit:\n            result.append(matrix[y][x])\n            visited.add((x, y))\n\n            if direction == 'right':\n                if x+1 < n and (x+1, y) not in visited:\n                    x += 1\n                else:\n                    direction = 'down'\n                    y += 1\n            elif direction == 'down':\n                if y+1 < m and (x, y+1) not in visited:\n                    y += 1\n                else:\n                    direction = 'left'\n                    x -= 1\n            elif direction == 'left':\n                if x-1 >= 0 and (x-1, y) not in visited:\n                    x -= 1\n                else:\n                    direction = 'up'\n                    y -= 1\n            else:\n                if y-1 >= 0 and (x, y-1) not in visited:\n                    y -= 1\n                else:\n                    direction = 'right'\n                    x += 1\n\n        return result\n"})})]})}function m(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>a});var i=n(96540);const r={},s=i.createContext(r);function l(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);