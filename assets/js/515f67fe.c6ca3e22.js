"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[43770],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return v}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),c=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,l=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(r),m=o,v=p["".concat(i,".").concat(m)]||p[m]||d[m]||l;return r?n.createElement(v,a(a({ref:t},u),{},{components:r})):n.createElement(v,a({ref:t},u))}));function v(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=r.length,a=new Array(l);a[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[p]="string"==typeof e?e:o,a[1]=s;for(var c=2;c<l;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},46553:function(e,t,r){r.r(t),r.d(t,{assets:function(){return i},contentTitle:function(){return a},default:function(){return p},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return c}});var n=r(83117),o=(r(67294),r(3905));const l={title:"1302. Deepest Leaves Sum",sidebar_label:"1302. Deepest Leaves Sum",tags:["Leetcode Medium","Binary Tree"]},a=void 0,s={unversionedId:"leetcode/1001-1500/deepest_leaves_sum",id:"leetcode/1001-1500/deepest_leaves_sum",title:"1302. Deepest Leaves Sum",description:"https://leetcode.com/problems/deepest-leaves-sum/",source:"@site/docs/leetcode/1001-1500/1302_deepest_leaves_sum.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/deepest_leaves_sum",permalink:"/docs/leetcode/1001-1500/deepest_leaves_sum",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1302_deepest_leaves_sum.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"}],version:"current",sidebarPosition:1302,frontMatter:{title:"1302. Deepest Leaves Sum",sidebar_label:"1302. Deepest Leaves Sum",tags:["Leetcode Medium","Binary Tree"]},sidebar:"docSidebar",previous:{title:"1299. Replace Elements with Greatest Element on Right Side",permalink:"/docs/leetcode/1001-1500/replace_elm_with_greatest_right"},next:{title:"1305. All Elements in Two Binary Search Trees",permalink:"/docs/leetcode/1001-1500/all_elms_in_two_bst"}},i={},c=[{value:"Python",id:"python",level:2},{value:"Sum Levels with preorder travel",id:"sum-levels-with-preorder-travel",level:3},{value:"Javascript",id:"javascript",level:2}],u={toc:c};function p(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/deepest-leaves-sum/"},"https://leetcode.com/problems/deepest-leaves-sum/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"sum-levels-with-preorder-travel"},"Sum Levels with preorder travel"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def deepestLeavesSum(self, root: Optional[TreeNode]) -> int:\n        level_counts = []\n\n        def preorder(node, level):\n            if not node:\n                return\n\n            if level == len(level_counts):\n                level_counts.append(0)\n\n            level_counts[level] += node.val\n            preorder(node.left, level+1)\n            preorder(node.right, level+1)\n\n        preorder(root, 0)\n\n        return level_counts[-1]\n")),(0,o.kt)("h2",{id:"javascript"},"Javascript"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"var deepestLeavesSum = function(root) {\n    const queue = [root];\n    let level = 0;\n    const layer = [];\n\n    while (queue.length) {\n      const total = queue.length;\n      layer.push([]);\n      for (let i = 0; i < total; i++) {\n        const node = queue.shift();\n        layer[level].push(node.val);\n\n        if (node.left) queue.push(node.left);\n        if (node.right) queue.push(node.right);\n      }\n      level++;\n    }\n\n    return layer[layer.length - 1].reduce((acc, cur) => acc + cur, 0)\n}\n")))}p.isMDXComponent=!0}}]);