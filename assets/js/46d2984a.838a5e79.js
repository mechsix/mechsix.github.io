"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[48365],{58701:(e,n,r)=>{r.r(n),r.d(n,{SpanBlue:()=>c,SpanGreen:()=>a,assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"leetcode/1-500/palindrome_pairs","title":"336. Palindrome Pairs","description":"https://leetcode.com/problems/palindrome-pairs/","source":"@site/docs/leetcode/1-500/336_palindrome_pairs.mdx","sourceDirName":"leetcode/1-500","slug":"/leetcode/1-500/palindrome_pairs","permalink":"/docs/leetcode/1-500/palindrome_pairs","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Hard","permalink":"/docs/tags/leetcode-hard"},{"inline":true,"label":"Trie","permalink":"/docs/tags/trie"}],"version":"current","sidebarPosition":336,"frontMatter":{"title":"336. Palindrome Pairs","sidebar_label":"336. Palindrome Pairs","tags":["Leetcode Hard","Trie"]},"sidebar":"docSidebar","previous":{"title":"334. Increasing Triplet Subsequence","permalink":"/docs/leetcode/1-500/increasing_triplet_subsequence"},"next":{"title":"337. House Robber III","permalink":"/docs/leetcode/1-500/house_robber_iii"}}');var s=r(74848),o=r(28453);const t={title:"336. Palindrome Pairs",sidebar_label:"336. Palindrome Pairs",tags:["Leetcode Hard","Trie"]},l=void 0,d={},c=({children:e,color:n})=>{const r={span:"span",...(0,o.R)()};return(0,s.jsx)(r.span,{style:{color:"blue"},children:e})},a=({children:e,color:n})=>{const r={span:"span",...(0,o.R)()};return(0,s.jsx)(r.span,{style:{color:"green"},children:e})},u=[{value:"Python",id:"python",level:2},{value:"Remember Suffix in Trie Tree",id:"remember-suffix-in-trie-tree",level:3}];function p(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/palindrome-pairs/",children:"https://leetcode.com/problems/palindrome-pairs/"})}),"\n","\n","\n",(0,s.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,s.jsx)(n.h3,{id:"remember-suffix-in-trie-tree",children:"Remember Suffix in Trie Tree"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"K"})," is the length of logest word; ",(0,s.jsx)(n.code,{children:"N"})," is length of words"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Time: O(K^2+N)"}),"\n",(0,s.jsx)(n.li,{children:"Space: O((K+N)^2)"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Consider ",(0,s.jsx)(n.strong,{children:"3"})," cases in ",(0,s.jsx)(c,{children:"Word1"})," and ",(0,s.jsx)(a,{children:"Word2"}),":"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Word1 is reversed Word2: ",(0,s.jsx)(c,{children:"CAT"}),(0,s.jsx)(a,{children:"TAC"})]}),"\n",(0,s.jsxs)(n.li,{children:["Word2 suffix is reversed Word1: ",(0,s.jsx)(c,{children:"CAT"}),(0,s.jsx)(a,{children:"SOLOSTAC"})]}),"\n",(0,s.jsxs)(n.li,{children:["Word1 prefix is reversed Word2: ",(0,s.jsx)(c,{children:"CATSOLOS"}),(0,s.jsx)(a,{children:"TAC"})]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def palindromePairs(self, words: List[str]) -> List[List[int]]:\n        # Build the trie tree\n        trie = {}\n        for i, word in enumerate(words):\n            cur = trie\n            word = word[::-1] # Build the trie tree with inverse order of the word\n            for j, letter in enumerate(word):\n                if word[j:] == word[j:][::-1]:\n                    if 'suffix' not in cur:\n                        cur['suffix'] = []\n                    cur['suffix'].append(i)   # Remember any suffix id (index) on the level if exist\n                cur = cur.setdefault(letter, {})\n            cur['eow'] = i\n\n        # Consider cases and find solutions\n        solutions = []\n        for i, word in enumerate(words):\n            cur = trie\n            for j, letter in enumerate(word):\n                # Case 3\n                if cur.get('eow') is not None:\n                    if word[j:] == word[j:][::-1]:\n                        solutions.append([i, cur.get('eow')])\n                if letter not in cur:\n                    break\n                cur = cur[letter]\n            else:\n                # Case 1\n                if cur.get('eow') is not None and cur['eow'] != i:\n                    solutions.append([i, cur['eow']])\n\n                # Case 2\n                for j in cur.get('suffix', []):\n                    solutions.append([i, j])\n\n        return solutions\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>l});var i=r(96540);const s={},o=i.createContext(s);function t(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);