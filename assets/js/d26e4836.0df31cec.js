"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[98221],{71967:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>i});const a=JSON.parse('{"id":"leetcode/501-1000/find_and_replace_pattern","title":"890. Find and Replace Pattern","description":"https://leetcode.com/problems/findandreplace_pattern/","source":"@site/docs/leetcode/501-1000/890_find_and_replace_pattern.md","sourceDirName":"leetcode/501-1000","slug":"/leetcode/501-1000/find_and_replace_pattern","permalink":"/docs/leetcode/501-1000/find_and_replace_pattern","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Medium","permalink":"/docs/tags/leetcode-medium"},{"inline":true,"label":"Hash","permalink":"/docs/tags/hash"}],"version":"current","sidebarPosition":890,"frontMatter":{"title":"890. Find and Replace Pattern","sidebar_label":"890. Find and Replace Pattern","tags":["Leetcode Medium","Hash"]},"sidebar":"docSidebar","previous":{"title":"881. Boats to Save People","permalink":"/docs/leetcode/501-1000/boats_to_save_people"},"next":{"title":"894. All Possible Full Binary Trees","permalink":"/docs/leetcode/501-1000/all_possible_full_binary_tree"}}');var r=t(74848),o=t(28453);const s={title:"890. Find and Replace Pattern",sidebar_label:"890. Find and Replace Pattern",tags:["Leetcode Medium","Hash"]},d=void 0,l={},i=[{value:"Python",id:"python",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/find_and_replace_pattern/",children:"https://leetcode.com/problems/find_and_replace_pattern/"})}),"\n",(0,r.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def findAndReplacePattern(self, words: List[str], pattern: str) -> List[str]:\n        result = []\n        \n        for word in words:\n            if len(word) != len(pattern):\n                continue\n            \n            mapper, mapped = dict(), set()\n            for i in range(len(pattern)):\n                p, c = pattern[i], word[i]\n                if p not in mapper:\n                    if c in mapped:\n                        break\n\n                    mapper[p] = c\n                    mapped.add(c)\n                else:\n                    if mapper[p] != c:\n                        break\n            else:\n                result.append(word)\n        \n        return result\n"})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>d});var a=t(96540);const r={},o=a.createContext(r);function s(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);