"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[58298],{60061:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var i=t(74848),r=t(28453);const s={title:"97. Interleaving String",sidebar_label:"97. Interleaving String",tags:["Leetcode Medium","DP"]},o=void 0,l={id:"leetcode/1-500/interleaving_string",title:"97. Interleaving String",description:"https://leetcode.com/problems/interleaving-string/",source:"@site/docs/leetcode/1-500/97_interleaving_string.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/interleaving_string",permalink:"/docs/leetcode/1-500/interleaving_string",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"DP",permalink:"/docs/tags/dp"}],version:"current",sidebarPosition:97,frontMatter:{title:"97. Interleaving String",sidebar_label:"97. Interleaving String",tags:["Leetcode Medium","DP"]},sidebar:"docSidebar",previous:{title:"96. Unique Binary Trees",permalink:"/docs/leetcode/1-500/unique_binary_trees"},next:{title:"98. Validate Binary Search Tree",permalink:"/docs/leetcode/1-500/bst_validation"}},a={},c=[{value:"Python",id:"python",level:2},{value:"Top Down DP",id:"top-down-dp",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/interleaving-string/",children:"https://leetcode.com/problems/interleaving-string/"})}),"\n",(0,i.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,i.jsx)(n.h3,{id:"top-down-dp",children:"Top Down DP"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from functools import cache\n\n\nclass Solution:\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\n        if len(s1) + len(s2) != len(s3):\n            return False\n\n        if not s1 or not s2:\n            if s1: return s1 == s3\n            else: return s2 == s3\n\n        n, m = len(s1), len(s2)\n\n        @cache\n        def dp(i1: int, i2: int):\n            if i1 == n and i2 == m:\n                return True\n\n            return any([\n                i1 < n and s1[i1] == s3[i1+i2] and dp(i1+1, i2),\n                i2 < m and s2[i2] == s3[i1+i2] and dp(i1, i2+1),\n            ])\n\n        return dp(0, 0)\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var i=t(96540);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);