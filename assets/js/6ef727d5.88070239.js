"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[6547],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return p}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),d=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=d(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),m=d(n),p=o,f=m["".concat(c,".").concat(p)]||m[p]||u[p]||i;return n?r.createElement(f,s(s({ref:t},l),{},{components:n})):r.createElement(f,s({ref:t},l))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,s=new Array(i);s[0]=m;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:o,s[1]=a;for(var d=2;d<i;d++)s[d]=n[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},72946:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return a},contentTitle:function(){return c},metadata:function(){return d},toc:function(){return l},default:function(){return m}});var r=n(87462),o=n(63366),i=(n(67294),n(3905)),s=["components"],a={title:"1396. Design Underground System",sidebar_label:"1396. Design Underground System",tags:["Leetcode Medium","Hash","System Design"]},c=void 0,d={unversionedId:"leetcode/1001-1500/design_underground_system",id:"leetcode/1001-1500/design_underground_system",title:"1396. Design Underground System",description:"https://leetcode.com/problems/design-underground-system/",source:"@site/docs/leetcode/1001-1500/1396_design_underground_system.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/design_underground_system",permalink:"/docs/leetcode/1001-1500/design_underground_system",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1396_design_underground_system.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Hash",permalink:"/docs/tags/hash"},{label:"System Design",permalink:"/docs/tags/system-design"}],version:"current",sidebarPosition:1396,frontMatter:{title:"1396. Design Underground System",sidebar_label:"1396. Design Underground System",tags:["Leetcode Medium","Hash","System Design"]},sidebar:"docSidebar",previous:{title:"1373. Maximum Sum BST in Binary Tree",permalink:"/docs/leetcode/1001-1500/max_sum_bst_of_bt"},next:{title:"1413. Mini Value to Possitive Sum",permalink:"/docs/leetcode/1001-1500/min_value_get_positive_sum"}},l=[{value:"Python",id:"python",children:[],level:2}],u={toc:l};function m(e){var t=e.components,n=(0,o.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/design-underground-system/"},"https://leetcode.com/problems/design-underground-system/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from collections import defaultdict\n\n\nclass UndergroundSystem:\n\n    def __init__(self):\n        self.traveling = dict()\n        self.mapper = defaultdict(list)\n\n    def checkIn(self, id: int, stationName: str, t: int) -> None:\n        if id in self.traveling:\n            # Duplicate check-in\n            return\n\n        self.traveling[id] = (stationName, t)\n\n\n    def checkOut(self, id: int, stationName: str, t: int) -> None:\n        if id not in self.traveling:\n            # Traveler not checked-in\n            return\n\n        in_station, in_t = self.traveling.pop(id)\n        out_station, out_t = stationName, t\n\n        self.mapper[(in_station, out_station)].append(out_t - in_t)\n\n    def getAverageTime(self, startStation: str, endStation: str) -> float:\n        if (startStation, endStation) not in self.mapper:\n            # No data\n            return\n\n        time_list = self.mapper[(startStation, endStation)]\n        return sum(time_list) / len(time_list)\n\n\n# Your UndergroundSystem object will be instantiated and called as such:\n# obj = UndergroundSystem()\n# obj.checkIn(id,stationName,t)\n# obj.checkOut(id,stationName,t)\n# param_3 = obj.getAverageTime(startStation,endStation)\n")))}m.isMDXComponent=!0}}]);