"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[497],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(n),d=o,f=p["".concat(s,".").concat(d)]||p[d]||m[d]||a;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[p]="string"==typeof e?e:o,i[1]=c;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},99350:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return i},default:function(){return p},frontMatter:function(){return a},metadata:function(){return c},toc:function(){return l}});var r=n(83117),o=(n(67294),n(3905));const a={title:"1337. The K Weakest Rows in a Matrix",sidebar_label:"1337. The K Weakest Rows in a Matrix",tags:["Leetcode Easy","Heap"]},i=void 0,c={unversionedId:"leetcode/1001-1500/k_weakest_rows_in_matrix",id:"leetcode/1001-1500/k_weakest_rows_in_matrix",title:"1337. The K Weakest Rows in a Matrix",description:"https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix/",source:"@site/docs/leetcode/1001-1500/1337_k_weakest_rows_in_matrix.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/k_weakest_rows_in_matrix",permalink:"/docs/leetcode/1001-1500/k_weakest_rows_in_matrix",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1337_k_weakest_rows_in_matrix.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Heap",permalink:"/docs/tags/heap"}],version:"current",sidebarPosition:1337,frontMatter:{title:"1337. The K Weakest Rows in a Matrix",sidebar_label:"1337. The K Weakest Rows in a Matrix",tags:["Leetcode Easy","Heap"]},sidebar:"docSidebar",previous:{title:"1335. Minimum Difficulty of a Job Schedule",permalink:"/docs/leetcode/1001-1500/min_difficulty_of_job_schedule"},next:{title:"1338. Reduce Array Size to The Half",permalink:"/docs/leetcode/1001-1500/reduce_array_size_to_the_half"}},s={},l=[{value:"Python",id:"python",level:2},{value:"Min Heap",id:"min-heap",level:3}],u={toc:l};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix/"},"https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"min-heap"},"Min Heap"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import heapq\n\n\nclass Solution:\n    def kWeakestRows(self, mat: List[List[int]], k: int) -> List[int]:\n        heap = []\n        for row in mat:\n            total = 0\n            for num in row:\n                if num == 1:\n                    total += 1\n                else:\n                    break\n            heap.append(total)\n\n        return [\n            index for index, _ in\n            heapq.nsmallest(\n                k, enumerate(heap), key=lambda item: item[1]\n            )\n        ]\n")))}p.isMDXComponent=!0}}]);