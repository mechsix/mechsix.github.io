"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[31337],{3905:(e,r,t)=>{t.d(r,{Zo:()=>s,kt:()=>m});var o=t(67294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,o,n=function(e,r){if(null==e)return{};var t,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var l=o.createContext({}),d=function(e){var r=o.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},s=function(e){var r=d(e.components);return o.createElement(l.Provider,{value:r},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},u=o.forwardRef((function(e,r){var t=e.components,n=e.mdxType,a=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=d(t),u=n,m=p["".concat(l,".").concat(u)]||p[u]||f[u]||a;return t?o.createElement(m,i(i({ref:r},s),{},{components:t})):o.createElement(m,i({ref:r},s))}));function m(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var a=t.length,i=new Array(a);i[0]=u;var c={};for(var l in r)hasOwnProperty.call(r,l)&&(c[l]=r[l]);c.originalType=e,c[p]="string"==typeof e?e:n,i[1]=c;for(var d=2;d<a;d++)i[d]=t[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},72131:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>f,frontMatter:()=>a,metadata:()=>c,toc:()=>d});var o=t(87462),n=(t(67294),t(3905));const a={title:"989. Add to Array-Form of Integer",sidebar_label:"989. Add to Array-Form of Integer",tags:["Leetcode Easy","Array"]},i=void 0,c={unversionedId:"leetcode/501-1000/add_to_array_form_of_integer",id:"leetcode/501-1000/add_to_array_form_of_integer",title:"989. Add to Array-Form of Integer",description:"https://leetcode.com/problems/add-to-array-form-of-integer/",source:"@site/docs/leetcode/501-1000/989_add_to_array_form_of_integer.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/add_to_array_form_of_integer",permalink:"/docs/leetcode/501-1000/add_to_array_form_of_integer",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/989_add_to_array_form_of_integer.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Array",permalink:"/docs/tags/array"}],version:"current",sidebarPosition:989,frontMatter:{title:"989. Add to Array-Form of Integer",sidebar_label:"989. Add to Array-Form of Integer",tags:["Leetcode Easy","Array"]},sidebar:"docSidebar",previous:{title:"987. Vertical Order Traversal of a Binary Tree",permalink:"/docs/leetcode/501-1000/vertical_order_traversal_of_a_binary_tree"},next:{title:"997. Find the Town Judge",permalink:"/docs/leetcode/501-1000/find_the_town_judge"}},l={},d=[{value:"Python",id:"python",level:2}],s={toc:d},p="wrapper";function f(e){let{components:r,...t}=e;return(0,n.kt)(p,(0,o.Z)({},s,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/add-to-array-form-of-integer/"},"https://leetcode.com/problems/add-to-array-form-of-integer/")),(0,n.kt)("h2",{id:"python"},"Python"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        pow = 0\n        while num:\n            k += num.pop() * (10**pow)\n            pow += 1\n\n        return [int(char) for char in str(k)]\n")))}f.isMDXComponent=!0}}]);