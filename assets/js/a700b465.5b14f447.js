"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[84660],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),a=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=a(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=a(n),d=o,g=u["".concat(l,".").concat(d)]||u[d]||m[d]||s;return n?r.createElement(g,i(i({ref:t},p),{},{components:n})):r.createElement(g,i({ref:t},p))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,i=new Array(s);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[u]="string"==typeof e?e:o,i[1]=c;for(var a=2;a<s;a++)i[a]=n[a];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},73619:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>a});var r=n(87462),o=(n(67294),n(3905));const s={title:"443. String Compression",sidebar_label:"443. String Compression",tags:["Leetcode Medium","Two Pointer","CTCI","Rust"]},i=void 0,c={unversionedId:"leetcode/1-500/string_compression",id:"leetcode/1-500/string_compression",title:"443. String Compression",description:"https://leetcode.com/problems/string-compression/",source:"@site/docs/leetcode/1-500/443_string_compression.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/string_compression",permalink:"/docs/leetcode/1-500/string_compression",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/443_string_compression.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Two Pointer",permalink:"/docs/tags/two-pointer"},{label:"CTCI",permalink:"/docs/tags/ctci"},{label:"Rust",permalink:"/docs/tags/rust"}],version:"current",sidebarPosition:443,frontMatter:{title:"443. String Compression",sidebar_label:"443. String Compression",tags:["Leetcode Medium","Two Pointer","CTCI","Rust"]},sidebar:"docSidebar",previous:{title:"441. Arranging Coins",permalink:"/docs/leetcode/1-500/arranging_coins"},next:{title:"445. Add Two Numbers II",permalink:"/docs/leetcode/1-500/add_two_numbers_ii"}},l={},a=[{value:"Python",id:"python",level:2},{value:"Python Itertools Groupby",id:"python-itertools-groupby",level:3},{value:"Rust",id:"rust",level:2}],p={toc:a},u="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/string-compression/"},"https://leetcode.com/problems/string-compression/")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"CTCI 1.6 String Compression")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"python-itertools-groupby"},"Python Itertools Groupby"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Ref: ",(0,o.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/string-compression/solutions/896587/python-solution-using-group-by/"},"https://leetcode.com/problems/string-compression/solutions/896587/python-solution-using-group-by/"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from itertools import groupby\n\n\nclass Solution:\n    def compress(self, chars: List[str]) -> int:\n        stack = []\n        for key, group in groupby(chars):\n            count = len(list(group))\n            stack.append(key)\n            if count > 1: stack.extend(list(str(count)))\n        chars[:] = stack\n")),(0,o.kt)("h2",{id:"rust"},"Rust"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"use std::iter::FromIterator;\n\n\nimpl Solution {\n    pub fn compress(chars: &mut Vec<char>) -> i32 {\n        let mut stack: Vec<char> = Vec::new();\n        let mut i = 0;\n\n        while i < chars.len() {\n            let mut count = 1;\n            while i + 1 < chars.len() && chars[i] == chars[i + 1] {\n                i += 1;\n                count += 1;\n            }\n\n            stack.push(chars[i]);\n\n            if count > 1 {\n                let count_chars: Vec<char> = count.to_string().chars().collect();\n                stack.extend(count_chars);\n            }\n\n            i += 1;\n        }\n\n        *chars = stack;\n        chars.len() as i32\n    }\n}\n")))}m.isMDXComponent=!0}}]);