"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[96458],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>f});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},d=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),u=s(r),m=i,f=u["".concat(c,".").concat(m)]||u[m]||p[m]||o;return r?n.createElement(f,l(l({ref:t},d),{},{components:r})):n.createElement(f,l({ref:t},d))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,l=new Array(o);l[0]=m;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a[u]="string"==typeof e?e:i,l[1]=a;for(var s=2;s<o;s++)l[s]=r[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},60240:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>s});var n=r(87462),i=(r(67294),r(3905));const o={title:"199. Binary Tree Right Side View",sidebar_label:"199. Binary Tree Right Side View",tags:["Leetcode Medium","Binary Tree"]},l=void 0,a={unversionedId:"leetcode/1-500/binary_tree_right_side_view",id:"leetcode/1-500/binary_tree_right_side_view",title:"199. Binary Tree Right Side View",description:"https://leetcode.com/problems/binary-tree-right-side-view/",source:"@site/docs/leetcode/1-500/199_binary_tree_right_side_view.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/binary_tree_right_side_view",permalink:"/docs/leetcode/1-500/binary_tree_right_side_view",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/199_binary_tree_right_side_view.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"}],version:"current",sidebarPosition:199,frontMatter:{title:"199. Binary Tree Right Side View",sidebar_label:"199. Binary Tree Right Side View",tags:["Leetcode Medium","Binary Tree"]},sidebar:"docSidebar",previous:{title:"198. House Robber",permalink:"/docs/leetcode/1-500/house_robber"},next:{title:"200. Number of Islands",permalink:"/docs/leetcode/1-500/number_of_islands"}},c={},s=[{value:"Python",id:"python",level:2}],d={toc:s},u="wrapper";function p(e){let{components:t,...r}=e;return(0,i.kt)(u,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/binary-tree-right-side-view/"},"https://leetcode.com/problems/binary-tree-right-side-view/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/leetcode/1-500/binary_tree_levelorder"},"102. Level Order"),"\u7684\u8b8a\u5f62")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:\n        return self._travel(root, 0, [])\n\n    def _travel(self, node, level, result):\n        if not node:\n            return result\n\n        if len(result) < level+1:\n            result.append(None)\n\n        result[level] = node.val\n\n        self._travel(node.left, level+1, result)\n        self._travel(node.right, level+1, result)\n\n        return result\n")))}p.isMDXComponent=!0}}]);