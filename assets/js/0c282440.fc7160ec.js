"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[849],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=i.createContext({}),s=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):d(d({},t),e)),n},l=function(e){var t=s(e.components);return i.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),p=s(n),m=r,v=p["".concat(c,".").concat(m)]||p[m]||u[m]||o;return n?i.createElement(v,d(d({ref:t},l),{},{components:n})):i.createElement(v,d({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,d=new Array(o);d[0]=p;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:r,d[1]=a;for(var s=2;s<o;s++)d[s]=n[s];return i.createElement.apply(null,d)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},51150:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return l}});var i=n(87462),r=n(63366),o=(n(67294),n(3905)),d=["components"],a={title:"29. Divide Two Integers",sidebar_label:"29. Divide Two Integers",tags:["Leetcode Medium","Bit Manipulation"]},c=void 0,s={unversionedId:"leetcode/1-500/divide_two_integers",id:"leetcode/1-500/divide_two_integers",title:"29. Divide Two Integers",description:"https://leetcode.com/problems/divide-two-integers/",source:"@site/docs/leetcode/1-500/29_divide_two_integers.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/divide_two_integers",permalink:"/docs/leetcode/1-500/divide_two_integers",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/29_divide_two_integers.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Bit Manipulation",permalink:"/docs/tags/bit-manipulation"}],version:"current",sidebarPosition:29,frontMatter:{title:"29. Divide Two Integers",sidebar_label:"29. Divide Two Integers",tags:["Leetcode Medium","Bit Manipulation"]},sidebar:"docSidebar",previous:{title:"27. Remove Element",permalink:"/docs/leetcode/1-500/remove_element"},next:{title:"31. Next Permutation",permalink:"/docs/leetcode/1-500/next_permutation"}},l=[{value:"Python",id:"python",children:[{value:"Minus divisor one-by-one (Timelimit Exceed)",id:"minus-divisor-one-by-one-timelimit-exceed",children:[],level:3}],level:2}],u={toc:l};function p(e){var t=e.components,n=(0,r.Z)(e,d);return(0,o.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/divide-two-integers/"},"https://leetcode.com/problems/divide-two-integers/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"minus-divisor-one-by-one-timelimit-exceed"},"Minus divisor one-by-one (Timelimit Exceed)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def divide(self, dividend: int, divisor: int) -> int:\n        # Edge case, 32bit INT did not have 2147483648\n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n\n        # Decide the sign of the answer\n        is_negative = False\n\n        if dividend < 0:\n            dividend = -dividend\n            is_negative = True\n\n        if divisor < 0:\n            divisor = -divisor\n            is_negative = False if is_negative else True\n\n        ans = 0\n        while dividend >= divisor:\n            ans += 1\n            dividend -= divisor\n\n        return -ans if is_negative else ans\n")))}p.isMDXComponent=!0}}]);