"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[3561],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),d=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=d(e.components);return r.createElement(l.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=d(t),f=o,m=p["".concat(l,".").concat(f)]||p[f]||s[f]||i;return t?r.createElement(m,a(a({ref:n},u),{},{components:t})):r.createElement(m,a({ref:n},u))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=p;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var d=2;d<i;d++)a[d]=t[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},16305:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return u},default:function(){return p}});var r=t(87462),o=t(63366),i=(t(67294),t(3905)),a=["components"],c={title:"382. Linked List Random Node",sidebar_label:"382. Linked List Random Node",tags:["Leetcode Medium","Linked List"]},l=void 0,d={unversionedId:"leetcode/linked_list_rand_node",id:"leetcode/linked_list_rand_node",title:"382. Linked List Random Node",description:"Python",source:"@site/docs/leetcode/382_linked_list_rand_node.md",sourceDirName:"leetcode",slug:"/leetcode/linked_list_rand_node",permalink:"/docs/leetcode/linked_list_rand_node",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/382_linked_list_rand_node.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Linked List",permalink:"/docs/tags/linked-list"}],version:"current",sidebarPosition:382,frontMatter:{title:"382. Linked List Random Node",sidebar_label:"382. Linked List Random Node",tags:["Leetcode Medium","Linked List"]},sidebar:"docSidebar",previous:{title:"359. Logger Rate Limiter",permalink:"/docs/leetcode/logger_rate_limiter"},next:{title:"404. Sum of Left Leaf",permalink:"/docs/leetcode/left_leaf_sum"}},u=[{value:"Python",id:"python",children:[],level:2}],s={toc:u};function p(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from random import randint\n\n\nclass Solution:\n\n    def __init__(self, head: Optional[ListNode]):\n        n = 0\n        cur = head\n        while cur:\n            n += 1\n            cur = cur.next\n        self.n = n\n        self.head = head\n\n    def getRandom(self) -> int:\n        step = randint(0, self.n-1)\n        cur = self.head\n        for i in range(0, step):\n            cur = cur.next\n            \n        return cur.val\n")))}p.isMDXComponent=!0}}]);