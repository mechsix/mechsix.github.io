"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[29629],{9026:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>a,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var s=n(74848),r=n(28453);const o={title:"792. Number of Matching Subsequences",sidebar_label:"792. Number of Matching Subsequences",tags:["Leetcode Medium","Trie","BFS"]},i=void 0,c={id:"leetcode/501-1000/number_of_matching_subsequences",title:"792. Number of Matching Subsequences",description:"https://leetcode.com/problems/number-of-matching-subsequences/",source:"@site/docs/leetcode/501-1000/792_number_of_matching_subsequences.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/number_of_matching_subsequences",permalink:"/docs/leetcode/501-1000/number_of_matching_subsequences",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Trie",permalink:"/docs/tags/trie"},{label:"BFS",permalink:"/docs/tags/bfs"}],version:"current",sidebarPosition:792,frontMatter:{title:"792. Number of Matching Subsequences",sidebar_label:"792. Number of Matching Subsequences",tags:["Leetcode Medium","Trie","BFS"]},sidebar:"docSidebar",previous:{title:"787. Cheapest Flights Within K Stops",permalink:"/docs/leetcode/501-1000/cheapest_flights_within_k_stops"},next:{title:"763. Partition Labels",permalink:"/docs/leetcode/501-1000/all_paths_from_source_to_target"}},u={},d=[{value:"Python",id:"python",level:2},{value:"Trie with BFS",id:"trie-with-bfs",level:3}];function l(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://leetcode.com/problems/number-of-matching-subsequences/",children:"https://leetcode.com/problems/number-of-matching-subsequences/"})}),"\n",(0,s.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,s.jsx)(t.h3,{id:"trie-with-bfs",children:"Trie with BFS"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"class Solution:\n    def numMatchingSubseq(self, s: str, words: List[str]) -> int:\n        trie = dict()\n        for word_id in range(len(words)):\n            word = words[word_id]\n            cur = trie\n            for letter in word:\n                cur = cur.setdefault(letter, {})\n            if '#' not in cur:\n                cur['#'] = set()\n            cur[\"#\"].add(word_id) # Use index as word id, since the words might have duplicate item\n        \n        hits = set()\n        queue = [(trie, 0)]\n        \n        # BFS search from the subsequence of 's'\n        while queue:\n            node, i = queue.pop()\n            for letter in node:\n                if letter == '#':\n                    hits |= node['#']\n                else:\n                    for j in range(i, len(s)):\n                        if s[j] == letter:\n                            queue.append((node[letter], j+1))\n                            break\n        return len(hits)\n"})})]})}function a(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>c});var s=n(96540);const r={},o=s.createContext(r);function i(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);