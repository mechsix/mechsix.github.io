"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[16],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=d(n),m=o,f=u["".concat(l,".").concat(m)]||u[m]||p[m]||i;return n?r.createElement(f,a(a({ref:t},s),{},{components:n})):r.createElement(f,a({ref:t},s))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var d=2;d<i;d++)a[d]=n[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},37126:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return c},metadata:function(){return d},toc:function(){return s}});var r=n(87462),o=n(63366),i=(n(67294),n(3905)),a=["components"],c={title:"1457. Pseudo-Palindromic Paths in a Binary Tree",sidebar_label:"1457. Pseudo-Palindromic Paths in a Binary Tree",tags:["Leetcode Medium","Binary Tree","DFS"]},l=void 0,d={unversionedId:"leetcode/1001-1500/pseudo_palindromic_paths_in_a_binary_tree",id:"leetcode/1001-1500/pseudo_palindromic_paths_in_a_binary_tree",title:"1457. Pseudo-Palindromic Paths in a Binary Tree",description:"https://leetcode.com/problems/pseudo-palindromic-paths-in-a-binary-tree/",source:"@site/docs/leetcode/1001-1500/1457_pseudo_palindromic_paths_in_a_binary_tree.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/pseudo_palindromic_paths_in_a_binary_tree",permalink:"/docs/leetcode/1001-1500/pseudo_palindromic_paths_in_a_binary_tree",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1457_pseudo_palindromic_paths_in_a_binary_tree.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"},{label:"DFS",permalink:"/docs/tags/dfs"}],version:"current",sidebarPosition:1457,frontMatter:{title:"1457. Pseudo-Palindromic Paths in a Binary Tree",sidebar_label:"1457. Pseudo-Palindromic Paths in a Binary Tree",tags:["Leetcode Medium","Binary Tree","DFS"]},sidebar:"docSidebar",previous:{title:"1448. Count Good Nodes in Binary Tree",permalink:"/docs/leetcode/1001-1500/count_good_nodes_in_binary_tree"},next:{title:"1461. Check If a String Contains All Binary Codes of Size K",permalink:"/docs/leetcode/1001-1500/check_a_string_contains_all_bin_codes_of_size_k"}},s=[{value:"Python",id:"python",children:[{value:"DFS",id:"dfs",children:[],level:3}],level:2}],p={toc:s};function u(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/pseudo-palindromic-paths-in-a-binary-tree/"},"https://leetcode.com/problems/pseudo-palindromic-paths-in-a-binary-tree/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"dfs"},"DFS"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def pseudoPalindromicPaths (self, root: Optional[TreeNode]) -> int:\n        def dfs(node, path_origin: set):\n            if not node:\n                return 0\n            \n            path = path_origin.copy()\n            if node.val in path:\n                path.remove(node.val)\n            else:\n                path.add(node.val)\n\n            if not node.left and not node.right:\n                # Current node is leave, check the path\n                return 1 if len(path) <= 1 else 0\n            \n            return dfs(node.left, path) + dfs(node.right, path)\n        \n        return dfs(root, set())\n")))}u.isMDXComponent=!0}}]);