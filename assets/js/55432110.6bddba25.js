"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[62902],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},s="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),s=u(n),f=o,m=s["".concat(c,".").concat(f)]||s[f]||p[f]||l;return n?r.createElement(m,a(a({ref:t},d),{},{components:n})):r.createElement(m,a({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,a=new Array(l);a[0]=f;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[s]="string"==typeof e?e:o,a[1]=i;for(var u=2;u<l;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},93393:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return a},default:function(){return s},frontMatter:function(){return l},metadata:function(){return i},toc:function(){return u}});var r=n(83117),o=(n(67294),n(3905));const l={title:"36. Valid Sudoku",sidebar_label:"36. Valid Sudoku",tags:["Leetcode Medium","Matrix"]},a=void 0,i={unversionedId:"leetcode/1-500/valid_sudoku",id:"leetcode/1-500/valid_sudoku",title:"36. Valid Sudoku",description:"https://leetcode.com/problems/valid-sudoku",source:"@site/docs/leetcode/1-500/36_valid_sudoku.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/valid_sudoku",permalink:"/docs/leetcode/1-500/valid_sudoku",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/36_valid_sudoku.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Matrix",permalink:"/docs/tags/matrix"}],version:"current",sidebarPosition:36,frontMatter:{title:"36. Valid Sudoku",sidebar_label:"36. Valid Sudoku",tags:["Leetcode Medium","Matrix"]},sidebar:"docSidebar",previous:{title:"35. Search Insert Position",permalink:"/docs/leetcode/1-500/search_insert_pos"},next:{title:"39. Combination Sum",permalink:"/docs/leetcode/1-500/combinations_sum"}},c={},u=[{value:"Python",id:"python",level:2}],d={toc:u};function s(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/valid-sudoku"},"https://leetcode.com/problems/valid-sudoku")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from collections import defaultdict\n\n\nclass Solution:\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\n        col_table = defaultdict(set)\n        row_table = defaultdict(set)\n        cell_table = defaultdict(set)\n\n        for row, row_values in enumerate(board):\n            for col, value in enumerate(row_values):\n                if value == '.':\n                    continue\n\n                cell_key = \"{}{}\".format(\n                    row//3,\n                    col//3\n                )\n\n                if value in col_table[col] or \\\n                   value in row_table[row] or \\\n                   value in cell_table[cell_key]:\n                    return False\n\n                col_table[col].add(value)\n                row_table[row].add(value)\n                cell_table[cell_key].add(value)\n\n        return True\n")))}s.isMDXComponent=!0}}]);