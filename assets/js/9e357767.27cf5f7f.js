"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[41990],{61341:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>d,toc:()=>c});var r=t(74848),o=t(28453);const a={title:"1857. Largest Color Value in a Directed Graph",sidebar_label:"1857. Largest Color Value in a Directed Graph",tags:["Leetcode Hard","DP","Graph","BFS"]},i=void 0,d={id:"leetcode/1501-2000/largest_color_value_in_a_directed_graph",title:"1857. Largest Color Value in a Directed Graph",description:"Python",source:"@site/docs/leetcode/1501-2000/1857_largest_color_value_in_a_directed_graph.md",sourceDirName:"leetcode/1501-2000",slug:"/leetcode/1501-2000/largest_color_value_in_a_directed_graph",permalink:"/docs/leetcode/1501-2000/largest_color_value_in_a_directed_graph",draft:!1,unlisted:!1,tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"DP",permalink:"/docs/tags/dp"},{label:"Graph",permalink:"/docs/tags/graph"},{label:"BFS",permalink:"/docs/tags/bfs"}],version:"current",sidebarPosition:1857,frontMatter:{title:"1857. Largest Color Value in a Directed Graph",sidebar_label:"1857. Largest Color Value in a Directed Graph",tags:["Leetcode Hard","DP","Graph","BFS"]},sidebar:"docSidebar",previous:{title:"1832. Check if the Sentence Is Pangram",permalink:"/docs/leetcode/1501-2000/check_if_the_sentence_is_pangram"},next:{title:"1870. Minimum Speed to Arrive on Time",permalink:"/docs/leetcode/1501-2000/min_speed_to_arrive_on_time"}},s={},c=[{value:"Python",id:"python",level:2},{value:"BFS Travel and Bottom-Up DP",id:"bfs-travel-and-bottom-up-dp",level:3}];function l(e){const n={code:"code",h2:"h2",h3:"h3",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,r.jsx)(n.h3,{id:"bfs-travel-and-bottom-up-dp",children:"BFS Travel and Bottom-Up DP"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from collections import defaultdict\n\n\nclass Solution:\n    def largestPathValue(self, colors: str, edges: List[List[int]]) -> int:\n        graph = defaultdict(set)\n        indegrees = [0] * len(colors)\n\n        for src, dst in edges:\n            graph[src].add(dst)\n            indegrees[dst] += 1\n\n        # DP Table: row as the current count of a color (alphabet); rol as the zero indegree count\n        dp = [[0]*26 for _ in range(len(colors))]\n        for i, color in enumerate(colors):\n            dp[i][ord(color)-ord('a')] += 1\n\n        queue = [i for i, indegree in enumerate(indegrees) if indegree == 0]\n        max_count, visited = 0, 0\n\n        # BFS Travel the Graph\n        while queue:\n            cand = queue.pop()\n            visited += 1\n\n            for dst in graph[cand]:\n                for i in range(26):\n                    dst_count = 1 if ord(colors[dst]) - ord('a') == i else 0\n                    dp[dst][i] = max(\n                        dp[dst][i],\n                        dp[cand][i] + dst_count\n                    )\n                indegrees[dst] -= 1\n\n                if indegrees[dst] == 0:\n                    queue.append(dst)\n\n            max_count = max(max_count, max(dp[cand]))\n\n        return max_count if visited == len(colors) else -1\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>d});var r=t(96540);const o={},a=r.createContext(o);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);