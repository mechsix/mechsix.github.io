"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[18586],{19947:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"leetcode/1-500/max_square","title":"221. Maximal Square","description":"https://leetcode.com/problems/maximal-square/","source":"@site/docs/leetcode/1-500/221_max_square.md","sourceDirName":"leetcode/1-500","slug":"/leetcode/1-500/max_square","permalink":"/docs/leetcode/1-500/max_square","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"DP","permalink":"/docs/tags/dp"}],"version":"current","sidebarPosition":221,"frontMatter":{"title":"221. Maximal Square","sidebar_label":"221. Maximal Square","tags":["DP"]},"sidebar":"docSidebar","previous":{"title":"219. Contains Duplicate II","permalink":"/docs/leetcode/1-500/contains_duplicate_ii"},"next":{"title":"222. Count Complete Tree Nodes","permalink":"/docs/leetcode/1-500/count_complete_bin_tree"}}');var r=t(74848),a=t(28453);const i={title:"221. Maximal Square",sidebar_label:"221. Maximal Square",tags:["DP"]},s=void 0,l={},c=[{value:"Python",id:"python",level:2},{value:"Bottom Up DP",id:"bottom-up-dp",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/maximal-square/",children:"https://leetcode.com/problems/maximal-square/"})}),"\n",(0,r.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,r.jsx)(n.h3,{id:"bottom-up-dp",children:"Bottom Up DP"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Time: O(M*N)"}),"\n",(0,r.jsx)(n.li,{children:"Space: O(M*N)"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Solution:\n    def maximalSquare(self, matrix: List[List[str]]) -> int:\n        m, n = len(matrix), len(matrix[0])\n\n        dp = [[0]*(n+1) for _ in range(m+1)]\n        ans = 0\n\n        for row in range(1, m+1):\n            for col in range(1, n+1):\n                if matrix[row-1][col-1] != "1":\n                    continue\n\n                dp[row][col] = 1 + min([\n                    dp[row-1][col], dp[row][col-1], dp[row-1][col-1]\n                ])\n\n                ans = max(ans, dp[row][col])\n\n        return ans**2\n'})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var o=t(96540);const r={},a=o.createContext(r);function i(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);