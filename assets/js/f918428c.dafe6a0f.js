"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[7418],{3905:function(e,r,t){t.d(r,{Zo:function(){return u},kt:function(){return f}});var o=t(67294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,o,n=function(e,r){if(null==e)return{};var t,o,n={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var c=o.createContext({}),s=function(e){var r=o.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},u=function(e){var r=s(e.components);return o.createElement(c.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},p=o.forwardRef((function(e,r){var t=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(t),f=n,m=p["".concat(c,".").concat(f)]||p[f]||d[f]||i;return t?o.createElement(m,a(a({ref:r},u),{},{components:t})):o.createElement(m,a({ref:r},u))}));function f(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var i=t.length,a=new Array(i);a[0]=p;var l={};for(var c in r)hasOwnProperty.call(r,c)&&(l[c]=r[c]);l.originalType=e,l.mdxType="string"==typeof e?e:n,a[1]=l;for(var s=2;s<i;s++)a[s]=t[s];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},21060:function(e,r,t){t.r(r),t.d(r,{contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var o=t(87462),n=t(63366),i=(t(67294),t(3905)),a=["components"],l={title:"617. Merge Two Binary Trees",sidebar_label:"617. Merge Two Binary Trees",tags:["Leetcode Easy","Binary Tree"]},c=void 0,s={unversionedId:"leetcode/501-1000/merge_two_binary_trees",id:"leetcode/501-1000/merge_two_binary_trees",title:"617. Merge Two Binary Trees",description:"https://leetcode.com/problems/merge-two-binary-trees/",source:"@site/docs/leetcode/501-1000/617_merge_two_binary_trees.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/merge_two_binary_trees",permalink:"/docs/leetcode/501-1000/merge_two_binary_trees",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/617_merge_two_binary_trees.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"}],version:"current",sidebarPosition:617,frontMatter:{title:"617. Merge Two Binary Trees",sidebar_label:"617. Merge Two Binary Trees",tags:["Leetcode Easy","Binary Tree"]},sidebar:"docSidebar",previous:{title:"605. Can Place Flowers",permalink:"/docs/leetcode/501-1000/place_flowers"},next:{title:"630. Course Schedule III",permalink:"/docs/leetcode/501-1000/course_schedule_iii"}},u=[{value:"Python",id:"python",children:[],level:2},{value:"Go",id:"go",children:[],level:2}],d={toc:u};function p(e){var r=e.components,t=(0,n.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},d,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/merge-two-binary-trees/"},"https://leetcode.com/problems/merge-two-binary-trees/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:\n        if not root1 or not root2:\n            return root1 if root1 else root2\n\n        node = TreeNode(val=root1.val+root2.val)\n        node.left = self.mergeTrees(root1.left, root2.left)\n        node.right = self.mergeTrees(root1.right, root2.right)\n\n        return node\n")),(0,i.kt)("h2",{id:"go"},"Go"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"func mergeTrees(root1 *TreeNode, root2 *TreeNode) *TreeNode {\n    if root1 == nil || root2 == nil {\n        if root1 != nil {\n            return root1\n        } else {\n            return root2\n        }\n    }\n\n    node := new(TreeNode)\n    node.Val = root1.Val + root2.Val\n    node.Left = mergeTrees(root1.Left, root2.Left)\n    node.Right = mergeTrees(root1.Right, root2.Right)\n\n    return node\n}\n")))}p.isMDXComponent=!0}}]);