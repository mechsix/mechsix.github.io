"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[59234],{7116:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>m});var r=t(74848),o=t(28453);const s={title:"1373. Maximum Sum BST in Binary Tree",sidebar_label:"1373. Maximum Sum BST in Binary Tree",tags:["Leetcode Hard","BST","Binary Tree"]},a=void 0,i={id:"leetcode/1001-1500/max_sum_bst_of_bt",title:"1373. Maximum Sum BST in Binary Tree",description:"Python",source:"@site/docs/leetcode/1001-1500/1373_max_sum_bst_of_bt.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/max_sum_bst_of_bt",permalink:"/docs/leetcode/1001-1500/max_sum_bst_of_bt",draft:!1,unlisted:!1,tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"BST",permalink:"/docs/tags/bst"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"}],version:"current",sidebarPosition:1373,frontMatter:{title:"1373. Maximum Sum BST in Binary Tree",sidebar_label:"1373. Maximum Sum BST in Binary Tree",tags:["Leetcode Hard","BST","Binary Tree"]},sidebar:"docSidebar",previous:{title:"1372. Longest ZigZag Path in a Binary Tree",permalink:"/docs/leetcode/1001-1500/longest_zigzag_path_in_binary_tree"},next:{title:"1379. Find a Corresponding Node of a Binary Tree in a Clone of That Tree",permalink:"/docs/leetcode/1001-1500/find_corresponding_node_of_binary_tree_in_cloned"}},l={},m=[{value:"Python",id:"python",level:2}];function _(e){const n={code:"code",h2:"h2",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Solution:\n    MIN_VAL = -4 * (10**4)\n    MAX_VAL = 4 * (10**4)\n\n    def __init__(self):\n        self.max_sum = 0\n\n    def maxSumBST(self, root: Optional[TreeNode]) -> int:\n        self.max_sum = 0\n        self._travel(root)\n        \n        return self.max_sum\n    \n    def _travel(self, node):\n        """\n        node: TreeNode root to check\n        return:\n            tuple(Bool, Number, Number, Number)\n            is_bst, tree_min, tree_max, tree_sum\n        """\n        if not node:\n            return True, self.MAX_VAL, self.MIN_VAL, 0\n        \n        is_left_bst,  left_min,  left_max,  left_sum  = self._travel(node.left)\n        is_right_bst, right_min, right_max, right_sum = self._travel(node.right)\n\n        # Postorder\n        if   is_left_bst and is_right_bst \\\n         and node.val > left_max \\\n         and node.val < right_min:            \n            # node as root is a BST\n            tree_sum = node.val + left_sum + right_sum\n            result = (\n                True,\n                min(left_min, node.val),\n                max(right_max, node.val),\n                tree_sum\n            )\n\n            # Update global val to keep the max sum\n            self.max_sum = max(self.max_sum, tree_sum)\n\n            return result\n\n        # node as root is not a BST\n        return False, None, None, 0\n'})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(_,{...e})}):_(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var r=t(96540);const o={},s=r.createContext(o);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);