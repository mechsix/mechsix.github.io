"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[40059],{99933:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>f,frontMatter:()=>l,metadata:()=>c,toc:()=>a});var r=t(74848),o=t(28453);const l={title:"605. Can Place Flowers",sidebar_label:"605. Can Place Flowers",tags:["Leetcode Easy"]},s=void 0,c={id:"leetcode/501-1000/place_flowers",title:"605. Can Place Flowers",description:"https://leetcode.com/problems/can-place-flowers/",source:"@site/docs/leetcode/501-1000/605_place_flowers.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/place_flowers",permalink:"/docs/leetcode/501-1000/place_flowers",draft:!1,unlisted:!1,tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"}],version:"current",sidebarPosition:605,frontMatter:{title:"605. Can Place Flowers",sidebar_label:"605. Can Place Flowers",tags:["Leetcode Easy"]},sidebar:"docSidebar",previous:{title:"595. Big Countries",permalink:"/docs/leetcode/501-1000/big_countries"},next:{title:"606. Construct String from Binary Tree",permalink:"/docs/leetcode/501-1000/construct_string_from_binary_tree"}},i={},a=[{value:"Python",id:"python",level:2},{value:"First try",id:"first-try",level:3},{value:"Second Try",id:"second-try",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/can-place-flowers/",children:"https://leetcode.com/problems/can-place-flowers/"})}),"\n",(0,r.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,r.jsx)(n.h3,{id:"first-try",children:"First try"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:\n        if not n:\n            return True\n\n        flowerbed = [0] + flowerbed + [0]\n\n        i = 1\n        while i < len(flowerbed)-1:\n            if flowerbed[i] == 1:\n                i += 1\n                continue\n\n            if flowerbed[i-1] == 0 and flowerbed[i+1] == 0:\n                n -= 1\n                flowerbed[i] = 1\n                if n == 0:\n                    return True\n            i += 1\n\n        return False\n"})}),"\n",(0,r.jsx)(n.h3,{id:"second-try",children:"Second Try"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:\n        if not n:\n            return True\n\n        flowerbed = [0] + flowerbed + [0]\n\n        for i in range(1, len(flowerbed)-1):\n            if flowerbed[i] == 1:\n                continue\n\n            if flowerbed[i-1] == 0 and flowerbed[i+1] == 0:\n                n -= 1\n                flowerbed[i] = 1\n\n            if n == 0:\n                return True\n\n        return False\n"})})]})}function f(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var r=t(96540);const o={},l=r.createContext(o);function s(e){const n=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);