"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[15440],{79594:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>a});var t=r(74848),i=r(28453);const o={title:"208. Implement Trie (Prefix Tree)",sidebar_label:"208. Implement Trie (Prefix Tree)",tags:["Leetcode Medium","Trie"]},c=void 0,s={id:"leetcode/1-500/trie_tree",title:"208. Implement Trie (Prefix Tree)",description:"https://leetcode.com/problems/implement-trie-prefix-tree/",source:"@site/docs/leetcode/1-500/208_trie_tree.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/trie_tree",permalink:"/docs/leetcode/1-500/trie_tree",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Trie",permalink:"/docs/tags/trie"}],version:"current",sidebarPosition:208,frontMatter:{title:"208. Implement Trie (Prefix Tree)",sidebar_label:"208. Implement Trie (Prefix Tree)",tags:["Leetcode Medium","Trie"]},sidebar:"docSidebar",previous:{title:"207. Course Schedule",permalink:"/docs/leetcode/1-500/course_schedule"},next:{title:"209. Minimum Size Subarray Sum",permalink:"/docs/leetcode/1-500/min_size_subarray_sum"}},d={},a=[{value:"Python",id:"python",level:2},{value:"With custom TrieNode class",id:"with-custom-trienode-class",level:3},{value:"Native Dict with custom EOS (End-of-string) sign",id:"native-dict-with-custom-eos-end-of-string-sign",level:3},{value:"Javascript",id:"javascript",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/implement-trie-prefix-tree/",children:"https://leetcode.com/problems/implement-trie-prefix-tree/"})}),"\n",(0,t.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,t.jsx)(n.h3,{id:"with-custom-trienode-class",children:"With custom TrieNode class"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word: str) -> None:\n        cur = self.root\n        for char in word:\n            if char not in cur.children:\n                cur.children[char] = TrieNode()\n            cur = cur.children[char]\n        cur.is_end = True\n\n    def search(self, word: str) -> bool:\n        cur = self.root\n        for char in word:\n            if char not in cur.children:\n                return False\n            cur = cur.children[char]\n        return cur.is_end\n\n    def startsWith(self, prefix: str) -> bool:\n        cur = self.root\n        for char in prefix:\n            if char not in cur.children:\n                return False\n            cur = cur.children[char]\n        return True\n"})}),"\n",(0,t.jsx)(n.h3,{id:"native-dict-with-custom-eos-end-of-string-sign",children:"Native Dict with custom EOS (End-of-string) sign"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class Trie(object):\n    EOS = '-'\n    def __init__(self):\n        self.root = {}\n\n    def insert(self, word):\n        cur = self.root\n        for char in word:\n            if char not in cur:\n                cur[char] = {}\n            cur = cur[char]\n        cur[self.EOS] = True\n\n    def search(self, word):\n        cur = self.root\n        for char in word:\n            if char not in cur:\n                return False\n            cur = cur[char]\n        return self.EOS in cur\n\n    def startsWith(self, prefix):\n        cur = self.root\n        for char in prefix:\n            if char not in cur:\n                return False\n            cur = cur[char]\n        return True\n"})}),"\n",(0,t.jsx)(n.h2,{id:"javascript",children:"Javascript"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"var Trie = function () {\n\tthis.root = {};\n};\n\n/**\n * @param {string} word\n * @return {void}\n */\nTrie.prototype.insert = function (word) {\n\tlet node = this.root;\n\n\tfor (const char of word) {\n\t\tif (!node[char]) {\n\t\t\tnode[char] = {};\n\t\t}\n\t\tnode = node[char];\n\t}\n\tnode.isWord = true;\n};\n\n/**\n * @param {string} word\n * @return {boolean}\n */\nTrie.prototype.search = function (word) {\n\tlet node = this.root;\n\n\tfor (const char of word) {\n    if (!node[char]) return false\n\t\tnode = node[char];\n\t}\n\n\treturn node.isWord ?? false;\n};\n\n/**\n * @param {string} prefix\n * @return {boolean}\n */\nTrie.prototype.startsWith = function (prefix) {\n\tlet node = this.root;\n\n\tfor (const char of prefix) {\n    if (!node[char]) return false\n\t\tnode = node[char];\n\t}\n\n\treturn true;\n};\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>s});var t=r(96540);const i={},o=t.createContext(i);function c(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);