"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[9226],{27887:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var i=n(74848),o=n(28453);const s={title:"148. Sort List",sidebar_label:"148. Sort List",tags:["Leetcode Medium","Linked List","Rust"]},l=void 0,r={id:"leetcode/1-500/sort_list",title:"148. Sort List",description:"https://leetcode.com/problems/sort-list/",source:"@site/docs/leetcode/1-500/148_sort_list.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/sort_list",permalink:"/docs/leetcode/1-500/sort_list",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Linked List",permalink:"/docs/tags/linked-list"},{label:"Rust",permalink:"/docs/tags/rust"}],version:"current",sidebarPosition:148,frontMatter:{title:"148. Sort List",sidebar_label:"148. Sort List",tags:["Leetcode Medium","Linked List","Rust"]},sidebar:"docSidebar",previous:{title:"147. Insertion Sort List",permalink:"/docs/leetcode/1-500/insertion_sort_list"},next:{title:"149. Max Points on a Line",permalink:"/docs/leetcode/1-500/max_points_on_a_line"}},d={},c=[{value:"Python",id:"python",level:2},{value:"Convert to Array than build Linked List back",id:"convert-to-array-than-build-linked-list-back",level:3},{value:"Rust",id:"rust",level:3},{value:"Convert to Array than build Linked List back",id:"convert-to-array-than-build-linked-list-back-1",level:3}];function a(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://leetcode.com/problems/sort-list/",children:"https://leetcode.com/problems/sort-list/"})}),"\n",(0,i.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,i.jsx)(t.h3,{id:"convert-to-array-than-build-linked-list-back",children:"Convert to Array than build Linked List back"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Time: O(N)"}),"\n",(0,i.jsx)(t.li,{children:"Space: O(N)"}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"class Solution:\n    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        elements = []\n\n        cur = head\n        while cur:\n            elements.append(cur.val)\n            cur = cur.next\n        elements.sort(reverse=True)\n\n        new_head = ListNode()\n        cur = new_head\n        while elements:\n            elm = elements.pop()\n            cur.next = ListNode(val=elm)\n            cur = cur.next\n\n        return new_head.next\n"})}),"\n",(0,i.jsx)(t.h3,{id:"rust",children:"Rust"}),"\n",(0,i.jsx)(t.h3,{id:"convert-to-array-than-build-linked-list-back-1",children:"Convert to Array than build Linked List back"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-rust",children:"impl Solution {\n    pub fn sort_list(mut head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n        let mut vec: Vec<i32> = vec![];\n        while let Some(mut node) = head {\n            vec.push(node.val);\n            head = node.next;\n        }\n        vec.sort();\n        let mut next = None;\n        while let Some(val) = vec.pop() {\n            next = Some(Box::new(ListNode{next, val}))\n        }\n        next\n    }\n}\n"})})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>r});var i=n(96540);const o={},s=i.createContext(o);function l(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);