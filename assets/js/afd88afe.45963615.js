"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[43761],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return f}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(t),m=o,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return t?r.createElement(f,a(a({ref:n},p),{},{components:t})):r.createElement(f,a({ref:n},p))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},65360:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return a},default:function(){return u},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return c}});var r=t(83117),o=(t(67294),t(3905));const i={title:"149. Max Points on a Line",sidebar_label:"149. Max Points on a Line",tags:["Leetcode Hard","Hash"]},a=void 0,s={unversionedId:"leetcode/1-500/max_points_on_a_line",id:"leetcode/1-500/max_points_on_a_line",title:"149. Max Points on a Line",description:"https://leetcode.com/problems/max-points-on-a-line/description/",source:"@site/docs/leetcode/1-500/149_max_points_on_a_line.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/max_points_on_a_line",permalink:"/docs/leetcode/1-500/max_points_on_a_line",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/149_max_points_on_a_line.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"Hash",permalink:"/docs/tags/hash"}],version:"current",sidebarPosition:149,frontMatter:{title:"149. Max Points on a Line",sidebar_label:"149. Max Points on a Line",tags:["Leetcode Hard","Hash"]},sidebar:"docSidebar",previous:{title:"148. Sort List",permalink:"/docs/leetcode/1-500/sort_list"},next:{title:"151. Reverse Words in a String",permalink:"/docs/leetcode/1-500/reverse_words_in_string"}},l={},c=[{value:"Python",id:"python",level:2},{value:"Slopes as Hash Key",id:"slopes-as-hash-key",level:3}],p={toc:c};function u(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/max-points-on-a-line/description/"},"https://leetcode.com/problems/max-points-on-a-line/description/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"slopes-as-hash-key"},"Slopes as Hash Key"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Time: O(NlogN)"),(0,o.kt)("li",{parentName:"ul"},"Space: O(N)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from collections import defaultdict\n\n\nclass Solution:\n    def maxPoints(self, points: List[List[int]]) -> int:\n        if len(points) < 2:\n            return 1\n\n        ans = 0\n        for i in range(len(points)-1):\n            mapper = defaultdict(int)\n            for j in range(i+1, len(points)):\n                point1 = points[i]\n                point2 = points[j]\n\n                # Case of vertical line\n                if point1[0] == point2[0]:\n                    mapper["v"] += 1\n                    continue\n\n                # Case of others\n                slope = (point1[1]-point2[1]) / (point1[0]-point2[0])\n                mapper[slope] += 1\n\n            # print("From", points[i], ", the points with same slope", mapper)\n\n            ans = max(ans, max(mapper.values())+1 )\n        return ans\n')))}u.isMDXComponent=!0}}]);