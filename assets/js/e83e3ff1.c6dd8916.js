"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[21752],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=d(n),f=o,m=u["".concat(s,".").concat(f)]||u[f]||p[f]||l;return n?r.createElement(m,a(a({ref:t},c),{},{components:n})):r.createElement(m,a({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,a=new Array(l);a[0]=f;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:o,a[1]=i;for(var d=2;d<l;d++)a[d]=n[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},12989:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>d});var r=n(87462),o=(n(67294),n(3905));const l={title:"98. Validate Binary Search Tree",sidebar_label:"98. Validate Binary Search Tree",tags:["Leetcode Medium","BST","Rust"]},a=void 0,i={unversionedId:"leetcode/1-500/bst_validation",id:"leetcode/1-500/bst_validation",title:"98. Validate Binary Search Tree",description:"https://leetcode.com/problems/validate-binary-search-tree",source:"@site/docs/leetcode/1-500/98_bst_validation.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/bst_validation",permalink:"/docs/leetcode/1-500/bst_validation",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/98_bst_validation.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"BST",permalink:"/docs/tags/bst"},{label:"Rust",permalink:"/docs/tags/rust"}],version:"current",sidebarPosition:98,frontMatter:{title:"98. Validate Binary Search Tree",sidebar_label:"98. Validate Binary Search Tree",tags:["Leetcode Medium","BST","Rust"]},sidebar:"docSidebar",previous:{title:"97. Interleaving String",permalink:"/docs/leetcode/1-500/interleaving_string"},next:{title:"99. Recover Binary Search Tree",permalink:"/docs/leetcode/1-500/recover_bst"}},s={},d=[{value:"Python",id:"python",level:2},{value:"First Solution",id:"first-solution",level:3},{value:"Second Solution",id:"second-solution",level:3},{value:"Rust",id:"rust",level:2},{value:"DFS",id:"dfs",level:3}],c={toc:d},u="wrapper";function p(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/validate-binary-search-tree"},"https://leetcode.com/problems/validate-binary-search-tree")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"first-solution"},"First Solution"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def isValidBST(self, root: Optional[TreeNode]) -> bool:\n        return self._is_valid(root, None, None)\n\n    def _is_valid(self, node, min_val, max_val):\n        if not node:\n            return True\n\n        if (min_val is not None and node.val <= min_val) \\\n        or (max_val is not None and node.val >= max_val):\n            return False\n")),(0,o.kt)("h3",{id:"second-solution"},"Second Solution"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from math import inf\n\n\nclass Solution:\n    def isValidBST(self, root: Optional[TreeNode]) -> bool:\n\n        def dfs(node, left, right):\n            if not node:\n                return True\n\n            if node.val <= left or node.val >= right:\n                return False\n\n            return dfs(node.left, left, node.val) and dfs(node.right, node.val, right)\n\n        return dfs(root, -inf, inf)\n")),(0,o.kt)("h2",{id:"rust"},"Rust"),(0,o.kt)("h3",{id:"dfs"},"DFS"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"use std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn is_valid_bst(root: Option<Rc<RefCell<TreeNode>>>) -> bool {\n        Self::dfs(&root, i64::MIN, i64::MAX)\n    }\n\n    fn dfs(node: &Option<Rc<RefCell<TreeNode>>>, low:i64, high:i64) -> bool{\n        match node{\n            None => true,\n            Some(n) =>{\n                let v = n.borrow().val as i64;\n                if v <= low || v >= high{\n                    false\n                } else {\n                    Self::dfs(&n.borrow().left, low, v) &&\n                    Self::dfs(&n.borrow().right, v, high)\n                }\n            }\n        }\n    }\n}\n")))}p.isMDXComponent=!0}}]);