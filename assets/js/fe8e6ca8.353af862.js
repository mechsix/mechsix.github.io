"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[65663],{59932:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>i});var s=t(74848),r=t(28453);const o={title:"20. Valid Parentheses",sidebar_label:"20. Valid Parentheses",tags:["Leetcode Easy","Rust"]},a=void 0,l={id:"leetcode/1-500/valid_parentheses",title:"20. Valid Parentheses",description:"https://leetcode.com/problems/valid-parentheses",source:"@site/docs/leetcode/1-500/20_valid_parentheses.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/valid_parentheses",permalink:"/docs/leetcode/1-500/valid_parentheses",draft:!1,unlisted:!1,tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Rust",permalink:"/docs/tags/rust"}],version:"current",sidebarPosition:20,frontMatter:{title:"20. Valid Parentheses",sidebar_label:"20. Valid Parentheses",tags:["Leetcode Easy","Rust"]},sidebar:"docSidebar",previous:{title:"19. Remove Nth Node From End of List",permalink:"/docs/leetcode/1-500/remove_nth_from_eof_linked_list"},next:{title:"21. Merge Two Sorted Lists",permalink:"/docs/leetcode/1-500/merge_sorted_list"}},c={},i=[{value:"Python",id:"python",level:2},{value:"Rust",id:"rust",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/valid-parentheses",children:"https://leetcode.com/problems/valid-parentheses"})}),"\n",(0,s.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,s.jsx)(n.p,{children:"N = len(s)\nO(logN)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class Solution:\n    def isValid(self, s: str) -> bool:\n        if len(s) % 2 != 0:\n            return False\n\n        brackets = {\n            ")": "(",\n            "]": "[",\n            "}": "{",\n        }\n        lefts = brackets.values()\n        rights = brackets.keys()\n\n\n        stack = []\n\n        for char in s:\n            if char in lefts:\n                stack.append(char)\n                continue\n\n            if char in rights:\n                if not stack:\n                    return False\n\n                if brackets[char] == stack[-1]:\n                    stack.pop()\n                    continue\n                return False\n\n            # Corner case, should never happen\n            return False\n\n        return not bool(stack)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"rust",children:"Rust"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"use std::collections::HashMap;\n\n\nimpl Solution {\n    pub fn is_valid(s: String) -> bool {\n        let brackets: HashMap<char, char> = [('(', ')'), ('[', ']'), ('{', '}')].into_iter().cloned().collect();\n\n        let mut stack = Vec::new();\n\n        for letter in s.chars() {\n            match brackets.get(&letter) {\n                Some(opposite) => {\n                    stack.push(*opposite)\n                },\n                None => {\n                    if stack.pop() != Some(letter) {\n                        return false\n                    }\n                }\n            }\n        }\n        stack.is_empty()\n    }\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var s=t(96540);const r={},o=s.createContext(r);function a(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);