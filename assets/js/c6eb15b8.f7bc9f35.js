"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[2540],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var f=n.createContext({}),l=function(e){var t=n.useContext(f),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(f.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},s=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,f=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),s=l(r),m=i,d=s["".concat(f,".").concat(m)]||s[m]||h[m]||o;return r?n.createElement(d,c(c({ref:t},u),{},{components:r})):n.createElement(d,c({ref:t},u))}));function m(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,c=new Array(o);c[0]=s;var a={};for(var f in t)hasOwnProperty.call(t,f)&&(a[f]=t[f]);a.originalType=e,a.mdxType="string"==typeof e?e:i,c[1]=a;for(var l=2;l<o;l++)c[l]=r[l];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}s.displayName="MDXCreateElement"},54894:function(e,t,r){r.r(t),r.d(t,{contentTitle:function(){return f},default:function(){return s},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return u}});var n=r(87462),i=r(63366),o=(r(67294),r(3905)),c=["components"],a={title:"1631. Path With Minimum Effort",sidebar_label:"1631. Path With Minimum Effort",tags:["Leetcode Medium","Graph","Bracktracking"]},f=void 0,l={unversionedId:"leetcode/1501-2000/path_with_min_effort",id:"leetcode/1501-2000/path_with_min_effort",title:"1631. Path With Minimum Effort",description:"Python",source:"@site/docs/leetcode/1501-2000/1631_path_with_min_effort.md",sourceDirName:"leetcode/1501-2000",slug:"/leetcode/1501-2000/path_with_min_effort",permalink:"/docs/leetcode/1501-2000/path_with_min_effort",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1501-2000/1631_path_with_min_effort.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Graph",permalink:"/docs/tags/graph"},{label:"Bracktracking",permalink:"/docs/tags/bracktracking"}],version:"current",sidebarPosition:1631,frontMatter:{title:"1631. Path With Minimum Effort",sidebar_label:"1631. Path With Minimum Effort",tags:["Leetcode Medium","Graph","Bracktracking"]},sidebar:"docSidebar",previous:{title:"1612. Check If Two Expression Trees are Equivalent",permalink:"/docs/leetcode/1501-2000/check_experssion_trees_equal"},next:{title:"1672. Richest Customer Wealth",permalink:"/docs/leetcode/1501-2000/richest_customer_wealth"}},u=[{value:"Python",id:"python",children:[{value:"Backtracking (Timelimit Exceed)",id:"backtracking-timelimit-exceed",children:[],level:3}],level:2}],h={toc:u};function s(e){var t=e.components,r=(0,i.Z)(e,c);return(0,o.kt)("wrapper",(0,n.Z)({},h,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"backtracking-timelimit-exceed"},"Backtracking (Timelimit Exceed)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import math\n\n\nclass Solution:\n    def minimumEffortPath(self, heights: List[List[int]]) -> int:\n        m, n = len(heights), len(heights[0])\n        min_effort = math.inf\n\n        def backtrack(row: int, col: int, effort: int):\n            nonlocal min_effort\n            nonlocal heights\n\n            if row == m-1 and col == n-1:\n                min_effort = min(min_effort, effort)\n                return\n\n            current_height = heights[row][col]\n            heights[row][col] = 0\n\n            # up\n            if row-1 >= 0 and heights[row-1][col] != 0:\n                current_effort = abs(current_height - heights[row-1][col])\n                current_diff = max(current_effort, effort)\n                if current_diff < min_effort:\n                    backtrack(row-1, col, current_diff)\n            # down\n            if row+1 < m and heights[row+1][col] != 0:\n                current_effort = abs(current_height - heights[row+1][col])\n                current_diff = max(current_effort, effort)\n                if current_diff < min_effort:\n                    backtrack(row+1, col, current_diff)\n            # left\n            if col-1 >= 0 and heights[row][col-1] != 0:\n                current_effort = abs(current_height - heights[row][col-1])\n                current_diff = max(current_effort, effort)\n                if current_diff < min_effort:\n                    backtrack(row, col-1, current_diff)\n            # right\n            if col+1 < n and heights[row][col+1] != 0:\n                current_effort = abs(current_height - heights[row][col+1])\n                current_diff = max(current_effort, effort)\n                if current_diff < min_effort:\n                    backtrack(row, col+1, current_diff)\n\n            heights[row][col] = current_height\n\n        backtrack(0, 0, 0)\n\n        return min_effort\n")))}s.isMDXComponent=!0}}]);