"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[40849],{3905:function(e,i,n){n.d(i,{Zo:function(){return c},kt:function(){return m}});var t=n(67294);function r(e,i,n){return i in e?Object.defineProperty(e,i,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[i]=n,e}function o(e,i){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);i&&(t=t.filter((function(i){return Object.getOwnPropertyDescriptor(e,i).enumerable}))),n.push.apply(n,t)}return n}function d(e){for(var i=1;i<arguments.length;i++){var n=null!=arguments[i]?arguments[i]:{};i%2?o(Object(n),!0).forEach((function(i){r(e,i,n[i])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(i){Object.defineProperty(e,i,Object.getOwnPropertyDescriptor(n,i))}))}return e}function s(e,i){if(null==e)return{};var n,t,r=function(e,i){if(null==e)return{};var n,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],i.indexOf(n)>=0||(r[n]=e[n]);return r}(e,i);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],i.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var a=t.createContext({}),l=function(e){var i=t.useContext(a),n=i;return e&&(n="function"==typeof e?e(i):d(d({},i),e)),n},c=function(e){var i=l(e.components);return t.createElement(a.Provider,{value:i},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var i=e.children;return t.createElement(t.Fragment,{},i)}},v=t.forwardRef((function(e,i){var n=e.components,r=e.mdxType,o=e.originalType,a=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(n),v=r,m=u["".concat(a,".").concat(v)]||u[v]||p[v]||o;return n?t.createElement(m,d(d({ref:i},c),{},{components:n})):t.createElement(m,d({ref:i},c))}));function m(e,i){var n=arguments,r=i&&i.mdxType;if("string"==typeof e||r){var o=n.length,d=new Array(o);d[0]=v;var s={};for(var a in i)hasOwnProperty.call(i,a)&&(s[a]=i[a]);s.originalType=e,s[u]="string"==typeof e?e:r,d[1]=s;for(var l=2;l<o;l++)d[l]=n[l];return t.createElement.apply(null,d)}return t.createElement.apply(null,n)}v.displayName="MDXCreateElement"},51150:function(e,i,n){n.r(i),n.d(i,{assets:function(){return a},contentTitle:function(){return d},default:function(){return u},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return l}});var t=n(83117),r=(n(67294),n(3905));const o={title:"29. Divide Two Integers",sidebar_label:"29. Divide Two Integers",tags:["Leetcode Medium","Bit Manipulation"]},d=void 0,s={unversionedId:"leetcode/1-500/divide_two_integers",id:"leetcode/1-500/divide_two_integers",title:"29. Divide Two Integers",description:"https://leetcode.com/problems/divide-two-integers/",source:"@site/docs/leetcode/1-500/29_divide_two_integers.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/divide_two_integers",permalink:"/docs/leetcode/1-500/divide_two_integers",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/29_divide_two_integers.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Bit Manipulation",permalink:"/docs/tags/bit-manipulation"}],version:"current",sidebarPosition:29,frontMatter:{title:"29. Divide Two Integers",sidebar_label:"29. Divide Two Integers",tags:["Leetcode Medium","Bit Manipulation"]},sidebar:"docSidebar",previous:{title:"27. Remove Element",permalink:"/docs/leetcode/1-500/remove_element"},next:{title:"31. Next Permutation",permalink:"/docs/leetcode/1-500/next_permutation"}},a={},l=[{value:"Python",id:"python",level:2},{value:"Minus divisor one-by-one (Timelimit Exceed)",id:"minus-divisor-one-by-one-timelimit-exceed",level:3},{value:"Minus divisor on exponentially grow while fit",id:"minus-divisor-on-exponentially-grow-while-fit",level:3}],c={toc:l};function u(e){let{components:i,...n}=e;return(0,r.kt)("wrapper",(0,t.Z)({},c,n,{components:i,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/divide-two-integers/"},"https://leetcode.com/problems/divide-two-integers/")),(0,r.kt)("h2",{id:"python"},"Python"),(0,r.kt)("h3",{id:"minus-divisor-one-by-one-timelimit-exceed"},"Minus divisor one-by-one (Timelimit Exceed)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def divide(self, dividend: int, divisor: int) -> int:\n        # Edge case, 32bit INT did not have 2147483648\n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n\n        # Decide the sign of the answer\n        is_negative = False\n\n        if dividend < 0:\n            dividend = -dividend\n            is_negative = True\n\n        if divisor < 0:\n            divisor = -divisor\n            is_negative = False if is_negative else True\n\n        ans = 0\n        while dividend >= divisor:\n            ans += 1\n            dividend -= divisor\n\n        return -ans if is_negative else ans\n")),(0,r.kt)("h3",{id:"minus-divisor-on-exponentially-grow-while-fit"},"Minus divisor on exponentially grow while fit"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u9664\u6578(divisor)\u5728\u5141\u8a31\u7bc4\u570d\u5167(\u9084\u53ef\u4ee5\u8b93\u88ab\u9664\u6578\u6e1b\u7684\u6642\u5019)\uff0c\u8b93\u4ed6\u7a0b\u6307\u6578\u589e\u9577(\u4e8c\u6b21\u65b9)"),(0,r.kt)("li",{parentName:"ul"},"\u985e\u4f3cTCP/IP congestion control\u6642\u7684",(0,r.kt)("a",{parentName:"li",href:"https://zh.wikipedia.org/zh-tw/%E5%92%8C%E6%80%A7%E5%A2%9E%E9%95%BF/%E4%B9%98%E6%80%A7%E9%99%8D%E4%BD%8E"},"AIMD"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def divide(self, dividend: int, divisor: int) -> int:\n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n\n        is_negative = (dividend < 0) ^ (divisor < 0)\n        dividend, divisor = abs(dividend), abs(divisor)\n\n        ans = 0\n        while dividend >= divisor:\n            power_divisor, power = divisor, 1\n            while dividend >= power_divisor:\n                dividend -= power_divisor\n                ans += power\n                power <<= 1\n                power_divisor <<= 1\n\n        return -ans if is_negative else ans\n")))}u.isMDXComponent=!0}}]);