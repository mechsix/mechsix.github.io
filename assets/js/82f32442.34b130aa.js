"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[78828],{69672:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>s});var a=n(74848),c=n(28453);const i={title:"417. Pacific Atlantic Water Flow",sidebar_label:"417. Pacific Atlantic Water Flow",tags:["Leetcode Medium","Matrix","DFS"]},o=void 0,r={id:"leetcode/1-500/pacific_atlantic_water_flow",title:"417. Pacific Atlantic Water Flow",description:"https://leetcode.com/problems/pacific-atlantic-water-flow/",source:"@site/docs/leetcode/1-500/417_pacific_atlantic_water_flow.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/pacific_atlantic_water_flow",permalink:"/docs/leetcode/1-500/pacific_atlantic_water_flow",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Matrix",permalink:"/docs/tags/matrix"},{label:"DFS",permalink:"/docs/tags/dfs"}],version:"current",sidebarPosition:417,frontMatter:{title:"417. Pacific Atlantic Water Flow",sidebar_label:"417. Pacific Atlantic Water Flow",tags:["Leetcode Medium","Matrix","DFS"]},sidebar:"docSidebar",previous:{title:"416. Partition Equal Subset Sum",permalink:"/docs/leetcode/1-500/partition_equal_subset_sum"},next:{title:"421. Maximum XOR of Two Numbers in an Array",permalink:"/docs/leetcode/1-500/max_xor_of_2_nums_in_array"}},l={},s=[{value:"Python",id:"python",level:2},{value:"DFS and Hash intersection",id:"dfs-and-hash-intersection",level:3}];function d(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://leetcode.com/problems/pacific-atlantic-water-flow/",children:"https://leetcode.com/problems/pacific-atlantic-water-flow/"})}),"\n",(0,a.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,a.jsx)(t.h3,{id:"dfs-and-hash-intersection",children:"DFS and Hash intersection"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"class Solution:\n    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:\n        if not heights or not heights[0]:\n            return []\n\n        m, n = len(heights), len(heights[0])\n        offsets = [(1, 0), (0, 1), (-1, 0), (0, -1)]\n\n        def dfs(row: int, col: int, reachable: set):\n            reachable.add((row, col))\n\n            for rx, cx in offsets:\n                new_row, new_col = row+rx, col+cx\n\n                if new_row < 0 or new_row >= m or new_col < 0 or new_col >= n:\n                    continue\n\n                if (new_row, new_col) in reachable:\n                    continue\n\n                if heights[new_row][new_col] < heights[row][col]:\n                    continue\n                dfs(new_row, new_col, reachable)\n\n        pac_reachable, alt_reachable = set(), set()\n\n        for row in range(m):\n            dfs(row, 0, pac_reachable)\n            dfs(row, n-1, alt_reachable)\n        for col in range(n):\n            dfs(0, col, pac_reachable)\n            dfs(m-1, col, alt_reachable)\n\n        return list(pac_reachable & alt_reachable)\n"})})]})}function h(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var a=n(96540);const c={},i=a.createContext(c);function o(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:o(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);