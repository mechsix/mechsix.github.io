"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[41868],{65053:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var n=r(74848),o=r(28453);const i={title:"109. Convert Sorted List to Binary Search Tree",slidebar_label:"109. Convert Sorted List to Binary Search Tree",tags:["Leetcode Medium","BST"]},s=void 0,a={id:"leetcode/1-500/convert_sorted_list_to_hight_balanced_bst",title:"109. Convert Sorted List to Binary Search Tree",description:"https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/",source:"@site/docs/leetcode/1-500/109_convert_sorted_list_to_hight_balanced_bst.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/convert_sorted_list_to_hight_balanced_bst",permalink:"/docs/leetcode/1-500/convert_sorted_list_to_hight_balanced_bst",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"BST",permalink:"/docs/tags/bst"}],version:"current",sidebarPosition:109,frontMatter:{title:"109. Convert Sorted List to Binary Search Tree",slidebar_label:"109. Convert Sorted List to Binary Search Tree",tags:["Leetcode Medium","BST"]},sidebar:"docSidebar",previous:{title:"108. Convert Sorted Array to Binary Search Tree",permalink:"/docs/leetcode/1-500/convert_sorted_array_to_bst"},next:{title:"110. Balanced Binary Tree",permalink:"/docs/leetcode/1-500/balanced_binary_tree"}},c={},d=[{value:"Python",id:"python",level:2},{value:"Convert to array and rebuild",id:"convert-to-array-and-rebuild",level:3}];function l(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/",children:"https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/"})}),"\n",(0,n.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,n.jsx)(t.h3,{id:"convert-to-array-and-rebuild",children:"Convert to array and rebuild"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Ref to ",(0,n.jsx)(t.a,{href:"../1001-1500/balance_a_bst",children:"1382. Balance a Binary Search Tree"})]}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"class Solution:\n    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:\n        if not head:\n            return\n\n        nums, cur = [], head\n        while cur:\n            nums.append(cur.val)\n            cur = cur.next\n\n        def build(left, right):\n            if left > right:\n                return\n\n            mid = (left+right) >> 1\n            return TreeNode(nums[mid], build(left,mid-1), build(mid+1,right))\n\n        return build(0, len(nums)-1)\n"})})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>s,x:()=>a});var n=r(96540);const o={},i=n.createContext(o);function s(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);