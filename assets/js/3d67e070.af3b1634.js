"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[996],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return p}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),d=s(r),p=o,f=d["".concat(c,".").concat(p)]||d[p]||m[p]||i;return r?n.createElement(f,l(l({ref:t},u),{},{components:r})):n.createElement(f,l({ref:t},u))}));function p(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,l=new Array(i);l[0]=d;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:o,l[1]=a;for(var s=2;s<i;s++)l[s]=r[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},14970:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return a},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return u},default:function(){return d}});var n=r(87462),o=r(63366),i=(r(67294),r(3905)),l=["components"],a={title:"359. Logger Rate Limiter",sidebar_label:"359. Logger Rate Limiter",tags:["Leetcode Easy","Leetcode Premium","Leetcode Optimable"]},c=void 0,s={unversionedId:"leetcode/1-500/logger_rate_limiter",id:"leetcode/1-500/logger_rate_limiter",title:"359. Logger Rate Limiter",description:"Python",source:"@site/docs/leetcode/1-500/359_logger_rate_limiter.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/logger_rate_limiter",permalink:"/docs/leetcode/1-500/logger_rate_limiter",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/359_logger_rate_limiter.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Leetcode Premium",permalink:"/docs/tags/leetcode-premium"},{label:"Leetcode Optimable",permalink:"/docs/tags/leetcode-optimable"}],version:"current",sidebarPosition:359,frontMatter:{title:"359. Logger Rate Limiter",sidebar_label:"359. Logger Rate Limiter",tags:["Leetcode Easy","Leetcode Premium","Leetcode Optimable"]},sidebar:"docSidebar",previous:{title:"328. Odd Even Linked List",permalink:"/docs/leetcode/1-500/odd_even_linklist"},next:{title:"382. Linked List Random Node",permalink:"/docs/leetcode/1-500/linked_list_rand_node"}},u=[{value:"Python",id:"python",children:[],level:2}],m={toc:u};function d(e){var t=e.components,r=(0,o.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from collections import deque\n\nclass Logger:\n    TIMEOUT = 10\n    def __init__(self):\n        # Items in queue: tuple(timestamp, message)\n        self.queue = deque()\n\n    def shouldPrintMessage(self, timestamp: int, message: str) -> bool:\n        # Remove expired items from left of queue\n        while self.queue and self.queue[0][0]+self.TIMEOUT <= timestamp:\n            self.queue.popleft()\n\n        # Check if timestamp + TIMEOUT\n        exclude_msgs = [item[1] for item in self.queue]\n\n        # Append current record into queue\n        if message not in [item[1] for item in self.queue]:\n            self.queue.append((timestamp, message))\n        \n        return message not in exclude_msgs\n")))}d.isMDXComponent=!0}}]);