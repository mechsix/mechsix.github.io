"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[71922],{56207:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"leetcode/1-500/palindrome_linked_list","title":"234. Palindrome Linked List","description":"https://leetcode.com/problems/palindrome-linked-list/","source":"@site/docs/leetcode/1-500/234_palindrome_linked_list.md","sourceDirName":"leetcode/1-500","slug":"/leetcode/1-500/palindrome_linked_list","permalink":"/docs/leetcode/1-500/palindrome_linked_list","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Easy","permalink":"/docs/tags/leetcode-easy"},{"inline":true,"label":"Linked List","permalink":"/docs/tags/linked-list"},{"inline":true,"label":"Stack","permalink":"/docs/tags/stack"}],"version":"current","sidebarPosition":234,"frontMatter":{"title":"234. Palindrome Linked List","sidebar_label":"234. Palindrome Linked List","tags":["Leetcode Easy","Linked List","Stack"]},"sidebar":"docSidebar","previous":{"title":"232. Implement Queue using Stacks","permalink":"/docs/leetcode/1-500/implement_queue_using_stacks"},"next":{"title":"235. Lowest Common Ancestor of a Binary Search Tree","permalink":"/docs/leetcode/1-500/lowest_common_ancestor_of_bst"}}');var i=t(74848),r=t(28453);const s={title:"234. Palindrome Linked List",sidebar_label:"234. Palindrome Linked List",tags:["Leetcode Easy","Linked List","Stack"]},o=void 0,a={},c=[{value:"Python",id:"python",level:2},{value:"First Solution",id:"first-solution",level:3},{value:"Javascript",id:"javascript",level:2},{value:"Second Solution",id:"second-solution",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/palindrome-linked-list/",children:"https://leetcode.com/problems/palindrome-linked-list/"})}),"\n",(0,i.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,i.jsx)(n.h3,{id:"first-solution",children:"First Solution"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Time: O(2N)"}),"\n",(0,i.jsx)(n.li,{children:"Space: O(N/2)"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def isPalindrome(self, head: Optional[ListNode]) -> bool:\n        length = 0\n        cur = head\n        while cur:\n            length += 1\n            cur = cur.next\n\n        stack = []\n        is_even = length % 2 == 0\n        middle = length // 2 if is_even else length//2 + 1\n        pos = 1\n        cur = head\n\n        while cur:\n            if is_even:\n                if pos <= middle:\n                    stack.append(cur.val)\n                else:\n                    if cur.val != stack.pop():\n                        return False\n            else:\n                if pos < middle:\n                    stack.append(cur.val)\n                elif pos > middle:\n                    if cur.val != stack.pop():\n                        return False\n                else:\n                    # Do nothing at the middle\n                    pass\n\n            cur = cur.next\n            pos += 1\n\n        return True\n"})}),"\n",(0,i.jsx)(n.h2,{id:"javascript",children:"Javascript"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Time: O(NlogN)"}),"\n",(0,i.jsx)(n.li,{children:"Space: O(N)"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"var isPalindrome = function(head) {\n    if (!head.next) return true;\n    \n    const array = [];\n    let pointer = head;    \n    while (pointer !== null) {\n        array.push(pointer.val);\n        pointer = pointer.next;        \n    }\n    \n    let l = 0;\n    let r = array.length - 1;\n    while (l < r) {\n        if (array[l] !== array[r]) return false;\n        l++;\n        r--;\n    }\n    return true;\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"second-solution",children:"Second Solution"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Time: O(2N)"}),"\n",(0,i.jsx)(n.li,{children:"Space: O(N/2)"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def isPalindrome(self, head: Optional[ListNode]) -> bool:\n        length = 0\n        \n        cur = head\n        while cur:\n            length += 1\n            cur = cur.next\n        \n        if not length:\n            return False\n\n        cur, stack = head, []\n        for i in range(length>>1):\n            stack.append(cur.val)\n            cur = cur.next\n        \n\n        if length % 2 == 1:\n            cur = cur.next\n\n        while cur:\n            if not stack or cur.val != stack[-1]:\n                return False\n            cur = cur.next\n            stack.pop()\n            \n        return True\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var l=t(96540);const i={},r=l.createContext(i);function s(e){const n=l.useContext(r);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),l.createElement(r.Provider,{value:n},e.children)}}}]);