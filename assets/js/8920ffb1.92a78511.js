"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[88413],{3905:function(e,r,t){t.d(r,{Zo:function(){return s},kt:function(){return m}});var n=t(67294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=n.createContext({}),l=function(e){var r=n.useContext(u),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},s=function(e){var r=l(e.components);return n.createElement(u.Provider,{value:r},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=l(t),f=o,m=d["".concat(u,".").concat(f)]||d[f]||p[f]||i;return t?n.createElement(m,a(a({ref:r},s),{},{components:t})):n.createElement(m,a({ref:r},s))}));function m(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=f;var c={};for(var u in r)hasOwnProperty.call(r,u)&&(c[u]=r[u]);c.originalType=e,c[d]="string"==typeof e?e:o,a[1]=c;for(var l=2;l<i;l++)a[l]=t[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},61966:function(e,r,t){t.r(r),t.d(r,{assets:function(){return u},contentTitle:function(){return a},default:function(){return d},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return l}});var n=t(83117),o=(t(67294),t(3905));const i={title:"139. Word Break",sidebar_label:"139. Word Break",tags:["Leetcode Medium","Trie"]},a=void 0,c={unversionedId:"leetcode/1-500/word_break",id:"leetcode/1-500/word_break",title:"139. Word Break",description:"https://leetcode.com/problems/word-break/",source:"@site/docs/leetcode/1-500/139_word_break.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/word_break",permalink:"/docs/leetcode/1-500/word_break",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/139_word_break.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Trie",permalink:"/docs/tags/trie"}],version:"current",sidebarPosition:139,frontMatter:{title:"139. Word Break",sidebar_label:"139. Word Break",tags:["Leetcode Medium","Trie"]},sidebar:"docSidebar",previous:{title:"136. Single Number",permalink:"/docs/leetcode/1-500/single_num"},next:{title:"140. Word Break II",permalink:"/docs/leetcode/1-500/word_break_ii"}},u={},l=[{value:"Python",id:"python",level:2},{value:"Trie with BFS",id:"trie-with-bfs",level:3},{value:"Javascript",id:"javascript",level:2}],s={toc:l};function d(e){let{components:r,...t}=e;return(0,o.kt)("wrapper",(0,n.Z)({},s,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/word-break/"},"https://leetcode.com/problems/word-break/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"trie-with-bfs"},"Trie with BFS"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    EOS = '$'\n    def wordBreak(self, s: str, wordDict: List[str]) -> bool:\n        trie = {}\n        for word in wordDict:\n            cur = trie\n            for letter in word:\n                cur = cur.setdefault(letter, {})\n            cur[self.EOS] = True\n\n        queue = [trie]\n\n        for letter in s:\n            new_queue = []\n            is_seen = False\n            while queue:\n                node = queue.pop()\n                if letter not in node:\n                    continue\n\n                node = node[letter]\n                new_queue.append(node)\n\n                if self.EOS in node and not is_seen:\n                    new_queue.append(trie)\n                    is_seen = True\n            queue = new_queue\n\n        return trie in queue\n")),(0,o.kt)("h2",{id:"javascript"},"Javascript"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"var wordBreak = function(s, wordDict) {\n   const recursive = function(start, memo = {}) {\n    if (start === s.length) return true;\n    if (memo[start] !== undefined) return memo[start];\n\n    for (let i = start + 1; i <= s.length; i++) {\n      const partial = s.substring(start, i)\n      for (const word of wordDict) {\n        if (partial === word && recursive(i, memo)) {\n          return memo[start] = true;\n        }\n      }\n    }\n    return memo[start] = false;\n  }\n\n  return recursive(0)\n};\n")))}d.isMDXComponent=!0}}]);