"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[92929],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=u(n),d=o,f=p["".concat(c,".").concat(d)]||p[d]||m[d]||a;return n?r.createElement(f,i(i({ref:t},s),{},{components:n})):r.createElement(f,i({ref:t},s))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},51186:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var r=n(87462),o=(n(67294),n(3905));const a={title:"266. Palindrome Permutation",sidebar_label:"266. Palindrome Permutation",tags:["Leetcode Easy","Rust","CTCI"]},i=void 0,l={unversionedId:"leetcode/1-500/palindrome_permutation",id:"leetcode/1-500/palindrome_permutation",title:"266. Palindrome Permutation",description:"https://leetcode.com/problems/palindrome-permutation",source:"@site/docs/leetcode/1-500/266_palindrome_permutation.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/palindrome_permutation",permalink:"/docs/leetcode/1-500/palindrome_permutation",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/266_palindrome_permutation.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Rust",permalink:"/docs/tags/rust"},{label:"CTCI",permalink:"/docs/tags/ctci"}],version:"current",sidebarPosition:266,frontMatter:{title:"266. Palindrome Permutation",sidebar_label:"266. Palindrome Permutation",tags:["Leetcode Easy","Rust","CTCI"]},sidebar:"docSidebar",previous:{title:"263. Ugly Number",permalink:"/docs/leetcode/1-500/ugly_number"},next:{title:"268. Missing Number",permalink:"/docs/leetcode/1-500/missing_number"}},c={},u=[{value:"Python",id:"python",level:2},{value:"Rust",id:"rust",level:2}],s={toc:u},p="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/palindrome-permutation"},"https://leetcode.com/problems/palindrome-permutation")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"CTCI 1.4 Palindrome Permutation")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from collections import Counter\n\n\nclass Solution:\n    def canPermutePalindrome(self, s: str) -> bool:\n        counter = Counter(s)\n\n        see_center = False\n        for count in counter.values():\n            if count %2 == 0:\n                continue\n\n            if see_center:\n                return False\n\n            see_center = True\n\n        return True\n")),(0,o.kt)("h2",{id:"rust"},"Rust"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"impl Solution {\n    pub fn can_permute_palindrome(s: String) -> bool {\n        let mut mapper = [0; 26];\n        for i in s.as_bytes().iter() {\n            mapper[(i-b'a') as usize] += 1\n        }\n\n        let mut see_center = false;\n\n        for i in 0..mapper.len() {\n            let count = mapper[i];\n            if count %2 == 0 {\n                continue;\n            }\n\n            if see_center {\n                return false;\n            }\n\n            see_center = true;\n        }\n\n        true\n    }\n}\n")))}m.isMDXComponent=!0}}]);