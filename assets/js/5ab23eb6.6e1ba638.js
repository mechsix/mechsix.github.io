"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[222],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),m=c(n),d=l,p=m["".concat(s,".").concat(d)]||m[d]||f[d]||o;return n?r.createElement(p,i(i({ref:t},u),{},{components:n})):r.createElement(p,i({ref:t},u))}));function d(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=n.length,i=new Array(o);i[0]=m;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a.mdxType="string"==typeof e?e:l,i[1]=a;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},49816:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return a},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return m}});var r=n(87462),l=n(63366),o=(n(67294),n(3905)),i=["components"],a={title:"230. Kth Smallest Element in a BST",sidebar_label:"230. Kth Smallest Element in a BST",tags:["Leetcode Medium","BST"]},s=void 0,c={unversionedId:"leetcode/kth_smallest_elm_in_bst",id:"leetcode/kth_smallest_elm_in_bst",title:"230. Kth Smallest Element in a BST",description:"Python",source:"@site/docs/leetcode/230_kth_smallest_elm_in_bst.md",sourceDirName:"leetcode",slug:"/leetcode/kth_smallest_elm_in_bst",permalink:"/docs/leetcode/kth_smallest_elm_in_bst",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/230_kth_smallest_elm_in_bst.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"BST",permalink:"/docs/tags/bst"}],version:"current",sidebarPosition:230,frontMatter:{title:"230. Kth Smallest Element in a BST",sidebar_label:"230. Kth Smallest Element in a BST",tags:["Leetcode Medium","BST"]},sidebar:"docSidebar",previous:{title:"226. Invert Binary Tree",permalink:"/docs/leetcode/invert_binary_tree"},next:{title:"250. Count Univalue Subtrees",permalink:"/docs/leetcode/count_univalue_subtree"}},u=[{value:"Python",id:"python",children:[],level:2}],f={toc:u};function m(e){var t=e.components,n=(0,l.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def __init__(self):\n        self.rank = 0\n        self.result = 0\n\n    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:\n        self.rank = 0\n        self.result = 0\n        self._travel(root, k)\n        return self.result\n\n    def _travel(self, node, k):\n        if not node:\n            return self.rank\n\n        self._travel(node.left, k)\n\n        self.rank += 1\n        if self.rank == k:\n            self.result = node.val\n            return\n\n        self._travel(node.right, k)\n")))}m.isMDXComponent=!0}}]);