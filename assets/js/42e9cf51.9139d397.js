"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[84743],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),a=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=a(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=a(n),f=i,m=d["".concat(l,".").concat(f)]||d[f]||p[f]||s;return n?r.createElement(m,o(o({ref:t},u),{},{components:n})):r.createElement(m,o({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,o=new Array(s);o[0]=f;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[d]="string"==typeof e?e:i,o[1]=c;for(var a=2;a<s;a++)o[a]=n[a];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},16538:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>a});var r=n(87462),i=(n(67294),n(3905));const s={title:"986. Interval List Intersections",sidebar_label:"986. Interval List Intersections",tags:["Leetcode Medium","TODO"]},o=void 0,c={unversionedId:"leetcode/501-1000/interval_list_intersections",id:"leetcode/501-1000/interval_list_intersections",title:"986. Interval List Intersections",description:"Python",source:"@site/docs/leetcode/501-1000/986_interval_list_intersections.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/interval_list_intersections",permalink:"/docs/leetcode/501-1000/interval_list_intersections",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/986_interval_list_intersections.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"TODO",permalink:"/docs/tags/todo"}],version:"current",sidebarPosition:986,frontMatter:{title:"986. Interval List Intersections",sidebar_label:"986. Interval List Intersections",tags:["Leetcode Medium","TODO"]},sidebar:"docSidebar",previous:{title:"985. Sum of Even Numbers After Queries",permalink:"/docs/leetcode/501-1000/sum_of_even_nums_after_queries"},next:{title:"987. Vertical Order Traversal of a Binary Tree",permalink:"/docs/leetcode/501-1000/vertical_order_traversal_of_a_binary_tree"}},l={},a=[{value:"Python",id:"python",level:2},{value:"Time Exceed Try",id:"time-exceed-try",level:3}],u={toc:a},d="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"time-exceed-try"},"Time Exceed Try"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def intervalIntersection(self, firstList: List[List[int]], secondList: List[List[int]]) -> List[List[int]]:\n        if not firstList or not secondList:\n            return []\n\n        results = []\n        result = []\n\n        uppbound = max(firstList[-1][1], secondList[-1][1])+1\n        lowerbound = min(firstList[0][0], secondList[0][0])\n        first_current = None\n        second_current = None\n\n        for num in range(lowerbound, uppbound):\n            if not first_current or num > first_current[1]:\n                if firstList:\n                    first_current = firstList.pop(0)\n                if result:\n                    results.append(result)\n                    result = []\n\n            if not second_current or num > second_current[1]:\n                if secondList:\n                    second_current = secondList.pop(0)\n                if result:\n                    results.append(result)\n                    result = []\n\n            first_enabled = (num >= first_current[0] and num <= first_current[1])\n            second_enabled = (num >= second_current[0] and num <= second_current[1])\n\n            if first_enabled and second_enabled:\n                if not result:\n                    result = [num, num]\n                else:\n                    result[1] = num\n\n            if (not first_enabled or not second_enabled) and result:\n                results.append(result)\n                result = []\n\n\n        if result:\n            results.append(result)\n\n        return results\n")))}p.isMDXComponent=!0}}]);