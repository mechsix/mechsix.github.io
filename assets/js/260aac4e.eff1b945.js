"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[23063],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return p}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},s=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),d=l(n),p=o,f=d["".concat(u,".").concat(p)]||d[p]||m[p]||i;return n?r.createElement(f,c(c({ref:t},s),{},{components:n})):r.createElement(f,c({ref:t},s))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,c=new Array(i);c[0]=d;var a={};for(var u in t)hasOwnProperty.call(t,u)&&(a[u]=t[u]);a.originalType=e,a.mdxType="string"==typeof e?e:o,c[1]=a;for(var l=2;l<i;l++)c[l]=n[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},98891:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return s}});var r=n(87462),o=n(63366),i=(n(67294),n(3905)),c=["components"],a={title:"1647. Minimum Deletions to Make Character Frequencies Unique",sidebar_label:"1647. Minimum Deletions to Make Character Frequencies Unique",tags:["Leetcode Medium"]},u=void 0,l={unversionedId:"leetcode/1501-2000/mini_deletions_make_character_frequencies_unique",id:"leetcode/1501-2000/mini_deletions_make_character_frequencies_unique",title:"1647. Minimum Deletions to Make Character Frequencies Unique",description:"https://leetcode.com/problems/minimum-deletions-to-make-character-frequencies-unique/",source:"@site/docs/leetcode/1501-2000/1647_mini_deletions_make_character_frequencies_unique.md",sourceDirName:"leetcode/1501-2000",slug:"/leetcode/1501-2000/mini_deletions_make_character_frequencies_unique",permalink:"/docs/leetcode/1501-2000/mini_deletions_make_character_frequencies_unique",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1501-2000/1647_mini_deletions_make_character_frequencies_unique.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"}],version:"current",sidebarPosition:1647,frontMatter:{title:"1647. Minimum Deletions to Make Character Frequencies Unique",sidebar_label:"1647. Minimum Deletions to Make Character Frequencies Unique",tags:["Leetcode Medium"]},sidebar:"docSidebar",previous:{title:"1644. Lowest Common Ancestor of a Binary Tree II",permalink:"/docs/leetcode/1501-2000/lowest_common_ancestor_of_bt_ii"},next:{title:"1650. Lowest Common Ancestor of a Binary Tree III",permalink:"/docs/leetcode/1501-2000/lowest_common_ancestor_of_a_binary_tree_iii"}},s=[{value:"Python",id:"python",children:[],level:2}],m={toc:s};function d(e){var t=e.components,n=(0,o.Z)(e,c);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/minimum-deletions-to-make-character-frequencies-unique/"},"https://leetcode.com/problems/minimum-deletions-to-make-character-frequencies-unique/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from collections import Counter\n\n\nclass Solution:\n    def minDeletions(self, s: str) -> int:\n        counts = sorted(Counter(s).values(), reverse=True)\n\n        ans = 0\n        max_allowed = len(s)\n        for count in counts:\n            if count > max_allowed:\n                ans += count - max_allowed\n                max_allowed = max(0, max_allowed-1)\n            else:\n                max_allowed = max(0, count-1)\n        return ans\n")))}d.isMDXComponent=!0}}]);