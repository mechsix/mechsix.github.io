"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[7866],{3905:function(e,r,t){t.d(r,{Zo:function(){return u},kt:function(){return b}});var n=t(67294);function l(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){l(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function a(e,r){if(null==e)return{};var t,n,l=function(e,r){if(null==e)return{};var t,n,l={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(l[t]=e[t]);return l}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var c=n.createContext({}),s=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},u=function(e){var r=s(e.components);return n.createElement(c.Provider,{value:r},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,l=e.mdxType,o=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=s(t),f=l,b=p["".concat(c,".").concat(f)]||p[f]||d[f]||o;return t?n.createElement(b,i(i({ref:r},u),{},{components:t})):n.createElement(b,i({ref:r},u))}));function b(e,r){var t=arguments,l=r&&r.mdxType;if("string"==typeof e||l){var o=t.length,i=new Array(o);i[0]=f;var a={};for(var c in r)hasOwnProperty.call(r,c)&&(a[c]=r[c]);a.originalType=e,a[p]="string"==typeof e?e:l,i[1]=a;for(var s=2;s<o;s++)i[s]=t[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},45567:function(e,r,t){t.r(r),t.d(r,{assets:function(){return c},contentTitle:function(){return i},default:function(){return p},frontMatter:function(){return o},metadata:function(){return a},toc:function(){return s}});var n=t(83117),l=(t(67294),t(3905));const o={title:"894. All Possible Full Binary Trees",sidebar_label:"894. All Possible Full Binary Trees",tags:["Leetcode Medium","Binary Tree","Backtracking"]},i=void 0,a={unversionedId:"leetcode/501-1000/all_possible_full_binary_tree",id:"leetcode/501-1000/all_possible_full_binary_tree",title:"894. All Possible Full Binary Trees",description:"https://leetcode.com/problems/all-possible-full-binary-trees/",source:"@site/docs/leetcode/501-1000/894_all_possible_full_binary_tree.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/all_possible_full_binary_tree",permalink:"/docs/leetcode/501-1000/all_possible_full_binary_tree",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/894_all_possible_full_binary_tree.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"},{label:"Backtracking",permalink:"/docs/tags/backtracking"}],version:"current",sidebarPosition:894,frontMatter:{title:"894. All Possible Full Binary Trees",sidebar_label:"894. All Possible Full Binary Trees",tags:["Leetcode Medium","Binary Tree","Backtracking"]},sidebar:"docSidebar",previous:{title:"890. Find and Replace Pattern",permalink:"/docs/leetcode/501-1000/find_and_replace_pattern"},next:{title:"897. Increasing Order Search Tree",permalink:"/docs/leetcode/501-1000/increasing_order_bst"}},c={},s=[{value:"Python",id:"python",level:2}],u={toc:s};function p(e){let{components:r,...t}=e;return(0,l.kt)("wrapper",(0,n.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/all-possible-full-binary-trees/"},"https://leetcode.com/problems/all-possible-full-binary-trees/")),(0,l.kt)("h2",{id:"python"},"Python"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def allPossibleFBT(self, n: int) -> List[Optional[TreeNode]]:\n        if not n % 2:\n            return []\n\n        def backtrack(i):\n            if i == 1:\n                return [TreeNode(val=0)]\n            tree = []\n            for j in range(1, i-1):\n                for left in backtrack(j):\n                    for right in backtrack(i-j-1):\n                        tree.append(\n                            TreeNode(0, left, right)\n                        )\n            return tree\n\n        return dfs(n)\n")))}p.isMDXComponent=!0}}]);