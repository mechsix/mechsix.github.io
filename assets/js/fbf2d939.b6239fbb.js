"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[9734],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=s(t),f=o,g=p["".concat(l,".").concat(f)]||p[f]||d[f]||i;return t?r.createElement(g,c(c({ref:n},u),{},{components:t})):r.createElement(g,c({ref:n},u))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,c=new Array(i);c[0]=p;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a.mdxType="string"==typeof e?e:o,c[1]=a;for(var s=2;s<i;s++)c[s]=t[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},68168:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return u}});var r=t(87462),o=t(63366),i=(t(67294),t(3905)),c=["components"],a={title:"1048. Longest String Chain",sidebar_label:"1048. Longest String Chain",tags:["Leetcode Medium","DP"]},l=void 0,s={unversionedId:"leetcode/1001-1500/longest_string_chain",id:"leetcode/1001-1500/longest_string_chain",title:"1048. Longest String Chain",description:"Python",source:"@site/docs/leetcode/1001-1500/1048_longest_string_chain.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/longest_string_chain",permalink:"/docs/leetcode/1001-1500/longest_string_chain",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1048_longest_string_chain.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"DP",permalink:"/docs/tags/dp"}],version:"current",sidebarPosition:1048,frontMatter:{title:"1048. Longest String Chain",sidebar_label:"1048. Longest String Chain",tags:["Leetcode Medium","DP"]},sidebar:"docSidebar",previous:{title:"1046. Last Stone Weight",permalink:"/docs/leetcode/1001-1500/last_stone_weight"},next:{title:"1051. Height Checker",permalink:"/docs/leetcode/1001-1500/height_checker"}},u=[{value:"Python",id:"python",children:[{value:"Top-Down DP",id:"top-down-dp",children:[],level:3}],level:2}],d={toc:u};function p(e){var n=e.components,t=(0,o.Z)(e,c);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"top-down-dp"},"Top-Down DP"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from functools import cache\n\n\nclass Solution:\n    def longestStrChain(self, words: List[str]) -> int:\n\n        @cache\n        def dp(word: str):\n            max_length = 1\n            for i in range(len(word)):\n                new_word = word[:i] + word[i+1:]\n\n                if new_word in words:\n                    max_length = max(max_length, 1+dp(new_word))\n\n            return max_length\n\n\n        answer = 0\n        for word in words:\n            answer = max(answer, dp(word))\n\n        return answer\n")))}p.isMDXComponent=!0}}]);