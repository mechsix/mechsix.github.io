"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[4119],{49730:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>u,toc:()=>l});var r=t(74848),i=t(28453);const a={title:"1306. Jump Game III",sidebar_label:"1306. Jump Game III",tags:["Leetcode Medium","Jump Game"]},s=void 0,u={id:"leetcode/1001-1500/jump_game_iii",title:"1306. Jump Game III",description:"Python",source:"@site/docs/leetcode/1001-1500/1306_jump_game_iii.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/jump_game_iii",permalink:"/docs/leetcode/1001-1500/jump_game_iii",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Jump Game",permalink:"/docs/tags/jump-game"}],version:"current",sidebarPosition:1306,frontMatter:{title:"1306. Jump Game III",sidebar_label:"1306. Jump Game III",tags:["Leetcode Medium","Jump Game"]},sidebar:"docSidebar",previous:{title:"1305. All Elements in Two Binary Search Trees",permalink:"/docs/leetcode/1001-1500/all_elms_in_two_bst"},next:{title:"1318. Minimum Flips to Make a OR b Equal to c",permalink:"/docs/leetcode/1001-1500/min_flips_to_make_a_or_b_equal_c"}},o={},l=[{value:"Python",id:"python",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,r.jsx)(n.p,{children:"First try, time limit exceed"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def canReach(self, arr: List[int], start: int) -> bool:\n        self.upbound = len(arr)-1\n        if not arr:\n            return False\n        return self._travel(arr, [], start)\n\n    def _travel(self, arr, visited, current):\n        if current in visited:\n            return False\n\n        if current > self.upbound or current < 0:\n            return False\n\n        if arr[current] == 0:\n            return True\n\n        visited.append(current)\n\n        return self._travel(arr, visited, current - arr[current]) \\\n            or self._travel(arr, visited, current + arr[current])\n"})}),"\n",(0,r.jsx)(n.p,{children:"Second Try, BFS with queue"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def canReach(self, arr: List[int], start: int) -> bool:\n        if not arr:\n            return False\n\n        upbound = len(arr)\n        queue = [start]\n        visited = set([start])\n\n        while queue:\n            current = queue.pop(0)\n\n            if arr[current] == 0:\n                return True\n\n            left = current - arr[current]\n            right = current + arr[current]\n\n            if left >= 0 and left < upbound and left not in visited:\n                visited.add(left)\n                queue.append(left)\n\n            if right >= 0 and right < upbound and right not in visited:\n                visited.add(right)\n                queue.append(right)\n\n        return False\n"})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>u});var r=t(96540);const i={},a=r.createContext(i);function s(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function u(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);