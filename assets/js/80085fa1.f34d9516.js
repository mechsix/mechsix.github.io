"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[99721],{3905:function(e,n,r){r.d(n,{Zo:function(){return f},kt:function(){return p}});var t=r(67294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function l(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?l(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function a(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},l=Object.keys(e);for(t=0;t<l.length;t++)r=l[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)r=l[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=t.createContext({}),c=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},f=function(e){var n=c(e.components);return t.createElement(s.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,f=a(e,["components","mdxType","originalType","parentName"]),u=c(r),m=o,p=u["".concat(s,".").concat(m)]||u[m]||d[m]||l;return r?t.createElement(p,i(i({ref:n},f),{},{components:r})):t.createElement(p,i({ref:n},f))}));function p(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var l=r.length,i=new Array(l);i[0]=m;var a={};for(var s in n)hasOwnProperty.call(n,s)&&(a[s]=n[s]);a.originalType=e,a[u]="string"==typeof e?e:o,i[1]=a;for(var c=2;c<l;c++)i[c]=r[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},78678:function(e,n,r){r.r(n),r.d(n,{assets:function(){return s},contentTitle:function(){return i},default:function(){return u},frontMatter:function(){return l},metadata:function(){return a},toc:function(){return c}});var t=r(83117),o=(r(67294),r(3905));const l={title:"695. Max Area of Island",sidebar_label:"695. Max Area of Island",tags:["Leetcode Medium","DFS","BFS"]},i=void 0,a={unversionedId:"leetcode/501-1000/max_area_of_islands",id:"leetcode/501-1000/max_area_of_islands",title:"695. Max Area of Island",description:"https://leetcode.com/problems/max-area-of-island/",source:"@site/docs/leetcode/501-1000/695_max_area_of_islands.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/max_area_of_islands",permalink:"/docs/leetcode/501-1000/max_area_of_islands",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/695_max_area_of_islands.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"DFS",permalink:"/docs/tags/dfs"},{label:"BFS",permalink:"/docs/tags/bfs"}],version:"current",sidebarPosition:695,frontMatter:{title:"695. Max Area of Island",sidebar_label:"695. Max Area of Island",tags:["Leetcode Medium","DFS","BFS"]},sidebar:"docSidebar",previous:{title:"692. Top K Frequent Words",permalink:"/docs/leetcode/501-1000/top_k_frequent_words"},next:{title:"696. Count Binary Substrings",permalink:"/docs/leetcode/501-1000/count_binary_substrings"}},s={},c=[{value:"Python",id:"python",level:2},{value:"DFS",id:"dfs",level:3},{value:"BFS",id:"bfs",level:3}],f={toc:c};function u(e){let{components:n,...r}=e;return(0,o.kt)("wrapper",(0,t.Z)({},f,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/max-area-of-island/"},"https://leetcode.com/problems/max-area-of-island/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"dfs"},"DFS"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def __init__(self):\n        self.grid = []\n        self.seem = set()\n        self.row_limit = 0\n        self.col_limit = 0\n\n    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:\n        self.grid = grid\n        self.seem = set()\n        self.row_limit = len(grid)\n        self.col_limit = len(grid[0])\n\n        maximum = 0\n        for row in range(self.row_limit):\n            for col in range(self.col_limit):\n                if (row, col) in self.seem:\n                    continue\n                maximum = max(maximum, self._dfs(row, col))\n        return maximum\n\n    def _dfs(self, row, col):\n        if (row, col) in self.seem:\n            return 0\n\n        area = 0\n        if self.grid[row][col] == 1:\n            area += 1\n            self.seem.add((row, col))\n            if row - 1 >= 0:\n                area += self._dfs(row-1, col)\n            if row + 1 < self.row_limit:\n                area += self._dfs(row+1, col)\n            if col - 1 >= 0:\n                area += self._dfs(row, col-1)\n            if col + 1 < self.col_limit:\n                area += self._dfs(row, col+1)\n\n        return area\n")),(0,o.kt)("h3",{id:"bfs"},"BFS"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from collections import deque\n\n\nclass Solution:\n    def __init__(self):\n        self.grid = []\n        self.seem = set()\n        self.row_limit = 0\n        self.col_limit = 0\n\n    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:\n        self.grid = grid\n        self.seem = set()\n        self.row_limit = len(grid)\n        self.col_limit = len(grid[0])\n\n        maximum = 0\n        for row in range(self.row_limit):\n            for col in range(self.col_limit):\n                if (row, col) in self.seem:\n                    continue\n                maximum = max(maximum, self._bfs(row, col))\n        return maximum\n\n    def _bfs(self, start_row, start_col):\n        if (start_row, start_col) in self.seem:\n            return 0\n\n        area = 0\n        queue = deque([(start_row, start_col)])\n\n        while queue:\n            row, col = queue.popleft()\n            if (row, col) in self.seem:\n                continue\n\n            if self.grid[row][col] == 1:\n                area += 1\n                self.seem.add((row, col))\n\n                if row - 1 >= 0:\n                    queue.append((row-1, col))\n                if row + 1 < self.row_limit:\n                    queue.append((row+1, col))\n                if col - 1 >= 0:\n                    queue.append((row, col-1))\n                if col + 1 < self.col_limit:\n                    queue.append((row, col+1))\n\n        return area\n")))}u.isMDXComponent=!0}}]);