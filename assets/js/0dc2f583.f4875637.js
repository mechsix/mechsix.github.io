"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[26004],{3905:function(t,e,n){n.d(e,{Zo:function(){return c},kt:function(){return g}});var r=n(67294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},l=Object.keys(t);for(r=0;r<l.length;r++)n=l[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(r=0;r<l.length;r++)n=l[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var u=r.createContext({}),s=function(t){var e=r.useContext(u),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},c=function(t){var e=s(t.components);return r.createElement(u.Provider,{value:e},t.children)},p="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,l=t.originalType,u=t.parentName,c=o(t,["components","mdxType","originalType","parentName"]),p=s(n),d=a,g=p["".concat(u,".").concat(d)]||p[d]||m[d]||l;return n?r.createElement(g,i(i({ref:e},c),{},{components:n})):r.createElement(g,i({ref:e},c))}));function g(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var l=n.length,i=new Array(l);i[0]=d;var o={};for(var u in e)hasOwnProperty.call(e,u)&&(o[u]=e[u]);o.originalType=t,o[p]="string"==typeof t?t:a,i[1]=o;for(var s=2;s<l;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},39080:function(t,e,n){n.r(e),n.d(e,{assets:function(){return u},contentTitle:function(){return i},default:function(){return p},frontMatter:function(){return l},metadata:function(){return o},toc:function(){return s}});var r=n(83117),a=(n(67294),n(3905));const l={title:"696. Count Binary Substrings",sidebar_label:"696. Count Binary Substrings",tags:["Leetcode Easy","Two Pointer"]},i=void 0,o={unversionedId:"leetcode/501-1000/count_binary_substrings",id:"leetcode/501-1000/count_binary_substrings",title:"696. Count Binary Substrings",description:"https://leetcode.com/problems/count-binary-substrings/",source:"@site/docs/leetcode/501-1000/696_count_binary_substrings.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/count_binary_substrings",permalink:"/docs/leetcode/501-1000/count_binary_substrings",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/696_count_binary_substrings.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Two Pointer",permalink:"/docs/tags/two-pointer"}],version:"current",sidebarPosition:696,frontMatter:{title:"696. Count Binary Substrings",sidebar_label:"696. Count Binary Substrings",tags:["Leetcode Easy","Two Pointer"]},sidebar:"docSidebar",previous:{title:"695. Max Area of Island",permalink:"/docs/leetcode/501-1000/max_area_of_islands"},next:{title:"700. Search in a Binary Search Tree",permalink:"/docs/leetcode/501-1000/search_bst"}},u={},s=[{value:"Python",id:"python",level:2},{value:"Two Pointer",id:"two-pointer",level:3},{value:"JS",id:"js",level:2}],c={toc:s};function p(t){let{components:e,...n}=t;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/count-binary-substrings/"},"https://leetcode.com/problems/count-binary-substrings/")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("h3",{id:"two-pointer"},"Two Pointer"),(0,a.kt)("p",null,"\u5217\u8868\u5982\u4e0b"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"String"),(0,a.kt)("th",{parentName:"tr",align:null},"Group Count"),(0,a.kt)("th",{parentName:"tr",align:null},"Groups"),(0,a.kt)("th",{parentName:"tr",align:null},"Details"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"0011"),(0,a.kt)("td",{parentName:"tr",align:null},"2"),(0,a.kt)("td",{parentName:"tr",align:null},"01, 0011"),(0,a.kt)("td",{parentName:"tr",align:null},"1\u500bgroup\uff0cmin(0,1) = 2")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"00011"),(0,a.kt)("td",{parentName:"tr",align:null},"2"),(0,a.kt)("td",{parentName:"tr",align:null},"01, 0011"),(0,a.kt)("td",{parentName:"tr",align:null},"1\u500bgroup\uff0cmin(0,1) = 2")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"10101"),(0,a.kt)("td",{parentName:"tr",align:null},"4"),(0,a.kt)("td",{parentName:"tr",align:null},"10, 01, 10, 01"),(0,a.kt)("td",{parentName:"tr",align:null},"4\u500bgroup\uff0cmin(0,1)\u5404\u5225\u70ba1")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"000111"),(0,a.kt)("td",{parentName:"tr",align:null},"3"),(0,a.kt)("td",{parentName:"tr",align:null},"000111, 0011, 01"),(0,a.kt)("td",{parentName:"tr",align:null},"1\u500bgroup\uff0cmin(0,1) = 3")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"00011100111"),(0,a.kt)("td",{parentName:"tr",align:null},"7"),(0,a.kt)("td",{parentName:"tr",align:null},"000111, 0011, 01, 1100, 10, 0011, 01"),(0,a.kt)("td",{parentName:"tr",align:null},"3\u500bgroup\uff0cmin(0,1)\u5404\u70ba3, 2, 2")))),(0,a.kt)("p",null,"\u6b78\u7d0d\u5f8c\u6703\u767c\u73fe\uff0c\u4ee5\u9023\u7e8c\u76840\u8ddf1\u7d44\u6210\u7684group\uff0c\u53d6\u5176\u4e2d\u5404group\u5c0f\u7684\u6578\u5b57\u52a0\u7e3d\u70ba\u7b54\u6848"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def countBinarySubstrings(self, s: str) -> int:\n        left, right = 0, 1\n        count = 0\n\n        for i in range(1, len(s)):\n            if s[i] != s[i-1]:\n                count += min(left, right)\n                left = right\n                right = 1\n            else:\n                right += 1\n\n        count += min(left, right)\n        return count\n")),(0,a.kt)("h2",{id:"js"},"JS"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"}," var countBinarySubstrings = function(s) {\n   let curr = 1;\n   let prev = 0;\n   let sum = 0;\n\n   for (let i = 1; i < s.length; i++) {\n     if (s[i] === s[i - 1]) curr++;\n     else {       \n       sum += Math.min(curr, prev);\n       prev = curr;\n       curr = 1;\n     }\n   }\n   return sum + Math.min(curr, prev)\n};\n")))}p.isMDXComponent=!0}}]);