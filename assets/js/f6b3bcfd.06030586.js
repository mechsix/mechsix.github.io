"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[54793],{52858:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var i=t(74848),s=t(28453);const o={title:"647. Palindromic Substrings",sidebar_label:"647. Palindromic Substrings",tags:["Leetcode Medium","DP","TODO"]},r=void 0,a={id:"leetcode/501-1000/palindromic_substrings",title:"647. Palindromic Substrings",description:"https://leetcode.com/problems/palindromic-substrings/",source:"@site/docs/leetcode/501-1000/647_palindromic_substrings.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/palindromic_substrings",permalink:"/docs/leetcode/501-1000/palindromic_substrings",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"DP",permalink:"/docs/tags/dp"},{label:"TODO",permalink:"/docs/tags/todo"}],version:"current",sidebarPosition:647,frontMatter:{title:"647. Palindromic Substrings",sidebar_label:"647. Palindromic Substrings",tags:["Leetcode Medium","DP","TODO"]},sidebar:"docSidebar",previous:{title:"645. Set Mismatch",permalink:"/docs/leetcode/501-1000/set_mismatch"},next:{title:"652. Find Duplicate Subtrees",permalink:"/docs/leetcode/501-1000/find_duplicate_subtrees"}},c={},l=[{value:"Python",id:"python",level:2},{value:"Bottom-Up DP",id:"bottom-up-dp",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/palindromic-substrings/",children:"https://leetcode.com/problems/palindromic-substrings/"})}),"\n",(0,i.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,i.jsx)(n.h3,{id:"bottom-up-dp",children:"Bottom-Up DP"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def countSubstrings(self, s: str) -> int:\n        n = len(s)\n\n\n        dp = [[0]*n for _ in range(n)]\n        result = 0\n\n        # Initial of DP matrix, with diagonal has value 1\n        # Since every single character is a palindromic substring\n        #  a a a\n        #a 1 0 0\n        #a 0 1 0\n        #a 0 0 1\n        for i in range(n):\n            dp[i][i] = 1\n            result += 1\n\n        # If the neighbor char is the same to self,\n        # the pair of neighbor is a palindromic substring\n        for i in range(n-1):\n            if s[i] == s[i+1]:\n                dp[i][i+1] = 1\n                result += 1\n\n        for length in range(3, n+1):\n            for i in range(n-length+1):\n                j = i+length-1\n                if dp[i+1][j-1] and s[i] == s[j]:\n                    dp[i][j] = 1\n                    result += 1\n\n        return result\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(96540);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);