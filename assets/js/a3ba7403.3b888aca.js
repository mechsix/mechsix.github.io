"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[67805],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>f});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},c=Object.keys(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),p=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},l=function(e){var t=p(e.components);return n.createElement(i.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,c=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(r),m=a,f=u["".concat(i,".").concat(m)]||u[m]||d[m]||c;return r?n.createElement(f,o(o({ref:t},l),{},{components:r})):n.createElement(f,o({ref:t},l))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=r.length,o=new Array(c);o[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<c;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},2094:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>d,frontMatter:()=>c,metadata:()=>s,toc:()=>p});var n=r(87462),a=(r(67294),r(3905));const c={title:"844. Backspace String Compare",sidebar_label:"844. Backspace String Compare",tags:["Leetcode Easy","Stack","Go"]},o=void 0,s={unversionedId:"leetcode/501-1000/backspacce_string_compare",id:"leetcode/501-1000/backspacce_string_compare",title:"844. Backspace String Compare",description:"https://leetcode.com/problems/backspace-string-compare/",source:"@site/docs/leetcode/501-1000/844_backspacce_string_compare.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/backspacce_string_compare",permalink:"/docs/leetcode/501-1000/backspacce_string_compare",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/844_backspacce_string_compare.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Stack",permalink:"/docs/tags/stack"},{label:"Go",permalink:"/docs/tags/go"}],version:"current",sidebarPosition:844,frontMatter:{title:"844. Backspace String Compare",sidebar_label:"844. Backspace String Compare",tags:["Leetcode Easy","Stack","Go"]},sidebar:"docSidebar",previous:{title:"841. Keys and Rooms",permalink:"/docs/leetcode/501-1000/keys_and_rooms"},next:{title:"852. Peak Index in a Mountain Array",permalink:"/docs/leetcode/501-1000/peak_index_in_a_mountain_array"}},i={},p=[{value:"Python",id:"python",level:2},{value:"Go",id:"go",level:2}],l={toc:p},u="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/backspace-string-compare/"},"https://leetcode.com/problems/backspace-string-compare/")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def backspaceCompare(self, s: str, t: str) -> bool:\n        return self.convert(s) == self.convert(t)\n\n    @staticmethod\n    def convert(s: str):\n        stack = []\n        for char in s:\n            if char == '#':\n                if stack:\n                    stack.pop()\n                continue\n            stack.append(char)\n\n        return ''.join(stack)\n")),(0,a.kt)("h2",{id:"go"},"Go"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func backspaceCompare(s string, t string) bool {\n    return convert(s) == convert(t)\n}\n\nfunc convert(s string) string {\n    stack := []byte{}\n    for i := range s {\n        if s[i] == '#' {\n            if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n            }\n        } else {\n            stack = append(stack, s[i])\n        }\n    }\n    return string(stack)\n}\n")))}d.isMDXComponent=!0}}]);