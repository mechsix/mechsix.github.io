"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[4073],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return f}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var a=r.createContext({}),u=function(e){var t=r.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(a.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=u(n),f=o,p=m["".concat(a,".").concat(f)]||m[f]||s[f]||i;return n?r.createElement(p,c(c({ref:t},d),{},{components:n})):r.createElement(p,c({ref:t},d))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,c=new Array(i);c[0]=m;var l={};for(var a in t)hasOwnProperty.call(t,a)&&(l[a]=t[a]);l.originalType=e,l.mdxType="string"==typeof e?e:o,c[1]=l;for(var u=2;u<i;u++)c[u]=n[u];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},41842:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return a},metadata:function(){return u},toc:function(){return d},default:function(){return m}});var r=n(87462),o=n(63366),i=(n(67294),n(3905)),c=["components"],l={title:"19. Remove Nth Node From End of List",sidebar_label:"19. Remove Nth Node From End of List",tags:["Linked List","Leetcode Medium"]},a=void 0,u={unversionedId:"leetcode/1-500/remove_nth_from_eof_linked_list",id:"leetcode/1-500/remove_nth_from_eof_linked_list",title:"19. Remove Nth Node From End of List",description:"Python",source:"@site/docs/leetcode/1-500/19_remove_nth_from_eof_linked_list.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/remove_nth_from_eof_linked_list",permalink:"/docs/leetcode/1-500/remove_nth_from_eof_linked_list",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/19_remove_nth_from_eof_linked_list.md",tags:[{label:"Linked List",permalink:"/docs/tags/linked-list"},{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"}],version:"current",sidebarPosition:19,frontMatter:{title:"19. Remove Nth Node From End of List",sidebar_label:"19. Remove Nth Node From End of List",tags:["Linked List","Leetcode Medium"]},sidebar:"docSidebar",previous:{title:"15. 3Sum",permalink:"/docs/leetcode/1-500/three_sum"},next:{title:"20. Valid Parentheses",permalink:"/docs/leetcode/1-500/valid_parentheses"}},d=[{value:"Python",id:"python",children:[],level:2}],s={toc:d};function m(e){var t=e.components,n=(0,o.Z)(e,c);return(0,i.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:\n        dummy = ListNode(val=-1, next=head)\n        cur_1 = dummy\n        cur_2 = dummy\n\n        for i in range(0, n+1):\n            cur_1 = cur_1.next\n\n        while cur_1 is not None:\n            cur_1 = cur_1.next\n            cur_2 = cur_2.next\n\n        cur_2.next = cur_2.next.next\n        return dummy.next\n")))}m.isMDXComponent=!0}}]);