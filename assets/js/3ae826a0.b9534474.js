"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[3671],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),u=d(n),m=o,h=u["".concat(l,".").concat(m)]||u[m]||p[m]||i;return n?r.createElement(h,s(s({ref:t},c),{},{components:n})):r.createElement(h,s({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,s=new Array(i);s[0]=u;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType="string"==typeof e?e:o,s[1]=a;for(var d=2;d<i;d++)s[d]=n[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},71619:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return a},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return c},default:function(){return u}});var r=n(87462),o=n(63366),i=(n(67294),n(3905)),s=["components"],a={title:"23. Merge k Sorted Lists",sidebar_label:"23. Merge k Sorted Lists",tags:["Linked List","Leetcode Hard","Heap"]},l=void 0,d={unversionedId:"leetcode/1-500/merge_k_sorted_lists",id:"leetcode/1-500/merge_k_sorted_lists",title:"23. Merge k Sorted Lists",description:"https://leetcode.com/problems/merge-k-sorted-lists/",source:"@site/docs/leetcode/1-500/23_merge_k_sorted_lists.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/merge_k_sorted_lists",permalink:"/docs/leetcode/1-500/merge_k_sorted_lists",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/23_merge_k_sorted_lists.md",tags:[{label:"Linked List",permalink:"/docs/tags/linked-list"},{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"Heap",permalink:"/docs/tags/heap"}],version:"current",sidebarPosition:23,frontMatter:{title:"23. Merge k Sorted Lists",sidebar_label:"23. Merge k Sorted Lists",tags:["Linked List","Leetcode Hard","Heap"]},sidebar:"docSidebar",previous:{title:"21. Merge Two Sorted Lists",permalink:"/docs/leetcode/1-500/merge_sorted_list"},next:{title:"24. Swap Nodes in Pairs",permalink:"/docs/leetcode/1-500/swap_nodes_in_pairs"}},c=[{value:"Python",id:"python",children:[{value:"Heap Sort",id:"heap-sort",children:[],level:3},{value:"Forces Bust (Timeout)",id:"forces-bust-timeout",children:[],level:3}],level:2}],p={toc:c};function u(e){var t=e.components,n=(0,o.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/merge-k-sorted-lists/"},"https://leetcode.com/problems/merge-k-sorted-lists/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"heap-sort"},"Heap Sort"),(0,i.kt)("p",null,"Use the built-in ",(0,i.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/heapq.html"},"heapq")," data structure"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Time: O(n)"),(0,i.kt)("li",{parentName:"ul"},"Space: O(n)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from heapq import heappush, heappop\n\n\nclass Solution:\n    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n        heap = []\n        for head in lists:\n            node = head\n            while node:\n                heappush(heap, node.val)\n                node = node.next\n\n        head = ListNode()\n        node = head\n        while heap:\n            node.next = ListNode(val=heappop(heap))\n            node = node.next\n\n        return head.next\n")),(0,i.kt)("h3",{id:"forces-bust-timeout"},"Forces Bust (Timeout)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n        head = ListNode()\n        cur = head\n\n        while any(lists):\n            min_val = 10 ** 4\n            min_index = None\n\n            for index, head_node in enumerate(lists):\n                if head_node is None:\n                    continue\n\n                if head_node.val < min_val:\n                    min_index = index\n                    min_val = head_node.val\n\n            cur.next = ListNode(val=min_val)\n            cur = cur.next\n            lists[min_index] = lists[min_index].next\n\n        return head.next\n")))}u.isMDXComponent=!0}}]);