"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[37440],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>f});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),m=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},s=function(e){var t=m(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=m(r),d=o,f=u["".concat(c,".").concat(d)]||u[d]||p[d]||a;return r?n.createElement(f,l(l({ref:t},s),{},{components:r})):n.createElement(f,l({ref:t},s))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:o,l[1]=i;for(var m=2;m<a;m++)l[m]=r[m];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},87804:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>m});var n=r(87462),o=(r(67294),r(3905));const a={title:"1161. Maximum Level Sum of a Binary Tree",sidebar_label:"1161. Maximum Level Sum of a Binary Tree",tags:["Leetcode Medium","Binary Tree"]},l=void 0,i={unversionedId:"leetcode/1001-1500/max_level_sum_of_binary_tree",id:"leetcode/1001-1500/max_level_sum_of_binary_tree",title:"1161. Maximum Level Sum of a Binary Tree",description:"https://leetcode.com/problems/maximum-level-sum-of-a-binary-tree",source:"@site/docs/leetcode/1001-1500/1161_max_level_sum_of_binary_tree.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/max_level_sum_of_binary_tree",permalink:"/docs/leetcode/1001-1500/max_level_sum_of_binary_tree",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1161_max_level_sum_of_binary_tree.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"}],version:"current",sidebarPosition:1161,frontMatter:{title:"1161. Maximum Level Sum of a Binary Tree",sidebar_label:"1161. Maximum Level Sum of a Binary Tree",tags:["Leetcode Medium","Binary Tree"]},sidebar:"docSidebar",previous:{title:"1155. Number of Dice Rolls With Target Sum",permalink:"/docs/leetcode/1001-1500/num_of_rolls_with_target_sum"},next:{title:"1167. Minimum Cost to Connect Sticks",permalink:"/docs/leetcode/1001-1500/min_cost_to_connect_sticks"}},c={},m=[{value:"Python",id:"python",level:2}],s={toc:m},u="wrapper";function p(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/maximum-level-sum-of-a-binary-tree"},"https://leetcode.com/problems/maximum-level-sum-of-a-binary-tree")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from collections import defaultdict\n\n\nclass Solution:\n    def maxLevelSum(self, root: Optional[TreeNode]) -> int:\n        mapper = defaultdict(int)\n\n        def dfs(node, level):\n            if not node:\n                return\n            \n            mapper[level] += node.val\n\n            dfs(node.left, level+1)\n            dfs(node.right, level+1)\n        \n        dfs(root, 1)\n\n        reverse_map = defaultdict(list)\n        for key, value in mapper.items():\n            reverse_map[value].append(key)\n        \n        return min(reverse_map[max(mapper.values())])\n")))}p.isMDXComponent=!0}}]);