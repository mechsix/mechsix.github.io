"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[15255],{3905:function(e,r,t){t.d(r,{Zo:function(){return u},kt:function(){return y}});var n=t(67294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function c(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=n.createContext({}),s=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):c(c({},r),e)),t},u=function(e){var r=s(e.components);return n.createElement(l.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},p=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=s(t),y=o,f=p["".concat(l,".").concat(y)]||p[y]||d[y]||a;return t?n.createElement(f,c(c({ref:r},u),{},{components:t})):n.createElement(f,c({ref:r},u))}));function y(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,c=new Array(a);c[0]=p;var i={};for(var l in r)hasOwnProperty.call(r,l)&&(i[l]=r[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var s=2;s<a;s++)c[s]=t[s];return n.createElement.apply(null,c)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},57195:function(e,r,t){t.r(r),t.d(r,{contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return u}});var n=t(87462),o=t(63366),a=(t(67294),t(3905)),c=["components"],i={title:"108. Convert Sorted Array to Binary Search Tree",slidebar_label:"108. Convert Sorted Array to Binary Search Tree",tags:["Leetcode Easy","Binary Tree","BST"]},l=void 0,s={unversionedId:"leetcode/1-500/convert_sorted_array_to_bst",id:"leetcode/1-500/convert_sorted_array_to_bst",title:"108. Convert Sorted Array to Binary Search Tree",description:"https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/",source:"@site/docs/leetcode/1-500/108_convert_sorted_array_to_bst.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/convert_sorted_array_to_bst",permalink:"/docs/leetcode/1-500/convert_sorted_array_to_bst",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/108_convert_sorted_array_to_bst.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"},{label:"BST",permalink:"/docs/tags/bst"}],version:"current",sidebarPosition:108,frontMatter:{title:"108. Convert Sorted Array to Binary Search Tree",slidebar_label:"108. Convert Sorted Array to Binary Search Tree",tags:["Leetcode Easy","Binary Tree","BST"]},sidebar:"docSidebar",previous:{title:"106. Construct Binary Tree from Inorder and Postorder Traversal",permalink:"/docs/leetcode/1-500/construct_bin_tree_from_inorder_postorder_traversal"},next:{title:"110. Balanced Binary Tree",permalink:"/docs/leetcode/1-500/balanced_binary_tree"}},u=[{value:"Python",id:"python",children:[],level:2}],d={toc:u};function p(e){var r=e.components,t=(0,o.Z)(e,c);return(0,a.kt)("wrapper",(0,n.Z)({},d,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/"},"https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\n        return self._build(nums, 0, len(nums)-1)\n\n    def _build(self, nums, left, right):\n        if left > right:\n            return\n\n        pivot = (left + right) // 2\n\n        return TreeNode(\n            val=nums[pivot],\n            left=self._build(nums, left, pivot-1),\n            right=self._build(nums, pivot+1, right)\n        )\n")))}p.isMDXComponent=!0}}]);