"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[8880],{3905:function(e,n,r){r.d(n,{Zo:function(){return u},kt:function(){return y}});var t=r(67294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function c(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var a=t.createContext({}),s=function(e){var n=t.useContext(a),r=n;return e&&(r="function"==typeof e?e(n):c(c({},n),e)),r},u=function(e){var n=s(e.components);return t.createElement(a.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},f=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(r),f=o,y=d["".concat(a,".").concat(f)]||d[f]||p[f]||i;return r?t.createElement(y,c(c({ref:n},u),{},{components:r})):t.createElement(y,c({ref:n},u))}));function y(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=r.length,c=new Array(i);c[0]=f;var l={};for(var a in n)hasOwnProperty.call(n,a)&&(l[a]=n[a]);l.originalType=e,l[d]="string"==typeof e?e:o,c[1]=l;for(var s=2;s<i;s++)c[s]=r[s];return t.createElement.apply(null,c)}return t.createElement.apply(null,r)}f.displayName="MDXCreateElement"},56019:function(e,n,r){r.r(n),r.d(n,{assets:function(){return a},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return s}});var t=r(83117),o=(r(67294),r(3905));const i={title:"1114. Print in Order",sidebar_label:"1114. Print in Order",tags:["Leetcode Easy","Concurrency"]},c=void 0,l={unversionedId:"leetcode/1001-1500/print_in_order",id:"leetcode/1001-1500/print_in_order",title:"1114. Print in Order",description:"Python",source:"@site/docs/leetcode/1001-1500/1114_print_in_order.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/print_in_order",permalink:"/docs/leetcode/1001-1500/print_in_order",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1114_print_in_order.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Concurrency",permalink:"/docs/tags/concurrency"}],version:"current",sidebarPosition:1114,frontMatter:{title:"1114. Print in Order",sidebar_label:"1114. Print in Order",tags:["Leetcode Easy","Concurrency"]},sidebar:"docSidebar",previous:{title:"1094. Car Pooling",permalink:"/docs/leetcode/1001-1500/car_pooling"},next:{title:"1137. N-th Tribonacci Number",permalink:"/docs/leetcode/1001-1500/nth_tribonacci"}},a={},s=[{value:"Python",id:"python",level:2},{value:"Pair Sync",id:"pair-sync",level:3}],u={toc:s};function d(e){let{components:n,...r}=e;return(0,o.kt)("wrapper",(0,t.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"pair-sync"},"Pair Sync"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from threading import Lock\n\nclass Foo:\n    def __init__(self):\n        self.first_lock = Lock()\n        self.second_lock = Lock()\n        self.first_lock.acquire()\n        self.second_lock.acquire()\n\n\n    def first(self, printFirst: 'Callable[[], None]') -> None:\n\n        # printFirst() outputs \"first\". Do not change or remove this line.\n\n        printFirst()\n        self.first_lock.release()\n\n\n    def second(self, printSecond: 'Callable[[], None]') -> None:\n\n        # printSecond() outputs \"second\". Do not change or remove this line.\n        with self.first_lock:\n            printSecond()\n            self.second_lock.release()\n\n\n    def third(self, printThird: 'Callable[[], None]') -> None:\n\n        # printThird() outputs \"third\". Do not change or remove this line.\n        with self.second_lock:\n            printThird()\n")))}d.isMDXComponent=!0}}]);