"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[18371],{3905:function(e,r,t){t.d(r,{Zo:function(){return u},kt:function(){return m}});var n=t(67294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function d(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=n.createContext({}),s=function(e){var r=n.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):d(d({},r),e)),t},u=function(e){var r=s(e.components);return n.createElement(i.Provider,{value:r},e.children)},l="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),l=s(t),f=a,m=l["".concat(i,".").concat(f)]||l[f]||p[f]||o;return t?n.createElement(m,d(d({ref:r},u),{},{components:t})):n.createElement(m,d({ref:r},u))}));function m(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,d=new Array(o);d[0]=f;var c={};for(var i in r)hasOwnProperty.call(r,i)&&(c[i]=r[i]);c.originalType=e,c[l]="string"==typeof e?e:a,d[1]=c;for(var s=2;s<o;s++)d[s]=t[s];return n.createElement.apply(null,d)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},49740:function(e,r,t){t.r(r),t.d(r,{assets:function(){return i},contentTitle:function(){return d},default:function(){return l},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return s}});var n=t(83117),a=(t(67294),t(3905));const o={title:"211. Design Add and Search Words Data Structure",sidebar_label:"211. Design Add and Search Words Data Structure",tags:["Leetcode Medium","Trie","DFS"]},d=void 0,c={unversionedId:"leetcode/1-500/design_add_and_search_words_data_structure",id:"leetcode/1-500/design_add_and_search_words_data_structure",title:"211. Design Add and Search Words Data Structure",description:"https://leetcode.com/problems/design-add-and-search-words-data-structure/",source:"@site/docs/leetcode/1-500/211_design_add_and_search_words_data_structure.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/design_add_and_search_words_data_structure",permalink:"/docs/leetcode/1-500/design_add_and_search_words_data_structure",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/211_design_add_and_search_words_data_structure.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Trie",permalink:"/docs/tags/trie"},{label:"DFS",permalink:"/docs/tags/dfs"}],version:"current",sidebarPosition:211,frontMatter:{title:"211. Design Add and Search Words Data Structure",sidebar_label:"211. Design Add and Search Words Data Structure",tags:["Leetcode Medium","Trie","DFS"]},sidebar:"docSidebar",previous:{title:"209. Minimum Size Subarray Sum",permalink:"/docs/leetcode/1-500/min_size_subarray_sum"},next:{title:"212. Word Search II",permalink:"/docs/leetcode/1-500/word_search_ii"}},i={},s=[{value:"Python",id:"python",level:2},{value:"Trie Tree Mapper",id:"trie-tree-mapper",level:3}],u={toc:s};function l(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/design-add-and-search-words-data-structure/"},"https://leetcode.com/problems/design-add-and-search-words-data-structure/")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("h3",{id:"trie-tree-mapper"},"Trie Tree Mapper"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from functools import cache\n\n\nclass WordDictionary:\n    def __init__(self):\n        self.memory = {}\n\n    def addWord(self, word: str) -> None:\n        cur = self.memory\n        for letter in word:\n            cur = cur.setdefault(letter, dict())\n        cur['#'] = True\n\n    def search(self, word: str) -> bool:\n        def dfs(cur, i: int) -> bool:\n            if i >= len(word):\n                return '#' in cur if cur else False\n\n            letter = word[i]\n\n            if letter in cur:\n                return dfs(cur[letter], i+1)\n\n            if letter == '.':\n                return any([dfs(child, i+1) for key, child in cur.items() if key != '#'])\n\n            return False\n\n        return dfs(self.memory, 0)\n")))}l.isMDXComponent=!0}}]);