"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[78010],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=i.createContext({}),a=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=a(e.components);return i.createElement(c.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=a(n),p=r,f=m["".concat(c,".").concat(p)]||m[p]||d[p]||o;return n?i.createElement(f,s(s({ref:t},u),{},{components:n})):i.createElement(f,s({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=p;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[m]="string"==typeof e?e:r,s[1]=l;for(var a=2;a<o;a++)s[a]=n[a];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},24466:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>a});var i=n(87462),r=(n(67294),n(3905));const o={title:"1004. Max Consecutive Ones III",sidebar_label:"1004. Max Consecutive Ones III",tags:["Leetcode Medium","Sliding Window","Prefix Sum"]},s=void 0,l={unversionedId:"leetcode/1001-1500/max_consecutive_ones_iii",id:"leetcode/1001-1500/max_consecutive_ones_iii",title:"1004. Max Consecutive Ones III",description:"https://leetcode.com/problems/max-consecutive-ones-iii/",source:"@site/docs/leetcode/1001-1500/1004_max_consecutive_ones_iii.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/max_consecutive_ones_iii",permalink:"/docs/leetcode/1001-1500/max_consecutive_ones_iii",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1004_max_consecutive_ones_iii.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Sliding Window",permalink:"/docs/tags/sliding-window"},{label:"Prefix Sum",permalink:"/docs/tags/prefix-sum"}],version:"current",sidebarPosition:1004,frontMatter:{title:"1004. Max Consecutive Ones III",sidebar_label:"1004. Max Consecutive Ones III",tags:["Leetcode Medium","Sliding Window","Prefix Sum"]},sidebar:"docSidebar",previous:{title:"923. 3Sum With Multiplicity",permalink:"/docs/leetcode/501-1000/923_3sum_with_multiplicity"},next:{title:"1009. Complement of Base 10 Integer",permalink:"/docs/leetcode/1001-1500/complement_base_10_int"}},c={},a=[{value:"Python",id:"python",level:2},{value:"Sliding Window",id:"sliding-window",level:3},{value:"Prefix Sum",id:"prefix-sum",level:3}],u={toc:a},m="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/max-consecutive-ones-iii/"},"https://leetcode.com/problems/max-consecutive-ones-iii/")),(0,r.kt)("h2",{id:"python"},"Python"),(0,r.kt)("h3",{id:"sliding-window"},"Sliding Window"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def longestOnes(self, nums: List[int], k: int) -> int:\n        left, right = 0, 0\n        while right < len(nums):\n            k -= 1 - nums[right]\n            if k < 0:\n                k += 1 - nums[left]\n                left += 1\n            right += 1\n\n        return right - left\n")),(0,r.kt)("h3",{id:"prefix-sum"},"Prefix Sum"),(0,r.kt)("p",null,"Solution from ",(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/glfox/"},"glfox")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def longestOnes(self, nums: List[int], k: int) -> int:\n        if not nums:\n            return 0\n\n        zero_idx = {i:-1 for i in range(-k, 1)}\n        ans, zeros = 0, 0\n        for i in range(len(nums)):\n            if nums[i] == 0:\n                zeros += 1\n                zero_idx[zeros] = i\n            ans = max(ans, i - zero_idx[zeros - k])\n\n        return ans\n")))}d.isMDXComponent=!0}}]);