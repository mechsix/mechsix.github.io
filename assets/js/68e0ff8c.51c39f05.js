"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[44818],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),u=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(i.Provider,{value:t},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(r),d=a,m=p["".concat(i,".").concat(d)]||p[d]||f[d]||o;return r?n.createElement(m,l(l({ref:t},c),{},{components:r})):n.createElement(m,l({ref:t},c))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[p]="string"==typeof e?e:a,l[1]=s;for(var u=2;u<o;u++)l[u]=r[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},71239:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>f,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var n=r(87462),a=(r(67294),r(3905));const o={title:"1470. Shuffle the Array",sidebar_label:"1470. Shuffle the Array",tags:["Leetcode Easy","Array","Go","Rust"]},l=void 0,s={unversionedId:"leetcode/1001-1500/shuffle_the_array",id:"leetcode/1001-1500/shuffle_the_array",title:"1470. Shuffle the Array",description:"https://leetcode.com/problems/shuffle-the-array/",source:"@site/docs/leetcode/1001-1500/1470_shuffle_the_array.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/shuffle_the_array",permalink:"/docs/leetcode/1001-1500/shuffle_the_array",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1470_shuffle_the_array.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Array",permalink:"/docs/tags/array"},{label:"Go",permalink:"/docs/tags/go"},{label:"Rust",permalink:"/docs/tags/rust"}],version:"current",sidebarPosition:1470,frontMatter:{title:"1470. Shuffle the Array",sidebar_label:"1470. Shuffle the Array",tags:["Leetcode Easy","Array","Go","Rust"]},sidebar:"docSidebar",previous:{title:"1465. Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts",permalink:"/docs/leetcode/1001-1500/max_area_of_piece_of_cake_after_h_w_cuts"},next:{title:"1473. Paint House III",permalink:"/docs/leetcode/1001-1500/paint_house_iii"}},i={},u=[{value:"Python",id:"python",level:2},{value:"Go",id:"go",level:2},{value:"Rust",id:"rust",level:2}],c={toc:u},p="wrapper";function f(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/shuffle-the-array/"},"https://leetcode.com/problems/shuffle-the-array/")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def shuffle(self, nums: List[int], n: int) -> List[int]:\n        result = []\n        for i in range(n):\n            result.append(nums[i])\n            result.append(nums[i+n])\n        return result\n")),(0,a.kt)("h2",{id:"go"},"Go"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func shuffle(nums []int, n int) []int {\n    var result []int\n    for i:= 0; i < n; i++ {\n        result = append(result, nums[i])\n        result = append(result, nums[i+n])\n    }\n\n    return result\n}\n")),(0,a.kt)("h2",{id:"rust"},"Rust"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"impl Solution {\n    pub fn shuffle(nums: Vec<i32>, n: i32) -> Vec<i32> {\n        let mut result: Vec<i32> = Vec::new();\n\n        for i in 0..n {\n            result.push(nums[i as usize]);\n            result.push(nums[(i+n) as usize]);\n        }\n\n        result\n    }\n}\n")))}f.isMDXComponent=!0}}]);