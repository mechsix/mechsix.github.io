"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[32853],{35516:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>f,frontMatter:()=>d,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"leetcode/501-1000/add_to_array_form_of_integer","title":"989. Add to Array-Form of Integer","description":"https://leetcode.com/problems/add-to-array-form-of-integer/","source":"@site/docs/leetcode/501-1000/989_add_to_array_form_of_integer.md","sourceDirName":"leetcode/501-1000","slug":"/leetcode/501-1000/add_to_array_form_of_integer","permalink":"/docs/leetcode/501-1000/add_to_array_form_of_integer","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Easy","permalink":"/docs/tags/leetcode-easy"},{"inline":true,"label":"Array","permalink":"/docs/tags/array"}],"version":"current","sidebarPosition":989,"frontMatter":{"title":"989. Add to Array-Form of Integer","sidebar_label":"989. Add to Array-Form of Integer","tags":["Leetcode Easy","Array"]},"sidebar":"docSidebar","previous":{"title":"987. Vertical Order Traversal of a Binary Tree","permalink":"/docs/leetcode/501-1000/vertical_order_traversal_of_a_binary_tree"},"next":{"title":"997. Find the Town Judge","permalink":"/docs/leetcode/501-1000/find_the_town_judge"}}');var n=r(74848),a=r(28453);const d={title:"989. Add to Array-Form of Integer",sidebar_label:"989. Add to Array-Form of Integer",tags:["Leetcode Easy","Array"]},s=void 0,i={},c=[{value:"Python",id:"python",level:2}];function l(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"https://leetcode.com/problems/add-to-array-form-of-integer/",children:"https://leetcode.com/problems/add-to-array-form-of-integer/"})}),"\n",(0,n.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"class Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        pow = 0\n        while num:\n            k += num.pop() * (10**pow)\n            pow += 1\n\n        return [int(char) for char in str(k)]\n"})})]})}function f(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>d,x:()=>s});var o=r(96540);const n={},a=o.createContext(n);function d(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:d(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);