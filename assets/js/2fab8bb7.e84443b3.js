"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[89289],{33883:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>i});var n=t(74848),d=t(28453);const s={title:"211. Design Add and Search Words Data Structure",sidebar_label:"211. Design Add and Search Words Data Structure",tags:["Leetcode Medium","Trie","DFS"]},a=void 0,o={id:"leetcode/1-500/design_add_and_search_words_data_structure",title:"211. Design Add and Search Words Data Structure",description:"https://leetcode.com/problems/design-add-and-search-words-data-structure/",source:"@site/docs/leetcode/1-500/211_design_add_and_search_words_data_structure.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/design_add_and_search_words_data_structure",permalink:"/docs/leetcode/1-500/design_add_and_search_words_data_structure",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Trie",permalink:"/docs/tags/trie"},{label:"DFS",permalink:"/docs/tags/dfs"}],version:"current",sidebarPosition:211,frontMatter:{title:"211. Design Add and Search Words Data Structure",sidebar_label:"211. Design Add and Search Words Data Structure",tags:["Leetcode Medium","Trie","DFS"]},sidebar:"docSidebar",previous:{title:"209. Minimum Size Subarray Sum",permalink:"/docs/leetcode/1-500/min_size_subarray_sum"},next:{title:"212. Word Search II",permalink:"/docs/leetcode/1-500/word_search_ii"}},c={},i=[{value:"Python",id:"python",level:2},{value:"Trie Tree Mapper",id:"trie-tree-mapper",level:3}];function l(e){const r={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.p,{children:(0,n.jsx)(r.a,{href:"https://leetcode.com/problems/design-add-and-search-words-data-structure/",children:"https://leetcode.com/problems/design-add-and-search-words-data-structure/"})}),"\n",(0,n.jsx)(r.h2,{id:"python",children:"Python"}),"\n",(0,n.jsx)(r.h3,{id:"trie-tree-mapper",children:"Trie Tree Mapper"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:"from functools import cache\n\n\nclass WordDictionary:\n    def __init__(self):\n        self.memory = {}\n\n    def addWord(self, word: str) -> None:\n        cur = self.memory\n        for letter in word:\n            cur = cur.setdefault(letter, dict())\n        cur['#'] = True\n\n    def search(self, word: str) -> bool:\n        def dfs(cur, i: int) -> bool:\n            if i >= len(word):\n                return '#' in cur if cur else False\n\n            letter = word[i]\n\n            if letter in cur:\n                return dfs(cur[letter], i+1)\n\n            if letter == '.':\n                return any([dfs(child, i+1) for key, child in cur.items() if key != '#'])\n\n            return False\n\n        return dfs(self.memory, 0)\n"})})]})}function u(e={}){const{wrapper:r}={...(0,d.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},28453:(e,r,t)=>{t.d(r,{R:()=>a,x:()=>o});var n=t(96540);const d={},s=n.createContext(d);function a(e){const r=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:a(e.components),n.createElement(s.Provider,{value:r},e.children)}}}]);