"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[49334],{80275:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>l,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"leetcode/501-1000/kth_largest_elm_in_stream","title":"703. Kth Largest Element in a Stream","description":"https://leetcode.com/problems/kth-largest-element-in-a-stream/","source":"@site/docs/leetcode/501-1000/703_kth_largest_elm_in_stream.md","sourceDirName":"leetcode/501-1000","slug":"/leetcode/501-1000/kth_largest_elm_in_stream","permalink":"/docs/leetcode/501-1000/kth_largest_elm_in_stream","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Medium","permalink":"/docs/tags/leetcode-medium"},{"inline":true,"label":"Heap","permalink":"/docs/tags/heap"}],"version":"current","sidebarPosition":703,"frontMatter":{"title":"703. Kth Largest Element in a Stream","sidebar_label":"703. Kth Largest Element in a Stream","tags":["Leetcode Medium","Heap"]},"sidebar":"docSidebar","previous":{"title":"701. Insert into a Binary Search Tree","permalink":"/docs/leetcode/501-1000/insert_bst_node"},"next":{"title":"704. Binary Search","permalink":"/docs/leetcode/501-1000/binary_search"}}');var s=n(74848),r=n(28453);const l={title:"703. Kth Largest Element in a Stream",sidebar_label:"703. Kth Largest Element in a Stream",tags:["Leetcode Medium","Heap"]},i=void 0,o={},c=[{value:"Python",id:"python",level:2}];function p(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://leetcode.com/problems/kth-largest-element-in-a-stream/",children:"https://leetcode.com/problems/kth-largest-element-in-a-stream/"})}),"\n",(0,s.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"import heapq\n\n\nclass KthLargest:\n\n    def __init__(self, k: int, nums: List[int]):\n        heap = nums[:]\n        heapq.heapify(heap)\n\n        for i in range(len(heap)-k):\n            heapq.heappop(heap)\n\n        self.heap = heap\n        self.k = k\n\n    def add(self, val: int) -> int:\n        heapq.heappush(self.heap, val)\n        if len(self.heap) > self.k:\n            heapq.heappop(self.heap)\n\n        return self.heap[0]\n"})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>i});var a=n(96540);const s={},r=a.createContext(s);function l(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);