"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[62902],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>f});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),u=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},d=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},s="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,l=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),s=u(r),m=o,f=s["".concat(c,".").concat(m)]||s[m]||p[m]||l;return r?n.createElement(f,a(a({ref:t},d),{},{components:r})):n.createElement(f,a({ref:t},d))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=r.length,a=new Array(l);a[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[s]="string"==typeof e?e:o,a[1]=i;for(var u=2;u<l;u++)a[u]=r[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},93393:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var n=r(87462),o=(r(67294),r(3905));const l={title:"36. Valid Sudoku",sidebar_label:"36. Valid Sudoku",tags:["Leetcode Medium","Matrix"]},a=void 0,i={unversionedId:"leetcode/1-500/valid_sudoku",id:"leetcode/1-500/valid_sudoku",title:"36. Valid Sudoku",description:"https://leetcode.com/problems/valid-sudoku",source:"@site/docs/leetcode/1-500/36_valid_sudoku.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/valid_sudoku",permalink:"/docs/leetcode/1-500/valid_sudoku",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/36_valid_sudoku.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Matrix",permalink:"/docs/tags/matrix"}],version:"current",sidebarPosition:36,frontMatter:{title:"36. Valid Sudoku",sidebar_label:"36. Valid Sudoku",tags:["Leetcode Medium","Matrix"]},sidebar:"docSidebar",previous:{title:"35. Search Insert Position",permalink:"/docs/leetcode/1-500/search_insert_pos"},next:{title:"39. Combination Sum",permalink:"/docs/leetcode/1-500/combinations_sum"}},c={},u=[{value:"Python",id:"python",level:2}],d={toc:u},s="wrapper";function p(e){let{components:t,...r}=e;return(0,o.kt)(s,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/valid-sudoku"},"https://leetcode.com/problems/valid-sudoku")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from collections import defaultdict\n\n\nclass Solution:\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\n        col_table = defaultdict(set)\n        row_table = defaultdict(set)\n        cell_table = defaultdict(set)\n\n        for row, row_values in enumerate(board):\n            for col, value in enumerate(row_values):\n                if value == '.':\n                    continue\n\n                cell_key = \"{}{}\".format(\n                    row//3,\n                    col//3\n                )\n\n                if value in col_table[col] or \\\n                   value in row_table[row] or \\\n                   value in cell_table[cell_key]:\n                    return False\n\n                col_table[col].add(value)\n                row_table[row].add(value)\n                cell_table[cell_key].add(value)\n\n        return True\n")))}p.isMDXComponent=!0}}]);