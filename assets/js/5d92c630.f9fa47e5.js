"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[1758],{3905:function(e,n,r){r.d(n,{Zo:function(){return s},kt:function(){return f}});var t=r(67294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function c(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=t.createContext({}),u=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):c(c({},n),e)),r},s=function(e){var n=u(e.components);return t.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=u(r),f=o,m=d["".concat(l,".").concat(f)]||d[f]||p[f]||a;return r?t.createElement(m,c(c({ref:n},s),{},{components:r})):t.createElement(m,c({ref:n},s))}));function f(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,c=new Array(a);c[0]=d;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var u=2;u<a;u++)c[u]=r[u];return t.createElement.apply(null,c)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},41901:function(e,n,r){r.r(n),r.d(n,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return s},default:function(){return d}});var t=r(87462),o=r(63366),a=(r(67294),r(3905)),c=["components"],i={title:"51. N-Queens",sidebar_label:"51. N-Queens",tags:["Leetcode Hard","Backtracking"]},l=void 0,u={unversionedId:"leetcode/1-500/n_queens",id:"leetcode/1-500/n_queens",title:"51. N-Queens",description:"https://leetcode.com/problems/n-queens/",source:"@site/docs/leetcode/1-500/51_n_queens.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/n_queens",permalink:"/docs/leetcode/1-500/n_queens",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/51_n_queens.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"Backtracking",permalink:"/docs/tags/backtracking"}],version:"current",sidebarPosition:51,frontMatter:{title:"51. N-Queens",sidebar_label:"51. N-Queens",tags:["Leetcode Hard","Backtracking"]},sidebar:"docSidebar",previous:{title:"49. Group Anagrams",permalink:"/docs/leetcode/1-500/group_anagrams"},next:{title:"53. Maximum Subarray",permalink:"/docs/leetcode/1-500/max_subarray"}},s=[{value:"Python",id:"python",children:[{value:"Backtracking",id:"backtracking",children:[],level:3}],level:2},{value:"Javascript",id:"javascript",children:[],level:2}],p={toc:s};function d(e){var n=e.components,r=(0,o.Z)(e,c);return(0,a.kt)("wrapper",(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/n-queens/"},"https://leetcode.com/problems/n-queens/")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("h3",{id:"backtracking"},"Backtracking"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from typing import List\n\n\nclass Solution:\n    def solveNQueens(self, n: int) -> List[List[str]]:\n        max_index = n-1\n        board = [['.']*n for i in range(n)]\n        result = []\n\n        def backtrack(row: int):\n            if row > max_index:\n                result.append([''.join(row) for row in board])\n                return\n\n            for col in range(n):\n                # print(\"Checking\", row, col)\n                if not self.is_valid(board, n, row, col):\n                    continue\n\n                board[row][col] = 'Q'\n                backtrack(row+1)\n                board[row][col] = '.'\n        backtrack(0)\n\n        return result\n\n    def is_valid(self, board, n, row, col):\n        tl_col, tr_col = min(col-1, n-1), max(col+1, 0)\n        for r in range(row-1, -1, -1):\n            # Check up\n            if board[r][col] == 'Q':\n                return False\n\n            # Check top right\n            if tr_col < n:\n                if board[r][tr_col] == 'Q':\n                    return False\n                tr_col += 1\n\n            # Check top left\n            if tl_col >= 0:\n                if board[r][tl_col] == 'Q':\n                    return False\n                tl_col -= 1\n        return True\n")),(0,a.kt)("h2",{id:"javascript"},"Javascript"))}d.isMDXComponent=!0}}]);