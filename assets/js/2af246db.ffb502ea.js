"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[92054],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var m=r.createContext({}),l=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=l(e.components);return r.createElement(m.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,m=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=l(n),f=i,d=u["".concat(m,".").concat(f)]||u[f]||p[f]||o;return n?r.createElement(d,a(a({ref:t},s),{},{components:n})):r.createElement(d,a({ref:t},s))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=f;var c={};for(var m in t)hasOwnProperty.call(t,m)&&(c[m]=t[m]);c.originalType=e,c[u]="string"==typeof e?e:i,a[1]=c;for(var l=2;l<o;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},18885:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var r=n(87462),i=(n(67294),n(3905));const o={title:"2141. Maximum Running Time of N Computers",sidebar_label:"2141. Maximum Running Time of N Computers",tags:["Leetcode Hard","Binary Search","Go"]},a=void 0,c={unversionedId:"leetcode/2000/max_running_time_of_n_computers",id:"leetcode/2000/max_running_time_of_n_computers",title:"2141. Maximum Running Time of N Computers",description:"https://leetcode.com/problems/maximum-running-time-of-n-computers/",source:"@site/docs/leetcode/2000/2141_max_running_time_of_n_computers.md",sourceDirName:"leetcode/2000",slug:"/leetcode/2000/max_running_time_of_n_computers",permalink:"/docs/leetcode/2000/max_running_time_of_n_computers",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/2000/2141_max_running_time_of_n_computers.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"Binary Search",permalink:"/docs/tags/binary-search"},{label:"Go",permalink:"/docs/tags/go"}],version:"current",sidebarPosition:2141,frontMatter:{title:"2141. Maximum Running Time of N Computers",sidebar_label:"2141. Maximum Running Time of N Computers",tags:["Leetcode Hard","Binary Search","Go"]},sidebar:"docSidebar",previous:{title:"2140. Solving Questions With Brainpower",permalink:"/docs/leetcode/2000/solving_questions_with_brainpower"},next:{title:"2215. Find the Difference of Two Arrays",permalink:"/docs/leetcode/2000/find_the_difference_of_two_arrays"}},m={},l=[{value:"Python",id:"python",level:2},{value:"Binary Search",id:"binary-search",level:3},{value:"Go",id:"go",level:2},{value:"Binary Search",id:"binary-search-1",level:3}],s={toc:l},u="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/maximum-running-time-of-n-computers/"},"https://leetcode.com/problems/maximum-running-time-of-n-computers/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"binary-search"},"Binary Search"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def maxRunTime(self, n: int, batteries: List[int]) -> int:\n        def is_remain(time):\n            return sum([\n                min(time, battery) for battery in batteries\n            ]) >= n * time\n\n        left, right = 0, sum(batteries) // n + 1\n\n        while left <= right:\n            pivot = (left+right) >> 1\n            if is_remain(pivot):\n                left = pivot + 1\n            else:\n                right = pivot - 1\n        return right\n")),(0,i.kt)("h2",{id:"go"},"Go"),(0,i.kt)("h3",{id:"binary-search-1"},"Binary Search"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"func maxRunTime(n int, batteries []int) int64 {\n    isRemain := func(time int64) bool {\n        var sum int64 = 0\n        for _, battery := range batteries {\n            sum += min(time, int64(battery))\n        }\n        return sum >= int64(n)*time\n    }\n\n    var left int64 = 0\n    var right int64 = 0\n    for _, battery := range batteries {\n        right += int64(battery)\n    }\n    right = right/int64(n) + 1\n\n    for left <= right {\n        pivot := (left + right) >> 1\n        if isRemain(pivot) {\n            left = pivot + 1\n        } else {\n            right = pivot - 1\n        }\n    }\n    return right\n}\n\n\nfunc min(a int64, b int64) int64{\n    if a < b {\n        return a\n    }\n    return b\n}\n\nfunc max(a int64, b int64) int64 {\n    if a > b {\n        return a\n    }\n    return b\n}\n")))}p.isMDXComponent=!0}}]);