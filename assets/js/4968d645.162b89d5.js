"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[94227],{90035:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>i,contentTitle:()=>d,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"leetcode/1-500/clone_graph","title":"133. Clone Graph","description":"https://leetcode.com/problems/clone-graph","source":"@site/docs/leetcode/1-500/133_clone_graph.md","sourceDirName":"leetcode/1-500","slug":"/leetcode/1-500/clone_graph","permalink":"/docs/leetcode/1-500/clone_graph","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Medium","permalink":"/docs/tags/leetcode-medium"},{"inline":true,"label":"Graph","permalink":"/docs/tags/graph"}],"version":"current","sidebarPosition":133,"frontMatter":{"title":"133. Clone Graph","sidebar_label":"133. Clone Graph","tags":["Leetcode Medium","Graph"]},"sidebar":"docSidebar","previous":{"title":"131. Palindrome Partitioning","permalink":"/docs/leetcode/1-500/palindrome_partitioning"},"next":{"title":"136. Single Number","permalink":"/docs/leetcode/1-500/single_num"}}');var r=o(74848),l=o(28453);const s={title:"133. Clone Graph",sidebar_label:"133. Clone Graph",tags:["Leetcode Medium","Graph"]},d=void 0,i={},c=[{value:"Python",id:"python",level:2},{value:"DFS",id:"dfs",level:3}];function a(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/clone-graph",children:"https://leetcode.com/problems/clone-graph"})}),"\n",(0,r.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,r.jsx)(n.h3,{id:"dfs",children:"DFS"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def cloneGraph(self, node: 'Node') -> 'Node':\n        seem = dict()\n\n        def dfs(node):\n            if not node:\n                return\n\n            if node.val in seem:\n                return seem[node.val]\n\n            new_node = Node(\n                val=node.val,\n                neighbors=[]\n            )\n\n            seem[node.val] = new_node\n\n            for neighbor in node.neighbors:\n                new_node.neighbors.append(dfs(neighbor))\n\n            return new_node\n\n        return dfs(node)\n"})})]})}function p(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>d});var t=o(96540);const r={},l=t.createContext(r);function s(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);