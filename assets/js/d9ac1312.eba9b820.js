"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[55807],{99692:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>d,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"leetcode/501-1000/find_the_town_judge","title":"997. Find the Town Judge","description":"https://leetcode.com/problems/find-the-town-judge/","source":"@site/docs/leetcode/501-1000/997_find_the_town_judge.md","sourceDirName":"leetcode/501-1000","slug":"/leetcode/501-1000/find_the_town_judge","permalink":"/docs/leetcode/501-1000/find_the_town_judge","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Easy","permalink":"/docs/tags/leetcode-easy"},{"inline":true,"label":"Prefix Sum","permalink":"/docs/tags/prefix-sum"},{"inline":true,"label":"Graph","permalink":"/docs/tags/graph"}],"version":"current","sidebarPosition":997,"frontMatter":{"title":"997. Find the Town Judge","sidebar_label":"997. Find the Town Judge","tags":["Leetcode Easy","Prefix Sum","Graph"]},"sidebar":"docSidebar","previous":{"title":"989. Add to Array-Form of Integer","permalink":"/docs/leetcode/501-1000/add_to_array_form_of_integer"},"next":{"title":"923. 3Sum With Multiplicity","permalink":"/docs/leetcode/501-1000/923_3sum_with_multiplicity"}}');var o=n(74848),i=n(28453);const s={title:"997. Find the Town Judge",sidebar_label:"997. Find the Town Judge",tags:["Leetcode Easy","Prefix Sum","Graph"]},d=void 0,l={},a=[{value:"Python",id:"python",level:2},{value:"Prefix Sum (Two Arrays)",id:"prefix-sum-two-arrays",level:3}];function c(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{href:"https://leetcode.com/problems/find-the-town-judge/",children:"https://leetcode.com/problems/find-the-town-judge/"})}),"\n",(0,o.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,o.jsx)(t.h3,{id:"prefix-sum-two-arrays",children:"Prefix Sum (Two Arrays)"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Use two arrays to store indegree and outdegree edges"}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"class Solution:\n    def findJudge(self, n: int, trust: List[List[int]]) -> int:\n        indegree = [0] * (n+1)\n        outdegree = [0] * (n+1)\n\n        for person, trusted in trust:\n            outdegree[person] += 1\n            indegree[trusted] += 1\n\n        for i in range(1, n+1):\n            if indegree[i] == n-1 and outdegree[i] == 0:\n                return i\n        return -1\n"})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>d});var r=n(96540);const o={},i=r.createContext(o);function s(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);