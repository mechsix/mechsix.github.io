"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[1171],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return f}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),c=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},s=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),s=c(t),f=a,u=s["".concat(p,".").concat(f)]||s[f]||m[f]||i;return t?r.createElement(u,o(o({ref:n},d),{},{components:t})):r.createElement(u,o({ref:n},d))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=s;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}s.displayName="MDXCreateElement"},18043:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return d},default:function(){return s}});var r=t(87462),a=t(63366),i=(t(67294),t(3905)),o=["components"],l={title:"295. Find Median from Data Stream",sidebar_label:"295. Find Median from Data Stream",tags:["Leetcode Hard","Heap"]},p=void 0,c={unversionedId:"leetcode/1-500/find_median_from_data_stream",id:"leetcode/1-500/find_median_from_data_stream",title:"295. Find Median from Data Stream",description:"Python",source:"@site/docs/leetcode/1-500/295_find_median_from_data_stream.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/find_median_from_data_stream",permalink:"/docs/leetcode/1-500/find_median_from_data_stream",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/295_find_median_from_data_stream.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"Heap",permalink:"/docs/tags/heap"}],version:"current",sidebarPosition:295,frontMatter:{title:"295. Find Median from Data Stream",sidebar_label:"295. Find Median from Data Stream",tags:["Leetcode Hard","Heap"]},sidebar:"docSidebar",previous:{title:"290. Word Pattern",permalink:"/docs/leetcode/1-500/word_pattern"},next:{title:"297. Serialize and Deserialize Binary Tree",permalink:"/docs/leetcode/1-500/serialize_descrialize_bt"}},d=[{value:"Python",id:"python",children:[{value:"Two Heap",id:"two-heap",children:[],level:3}],level:2}],m={toc:d};function s(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"two-heap"},"Two Heap"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u7528\u5169\u500bheap\u5b58\u5927\u7684\u90a3\u4e00\u534a\u8ddf\u5c0f\u7684\u90a3\u4e00\u534a"),(0,i.kt)("li",{parentName:"ul"},"\u5927\u7684\u90a3\u534a\u7528Min Heap\u505a\uff0c\u65b9\u4fbf\u627e\u6700\u5c0f\u503c\uff1b\u5c0f\u7684\u90a3\u534a\u7528Max Heap\u505a\uff0c\u65b9\u4fbf\u627e\u6700\u5927\u503c"),(0,i.kt)("li",{parentName:"ul"},"\u63d2\u5165num\u6642\uff0c\u4e00\u7387\u5148\u63d2\u5165\u5927\u7684\u90a3\u534a\uff0c\u518d\u5f9e\u5927\u7684\u90a3\u534a\u627e\u6700\u5c0f\u503c\u585e\u56de\u5c0f\u7684\u90a3\u534a"),(0,i.kt)("li",{parentName:"ul"},"\u5224\u65b7\u7e3d\u6578\u662f\u5076\u6578\u6216\u5947\u6578\uff0c\u6c7a\u5b9a\u4e2d\u4f4d\u6578\u662f\u55ae\u4e00\u6578\u5b57\u6216\u4e2d\u9593\u5169\u500b\u5e73\u5747")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"import heapq\n\n\nclass MedianFinder:\n    def __init__(self):\n        min_heap = []\n        max_heap = []\n\n        heapq.heapify(min_heap)\n        heapq.heapify(max_heap)\n\n        self.min_heap = min_heap\n        self.max_heap = max_heap\n\n\n    def addNum(self, num: int) -> None:\n        heapq.heappush(self.min_heap, num)\n        heapq.heappush(self.max_heap, -heapq.heappop(self.min_heap))\n\n        if len(self.min_heap) < len(self.max_heap):\n            heapq.heappush(self.min_heap, -heapq.heappop(self.max_heap))\n\n    def findMedian(self) -> float:\n        if len(self.min_heap) > len(self.max_heap):\n            return self.min_heap[0]\n        else:\n            return (self.min_heap[0] + (-self.max_heap[0]) ) / 2\n")))}s.isMDXComponent=!0}}]);