"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[3663],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=l(n),m=i,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||a;return n?r.createElement(f,o(o({ref:t},u),{},{components:n})):r.createElement(f,o({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},26374:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return u}});var r=n(87462),i=n(63366),a=(n(67294),n(3905)),o=["components"],c={title:"1209. Remove All Adjacent Duplicates in String II",sidebar_label:"1209. Remove All Adjacent Duplicates in String II",tags:["Leetcode Medium","Stack"]},s=void 0,l={unversionedId:"leetcode/1001-1500/remove_all_adjacent_duplicates_in_string_ii",id:"leetcode/1001-1500/remove_all_adjacent_duplicates_in_string_ii",title:"1209. Remove All Adjacent Duplicates in String II",description:"Python",source:"@site/docs/leetcode/1001-1500/1209_remove_all_adjacent_duplicates_in_string_ii.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/remove_all_adjacent_duplicates_in_string_ii",permalink:"/docs/leetcode/1001-1500/remove_all_adjacent_duplicates_in_string_ii",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1209_remove_all_adjacent_duplicates_in_string_ii.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Stack",permalink:"/docs/tags/stack"}],version:"current",sidebarPosition:1209,frontMatter:{title:"1209. Remove All Adjacent Duplicates in String II",sidebar_label:"1209. Remove All Adjacent Duplicates in String II",tags:["Leetcode Medium","Stack"]},sidebar:"docSidebar",previous:{title:"1202. Smallest String With Swaps",permalink:"/docs/leetcode/1001-1500/smallest_string_with_swaps"},next:{title:"1217. Min Cost Move to Same Pos",permalink:"/docs/leetcode/1001-1500/min_cost_move_chips_to_same_pos"}},u=[{value:"Python",id:"python",children:[{value:"Recusive (Timelimit Exceed)",id:"recusive-timelimit-exceed",children:[],level:3},{value:"Count with Stack",id:"count-with-stack",children:[],level:3}],level:2}],p={toc:u};function d(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("h3",{id:"recusive-timelimit-exceed"},"Recusive (Timelimit Exceed)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from typing import List\n\n\nclass Solution:\n    def removeDuplicates(self, s: str, k: int) -> str:\n        remove_periods = self.find_remove_periods(s, k)\n        if not remove_periods:\n            return s\n\n        s_array = []\n        cur = 0\n        for start, end in remove_periods:\n            s_array.append(s[cur:start])\n            cur = end + 1\n        s_array.append(s[cur:])\n\n        return self.removeDuplicates(''.join(s_array), k)\n\n    def find_remove_periods(self, s: str, k: int) -> List:\n        pre = ''\n        count = k\n        remove_periods = []\n        for i, char in enumerate(s):\n            if char == pre:\n                count -= 1\n                if count == 1:\n                    remove_periods.append((i-k+1, i))\n            else:\n                count = k\n                pre = char\n        return remove_periods\n")),(0,a.kt)("h3",{id:"count-with-stack"},"Count with Stack"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Time: O(N)"),(0,a.kt)("li",{parentName:"ul"},"Space: O(N)  # The addition space for stack")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def removeDuplicates(self, s: str, k: int) -> str:\n        stack = []\n\n        for i, char in enumerate(s):\n            if not stack:\n                stack.append([char, 1])\n                continue\n\n            if stack[-1][0] == char:\n                stack[-1][1] += 1\n            else:\n                stack.append([char, 1])\n\n            if stack[-1][1] == k:\n                stack.pop()\n\n        s_array = []\n        for char, count in stack:\n            s_array.append(char*count)\n\n        return ''.join(s_array)\n")))}d.isMDXComponent=!0}}]);