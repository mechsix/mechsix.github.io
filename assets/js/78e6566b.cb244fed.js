"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[35050],{99415:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>s,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"leetcode_note/binary_search","title":"Binary Tree","description":"Binary Tree Traversal","source":"@site/docs/leetcode_note/binary_search.md","sourceDirName":"leetcode_note","slug":"/leetcode_note/binary_search","permalink":"/docs/leetcode_note/binary_search","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Binary Tree"},"sidebar":"docSidebar","previous":{"title":"Backtracking","permalink":"/docs/leetcode_note/backtracking"},"next":{"title":"Heap","permalink":"/docs/leetcode_note/heap"}}');var l=n(74848),o=n(28453);const i={title:"Binary Tree"},a=void 0,s={},d=[{value:"Binary Tree Traversal",id:"binary-tree-traversal",level:2},{value:"Tips of Binary Tree Problem",id:"tips-of-binary-tree-problem",level:2},{value:"Resolve Top Down",id:"resolve-top-down",level:3},{value:"Resolve Bottom Up",id:"resolve-bottom-up",level:3},{value:"Binary Tree Problems",id:"binary-tree-problems",level:2},{value:"Maximum Depth of Binary Tree",id:"maximum-depth-of-binary-tree",level:3},{value:"Symmetric Tree",id:"symmetric-tree",level:3},{value:"Path Sum",id:"path-sum",level:3},{value:"Count Univalue Subtrees",id:"count-univalue-subtrees",level:3}];function c(e){const r={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(r.h2,{id:"binary-tree-traversal",children:"Binary Tree Traversal"}),"\n",(0,l.jsx)(r.p,{children:"The example code node definitions"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n"})}),"\n",(0,l.jsx)(r.p,{children:"Example Problems"}),"\n",(0,l.jsxs)(r.ul,{children:["\n",(0,l.jsx)(r.li,{children:(0,l.jsx)(r.a,{href:"/docs/leetcode/1-500/binary_tree_inorder",children:"94. Binary Tree Inorder Traversal"})}),"\n",(0,l.jsx)(r.li,{children:(0,l.jsx)(r.a,{href:"/docs/leetcode/1-500/binary_tree_preorder",children:"144. Binary Tree Preorder Traversal"})}),"\n",(0,l.jsx)(r.li,{children:(0,l.jsx)(r.a,{href:"/docs/leetcode/1-500/binary_tree_postorder",children:"145. Binary Tree Postorder Traversal"})}),"\n",(0,l.jsx)(r.li,{children:(0,l.jsx)(r.a,{href:"/docs/leetcode/1-500/binary_tree_levelorder",children:"102. Binary Tree Level Order Traversal"})}),"\n"]}),"\n",(0,l.jsx)(r.h2,{id:"tips-of-binary-tree-problem",children:"Tips of Binary Tree Problem"}),"\n",(0,l.jsx)(r.h3,{id:"resolve-top-down",children:"Resolve Top Down"}),"\n",(0,l.jsxs)(r.ol,{children:["\n",(0,l.jsx)(r.li,{children:"End case, return null from leaf node"}),"\n",(0,l.jsx)(r.li,{children:"Update the answer"}),"\n",(0,l.jsx)(r.li,{children:"left = top_down(node.left, params)"}),"\n",(0,l.jsx)(r.li,{children:"right = top_down(node.right, params)"}),"\n",(0,l.jsx)(r.li,{children:"return the answer"}),"\n"]}),"\n",(0,l.jsx)(r.h3,{id:"resolve-bottom-up",children:"Resolve Bottom Up"}),"\n",(0,l.jsxs)(r.ol,{children:["\n",(0,l.jsx)(r.li,{children:"End case, return null from leaf node"}),"\n",(0,l.jsx)(r.li,{children:"left = bottom_up(node.left)"}),"\n",(0,l.jsx)(r.li,{children:"right = bottom_up(node.right)"}),"\n",(0,l.jsx)(r.li,{children:"return answers"}),"\n"]}),"\n",(0,l.jsx)(r.h2,{id:"binary-tree-problems",children:"Binary Tree Problems"}),"\n",(0,l.jsx)(r.h3,{id:"maximum-depth-of-binary-tree",children:"Maximum Depth of Binary Tree"}),"\n",(0,l.jsxs)(r.p,{children:["Leetcode ",(0,l.jsx)(r.a,{href:"https://leetcode.com/explore/learn/card/data-structure-tree/17/solve-problems-recursively/535/",children:"Link"})]}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"class Solution:\n    def maxDepth(self, root: Optional[TreeNode]) -> int:\n        if not root:\n            return 0\n        return self._travel(0, root)\n\n    def _travel(self, deepth: int, node) -> int:\n        if not node:\n            return deepth\n        return max(self._travel(deepth+1, node.left), self._travel(deepth+1, node.right))\n"})}),"\n",(0,l.jsx)(r.h3,{id:"symmetric-tree",children:"Symmetric Tree"}),"\n",(0,l.jsxs)(r.p,{children:["Leetcode ",(0,l.jsx)(r.a,{href:"https://leetcode.com/explore/learn/card/data-structure-tree/17/solve-problems-recursively/536/",children:"Link"})]}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"class Solution:\n    def isSymmetric(self, root: Optional[TreeNode]) -> bool:\n        if not root:\n            return False\n        return self._equal(root.left, root.right)\n\n    def _equal(self, left: Optional[TreeNode], right: Optional[TreeNode]) -> bool:\n        if not left and not right:\n            return True\n\n        if not left or not right:\n            return False\n\n        if left.val != right.val:\n            return False\n\n        return self._equal(left.left, right.right) and self._equal(left.right, right.left)\n"})}),"\n",(0,l.jsx)(r.h3,{id:"path-sum",children:"Path Sum"}),"\n",(0,l.jsxs)(r.p,{children:["Leetcode ",(0,l.jsx)(r.a,{href:"https://leetcode.com/explore/learn/card/data-structure-tree/17/solve-problems-recursively/537/",children:"Link"})]}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"class Solution:\n    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -> bool:\n        return self._travel(0, root, targetSum)\n\n    def _travel(self, total: int, node: Optional[TreeNode], targetSum: int) -> bool:\n        if not node:\n            return False\n\n        if not node.left and not node.right and total + node.val == targetSum:\n            return True\n\n        return self._travel(total+node.val, node.left, targetSum) \\\n            or self._travel(total+node.val, node.right, targetSum)\n"})}),"\n",(0,l.jsx)(r.h3,{id:"count-univalue-subtrees",children:"Count Univalue Subtrees"}),"\n",(0,l.jsxs)(r.p,{children:["Leetcode ",(0,l.jsx)(r.a,{href:"https://leetcode.com/explore/learn/card/data-structure-tree/17/solve-problems-recursively/538/",children:"Link"})]})]})}function h(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,l.jsx)(r,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>a});var t=n(96540);const l={},o=t.createContext(l);function i(e){const r=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),t.createElement(o.Provider,{value:r},e.children)}}}]);