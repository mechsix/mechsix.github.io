"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[72797],{3905:(e,r,t)=>{t.d(r,{Zo:()=>s,kt:()=>b});var n=t(67294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=n.createContext({}),d=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},s=function(e){var r=d(e.components);return n.createElement(c.Provider,{value:r},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=d(t),m=a,b=u["".concat(c,".").concat(m)]||u[m]||p[m]||o;return t?n.createElement(b,i(i({ref:r},s),{},{components:t})):n.createElement(b,i({ref:r},s))}));function b(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var c in r)hasOwnProperty.call(r,c)&&(l[c]=r[c]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var d=2;d<o;d++)i[d]=t[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},12833:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var n=t(87462),a=(t(67294),t(3905));const o={title:"1382. Balance a Binary Search Tree",sidebar_label:"1382. Balance a Binary Search Tree",tags:["Leetcode Medium","BST"]},i=void 0,l={unversionedId:"leetcode/1001-1500/balance_a_bst",id:"leetcode/1001-1500/balance_a_bst",title:"1382. Balance a Binary Search Tree",description:"https://leetcode.com/problems/balance-a-binary-search-tree",source:"@site/docs/leetcode/1001-1500/1382_balance_a_bst.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/balance_a_bst",permalink:"/docs/leetcode/1001-1500/balance_a_bst",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1382_balance_a_bst.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"BST",permalink:"/docs/tags/bst"}],version:"current",sidebarPosition:1382,frontMatter:{title:"1382. Balance a Binary Search Tree",sidebar_label:"1382. Balance a Binary Search Tree",tags:["Leetcode Medium","BST"]},sidebar:"docSidebar",previous:{title:"1379. Find a Corresponding Node of a Binary Tree in a Clone of That Tree",permalink:"/docs/leetcode/1001-1500/find_corresponding_node_of_binary_tree_in_cloned"},next:{title:"1383. Maximum Performance of a Team",permalink:"/docs/leetcode/1001-1500/max_performance_of_team"}},c={},d=[{value:"Python",id:"python",level:2},{value:"In-order and rebuild",id:"in-order-and-rebuild",level:3}],s={toc:d},u="wrapper";function p(e){let{components:r,...t}=e;return(0,a.kt)(u,(0,n.Z)({},s,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/balance-a-binary-search-tree"},"https://leetcode.com/problems/balance-a-binary-search-tree")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("h3",{id:"in-order-and-rebuild"},"In-order and rebuild"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def balanceBST(self, root: TreeNode) -> TreeNode:\n        def inorder(node, result):\n            if not node:\n                return\n\n            inorder(node.left, result)\n            result.append(node.val)\n            inorder(node.right, result)\n\n        nums = []\n        inorder(root, nums)\n\n        def build(left, right):\n            if left > right:\n                return\n\n            mid = (left+right) >> 1\n            return TreeNode(nums[mid], build(left,mid-1), build(mid+1,right))\n\n        return build(0, len(nums)-1)\n")))}p.isMDXComponent=!0}}]);