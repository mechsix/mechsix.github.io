"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[6007],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=s(t),f=o,m=p["".concat(l,".").concat(f)]||p[f]||d[f]||i;return t?r.createElement(m,c(c({ref:n},u),{},{components:t})):r.createElement(m,c({ref:n},u))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,c=new Array(i);c[0]=f;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a[p]="string"==typeof e?e:o,c[1]=a;for(var s=2;s<i;s++)c[s]=t[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},87969:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return i},metadata:function(){return a},toc:function(){return s}});var r=t(83117),o=(t(67294),t(3905));const i={title:"1192. Critical Connections in a Network",sidebar_label:"1192. Critical Connections in a Network",tags:["Leetcode Hard","Graph","Tarjan algorithm","TODO"]},c=void 0,a={unversionedId:"leetcode/1001-1500/critical_connections_in_network",id:"leetcode/1001-1500/critical_connections_in_network",title:"1192. Critical Connections in a Network",description:"https://leetcode.com/problems/critical-connections-in-a-network/",source:"@site/docs/leetcode/1001-1500/1192_critical_connections_in_network.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/critical_connections_in_network",permalink:"/docs/leetcode/1001-1500/critical_connections_in_network",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1192_critical_connections_in_network.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"Graph",permalink:"/docs/tags/graph"},{label:"Tarjan algorithm",permalink:"/docs/tags/tarjan-algorithm"},{label:"TODO",permalink:"/docs/tags/todo"}],version:"current",sidebarPosition:1192,frontMatter:{title:"1192. Critical Connections in a Network",sidebar_label:"1192. Critical Connections in a Network",tags:["Leetcode Hard","Graph","Tarjan algorithm","TODO"]},sidebar:"docSidebar",previous:{title:"1167. Minimum Cost to Connect Sticks",permalink:"/docs/leetcode/1001-1500/min_cost_to_connect_sticks"},next:{title:"1200. Mini Abs Difference",permalink:"/docs/leetcode/1001-1500/min_abs_difference"}},l={},s=[{value:"Python",id:"python",level:2},{value:"Tarjan&#39;s algorithm",id:"tarjans-algorithm",level:3}],u={toc:s};function p(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/critical-connections-in-a-network/"},"https://leetcode.com/problems/critical-connections-in-a-network/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"tarjans-algorithm"},"Tarjan's algorithm"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def criticalConnections(self, n: int, connections: List[List[int]]) -> List[List[int]]:\n        lowest_rank = [i for i in range(n)]\n\n        graph = [[] for _ in range(n)]\n        for connection in connections:\n            graph[connection[0]].append(connection[1])\n            graph[connection[1]].append(connection[0])\n\n        visited = [False for _ in range(n)]\n\n        def dfs(result, rank, pre_ver, cur_ver):\n            nonlocal visited\n            nonlocal lowest_rank\n\n            visited[cur_ver] = True\n            lowest_rank[cur_ver] = rank\n\n            for next_ver in graph[cur_ver]:\n                if next_ver == pre_ver:\n                    continue\n\n                if not visited[next_ver]:\n                    dfs(result, rank + 1, cur_ver, next_ver)\n\n                lowest_rank[cur_ver] = min(\n                    lowest_rank[cur_ver],\n                    lowest_rank[next_ver]\n                )\n                if lowest_rank[next_ver] >= rank + 1:\n                    result.append([cur_ver, next_ver])\n\n        result = []\n        dfs(result, 0, -1, 0)\n        return result\n")))}p.isMDXComponent=!0}}]);