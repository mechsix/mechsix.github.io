"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[40591],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=l(n),d=a,h=c["".concat(u,".").concat(d)]||c[d]||p[d]||o;return n?r.createElement(h,s(s({ref:t},m),{},{components:n})):r.createElement(h,s({ref:t},m))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[c]="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},71269:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const o={title:"1695. Maximum Erasure Value",sidebar_label:"1695. Maximum Erasure Value",tags:["Leetcode Medium","Hash","Two Pointer"]},s=void 0,i={unversionedId:"leetcode/1501-2000/max_erasure_value",id:"leetcode/1501-2000/max_erasure_value",title:"1695. Maximum Erasure Value",description:"https://leetcode.com/problems/maximum-erasure-value/",source:"@site/docs/leetcode/1501-2000/1695_max_erasure_value.md",sourceDirName:"leetcode/1501-2000",slug:"/leetcode/1501-2000/max_erasure_value",permalink:"/docs/leetcode/1501-2000/max_erasure_value",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1501-2000/1695_max_erasure_value.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Hash",permalink:"/docs/tags/hash"},{label:"Two Pointer",permalink:"/docs/tags/two-pointer"}],version:"current",sidebarPosition:1695,frontMatter:{title:"1695. Maximum Erasure Value",sidebar_label:"1695. Maximum Erasure Value",tags:["Leetcode Medium","Hash","Two Pointer"]},sidebar:"docSidebar",previous:{title:"1689. Partitioning Into Minimum Number Of Deci-Binary Numbers",permalink:"/docs/leetcode/1501-2000/partitioning_into_min_num_of_deci_binary_nums"},next:{title:"1696. Jump Game VI",permalink:"/docs/leetcode/1501-2000/jump_game_vi"}},u={},l=[{value:"Python",id:"python",level:2},{value:"Two Pointers with Hashmap",id:"two-pointers-with-hashmap",level:3},{value:"Javascript",id:"javascript",level:2}],m={toc:l},c="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/maximum-erasure-value/"},"https://leetcode.com/problems/maximum-erasure-value/")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("h3",{id:"two-pointers-with-hashmap"},"Two Pointers with Hashmap"),(0,a.kt)("p",null,"(Catepillar Two Pointer, Same Direction Two Pointer)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Time: O()"),(0,a.kt)("li",{parentName:"ul"},"Space: O()")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def maximumUniqueSubarray(self, nums: List[int]) -> int:\n        seen = set()\n        score, max_score = 0, 0\n        start = 0\n\n        for end in range(len(nums)):\n            while nums[end] in seen:\n                seen.remove(nums[start])\n                score -= nums[start]\n                start += 1\n\n            score += nums[end]\n            seen.add(nums[end])\n\n            max_score = max(max_score, score)\n\n        return max_score\n")),(0,a.kt)("h2",{id:"javascript"},"Javascript"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"var maximumUniqueSubarray = function(nums) {\n    let slow = 0;\n    let fast = 0;\n    const hashmap = new Map();\n    let max = -1;\n    let sum = 0;\n    \n    while (fast < nums.length) {\n        sum += nums[fast];\n        \n        if (hashmap.has(nums[fast])) {\n            max = Math.max(max, sum - nums[fast]);\n            \n            while (slow <= hashmap.get(nums[fast])) {\n                sum -= nums[slow];\n                slow++;\n            }\n            hashmap.delete(nums[fast]);\n        }\n        \n        hashmap.set(nums[fast], fast);\n        fast++;\n    }\n    \n    max = Math.max(max, sum);\n    return max;\n};\n")))}p.isMDXComponent=!0}}]);