"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[36437],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return f}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var a=n.createContext({}),s=function(e){var t=n.useContext(a),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(a.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=s(r),m=o,f=d["".concat(a,".").concat(m)]||d[m]||p[m]||i;return r?n.createElement(f,l(l({ref:t},u),{},{components:r})):n.createElement(f,l({ref:t},u))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,l=new Array(i);l[0]=m;var c={};for(var a in t)hasOwnProperty.call(t,a)&&(c[a]=t[a]);c.originalType=e,c[d]="string"==typeof e?e:o,l[1]=c;for(var s=2;s<i;s++)l[s]=r[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},76945:function(e,t,r){r.r(t),r.d(t,{assets:function(){return a},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return s}});var n=r(83117),o=(r(67294),r(3905));const i={title:"83. Remove Duplicates from Sorted List",sidebar_label:"83. Remove Duplicates from Sorted List",tags:["Leetcode Easy","Linked List"]},l=void 0,c={unversionedId:"leetcode/1-500/remove_duplicates_from_sorted_linked_list",id:"leetcode/1-500/remove_duplicates_from_sorted_linked_list",title:"83. Remove Duplicates from Sorted List",description:"https://leetcode.com/problems/remove-duplicates-from-sorted-list/",source:"@site/docs/leetcode/1-500/83_remove_duplicates_from_sorted_linked_list.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/remove_duplicates_from_sorted_linked_list",permalink:"/docs/leetcode/1-500/remove_duplicates_from_sorted_linked_list",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/83_remove_duplicates_from_sorted_linked_list.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Linked List",permalink:"/docs/tags/linked-list"}],version:"current",sidebarPosition:83,frontMatter:{title:"83. Remove Duplicates from Sorted List",sidebar_label:"83. Remove Duplicates from Sorted List",tags:["Leetcode Easy","Linked List"]},sidebar:"docSidebar",previous:{title:"82. Remove Duplicates from Sorted List II",permalink:"/docs/leetcode/1-500/remove_duplicates_from_sorted_list_ii"},next:{title:"86. Partition List",permalink:"/docs/leetcode/1-500/partition_list"}},a={},s=[{value:"Python",id:"python",level:2},{value:"Go",id:"go",level:2}],u={toc:s};function d(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/remove-duplicates-from-sorted-list/"},"https://leetcode.com/problems/remove-duplicates-from-sorted-list/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        if not head:\n            return head\n\n        pre = head\n        cur = head.next\n\n        while cur:\n            if cur.val == pre.val:\n                pre.next = cur.next\n            else:\n                pre = cur\n            cur = cur.next\n        return head\n")),(0,o.kt)("h2",{id:"go"},"Go"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func deleteDuplicates(head *ListNode) *ListNode {\n    if head == nil {\n        return head\n    }\n\n    pre := head\n    cur := head.Next\n    for cur != nil {\n        if pre.Val == cur.Val {\n\n            pre.Next = cur.Next\n        } else {\n            pre = cur\n        }\n        cur = cur.Next\n    }\n    return head\n}\n")))}d.isMDXComponent=!0}}]);