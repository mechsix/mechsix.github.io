"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[3540],{3905:function(e,n,r){r.d(n,{Zo:function(){return s},kt:function(){return h}});var t=r(67294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function c(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function a(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=t.createContext({}),d=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):c(c({},n),e)),r},s=function(e){var n=d(e.components);return t.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},w=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),w=d(r),h=o,f=w["".concat(l,".").concat(h)]||w[h]||u[h]||i;return r?t.createElement(f,c(c({ref:n},s),{},{components:r})):t.createElement(f,c({ref:n},s))}));function h(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=r.length,c=new Array(i);c[0]=w;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a.mdxType="string"==typeof e?e:o,c[1]=a;for(var d=2;d<i;d++)c[d]=r[d];return t.createElement.apply(null,c)}return t.createElement.apply(null,r)}w.displayName="MDXCreateElement"},57600:function(e,n,r){r.r(n),r.d(n,{contentTitle:function(){return l},default:function(){return w},frontMatter:function(){return a},metadata:function(){return d},toc:function(){return s}});var t=r(87462),o=r(63366),i=(r(67294),r(3905)),c=["components"],a={title:"212. Word Search II",sidebar_label:"212. Word Search II",tags:["Leetcode Hard","Backtracking"]},l=void 0,d={unversionedId:"leetcode/1-500/word_search_ii",id:"leetcode/1-500/word_search_ii",title:"212. Word Search II",description:"https://leetcode.com/problems/word-search-ii/",source:"@site/docs/leetcode/1-500/212_word_search_ii.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/word_search_ii",permalink:"/docs/leetcode/1-500/word_search_ii",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/212_word_search_ii.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"Backtracking",permalink:"/docs/tags/backtracking"}],version:"current",sidebarPosition:212,frontMatter:{title:"212. Word Search II",sidebar_label:"212. Word Search II",tags:["Leetcode Hard","Backtracking"]},sidebar:"docSidebar",previous:{title:"209. Minimum Size Subarray Sum",permalink:"/docs/leetcode/1-500/min_size_subarray_sum"},next:{title:"215. Kth Largest Element in an Array",permalink:"/docs/leetcode/1-500/kth_largest_elm_in_array"}},s=[{value:"Python",id:"python",children:[{value:"Backtracking (Timelimit Exceed)",id:"backtracking-timelimit-exceed",children:[],level:3}],level:2},{value:"Javascript",id:"javascript",children:[],level:2}],u={toc:s};function w(e){var n=e.components,r=(0,o.Z)(e,c);return(0,i.kt)("wrapper",(0,t.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/word-search-ii/"},"https://leetcode.com/problems/word-search-ii/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"backtracking-timelimit-exceed"},"Backtracking (Timelimit Exceed)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:\n        row_limit = len(board)\n        col_limit = len(board[0])\n\n        length_limit = max([len(word) for word in words])\n        used = set()\n\n        accepts = set(words)\n        result = set()\n\n        def backtrack(word, row, col):\n            word = word + board[row][col]\n\n            if len(word) > length_limit:\n                return\n\n            if word in accepts:\n                result.add(word)\n\n            used.add((row, col))\n\n            # Go up\n            if row - 1 >= 0 and (row-1, col) not in used:\n                backtrack(word, row-1, col)\n\n            # Go down\n            if row + 1 < row_limit and (row+1, col) not in used:\n                backtrack(word, row+1, col)\n\n            # Go left\n            if col - 1 >= 0 and (row, col-1) not in used:\n                backtrack(word, row, col-1)\n\n            # Go right\n            if col + 1 < col_limit and (row, col+1) not in used:\n                backtrack(word, row, col+1)\n\n            used.remove((row, col))\n\n        for row in range(row_limit):\n            for col in range(col_limit):\n                backtrack('', row, col)\n        return result\n")),(0,i.kt)("h2",{id:"javascript"},"Javascript"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"var findWords = function (board, words) {\n  const trie = new Trie();\n  trie.create(words)\n  const trieRoot = trie.get();\n\n    this.finding = new Finding(board);\n    return this.finding.findWords(trieRoot);\n};\n\nclass Finding {\n    constructor(board) {\n        this.board = board;\n        this.maxRows = board.length;\n        this.maxCols = board[0].length;\n    this.result = [];\n    }\n\n    findWords(root) {\n    for (let row = 0; row < this.board.length; row++) {\n      for (let col = 0; col < this.board[row].length; col++) {\n        if (root.childs[this.board[row][col]]) {\n          this.find(row, col, root)\n        }\n      }\n    }\n    // console.log(this.result)\n    return this.result;\n    }\n\n    find(row, col, root) {\n    const letter = this.board[row][col];\n    const currNode = root.childs[letter];\n\n    if (currNode.word) {\n      this.result.push(currNode.word)\n      currNode.word = '';\n    }\n\n        this.board[row][col] = null;\n    // console.log(this.board)\n\n        const directions = [ [0, 1], [0, -1], [1, 0], [-1, 0] ];\n\n        for (const [x, y] of directions) {\n      const nextRow = row + x;\n      const nextCol = col + y;\n\n      if ( nextRow >= 0 && nextRow < this.maxRows && nextCol >= 0 && nextCol < this.maxCols) {\n        const nextLetter = this.board[nextRow][nextCol];\n        // console.log(currNode.childs[nextLetter])\n        if (currNode.childs[nextLetter]) {\n          this.find(nextRow, nextCol, currNode)\n        }\n      }\n        }\n\n    this.board[row][col] = letter;\n    }\n}\n\nclass TrieNode {\n  constructor() {\n    this.childs = {};\n    this.word = '';\n  }\n}\n\nclass Trie {\n  constructor() {\n    this.root = new TrieNode();\n  }\n\n  create(words) {\n    for (const word of words) {\n      let node = this.root;\n      for (let letter of word) {\n        if (node.childs[letter]) {\n          node = node.childs[letter];\n        } else {\n          const newNode = new TrieNode();\n          node.childs[letter] = newNode;\n          node = newNode;\n        }\n      }\n      node.word = word;\n    }\n  }\n\n  get() { return this.root; }\n}\n")))}w.isMDXComponent=!0}}]);