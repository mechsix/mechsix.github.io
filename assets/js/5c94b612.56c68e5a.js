"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[5658],{3905:function(e,r,n){n.d(r,{Zo:function(){return u},kt:function(){return p}});var t=n(67294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function a(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function l(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=t.createContext({}),m=function(e){var r=t.useContext(c),n=r;return e&&(n="function"==typeof e?e(r):a(a({},r),e)),n},u=function(e){var r=m(e.components);return t.createElement(c.Provider,{value:r},e.children)},s={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},f=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),f=m(n),p=o,_=f["".concat(c,".").concat(p)]||f[p]||s[p]||i;return n?t.createElement(_,a(a({ref:r},u),{},{components:n})):t.createElement(_,a({ref:r},u))}));function p(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=f;var l={};for(var c in r)hasOwnProperty.call(r,c)&&(l[c]=r[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var m=2;m<i;m++)a[m]=n[m];return t.createElement.apply(null,a)}return t.createElement.apply(null,n)}f.displayName="MDXCreateElement"},98326:function(e,r,n){n.r(r),n.d(r,{contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return l},metadata:function(){return m},toc:function(){return u}});var t=n(87462),o=n(63366),i=(n(67294),n(3905)),a=["components"],l={title:"363. Max Sum of Rectangle No Larger Than K",sidebar_label:"363. Max Sum of Rectangle No Larger Than K",tags:["Leetcode Hard","Prefix Sum","Binary Search"]},c=void 0,m={unversionedId:"leetcode/1-500/max_sum_of_rectangle_no_larger_than_k",id:"leetcode/1-500/max_sum_of_rectangle_no_larger_than_k",title:"363. Max Sum of Rectangle No Larger Than K",description:"Python",source:"@site/docs/leetcode/1-500/363_max_sum_of_rectangle_no_larger_than_k.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/max_sum_of_rectangle_no_larger_than_k",permalink:"/docs/leetcode/1-500/max_sum_of_rectangle_no_larger_than_k",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/363_max_sum_of_rectangle_no_larger_than_k.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"Prefix Sum",permalink:"/docs/tags/prefix-sum"},{label:"Binary Search",permalink:"/docs/tags/binary-search"}],version:"current",sidebarPosition:363,frontMatter:{title:"363. Max Sum of Rectangle No Larger Than K",sidebar_label:"363. Max Sum of Rectangle No Larger Than K",tags:["Leetcode Hard","Prefix Sum","Binary Search"]},sidebar:"docSidebar",previous:{title:"359. Logger Rate Limiter",permalink:"/docs/leetcode/1-500/logger_rate_limiter"},next:{title:"371. Sum of Two Integers",permalink:"/docs/leetcode/1-500/sum_of_two_integer"}},u=[{value:"Python",id:"python",children:[],level:2}],s={toc:u};function f(e){var r=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,t.Z)({},s,n,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from math import inf\nfrom bisect import insort, bisect_right\n\n\nclass Solution:\n    def maxSumSubmatrix(self, matrix: List[List[int]], k: int) -> int:\n        m, n = len(matrix), len(matrix[0])\n        prefix = self.build_prefix(matrix)\n\n        # Binary Search code refer to\n        # https://leetcode.com/problems/max-sum-of-rectangle-no-larger-than-k/discuss/2490502/Clean-Python3-W-Comments-or-Prefix-Sum-and-Bisect-or-Faster-than-97\n        max_sum_lk = float('-inf')\n        for row1 in range(m):\n            for row2 in range(row1, m):\n                left_sums = [0]\n                for end_col in range(n):\n                    sum_here = prefix[row2][end_col] - prefix[row1 - 1][end_col]\n\n                    pivot = bisect_right(left_sums, sum_here - k)\n                    if pivot > 0 and left_sums[pivot-1] == sum_here - k:\n                        return k\n                    elif pivot <= end_col:\n                        max_sum_lk = max(max_sum_lk, sum_here - left_sums[pivot])\n\n                    insort(left_sums, sum_here)\n\n        return max_sum_lk\n\n    @staticmethod\n    def build_prefix(matrix):\n        m, n = len(matrix), len(matrix[0])\n        prefix = [[0]*(n+1) for _ in range(m+1)]\n\n        for i in range(m):\n            for j in range(n):\n                if j-1 >= 0 and i-1 >= 0:\n                    prefix[i][j] = prefix[i-1][j] + prefix[i][j-1] - prefix[i-1][j-1] \\\n                                 + matrix[i][j]\n                elif i-1 >= 0:\n                    prefix[i][j] = prefix[i-1][j] + matrix[i][j]\n                elif j-1 >= 0:\n                    prefix[i][j] = prefix[i][j-1] + matrix[i][j]\n                else:\n                    prefix[i][j] = matrix[i][j]\n        return prefix\n")))}f.isMDXComponent=!0}}]);