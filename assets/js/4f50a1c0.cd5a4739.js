"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[68001],{82176:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>u,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var s=t(74848),r=t(28453);const i={title:"416. Partition Equal Subset Sum",sidebar_label:"416. Partition Equal Subset Sum",tags:["Leetcode Medium","DFS","DP"]},u=void 0,o={id:"leetcode/1-500/partition_equal_subset_sum",title:"416. Partition Equal Subset Sum",description:"https://leetcode.com/problems/partition-equal-subset-sum",source:"@site/docs/leetcode/1-500/416_partition_equal_subset_sum.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/partition_equal_subset_sum",permalink:"/docs/leetcode/1-500/partition_equal_subset_sum",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"DFS",permalink:"/docs/tags/dfs"},{label:"DP",permalink:"/docs/tags/dp"}],version:"current",sidebarPosition:416,frontMatter:{title:"416. Partition Equal Subset Sum",sidebar_label:"416. Partition Equal Subset Sum",tags:["Leetcode Medium","DFS","DP"]},sidebar:"docSidebar",previous:{title:"415. Add Strings",permalink:"/docs/leetcode/1-500/add_strings"},next:{title:"417. Pacific Atlantic Water Flow",permalink:"/docs/leetcode/1-500/pacific_atlantic_water_flow"}},a={},l=[{value:"Python",id:"python",level:2},{value:"DFS (Failed Try)",id:"dfs-failed-try",level:3},{value:"Top Down DP",id:"top-down-dp",level:3},{value:"JS",id:"js",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/partition-equal-subset-sum",children:"https://leetcode.com/problems/partition-equal-subset-sum"})}),"\n",(0,s.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,s.jsx)(n.h3,{id:"dfs-failed-try",children:"DFS (Failed Try)"}),"\n",(0,s.jsx)(n.p,{children:"Fail try, did not really get the idea...\n(2021/12/12)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def canPartition(self, nums: List[int]) -> bool:\n        if not nums:\n            return False\n\n        total = sum(nums)\n        if total % 2:\n            return False\n\n        target = total / 2\n        sorted_nums = sorted(nums, reverse=True)\n\n        return self._dfs(sorted_nums, 0, target)\n\n    def _dfs(self, nums, index, target):\n        if target < nums[index]:\n            return False\n\n        target -= nums[index]\n        if target == 0 or self._dfs(nums, index+1, target):\n            return True\n        target += nums[index]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"top-down-dp",children:"Top Down DP"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from functools import cache\n\n\nclass Solution:\n    def canPartition(self, nums: List[int]) -> bool:\n        nums.sort()\n\n        @cache\n        def dp(i: int, sum1: int, sum2: int):\n            if i == len(nums):\n                if sum1 == sum2:\n                    return True\n                return False\n\n            num = nums[i]\n\n            return dp(i+1, sum1, sum2+num) or dp(i+1, sum1+num, sum2)\n\n        return dp(0, 0, 0)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"js",children:"JS"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// top-down\nvar canPartition = function(nums) {\n   const sum = nums.reduce((acc, cur) => acc + cur, 0);\n   const subSum = Math.ceil(sum / 2);\n    if (subSum * 2 !== sum) return false;\n    \n   const memo = {};\n   const dfs = (i, curSum) => {\n       const key = `${i}${curSum}`;\n       // console.log(i, curSum)\n       if (curSum === 0) return true;\n       if (i === nums.length || curSum < 0) return false;\n       if (memo.hasOwnProperty(key)) return memo[key];\n       \n       memo[key] = dfs(i + 1, curSum - nums[i]) || dfs(i + 1, curSum);\n       return memo[key]\n   }\n   \n   return dfs(0, subSum);\n};\n\n// bottom-up\nvar canPartition = function(nums) {\n    const sum = nums.reduce((acc, cur) => acc + cur);\n    if (sum % 2 !== 0) return false;\n    \n    const total = sum / 2;\n    const dp = [...new Array(nums.length + 1)].map(() => [...new Array(total + 1)].fill(false));\n    \n    for (let i = 1; i <= nums.length; i++) {\n        for (let j = 0; j <= total; j++) {\n            if (j === 0) dp[i][j] = true;\n            else {\n                if (j - nums[i - 1] < 0) {\n                    dp[i][j] = dp[i - 1][j];\n                } else {\n                    dp[i][j] = dp[i - 1][j] || dp[i - 1][j - nums[i - 1]];\n                }\n            }\n        }        \n    }\n  \n    return dp[nums.length][total];\n};\n"})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>u,x:()=>o});var s=t(96540);const r={},i=s.createContext(r);function u(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:u(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);