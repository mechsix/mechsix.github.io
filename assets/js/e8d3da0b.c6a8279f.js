"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[91264],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>f});var n=t(67294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),c=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},p=function(e){var r=c(e.components);return n.createElement(s.Provider,{value:r},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},y=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(t),y=o,f=d["".concat(s,".").concat(y)]||d[y]||u[y]||a;return t?n.createElement(f,l(l({ref:r},p),{},{components:t})):n.createElement(f,l({ref:r},p))}));function f(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=y;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i[d]="string"==typeof e?e:o,l[1]=i;for(var c=2;c<a;c++)l[c]=t[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}y.displayName="MDXCreateElement"},57137:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var n=t(87462),o=(t(67294),t(3905));const a={title:"144. Binary Tree Preorder Traversal",slidebar_label:"144. Binary Tree Preorder",tags:["Leetcode Easy","Binary Tree","Rust"]},l=void 0,i={unversionedId:"leetcode/1-500/binary_tree_preorder",id:"leetcode/1-500/binary_tree_preorder",title:"144. Binary Tree Preorder Traversal",description:"https://leetcode.com/problems/binary-tree-preorder-traversal",source:"@site/docs/leetcode/1-500/144_binary_tree_preorder.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/binary_tree_preorder",permalink:"/docs/leetcode/1-500/binary_tree_preorder",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/144_binary_tree_preorder.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"},{label:"Rust",permalink:"/docs/tags/rust"}],version:"current",sidebarPosition:144,frontMatter:{title:"144. Binary Tree Preorder Traversal",slidebar_label:"144. Binary Tree Preorder",tags:["Leetcode Easy","Binary Tree","Rust"]},sidebar:"docSidebar",previous:{title:"143. Reorder List",permalink:"/docs/leetcode/1-500/reorder_list"},next:{title:"145. Binary Tree Postorder",permalink:"/docs/leetcode/1-500/binary_tree_postorder"}},s={},c=[{value:"Python",id:"python",level:2},{value:"Rust",id:"rust",level:2}],p={toc:c},d="wrapper";function u(e){let{components:r,...t}=e;return(0,o.kt)(d,(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/binary-tree-preorder-traversal"},"https://leetcode.com/problems/binary-tree-preorder-traversal")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        return self.travel([], root)\n\n    def travel(self, result: List[int], root: Optional[TreeNode]):\n        if not root:\n            return\n\n        result.append(root.val)\n        self.travel(result, root.left)\n        self.travel(result, root.right)\n        return result\n")),(0,o.kt)("h2",{id:"rust"},"Rust"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"use std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn preorder_traversal(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<i32> {\n        fn preorder(node: &Option<Rc<RefCell<TreeNode>>>, result: &mut Vec<i32>) {\n            if let Some(node) = node {\n                result.push(node.borrow().val);\n                preorder(&node.borrow().left, result);\n                preorder(&node.borrow().right, result);\n            }\n        }\n        let mut result = vec![];\n        preorder(&root, &mut result);\n        result\n    }\n}\n")))}u.isMDXComponent=!0}}]);