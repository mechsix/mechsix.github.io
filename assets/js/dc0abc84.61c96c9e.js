"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[5501],{3905:function(t,e,n){n.d(e,{Zo:function(){return p},kt:function(){return s}});var r=n(67294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},l=Object.keys(t);for(r=0;r<l.length;r++)n=l[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(r=0;r<l.length;r++)n=l[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var d=r.createContext({}),c=function(t){var e=r.useContext(d),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},p=function(t){var e=c(t.components);return r.createElement(d.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,l=t.originalType,d=t.parentName,p=o(t,["components","mdxType","originalType","parentName"]),m=c(n),s=a,g=m["".concat(d,".").concat(s)]||m[s]||u[s]||l;return n?r.createElement(g,i(i({ref:e},p),{},{components:n})):r.createElement(g,i({ref:e},p))}));function s(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var l=n.length,i=new Array(l);i[0]=m;var o={};for(var d in e)hasOwnProperty.call(e,d)&&(o[d]=e[d]);o.originalType=t,o.mdxType="string"==typeof t?t:a,i[1]=o;for(var c=2;c<l;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},79782:function(t,e,n){n.r(e),n.d(e,{contentTitle:function(){return d},default:function(){return m},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return p}});var r=n(87462),a=n(63366),l=(n(67294),n(3905)),i=["components"],o={title:"72. Edit Distance",sidebar_label:"72. Edit Distance",tags:["Leetcode Hard","DP"]},d=void 0,c={unversionedId:"leetcode/1-500/edit_distance",id:"leetcode/1-500/edit_distance",title:"72. Edit Distance",description:"https://leetcode.com/problems/edit-distance/",source:"@site/docs/leetcode/1-500/72_edit_distance.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/edit_distance",permalink:"/docs/leetcode/1-500/edit_distance",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/72_edit_distance.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"DP",permalink:"/docs/tags/dp"}],version:"current",sidebarPosition:72,frontMatter:{title:"72. Edit Distance",sidebar_label:"72. Edit Distance",tags:["Leetcode Hard","DP"]},sidebar:"docSidebar",previous:{title:"70. Climbing Stairs",permalink:"/docs/leetcode/1-500/climbing_stairs"},next:{title:"74. Search a 2D Matrix",permalink:"/docs/leetcode/1-500/search_2d_matrix"}},p=[{value:"Python",id:"python",children:[{value:"Bottom-up DP",id:"bottom-up-dp",children:[],level:3}],level:2},{value:"Javascript",id:"javascript",children:[],level:2}],u={toc:p};function m(t){var e=t.components,n=(0,a.Z)(t,i);return(0,l.kt)("wrapper",(0,r.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/edit-distance/"},"https://leetcode.com/problems/edit-distance/")),(0,l.kt)("h2",{id:"python"},"Python"),(0,l.kt)("h3",{id:"bottom-up-dp"},"Bottom-up DP"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"word1\\word2"),(0,l.kt)("th",{parentName:"tr",align:null},'""'),(0,l.kt)("th",{parentName:"tr",align:null},"a"),(0,l.kt)("th",{parentName:"tr",align:null},"p"),(0,l.kt)("th",{parentName:"tr",align:null},"p"),(0,l.kt)("th",{parentName:"tr",align:null},"l"),(0,l.kt)("th",{parentName:"tr",align:null},"e"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},'""'),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"5")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"r"),(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"5")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"a"),(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"5")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"d"),(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"5")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def minDistance(self, word1: str, word2: str) -> int:\n        m, n = len(word1), len(word2)\n\n        dp = [[0]*(n+1) for _ in range(m+1)]\n\n        for row in range(1, m+1):\n            dp[row][0] = row\n        for col in range(1, n+1):\n            dp[0][col] = col\n\n\n        for row in range(1, m+1):\n            for col in range(1, n+1):\n                if word1[row-1] == word2[col-1]:\n                    dp[row][col] = dp[row-1][col-1]\n                else:\n                    dp[row][col] = min(\n                        dp[row-1][col]+1,\n                        dp[row][col-1]+1,\n                        dp[row-1][col-1]+1\n                    )\n\n        return dp[m][n]\n")),(0,l.kt)("h2",{id:"javascript"},"Javascript"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'var minDistance = function(word1, word2) {\n    const dp = [...new Array(word1.length + 1)].map(() => new Array(word2.length + 1).fill(0))\n    for (let i = 0; i <= word1.length; i++) {\n        for (let j = 0; j <= word2.length; j++) {\n            if (i === 0) dp[i][j] = j;\n            else if (j === 0) dp[i][j] = i;\n            else {\n                if (word1[i - 1] === word2[j - 1]) {\n                    dp[i][j] = dp[i - 1][j - 1];\n                } else {\n                    dp[i][j] = Math.min(\n                        dp[i - 1][j] + 1,\n                        dp[i - 1][j - 1] + 1,\n                        dp[i][j - 1] + 1,\n                    );\n                }\n            }\n        }\n    }\n\n    return dp[word1.length][word2.length]\n};\n\n/**\n *   " h o r s e\n * " 0 1 2 3 4 5\n * r 1 1 2 2 3 4\n * o 2 2 1 2 3 4\n * s 3 3 2 2 2 3\n */\n')))}m.isMDXComponent=!0}}]);