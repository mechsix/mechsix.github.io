"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[5732],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(t),m=i,g=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return t?r.createElement(g,o(o({ref:n},p),{},{components:t})):r.createElement(g,o({ref:n},p))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var s=2;s<a;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},34756:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return p}});var r=t(87462),i=t(63366),a=(t(67294),t(3905)),o=["components"],c={title:"329. Longest Increasing Path in a Matrix",sidebar_label:"329. Longest Increasing Path in a Matrix",tags:["Leetcode Hard","DFS","Matrix"]},l=void 0,s={unversionedId:"leetcode/1-500/longest_increasing_path_in_matrix",id:"leetcode/1-500/longest_increasing_path_in_matrix",title:"329. Longest Increasing Path in a Matrix",description:"https://leetcode.com/problems/longest-increasing-path-in-a-matrix/",source:"@site/docs/leetcode/1-500/329_longest_increasing_path_in_matrix.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/longest_increasing_path_in_matrix",permalink:"/docs/leetcode/1-500/longest_increasing_path_in_matrix",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/329_longest_increasing_path_in_matrix.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"DFS",permalink:"/docs/tags/dfs"},{label:"Matrix",permalink:"/docs/tags/matrix"}],version:"current",sidebarPosition:329,frontMatter:{title:"329. Longest Increasing Path in a Matrix",sidebar_label:"329. Longest Increasing Path in a Matrix",tags:["Leetcode Hard","DFS","Matrix"]},sidebar:"docSidebar",previous:{title:"328. Odd Even Linked List",permalink:"/docs/leetcode/1-500/odd_even_linklist"},next:{title:"334. Increasing Triplet Subsequence",permalink:"/docs/leetcode/1-500/increasing_triplet_subsequence"}},p=[{value:"Python",id:"python",children:[{value:"Backtracking (Timelimit Exceed)",id:"backtracking-timelimit-exceed",children:[],level:3}],level:2}],u={toc:p};function d(e){var n=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/longest-increasing-path-in-a-matrix/"},"https://leetcode.com/problems/longest-increasing-path-in-a-matrix/")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("h3",{id:"backtracking-timelimit-exceed"},"Backtracking (Timelimit Exceed)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:\n        m, n = len(matrix), len(matrix[0])\n        cach = dict()\n        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n        ans = 0\n\n        def backtrack(path, pre, row, col):\n            nonlocal ans\n\n            cur = matrix[row][col]\n            if cur <= pre:\n                return\n\n            path.add((row, col))\n            # print(row, col, path)\n            ans = max(ans, len(path))\n            for rx, cx in directions:\n                nr, nc = row+rx, col+cx\n                if 0 <= nr < m and 0 <= nc < n:\n                    backtrack(path, cur, nr, nc)\n            path.remove((row, col))\n\n        for row in range(m):\n            for col in range(n):\n                backtrack(set([(row, col)]), -1, row, col)\n\n        return ans\n")))}d.isMDXComponent=!0}}]);