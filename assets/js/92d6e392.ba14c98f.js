"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[39438],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>f});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),d=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},l=function(e){var t=d(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=d(r),p=i,f=u["".concat(c,".").concat(p)]||u[p]||m[p]||a;return r?n.createElement(f,o(o({ref:t},l),{},{components:r})):n.createElement(f,o({ref:t},l))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:i,o[1]=s;for(var d=2;d<a;d++)o[d]=r[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},6435:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var n=r(87462),i=(r(67294),r(3905));const a={title:"2966. Divide Array Into Arrays With Max Difference",sidebar_label:"2966. Divide Array Into Arrays With Max Difference",tags:["Leetcode Medium","Greedy"]},o=void 0,s={unversionedId:"leetcode/2000/divide_array_into_arrays_with_max_difference",id:"leetcode/2000/divide_array_into_arrays_with_max_difference",title:"2966. Divide Array Into Arrays With Max Difference",description:"https://leetcode.com/problems/divide-array-into-arrays-with-max-difference",source:"@site/docs/leetcode/2000/2966_divide_array_into_arrays_with_max_difference.md",sourceDirName:"leetcode/2000",slug:"/leetcode/2000/divide_array_into_arrays_with_max_difference",permalink:"/docs/leetcode/2000/divide_array_into_arrays_with_max_difference",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/2000/2966_divide_array_into_arrays_with_max_difference.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Greedy",permalink:"/docs/tags/greedy"}],version:"current",sidebarPosition:2966,frontMatter:{title:"2966. Divide Array Into Arrays With Max Difference",sidebar_label:"2966. Divide Array Into Arrays With Max Difference",tags:["Leetcode Medium","Greedy"]},sidebar:"docSidebar",previous:{title:"2694. Event Emitter",permalink:"/docs/leetcode/2000/event_emitter"},next:{title:"6204. Largest Positive Integer That Exists With Its Negative",permalink:"/docs/leetcode/2000/largest_positive_int_that_exists_with_its_negative"}},c={},d=[{value:"Python",id:"python",level:2}],l={toc:d},u="wrapper";function m(e){let{components:t,...r}=e;return(0,i.kt)(u,(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/divide-array-into-arrays-with-max-difference"},"https://leetcode.com/problems/divide-array-into-arrays-with-max-difference")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def divideArray(self, nums: List[int], k: int) -> List[List[int]]:\n        nums.sort()\n        result = []\n        for i in range(1, len(nums), 3):\n            if  nums[i]-nums[i-1] <= k \\\n            and nums[i+1]-nums[i] <= k \\\n            and nums[i+1]-nums[i-1] <= k:\n                result.append([nums[i-1], nums[i], nums[i+1]])\n            else:\n                return []\n\n        return result\n")))}m.isMDXComponent=!0}}]);