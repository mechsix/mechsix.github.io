"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[1394],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return f}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var a=r.createContext({}),p=function(e){var t=r.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(a.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=p(n),f=o,m=d["".concat(a,".").concat(f)]||d[f]||u[f]||i;return n?r.createElement(m,c(c({ref:t},s),{},{components:n})):r.createElement(m,c({ref:t},s))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,c=new Array(i);c[0]=d;var l={};for(var a in t)hasOwnProperty.call(t,a)&&(l[a]=t[a]);l.originalType=e,l.mdxType="string"==typeof e?e:o,c[1]=l;for(var p=2;p<i;p++)c[p]=n[p];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},77037:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return a},metadata:function(){return p},toc:function(){return s},default:function(){return d}});var r=n(87462),o=n(63366),i=(n(67294),n(3905)),c=["components"],l={title:"1064. Fixed Point",sidebar_label:"1064. Fixed Point",tags:["Leetcode Easy","Binary Search"]},a=void 0,p={unversionedId:"leetcode/1001-1500/fixed_point",id:"leetcode/1001-1500/fixed_point",title:"1064. Fixed Point",description:"https://leetcode.com/problems/fixed-point/",source:"@site/docs/leetcode/1001-1500/1064_fixed_point.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/fixed_point",permalink:"/docs/leetcode/1001-1500/fixed_point",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1064_fixed_point.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Binary Search",permalink:"/docs/tags/binary-search"}],version:"current",sidebarPosition:1064,frontMatter:{title:"1064. Fixed Point",sidebar_label:"1064. Fixed Point",tags:["Leetcode Easy","Binary Search"]},sidebar:"docSidebar",previous:{title:"1051. Height Checker",permalink:"/docs/leetcode/1001-1500/height_checker"},next:{title:"1089. Duplicate Zeros",permalink:"/docs/leetcode/1001-1500/duplicate_zeros"}},s=[{value:"Python",id:"python",children:[],level:2},{value:"Go",id:"go",children:[],level:2}],u={toc:s};function d(e){var t=e.components,n=(0,o.Z)(e,c);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/fixed-point/"},"https://leetcode.com/problems/fixed-point/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def fixedPoint(self, arr: List[int]) -> int:\n        l, r = 0, len(arr)-1\n\n        result = -1\n        while l <= r:\n            pivot = (l+r) // 2\n\n            if arr[pivot] == pivot:\n                result = pivot\n                r = pivot - 1\n            elif arr[pivot] < pivot:\n                l = pivot + 1\n            else:\n                r = pivot - 1\n        return result\n")),(0,i.kt)("h2",{id:"go"},"Go"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"func fixedPoint(arr []int) int {\n    l, r := 0, len(arr)-1\n\n    result := -1\n    for l <= r {\n        pivot := (l+r) / 2\n        if (arr[pivot] == pivot) {\n            result = pivot\n            r = pivot - 1\n        } else if (arr[pivot] < pivot) {\n            l = pivot + 1\n        } else {\n            r = pivot - 1\n        }\n    }\n    return result\n}\n")))}d.isMDXComponent=!0}}]);