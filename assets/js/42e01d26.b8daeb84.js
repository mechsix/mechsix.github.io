"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[43540],{3905:(e,r,n)=>{n.d(r,{Zo:()=>s,kt:()=>p});var t=n(67294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function c(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function a(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=t.createContext({}),l=function(e){var r=t.useContext(d),n=r;return e&&(n="function"==typeof e?e(r):c(c({},r),e)),n},s=function(e){var r=l(e.components);return t.createElement(d.Provider,{value:r},e.children)},u="mdxType",w={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},h=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,i=e.originalType,d=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),u=l(n),h=o,p=u["".concat(d,".").concat(h)]||u[h]||w[h]||i;return n?t.createElement(p,c(c({ref:r},s),{},{components:n})):t.createElement(p,c({ref:r},s))}));function p(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=n.length,c=new Array(i);c[0]=h;var a={};for(var d in r)hasOwnProperty.call(r,d)&&(a[d]=r[d]);a.originalType=e,a[u]="string"==typeof e?e:o,c[1]=a;for(var l=2;l<i;l++)c[l]=n[l];return t.createElement.apply(null,c)}return t.createElement.apply(null,n)}h.displayName="MDXCreateElement"},57600:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>c,default:()=>w,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var t=n(87462),o=(n(67294),n(3905));const i={title:"212. Word Search II",sidebar_label:"212. Word Search II",tags:["Leetcode Hard","Backtracking"]},c=void 0,a={unversionedId:"leetcode/1-500/word_search_ii",id:"leetcode/1-500/word_search_ii",title:"212. Word Search II",description:"https://leetcode.com/problems/word-search-ii/",source:"@site/docs/leetcode/1-500/212_word_search_ii.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/word_search_ii",permalink:"/docs/leetcode/1-500/word_search_ii",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/212_word_search_ii.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"Backtracking",permalink:"/docs/tags/backtracking"}],version:"current",sidebarPosition:212,frontMatter:{title:"212. Word Search II",sidebar_label:"212. Word Search II",tags:["Leetcode Hard","Backtracking"]},sidebar:"docSidebar",previous:{title:"211. Design Add and Search Words Data Structure",permalink:"/docs/leetcode/1-500/design_add_and_search_words_data_structure"},next:{title:"213. House Robber II",permalink:"/docs/leetcode/1-500/house_robber_ii"}},d={},l=[{value:"Python",id:"python",level:2},{value:"Backtracking (Timelimit Exceed)",id:"backtracking-timelimit-exceed",level:3},{value:"Javascript",id:"javascript",level:2}],s={toc:l},u="wrapper";function w(e){let{components:r,...n}=e;return(0,o.kt)(u,(0,t.Z)({},s,n,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/word-search-ii/"},"https://leetcode.com/problems/word-search-ii/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"backtracking-timelimit-exceed"},"Backtracking (Timelimit Exceed)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:\n        row_limit = len(board)\n        col_limit = len(board[0])\n\n        length_limit = max([len(word) for word in words])\n        used = set()\n\n        accepts = set(words)\n        result = set()\n\n        def backtrack(word, row, col):\n            word = word + board[row][col]\n\n            if len(word) > length_limit:\n                return\n\n            if word in accepts:\n                result.add(word)\n\n            used.add((row, col))\n\n            # Go up\n            if row - 1 >= 0 and (row-1, col) not in used:\n                backtrack(word, row-1, col)\n\n            # Go down\n            if row + 1 < row_limit and (row+1, col) not in used:\n                backtrack(word, row+1, col)\n\n            # Go left\n            if col - 1 >= 0 and (row, col-1) not in used:\n                backtrack(word, row, col-1)\n\n            # Go right\n            if col + 1 < col_limit and (row, col+1) not in used:\n                backtrack(word, row, col+1)\n\n            used.remove((row, col))\n\n        for row in range(row_limit):\n            for col in range(col_limit):\n                backtrack('', row, col)\n        return result\n")),(0,o.kt)("h2",{id:"javascript"},"Javascript"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"var findWords = function (board, words) {\n  const trie = new Trie();\n  trie.create(words)\n  const trieRoot = trie.get();\n\n    this.finding = new Finding(board);\n    return this.finding.findWords(trieRoot);\n};\n\nclass Finding {\n    constructor(board) {\n        this.board = board;\n        this.maxRows = board.length;\n        this.maxCols = board[0].length;\n    this.result = [];\n    }\n\n    findWords(root) {\n    for (let row = 0; row < this.board.length; row++) {\n      for (let col = 0; col < this.board[row].length; col++) {\n        if (root.childs[this.board[row][col]]) {\n          this.find(row, col, root)\n        }\n      }\n    }\n    // console.log(this.result)\n    return this.result;\n    }\n\n    find(row, col, root) {\n    const letter = this.board[row][col];\n    const currNode = root.childs[letter];\n\n    if (currNode.word) {\n      this.result.push(currNode.word)\n      currNode.word = '';\n    }\n\n        this.board[row][col] = null;\n    // console.log(this.board)\n\n        const directions = [ [0, 1], [0, -1], [1, 0], [-1, 0] ];\n\n        for (const [x, y] of directions) {\n      const nextRow = row + x;\n      const nextCol = col + y;\n\n      if ( nextRow >= 0 && nextRow < this.maxRows && nextCol >= 0 && nextCol < this.maxCols) {\n        const nextLetter = this.board[nextRow][nextCol];\n        // console.log(currNode.childs[nextLetter])\n        if (currNode.childs[nextLetter]) {\n          this.find(nextRow, nextCol, currNode)\n        }\n      }\n        }\n\n    this.board[row][col] = letter;\n    }\n}\n\nclass TrieNode {\n  constructor() {\n    this.childs = {};\n    this.word = '';\n  }\n}\n\nclass Trie {\n  constructor() {\n    this.root = new TrieNode();\n  }\n\n  create(words) {\n    for (const word of words) {\n      let node = this.root;\n      for (let letter of word) {\n        if (node.childs[letter]) {\n          node = node.childs[letter];\n        } else {\n          const newNode = new TrieNode();\n          node.childs[letter] = newNode;\n          node = newNode;\n        }\n      }\n      node.word = word;\n    }\n  }\n\n  get() { return this.root; }\n}\n")))}w.isMDXComponent=!0}}]);