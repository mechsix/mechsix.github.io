"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[336],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return m}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),u=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},s=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=u(r),f=o,m=p["".concat(c,".").concat(f)]||p[f]||d[f]||i;return r?n.createElement(m,a(a({ref:t},s),{},{components:r})):n.createElement(m,a({ref:t},s))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=f;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:o,a[1]=l;for(var u=2;u<i;u++)a[u]=r[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},64318:function(e,t,r){r.r(t),r.d(t,{assets:function(){return c},contentTitle:function(){return a},default:function(){return p},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return u}});var n=r(83117),o=(r(67294),r(3905));const i={title:"2405. Optimal Partition of String",sidebar_label:"2405. Optimal Partition of String",tags:["Leetcode Medium","Hash","Greedy"]},a=void 0,l={unversionedId:"leetcode/2000/optimal_partition_of_string",id:"leetcode/2000/optimal_partition_of_string",title:"2405. Optimal Partition of String",description:"Python",source:"@site/docs/leetcode/2000/2405_optimal_partition_of_string.md",sourceDirName:"leetcode/2000",slug:"/leetcode/2000/optimal_partition_of_string",permalink:"/docs/leetcode/2000/optimal_partition_of_string",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/2000/2405_optimal_partition_of_string.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Hash",permalink:"/docs/tags/hash"},{label:"Greedy",permalink:"/docs/tags/greedy"}],version:"current",sidebarPosition:2405,frontMatter:{title:"2405. Optimal Partition of String",sidebar_label:"2405. Optimal Partition of String",tags:["Leetcode Medium","Hash","Greedy"]},sidebar:"docSidebar",previous:{title:"2348. Number of Zero-Filled Subarrays",permalink:"/docs/leetcode/2000/num_of_zero_filled_subarrays"},next:{title:"2477. Minimum Fuel Cost to Report to the Capital",permalink:"/docs/leetcode/2000/min_fuel_cost_to_report_to_the_capital"}},c={},u=[{value:"Python",id:"python",level:2},{value:"Greedy",id:"greedy",level:3}],s={toc:u};function p(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"greedy"},"Greedy"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def partitionString(self, s: str) -> int:\n        if len(s) == 1:\n            return 1\n\n        partition = set()\n\n        counter = 1\n        for letter in s:\n            if letter in partition:\n                partition = set()\n                counter += 1\n            partition.add(letter)\n\n        return counter\n")))}p.isMDXComponent=!0}}]);