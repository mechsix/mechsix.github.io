"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[967],{80054:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"leetcode/1-500/find_median_from_data_stream","title":"295. Find Median from Data Stream","description":"Python","source":"@site/docs/leetcode/1-500/295_find_median_from_data_stream.md","sourceDirName":"leetcode/1-500","slug":"/leetcode/1-500/find_median_from_data_stream","permalink":"/docs/leetcode/1-500/find_median_from_data_stream","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Hard","permalink":"/docs/tags/leetcode-hard"},{"inline":true,"label":"Heap","permalink":"/docs/tags/heap"}],"version":"current","sidebarPosition":295,"frontMatter":{"title":"295. Find Median from Data Stream","sidebar_label":"295. Find Median from Data Stream","tags":["Leetcode Hard","Heap"]},"sidebar":"docSidebar","previous":{"title":"290. Word Pattern","permalink":"/docs/leetcode/1-500/word_pattern"},"next":{"title":"297. Serialize and Deserialize Binary Tree","permalink":"/docs/leetcode/1-500/serialize_descrialize_bt"}}');var i=a(74848),r=a(28453);const s={title:"295. Find Median from Data Stream",sidebar_label:"295. Find Median from Data Stream",tags:["Leetcode Hard","Heap"]},l=void 0,o={},d=[{value:"Python",id:"python",level:2},{value:"Two Heap",id:"two-heap",level:3}];function p(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,i.jsx)(n.h3,{id:"two-heap",children:"Two Heap"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u7528\u5169\u500bheap\u5b58\u5927\u7684\u90a3\u4e00\u534a\u8ddf\u5c0f\u7684\u90a3\u4e00\u534a"}),"\n",(0,i.jsx)(n.li,{children:"\u5927\u7684\u90a3\u534a\u7528Min Heap\u505a\uff0c\u65b9\u4fbf\u627e\u6700\u5c0f\u503c\uff1b\u5c0f\u7684\u90a3\u534a\u7528Max Heap\u505a\uff0c\u65b9\u4fbf\u627e\u6700\u5927\u503c"}),"\n",(0,i.jsx)(n.li,{children:"\u63d2\u5165num\u6642\uff0c\u4e00\u7387\u5148\u63d2\u5165\u5927\u7684\u90a3\u534a\uff0c\u518d\u5f9e\u5927\u7684\u90a3\u534a\u627e\u6700\u5c0f\u503c\u585e\u56de\u5c0f\u7684\u90a3\u534a"}),"\n",(0,i.jsx)(n.li,{children:"\u5224\u65b7\u7e3d\u6578\u662f\u5076\u6578\u6216\u5947\u6578\uff0c\u6c7a\u5b9a\u4e2d\u4f4d\u6578\u662f\u55ae\u4e00\u6578\u5b57\u6216\u4e2d\u9593\u5169\u500b\u5e73\u5747"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import heapq\n\n\nclass MedianFinder:\n    def __init__(self):\n        min_heap = []\n        max_heap = []\n\n        heapq.heapify(min_heap)\n        heapq.heapify(max_heap)\n\n        self.min_heap = min_heap\n        self.max_heap = max_heap\n\n\n    def addNum(self, num: int) -> None:\n        heapq.heappush(self.min_heap, num)\n        heapq.heappush(self.max_heap, -heapq.heappop(self.min_heap))\n\n        if len(self.min_heap) < len(self.max_heap):\n            heapq.heappush(self.min_heap, -heapq.heappop(self.max_heap))\n\n    def findMedian(self) -> float:\n        if len(self.min_heap) > len(self.max_heap):\n            return self.min_heap[0]\n        else:\n            return (self.min_heap[0] + (-self.max_heap[0]) ) / 2\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},28453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>l});var t=a(96540);const i={},r=t.createContext(i);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);