"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[93126],{61824:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>i});const r=JSON.parse('{"id":"leetcode/1-500/balanced_binary_tree","title":"110. Balanced Binary Tree","description":"https://leetcode.com/problems/balanced-binary-tree/","source":"@site/docs/leetcode/1-500/110_balanced_binary_tree.md","sourceDirName":"leetcode/1-500","slug":"/leetcode/1-500/balanced_binary_tree","permalink":"/docs/leetcode/1-500/balanced_binary_tree","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Easy","permalink":"/docs/tags/leetcode-easy"},{"inline":true,"label":"Binary Tree","permalink":"/docs/tags/binary-tree"}],"version":"current","sidebarPosition":110,"frontMatter":{"title":"110. Balanced Binary Tree","slidebar_label":"110. Balanced Binary Tree","tags":["Leetcode Easy","Binary Tree"]},"sidebar":"docSidebar","previous":{"title":"109. Convert Sorted List to Binary Search Tree","permalink":"/docs/leetcode/1-500/convert_sorted_list_to_hight_balanced_bst"},"next":{"title":"111. Minimum Depth of Binary Tree","permalink":"/docs/leetcode/1-500/min_depth_of_binary_tree"}}');var o=t(74848),a=t(28453);const l={title:"110. Balanced Binary Tree",slidebar_label:"110. Balanced Binary Tree",tags:["Leetcode Easy","Binary Tree"]},c=void 0,s={},i=[{value:"Python",id:"python",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://leetcode.com/problems/balanced-binary-tree/",children:"https://leetcode.com/problems/balanced-binary-tree/"})}),"\n",(0,o.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"\u96d9\u5c64\u7684recursion..."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def get_depth(self, node):\n        if not node:\n            return -1\n        return 1 + max(self.get_depth(node.left), self.get_depth(node.right))\n\n    def check(self, node):\n        if not node:\n            return True\n        return abs(self.get_depth(node.left) - self.get_depth(node.right)) <= 1 \\\n            and self.check(node.left) \\\n            and self.check(node.right)\n\n    def isBalanced(self, root: Optional[TreeNode]) -> bool:\n        return self.check(root)\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>c});var r=t(96540);const o={},a=r.createContext(o);function l(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);