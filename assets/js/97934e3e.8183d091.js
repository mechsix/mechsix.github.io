"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[91530],{87023:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"leetcode/1-500/longest_palindromic_substring","title":"5. Longest Palindromic Substring","description":"https://leetcode.com/problems/longest-palindromic-substring/","source":"@site/docs/leetcode/1-500/5_longest_palindromic_substring.md","sourceDirName":"leetcode/1-500","slug":"/leetcode/1-500/longest_palindromic_substring","permalink":"/docs/leetcode/1-500/longest_palindromic_substring","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Medium","permalink":"/docs/tags/leetcode-medium"},{"inline":true,"label":"DP","permalink":"/docs/tags/dp"},{"inline":true,"label":"TODO","permalink":"/docs/tags/todo"}],"version":"current","sidebarPosition":5,"frontMatter":{"title":"5. Longest Palindromic Substring","sidebar_label":"5. Longest Palindromic Substring","tags":["Leetcode Medium","DP","TODO"]},"sidebar":"docSidebar","previous":{"title":"4. Median of Two Sorted Arrays","permalink":"/docs/leetcode/1-500/median_two_sorted_array"},"next":{"title":"6. Zigzag Conversion","permalink":"/docs/leetcode/1-500/zigzag_conversion"}}');var r=t(74848),i=t(28453);const o={title:"5. Longest Palindromic Substring",sidebar_label:"5. Longest Palindromic Substring",tags:["Leetcode Medium","DP","TODO"]},l=void 0,a={},c=[{value:"Python",id:"python",level:2},{value:"Forces Bust (Timeout)",id:"forces-bust-timeout",level:3},{value:"Expand from center",id:"expand-from-center",level:3},{value:"Javascript",id:"javascript",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/longest-palindromic-substring/",children:"https://leetcode.com/problems/longest-palindromic-substring/"})}),"\n",(0,r.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,r.jsx)(n.h3,{id:"forces-bust-timeout",children:"Forces Bust (Timeout)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Solution:\n    def longestPalindrome(self, s: str) -> str:\n        if len(s) < 2:\n            return s\n\n        longest = ""\n        for left in range(len(s)):\n            for right in range(left, len(s)):\n                candidate = s[left:right+1]\n                if candidate == candidate[::-1]:\n                    longest = candidate if len(candidate) > len(longest) else longest\n        return longest\n'})}),"\n",(0,r.jsx)(n.h3,{id:"expand-from-center",children:"Expand from center"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def longestPalindrome(self, s: str) -> str:\n        segment = s[0]\n\n        for cur in range(len(s)):\n            # Consider cur as middle (length are odd)\n            for step in range(1, len(s)//2+1):\n                if cur - step < 0 or cur + step > len(s)-1:\n                    break\n                if s[cur-step] == s[cur+step]:\n                    if step*2+1 > len(segment):\n                        segment = s[cur-step:cur+step+1]\n                else:\n                    break\n\n            # Consider center is between cur & cur+1 (length are even)\n            if cur + 1 >= len(s):\n                continue\n\n            left, right = cur, cur+1\n            if s[left] != s[right]:\n                continue\n\n            while left-1 >= 0 and right+1 < len(s):\n                if s[left-1] == s[right+1]:\n                    left -= 1\n                    right += 1\n                else:\n                    break\n\n            if right - left + 1 > len(segment):\n                segment = s[left:right+1]\n\n        return segment\n"})}),"\n",(0,r.jsx)(n.h2,{id:"javascript",children:"Javascript"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var longestPalindrome = function(s) {\n  const dp = [...new Array(s.length)].map(() => new Array(s.length).fill(false));\n\n  let ans = ''\n  for (let i = 0; i < s.length; i++) {\n    dp[i][i] = true;\n    ans = s[i];\n  }\n\n  let maxLen = 1;\n  for (let start = s.length - 2; start >= 0; start--) {\n    for (let end = start + 1; end < s.length; end++) {\n      if (s[start] === s[end]) {\n        if (start + 1 === end || dp[start + 1][end - 1]) {\n          dp[start][end] = true;\n          const tmpLen = end - start + 1;\n          if (maxLen < tmpLen) {\n            maxLen = end - start + 1;\n            ans = s.slice(start, end + 1)\n          }\n        }\n      }\n    }\n  }\n  \n  return ans;\n};\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var s=t(96540);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);