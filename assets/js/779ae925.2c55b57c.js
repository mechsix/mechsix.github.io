"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[89958],{21721:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"leetcode/1501-2000/merge_strings_alternately","title":"1768. Merge Strings Alternately","description":"https://leetcode.com/problems/merge-strings-alternately/","source":"@site/docs/leetcode/1501-2000/1768_merge_strings_alternately.md","sourceDirName":"leetcode/1501-2000","slug":"/leetcode/1501-2000/merge_strings_alternately","permalink":"/docs/leetcode/1501-2000/merge_strings_alternately","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Easy","permalink":"/docs/tags/leetcode-easy"}],"version":"current","sidebarPosition":1768,"frontMatter":{"title":"1768. Merge Strings Alternately","sidebar_label":"1768. Merge Strings Alternately","tags":["Leetcode Easy"]},"sidebar":"docSidebar","previous":{"title":"1757. Recyclable and Low Fat Products","permalink":"/docs/leetcode/1501-2000/recyclable_and_low_fat_products"},"next":{"title":"1770. Maximum Score from Performing Multiplication Operations","permalink":"/docs/leetcode/1501-2000/max_score_from_performing_multiplication_operations"}}');var s=r(74848),o=r(28453);const l={title:"1768. Merge Strings Alternately",sidebar_label:"1768. Merge Strings Alternately",tags:["Leetcode Easy"]},i=void 0,a={},c=[{value:"Python",id:"python",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://leetcode.com/problems/merge-strings-alternately/",children:"https://leetcode.com/problems/merge-strings-alternately/"})}),"\n",(0,s.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"class Solution:\n    def mergeAlternately(self, word1: str, word2: str) -> str:\n        result = [] \n\n        letters1 = list(word1[::-1])\n        letters2 = list(word2[::-1])\n\n        is_word1 = True\n\n        while letters1 or letters2:\n            if is_word1:\n                if letters1:\n                    result.append(letters1.pop())\n                is_word1 = False\n            \n            if not is_word1:\n                if letters2:\n                    result.append(letters2.pop())\n                is_word1 = True\n        \n        return ''.join(result)\n"})})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>l,x:()=>i});var n=r(96540);const s={},o=n.createContext(s);function l(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);