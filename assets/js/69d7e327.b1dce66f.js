"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[42404],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(n),f=o,d=p["".concat(c,".").concat(f)]||p[f]||m[f]||a;return n?r.createElement(d,i(i({ref:t},u),{},{components:n})):r.createElement(d,i({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},69898:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(87462),o=(n(67294),n(3905));const a={title:"349. Intersection of Two Arrays",sidebar_label:"349. Intersection of Two Arrays",tags:["Leetcode Easy","Go"]},i=void 0,s={unversionedId:"leetcode/1-500/intersection_of_two_arrays",id:"leetcode/1-500/intersection_of_two_arrays",title:"349. Intersection of Two Arrays",description:"https://leetcode.com/problems/intersection-of-two-arrays",source:"@site/docs/leetcode/1-500/349_intersection_of_two_arrays.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/intersection_of_two_arrays",permalink:"/docs/leetcode/1-500/intersection_of_two_arrays",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/349_intersection_of_two_arrays.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Go",permalink:"/docs/tags/go"}],version:"current",sidebarPosition:349,frontMatter:{title:"349. Intersection of Two Arrays",sidebar_label:"349. Intersection of Two Arrays",tags:["Leetcode Easy","Go"]},sidebar:"docSidebar",previous:{title:"347. Top K Frequent Elements",permalink:"/docs/leetcode/1-500/top_k_frequent_elms"},next:{title:"350. Intersection of Two Arrays II",permalink:"/docs/leetcode/1-500/intersection_of_two_arrays_ii"}},c={},l=[{value:"Python",id:"python",level:2},{value:"Go",id:"go",level:2}],u={toc:l},p="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/intersection-of-two-arrays"},"https://leetcode.com/problems/intersection-of-two-arrays")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        return list(set(nums1) & set(nums2))\n")),(0,o.kt)("h2",{id:"go"},"Go"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func intersection(nums1 []int, nums2 []int) []int {\n    // Covert nums2 into map, key as num2, value with true (whatever)\n    nums2Map := map[int]bool{}\n    for _, num2 := range nums2 {\n        nums2Map[num2] = true\n    }\n\n    // If num1 in nums2, append to resultMap\n    // Duplicate item will be overwrite\n    resultMap := map[int]bool{}\n    for _, num1 := range nums1 {\n        if _, exist := nums2Map[num1]; exist {\n            resultMap[num1] = true\n        }\n    }\n\n    // Covert resultMap back to []int\n    i := 0\n    result := make([]int, len(resultMap))\n    for num, _ := range resultMap {\n        result[i] = num\n        i++\n    }\n\n    return result\n}\n")))}m.isMDXComponent=!0}}]);