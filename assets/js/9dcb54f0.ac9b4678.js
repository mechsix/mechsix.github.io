"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[75533],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>d});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},m=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},f="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),f=s(r),u=o,d=f["".concat(c,".").concat(u)]||f[u]||p[u]||a;return r?n.createElement(d,l(l({ref:t},m),{},{components:r})):n.createElement(d,l({ref:t},m))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[f]="string"==typeof e?e:o,l[1]=i;for(var s=2;s<a;s++)l[s]=r[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},14485:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var n=r(87462),o=(r(67294),r(3905));const a={title:"289. Game of Life",sidebar_label:"289. Game of Life",tags:["Leetcode Medium","Matrix"]},l=void 0,i={unversionedId:"leetcode/1-500/game_of_life",id:"leetcode/1-500/game_of_life",title:"289. Game of Life",description:"https://leetcode.com/problems/game-of-life/",source:"@site/docs/leetcode/1-500/289_game_of_life.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/game_of_life",permalink:"/docs/leetcode/1-500/game_of_life",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/289_game_of_life.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Matrix",permalink:"/docs/tags/matrix"}],version:"current",sidebarPosition:289,frontMatter:{title:"289. Game of Life",sidebar_label:"289. Game of Life",tags:["Leetcode Medium","Matrix"]},sidebar:"docSidebar",previous:{title:"284. Peeking Iterator",permalink:"/docs/leetcode/1-500/peeking_iterator"},next:{title:"290. Word Pattern",permalink:"/docs/leetcode/1-500/word_pattern"}},c={},s=[{value:"Python",id:"python",level:2}],m={toc:s},f="wrapper";function p(e){let{components:t,...r}=e;return(0,o.kt)(f,(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/game-of-life/"},"https://leetcode.com/problems/game-of-life/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Time: O(m*n+k)"),(0,o.kt)("li",{parentName:"ul"},"Space: O(k)  # k is the matched of rule 1, 3, 4")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def gameOfLife(self, board: List[List[int]]) -> None:\n        m, n = len(board), len(board[0])\n\n        matches = []   # (row, col, new_value)\n\n        for row in range(m):\n            for col in range(n):\n                lives = self.count_lives_neighbors(board, row, col)\n                if board[row][col] == 1:\n                    if lives < 2 or lives > 3:\n                        # Rule 1 & 3\n                        matches.append((row, col, 0))\n                else:\n                    # Rule 4\n                    if lives == 3:\n                        matches.append((row, col, 1))\n\n        for match in matches:\n            row, col, value = match\n            board[row][col] = value\n\n\n    @staticmethod\n    def count_lives_neighbors(board, row, col):\n        count = 0\n        for r in range(max(0, row-1), min(row+2, len(board))):\n            for c in range(max(0, col-1), min(col+2, len(board[0]))):\n                count += board[r][c]\n        return count - board[row][col]\n")))}p.isMDXComponent=!0}}]);