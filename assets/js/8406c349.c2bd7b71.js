"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[44778],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>f});var o=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=o.createContext({}),p=function(e){var t=o.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=p(e.components);return o.createElement(c.Provider,{value:t},e.children)},u="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(r),m=n,f=u["".concat(c,".").concat(m)]||u[m]||s[m]||a;return r?o.createElement(f,i(i({ref:t},d),{},{components:r})):o.createElement(f,i({ref:t},d))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:n,i[1]=l;for(var p=2;p<a;p++)i[p]=r[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}m.displayName="MDXCreateElement"},22177:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>s,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var o=r(87462),n=(r(67294),r(3905));const a={title:"1339. Maximum Product of Splitted Binary Tree",sidebar_label:"1339. Maximum Product of Splitted Binary Tree",tags:["Leetcode Medium","Binary Tree"]},i=void 0,l={unversionedId:"leetcode/1001-1500/max_product_of_splited_binary_tree",id:"leetcode/1001-1500/max_product_of_splited_binary_tree",title:"1339. Maximum Product of Splitted Binary Tree",description:"https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/",source:"@site/docs/leetcode/1001-1500/1339_max_product_of_splited_binary_tree.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/max_product_of_splited_binary_tree",permalink:"/docs/leetcode/1001-1500/max_product_of_splited_binary_tree",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1339_max_product_of_splited_binary_tree.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"}],version:"current",sidebarPosition:1339,frontMatter:{title:"1339. Maximum Product of Splitted Binary Tree",sidebar_label:"1339. Maximum Product of Splitted Binary Tree",tags:["Leetcode Medium","Binary Tree"]},sidebar:"docSidebar",previous:{title:"1338. Reduce Array Size to The Half",permalink:"/docs/leetcode/1001-1500/reduce_array_size_to_the_half"},next:{title:"1342. Number of Steps to Reduce a Number to Zero",permalink:"/docs/leetcode/1001-1500/number_steps_to_reduce_num_to_zero"}},c={},p=[{value:"Python",id:"python",level:2},{value:"Postorder for prefix sum",id:"postorder-for-prefix-sum",level:3}],d={toc:p},u="wrapper";function s(e){let{components:t,...r}=e;return(0,n.kt)(u,(0,o.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/"},"https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/")),(0,n.kt)("h2",{id:"python"},"Python"),(0,n.kt)("h3",{id:"postorder-for-prefix-sum"},"Postorder for prefix sum"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"from typing import Optional\n\n\nclass Solution:\n    def maxProduct(self, root: Optional[TreeNode]) -> int:\n        prefix = []\n        def postorder(node):\n            if not node:\n                return 0\n            total = postorder(node.left) + postorder(node.right) + node.val\n            prefix.append(total)\n            return total\n\n        full_total = postorder(root)\n\n        ans = 0\n        for total in prefix:\n            ans = max(ans, total*(full_total-total))\n\n        return ans % (10 ** 9 + 7)\n")))}s.isMDXComponent=!0}}]);