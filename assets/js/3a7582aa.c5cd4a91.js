"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[8189],{3905:function(e,r,t){t.d(r,{Zo:function(){return u},kt:function(){return p}});var n=t(67294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=n.createContext({}),s=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},u=function(e){var r=s(e.components);return n.createElement(l.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),m=s(t),p=a,f=m["".concat(l,".").concat(p)]||m[p]||d[p]||o;return t?n.createElement(f,i(i({ref:r},u),{},{components:t})):n.createElement(f,i({ref:r},u))}));function p(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var c={};for(var l in r)hasOwnProperty.call(r,l)&&(c[l]=r[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=t[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},70479:function(e,r,t){t.r(r),t.d(r,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return u},default:function(){return m}});var n=t(87462),a=t(63366),o=(t(67294),t(3905)),i=["components"],c={title:"74. Search a 2D Matrix",sidebar_label:"74. Search a 2D Matrix",tags:["Leetcode Medium","Binary Search"]},l=void 0,s={unversionedId:"leetcode/1-500/search_2d_matrix",id:"leetcode/1-500/search_2d_matrix",title:"74. Search a 2D Matrix",description:"https://leetcode.com/problems/search-a-2d-matrix",source:"@site/docs/leetcode/1-500/74_search_2d_matrix.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/search_2d_matrix",permalink:"/docs/leetcode/1-500/search_2d_matrix",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/74_search_2d_matrix.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Binary Search",permalink:"/docs/tags/binary-search"}],version:"current",sidebarPosition:74,frontMatter:{title:"74. Search a 2D Matrix",sidebar_label:"74. Search a 2D Matrix",tags:["Leetcode Medium","Binary Search"]},sidebar:"docSidebar",previous:{title:"70. Climbing Stairs",permalink:"/docs/leetcode/1-500/climbing_stairs"},next:{title:"88. Merge Sorted Array",permalink:"/docs/leetcode/1-500/merge_sorted_array"}},u=[{value:"Python",id:"python",children:[],level:2}],d={toc:u};function m(e){var r=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},d,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/search-a-2d-matrix"},"https://leetcode.com/problems/search-a-2d-matrix")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        m = len(matrix[0])\n        n = len(matrix)\n\n        l, r = 0, m*n-1\n\n        while l <= r:\n            cur = (l+r)//2\n            col_index = cur % m\n            row_index = cur // m\n\n            if matrix[row_index][col_index] == target:\n                return True\n            if matrix[row_index][col_index] < target:\n                l = cur + 1\n            else:\n                r = cur - 1\n\n        return False\n")))}m.isMDXComponent=!0}}]);