"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[1367],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(n),m=a,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},89199:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return c},default:function(){return u},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return p}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),i=["components"],l={title:"763. Partition Labels",sidebar_label:"763. Partition Labels",tags:["Leetcode Medium","Greedy"]},c=void 0,s={unversionedId:"leetcode/1-500/partition_labels",id:"leetcode/1-500/partition_labels",title:"763. Partition Labels",description:"https://leetcode.com/problems/partition-labels/",source:"@site/docs/leetcode/1-500/763_partition_labels.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/partition_labels",permalink:"/docs/leetcode/1-500/partition_labels",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/763_partition_labels.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Greedy",permalink:"/docs/tags/greedy"}],version:"current",sidebarPosition:763,frontMatter:{title:"763. Partition Labels",sidebar_label:"763. Partition Labels",tags:["Leetcode Medium","Greedy"]},sidebar:"docSidebar",previous:{title:"495. Teemo Attacking",permalink:"/docs/leetcode/1-500/teemo_attack"},next:{title:"456. 132 Pattern",permalink:"/docs/leetcode/1-500/456_132_pattern"}},p=[{value:"Python",id:"python",children:[{value:"Greedy",id:"greedy",children:[],level:3}],level:2}],d={toc:p};function u(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/partition-labels/"},"https://leetcode.com/problems/partition-labels/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"greedy"},"Greedy"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Time: O(N)"),(0,o.kt)("li",{parentName:"ul"},"Space: O(N)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def partitionLabels(self, s: str) -> List[int]:\n        last_seem = {char: index for index, char in enumerate(s)}\n\n        start, end = 0, 0\n\n        ans = []\n        for index, char in enumerate(s):\n            end = max(end, last_seem[char])\n            if index == end:\n                ans.append(end+1 - start)\n                start = index + 1\n\n        return ans\n")),(0,o.kt)("p",null,"Or, you'd like to see what those partitions are"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def partitionLabels(self, s: str) -> List[int]:\n        last_seem = {char: index for index, char in enumerate(s)}\n\n        start, end = 0, 0\n        partitions = []\n        for index, char in enumerate(s):\n            end = max(end, last_seem[char])\n            if index == end:\n                partitions.append(s[start:end+1])\n                start = index + 1\n\n        return [len(part) for part in partitions]\n")))}u.isMDXComponent=!0}}]);