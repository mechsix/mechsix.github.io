"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[80979],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),m=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=m(e.components);return n.createElement(s.Provider,{value:t},e.children)},l="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),l=m(r),p=o,f=l["".concat(s,".").concat(p)]||l[p]||d[p]||i;return r?n.createElement(f,a(a({ref:t},u),{},{components:r})):n.createElement(f,a({ref:t},u))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=p;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[l]="string"==typeof e?e:o,a[1]=c;for(var m=2;m<i;m++)a[m]=r[m];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},78598:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>m});var n=r(87462),o=(r(67294),r(3905));const i={title:"1423. Maximum Points You Can Obtain from Cards",sidebar_label:"1423. Maximum Points You Can Obtain from Cards",tags:["Leetcode Medium","Prefix Sum"]},a=void 0,c={unversionedId:"leetcode/1501-2000/max_points_you_can_obtain_from_cards",id:"leetcode/1501-2000/max_points_you_can_obtain_from_cards",title:"1423. Maximum Points You Can Obtain from Cards",description:"https://leetcode.com/problems/maximum-points-you-can-obtain-from-cards/",source:"@site/docs/leetcode/1501-2000/1432_max_points_you_can_obtain_from_cards.md",sourceDirName:"leetcode/1501-2000",slug:"/leetcode/1501-2000/max_points_you_can_obtain_from_cards",permalink:"/docs/leetcode/1501-2000/max_points_you_can_obtain_from_cards",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1501-2000/1432_max_points_you_can_obtain_from_cards.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Prefix Sum",permalink:"/docs/tags/prefix-sum"}],version:"current",sidebarPosition:1432,frontMatter:{title:"1423. Maximum Points You Can Obtain from Cards",sidebar_label:"1423. Maximum Points You Can Obtain from Cards",tags:["Leetcode Medium","Prefix Sum"]},sidebar:"docSidebar",previous:{title:"1498. Number of Subsequences That Satisfy the Given Sum Condition",permalink:"/docs/leetcode/1001-1500/num_of_subsequences_satisfy_the_given_sum_condition"},next:{title:"1502. Can Make Arithmetic Progression From Sequence",permalink:"/docs/leetcode/1501-2000/can_make_arithmetic_progression_from_sequence"}},s={},m=[{value:"Python",id:"python",level:2},{value:"Two Direction Prefix Sum",id:"two-direction-prefix-sum",level:3}],u={toc:m},l="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(l,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/maximum-points-you-can-obtain-from-cards/"},"https://leetcode.com/problems/maximum-points-you-can-obtain-from-cards/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"two-direction-prefix-sum"},"Two Direction Prefix Sum"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def maxScore(self, cardPoints: List[int], k: int) -> int:\n        if k >= len(cardPoints):\n            return sum(cardPoints)\n\n        lefts, rights = [0], [0]\n\n        for i in range(0, k+1):\n            lefts.append(lefts[i]+cardPoints[i])\n            rights.append(rights[i]+cardPoints[len(cardPoints)-i-1])\n\n        max_score = 0\n        for i in range(k+1):\n            current = lefts[i] + rights[k-i]\n            max_score = max(max_score, current)\n\n        return max_score\n")))}d.isMDXComponent=!0}}]);