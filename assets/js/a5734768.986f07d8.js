"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[61923],{3905:function(e,r,t){t.d(r,{Zo:function(){return f},kt:function(){return m}});var n=t(67294);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function o(e,r){if(null==e)return{};var t,n,i=function(e,r){if(null==e)return{};var t,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=n.createContext({}),u=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},f=function(e){var r=u(e.components);return n.createElement(c.Provider,{value:r},e.children)},s="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,f=o(e,["components","mdxType","originalType","parentName"]),s=u(t),d=i,m=s["".concat(c,".").concat(d)]||s[d]||p[d]||a;return t?n.createElement(m,l(l({ref:r},f),{},{components:t})):n.createElement(m,l({ref:r},f))}));function m(e,r){var t=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var a=t.length,l=new Array(a);l[0]=d;var o={};for(var c in r)hasOwnProperty.call(r,c)&&(o[c]=r[c]);o.originalType=e,o[s]="string"==typeof e?e:i,l[1]=o;for(var u=2;u<a;u++)l[u]=t[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},71871:function(e,r,t){t.r(r),t.d(r,{assets:function(){return c},contentTitle:function(){return l},default:function(){return s},frontMatter:function(){return a},metadata:function(){return o},toc:function(){return u}});var n=t(83117),i=(t(67294),t(3905));const a={title:"745. Prefix and Suffix Search",sidebar_label:"745. Prefix and Suffix Search",tags:["Leetcode Hard","Trie"]},l=void 0,o={unversionedId:"leetcode/501-1000/prefix_and_suffix_search",id:"leetcode/501-1000/prefix_and_suffix_search",title:"745. Prefix and Suffix Search",description:"https://leetcode.com/problems/prefix-and-suffix-search/",source:"@site/docs/leetcode/501-1000/745_prefix_and_suffix_search.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/prefix_and_suffix_search",permalink:"/docs/leetcode/501-1000/prefix_and_suffix_search",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/745_prefix_and_suffix_search.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"Trie",permalink:"/docs/tags/trie"}],version:"current",sidebarPosition:745,frontMatter:{title:"745. Prefix and Suffix Search",sidebar_label:"745. Prefix and Suffix Search",tags:["Leetcode Hard","Trie"]},sidebar:"docSidebar",previous:{title:"744. Find Smallest Letter Greater Than Target",permalink:"/docs/leetcode/501-1000/find_smallest_letter_greater_than_target"},next:{title:"746. Min Cost Climbing Stairs",permalink:"/docs/leetcode/501-1000/min_cost_climbing_stairs"}},c={},u=[{value:"Python",id:"python",level:2}],f={toc:u};function s(e){let{components:r,...t}=e;return(0,i.kt)("wrapper",(0,n.Z)({},f,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/prefix-and-suffix-search/"},"https://leetcode.com/problems/prefix-and-suffix-search/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("p",null,"\u5c07\u5b58\u5165Trie Tree\u7684string\u505a\u9ede\u8b8a\u5316\uff0c\u65b9\u4fbf\u5f8c\u7e8c\u641c\u5c0b"),(0,i.kt)("p",null,"\u4ee5",(0,i.kt)("inlineCode",{parentName:"p"},"apple"),"\u70ba\u4f8b\uff0c\u5be6\u969b\u5b58\u9032Trie Tree\u7684\u5b57\u4e32\u70ba suffix + \u5206\u9694 + prefix"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"|apple"),(0,i.kt)("li",{parentName:"ul"},"e|apple"),(0,i.kt)("li",{parentName:"ul"},"le|apple"),(0,i.kt)("li",{parentName:"ul"},"ple|apple"),(0,i.kt)("li",{parentName:"ul"},"pple|apple"),(0,i.kt)("li",{parentName:"ul"},"apple|apple")),(0,i.kt)("p",null,"\u7576\u8981\u641c\u5c0b\u6642\uff0c\u56e0\u70basuffix\u5df2\u7d93\u88ab\u5c55\u958b\uff0c\u6240\u4ee5\u76f4\u63a5\u4ee5\u76f8\u540cpattern\u641c\u5c0bTrie tree\u5c31\u53ef\u5f97\u77e5\u7b54\u6848"),(0,i.kt)("p",null,"Initial"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Time: O(N * K^2)  # N: numer of words; K: longest word length"),(0,i.kt)("li",{parentName:"ul"},"Space: O(N * K^2)")),(0,i.kt)("p",null,"Search:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Time: O(P+S)  # P: prefix length; S: suffix length"),(0,i.kt)("li",{parentName:"ul"},"Space: O(1)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class WordFilter:\n    DELIMITER = '|'\n    EOS = '#'\n    WI = 'WI'\n    def __init__(self, words: List[str]):\n        trie = dict()\n        for weight, word in enumerate(words):\n            for i in range(len(word)+1):\n                cur = trie\n                cur[self.WI] = weight\n                for char in word[i:] + self.DELIMITER + word:\n                    cur = cur.setdefault(char, {})\n                    cur[self.WI] = weight\n\n                cur[self.EOS] = True\n\n        self.trie = trie\n\n    def f(self, prefix: str, suffix: str) -> int:\n        cur = self.trie\n        for char in suffix+self.DELIMITER+prefix:\n            if char not in cur:\n                return -1\n            cur = cur[char]\n\n        return cur[self.WI]\n")))}s.isMDXComponent=!0}}]);