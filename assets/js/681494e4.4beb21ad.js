"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[4814],{86708:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>a});var t=n(74848),r=n(28453);const s={title:"452. Minimum Number of Arrows to Burst Balloons",sidebar_label:"452. Minimum Number of Arrows to Burst Balloons",tags:["Leetcode Medium","Sweep Line","Greedy"]},i=void 0,l={id:"leetcode/1-500/min_arrow_bust_balloons",title:"452. Minimum Number of Arrows to Burst Balloons",description:"https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons",source:"@site/docs/leetcode/1-500/452_min_arrow_bust_balloons.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/min_arrow_bust_balloons",permalink:"/docs/leetcode/1-500/min_arrow_bust_balloons",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Sweep Line",permalink:"/docs/tags/sweep-line"},{label:"Greedy",permalink:"/docs/tags/greedy"}],version:"current",sidebarPosition:452,frontMatter:{title:"452. Minimum Number of Arrows to Burst Balloons",sidebar_label:"452. Minimum Number of Arrows to Burst Balloons",tags:["Leetcode Medium","Sweep Line","Greedy"]},sidebar:"docSidebar",previous:{title:"451. Sort Characters By Frequency",permalink:"/docs/leetcode/1-500/sort_char_by_frequency"},next:{title:"453. Minimum Moves to Equal Array Elements",permalink:"/docs/leetcode/1-500/minimum_moves_to_equal_array_elements"}},c={},a=[{value:"Python",id:"python",level:2}];function u(e){const o={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.p,{children:(0,t.jsx)(o.a,{href:"https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons",children:"https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons"})}),"\n",(0,t.jsx)(o.h2,{id:"python",children:"Python"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-python",children:"class Solution:\n    def findMinArrowShots(self, points: List[List[int]]) -> int:\n        if not points:\n            return 0\n\n        points.sort(key=lambda point: point[0])\n\n        cur = points[-1][0]\n        points.pop()\n        counter = 1\n\n        while points:\n            if cur <= points[-1][1]:\n                points.pop()\n                continue\n\n            point = points.pop()\n            cur = point[0]\n            counter += 1\n\n        return counter\n"})})]})}function m(e={}){const{wrapper:o}={...(0,r.R)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},28453:(e,o,n)=>{n.d(o,{R:()=>i,x:()=>l});var t=n(96540);const r={},s=t.createContext(r);function i(e){const o=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function l(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(s.Provider,{value:o},e.children)}}}]);