"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[79477],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>f});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=s(r),g=a,f=p["".concat(c,".").concat(g)]||p[g]||u[g]||o;return r?n.createElement(f,i(i({ref:t},d),{},{components:r})):n.createElement(f,i({ref:t},d))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=g;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},76235:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=r(87462),a=(r(67294),r(3905));const o={title:"1372. Longest ZigZag Path in a Binary Tree",sidebar_label:"1372. Longest ZigZag Path in a Binary Tree",tags:["Leetcode Hard","Binary Tree","DFS"]},i=void 0,l={unversionedId:"leetcode/1001-1500/longest_zigzag_path_in_binary_tree",id:"leetcode/1001-1500/longest_zigzag_path_in_binary_tree",title:"1372. Longest ZigZag Path in a Binary Tree",description:"Python",source:"@site/docs/leetcode/1001-1500/1372_longest_zigzag_path_in_binary_tree.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/longest_zigzag_path_in_binary_tree",permalink:"/docs/leetcode/1001-1500/longest_zigzag_path_in_binary_tree",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1372_longest_zigzag_path_in_binary_tree.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"},{label:"DFS",permalink:"/docs/tags/dfs"}],version:"current",sidebarPosition:1372,frontMatter:{title:"1372. Longest ZigZag Path in a Binary Tree",sidebar_label:"1372. Longest ZigZag Path in a Binary Tree",tags:["Leetcode Hard","Binary Tree","DFS"]},sidebar:"docSidebar",previous:{title:"1351. Count Negative Numbers in a Sorted Matrix",permalink:"/docs/leetcode/1001-1500/count_negative_num_in_a_sorted_matrix"},next:{title:"1373. Maximum Sum BST in Binary Tree",permalink:"/docs/leetcode/1001-1500/max_sum_bst_of_bt"}},c={},s=[{value:"Python",id:"python",level:2},{value:"DFS",id:"dfs",level:3}],d={toc:s},p="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("h3",{id:"dfs"},"DFS"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def longestZigZag(self, root: Optional[TreeNode]) -> int:\n\n        def dfs(node, pre_direction, total):\n            if not node:\n                return total\n            \n            # If pre_direction is '', both sub-dfs will use 1 as 3rd arg\n            return max(\n                dfs(node.left, 'left', total+1 if pre_direction == 'right' else 1),\n                dfs(node.right, 'right', total+1 if pre_direction == 'left' else 1)\n            )\n        return dfs(root, '', 0) - 1\n")))}u.isMDXComponent=!0}}]);