"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[4787],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return u}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),m=l(t),u=o,y=m["".concat(c,".").concat(u)]||m[u]||d[u]||i;return t?r.createElement(y,s(s({ref:n},p),{},{components:t})):r.createElement(y,s({ref:n},p))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,s=new Array(i);s[0]=m;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a.mdxType="string"==typeof e?e:o,s[1]=a;for(var l=2;l<i;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},52625:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return p}});var r=t(87462),o=t(63366),i=(t(67294),t(3905)),s=["components"],a={title:"588. Design In-Memory File System",sidebar_label:"588. Design In-Memory File System",tags:["Leetcode Hard","Trie"]},c=void 0,l={unversionedId:"leetcode/501-1000/design_in_memory_file_system",id:"leetcode/501-1000/design_in_memory_file_system",title:"588. Design In-Memory File System",description:"https://leetcode.com/problems/design-in-memory-file-system/",source:"@site/docs/leetcode/501-1000/588_design_in_memory_file_system.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/design_in_memory_file_system",permalink:"/docs/leetcode/501-1000/design_in_memory_file_system",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/588_design_in_memory_file_system.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"Trie",permalink:"/docs/tags/trie"}],version:"current",sidebarPosition:588,frontMatter:{title:"588. Design In-Memory File System",sidebar_label:"588. Design In-Memory File System",tags:["Leetcode Hard","Trie"]},sidebar:"docSidebar",previous:{title:"557. Reverse Words in a String III",permalink:"/docs/leetcode/501-1000/reverse_words_in_string_iii"},next:{title:"605. Can Place Flowers",permalink:"/docs/leetcode/501-1000/place_flowers"}},p=[{value:"Python",id:"python",children:[],level:2},{value:"Javascript",id:"javascript",children:[],level:2}],d={toc:p};function m(e){var n=e.components,t=(0,o.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/design-in-memory-file-system/"},"https://leetcode.com/problems/design-in-memory-file-system/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h2",{id:"javascript"},"Javascript"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"}," var FileSystem = function() {\n  this.root = { childs: {} };\n};\n\n/** \n * @param {string} path\n * @return {string[]}\n */\nFileSystem.prototype.ls = function(path) {\n  const node = this.traverse(path);\n\n  const ary = [];\n  if (node.isFile) {\n    ary.push(node.name);\n  } else {\n    for (const key in node.childs) {\n      const child = node.childs[key];\n      ary.push(child.name)\n    }\n  }\n  ary.sort();\n  return ary;\n};\n\n/** \n * @param {string} path\n * @return {void}\n */\nFileSystem.prototype.mkdir = function(path) {\n  this.traverse(path);\n};\n\n/** \n * @param {string} filePath \n * @param {string} content\n * @return {void}\n */\nFileSystem.prototype.addContentToFile = function(filePath, content) {\n    const node = this.traverse(filePath)\n  node.isFile = true;\n  node.content = (node.content || '') + content;\n};\n\n/** \n * @param {string} filePath\n * @return {string}\n */\nFileSystem.prototype.readContentFromFile = function(filePath) {\n  const node = this.traverse(filePath);\n  return node.content;\n    \n};\n\nFileSystem.prototype.traverse = function(filePath) {\n  const paths = filePath.split('/')\n  let node = this.root;\n  for (let i = 1; i < paths.length; i++) {\n    const path = paths[i];\n    if (path) {\n      if (!node.childs[path]) {\n        node.childs[path] = { childs: {}, name: path };\n      }\n      node = node.childs[path];\n    }\n  }\n  return node;\n}\n")))}m.isMDXComponent=!0}}]);