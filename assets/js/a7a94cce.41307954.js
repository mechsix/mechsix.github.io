"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[4342],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return f}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=c(n),f=o,d=p["".concat(u,".").concat(f)]||p[f]||m[f]||i;return n?r.createElement(d,a(a({ref:t},s),{},{components:n})):r.createElement(d,a({ref:t},s))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=p;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},80603:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return u},default:function(){return p},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return s}});var r=n(87462),o=n(63366),i=(n(67294),n(3905)),a=["components"],l={title:"31. Next Permutation",sidebar_label:"31. Next Permutation",tags:["Leetcode Medium"]},u=void 0,c={unversionedId:"leetcode/1-500/next_permutation",id:"leetcode/1-500/next_permutation",title:"31. Next Permutation",description:"https://leetcode.com/problems/next-permutation/",source:"@site/docs/leetcode/1-500/31_next_permutation.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/next_permutation",permalink:"/docs/leetcode/1-500/next_permutation",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/31_next_permutation.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"}],version:"current",sidebarPosition:31,frontMatter:{title:"31. Next Permutation",sidebar_label:"31. Next Permutation",tags:["Leetcode Medium"]},sidebar:"docSidebar",previous:{title:"27. Remove Element",permalink:"/docs/leetcode/1-500/remove_element"},next:{title:"32. Longest Valid Parentheses",permalink:"/docs/leetcode/1-500/longest_valid_parentheses"}},s=[{value:"Python",id:"python",children:[],level:2}],m={toc:s};function p(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/next-permutation/"},"https://leetcode.com/problems/next-permutation/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def nextPermutation(self, nums: List[int]) -> None:\n        left = len(nums) - 1\n        right = len(nums) - 1\n\n        # Nums after left (not included) are not yet reach the max which is permutable\n        while left > 0 and nums[left-1] >= nums[left]:\n            left -= 1\n\n        # The nums already reach the max, go back to first permutation\n        if left == 0:\n            self.reverse(nums, left, len(nums)-1)\n            return\n\n        # In the permutable zone, swap the left bound of next order head\n        while nums[right] <= nums[left-1]:\n            right -= 1\n\n        nums[left-1], nums[right] = nums[right], nums[left-1]\n\n        # Reverse the permutable zone order\n        self.reverse(nums, left, len(nums)-1)\n\n    def reverse(self, nums, left, right):\n        stack = []\n        for i in range(left, right+1):\n            stack.append(nums[i])\n        for i in range(left, right+1):\n            nums[i] = stack.pop()\n")))}p.isMDXComponent=!0}}]);