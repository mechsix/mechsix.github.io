"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[83106],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>f});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),a=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},d=function(e){var t=a(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=a(r),m=o,f=p["".concat(c,".").concat(m)]||p[m]||u[m]||i;return r?n.createElement(f,s(s({ref:t},d),{},{components:r})):n.createElement(f,s({ref:t},d))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,s=new Array(i);s[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:o,s[1]=l;for(var a=2;a<i;a++)s[a]=r[a];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9937:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>a});var n=r(87462),o=(r(67294),r(3905));const i={title:"147. Insertion Sort List",sidebar_label:"147. Insertion Sort List",tags:["Leetcode Medium","Linked List","Leetcode Optimable"]},s=void 0,l={unversionedId:"leetcode/1-500/insertion_sort_list",id:"leetcode/1-500/insertion_sort_list",title:"147. Insertion Sort List",description:"https://leetcode.com/problems/insertion-sort-list",source:"@site/docs/leetcode/1-500/147_insertion_sort_list.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/insertion_sort_list",permalink:"/docs/leetcode/1-500/insertion_sort_list",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/147_insertion_sort_list.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Linked List",permalink:"/docs/tags/linked-list"},{label:"Leetcode Optimable",permalink:"/docs/tags/leetcode-optimable"}],version:"current",sidebarPosition:147,frontMatter:{title:"147. Insertion Sort List",sidebar_label:"147. Insertion Sort List",tags:["Leetcode Medium","Linked List","Leetcode Optimable"]},sidebar:"docSidebar",previous:{title:"146. LRU Cache",permalink:"/docs/leetcode/1-500/lru_cache"},next:{title:"148. Sort List",permalink:"/docs/leetcode/1-500/sort_list"}},c={},a=[{value:"Python",id:"python",level:2}],d={toc:a},p="wrapper";function u(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/insertion-sort-list"},"https://leetcode.com/problems/insertion-sort-list")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def insertionSortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        new_head = ListNode(val=-5001, next=None)\n        origin = head\n\n        while origin:\n            cur = new_head\n            while cur.next and cur.next.val < origin.val:\n                cur = cur.next\n\n            cur.next = ListNode(val=origin.val, next=cur.next if cur.next else None)\n            origin = origin.next\n\n        return new_head.next\n")))}u.isMDXComponent=!0}}]);