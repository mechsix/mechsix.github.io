"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[88641],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),d=c(n),h=o,m=d["".concat(s,".").concat(h)]||d[h]||u[h]||l;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,i=new Array(l);i[0]=h;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[d]="string"==typeof e?e:o,i[1]=a;for(var c=2;c<l;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},6170:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>a,toc:()=>c});var r=n(87462),o=(n(67294),n(3905));const l={title:"354. Russian Doll Envelopes",sidebar_label:"354. Russian Doll Envelopes",tags:["Leetcode Hard","Binary Search","DP"]},i=void 0,a={unversionedId:"leetcode/1-500/russian_doll_envelopes",id:"leetcode/1-500/russian_doll_envelopes",title:"354. Russian Doll Envelopes",description:"https://leetcode.com/problems/russian-doll-envelopes/",source:"@site/docs/leetcode/1-500/354_russian_doll_envelopes.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/russian_doll_envelopes",permalink:"/docs/leetcode/1-500/russian_doll_envelopes",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/354_russian_doll_envelopes.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"Binary Search",permalink:"/docs/tags/binary-search"},{label:"DP",permalink:"/docs/tags/dp"}],version:"current",sidebarPosition:354,frontMatter:{title:"354. Russian Doll Envelopes",sidebar_label:"354. Russian Doll Envelopes",tags:["Leetcode Hard","Binary Search","DP"]},sidebar:"docSidebar",previous:{title:"350. Intersection of Two Arrays II",permalink:"/docs/leetcode/1-500/intersection_of_two_arrays_ii"},next:{title:"359. Logger Rate Limiter",permalink:"/docs/leetcode/1-500/logger_rate_limiter"}},s={},c=[{value:"Python",id:"python",level:2},{value:"DP with Binary Search (Bisect)",id:"dp-with-binary-search-bisect",level:3},{value:"Javascript",id:"javascript",level:2}],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/russian-doll-envelopes/"},"https://leetcode.com/problems/russian-doll-envelopes/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"dp-with-binary-search-bisect"},"DP with Binary Search (Bisect)"),(0,o.kt)("p",null,"(Offical solution)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from bisect import bisect_left\n\n\nclass Solution:\n    def maxEnvelopes(self, envelopes: List[List[int]]) -> int:\n        # On the same width, since we can only choose 'one' envelop\n        # Reverse sort on the height to get select the max height envelop if they're in the same width\n        envelopes.sort(key=lambda wh: (wh[0], -wh[1]))\n\n        dp = []\n        for i, (width, height) in enumerate(envelopes):\n            # Binary Search the posistion to pick from the sequence of envelops\n            pos = bisect_left(dp, height)\n            if pos == len(dp):\n                dp.append(height)\n            else:\n                dp[pos] = height\n\n        return len(dp)\n")),(0,o.kt)("h2",{id:"javascript"},"Javascript"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"var maxEnvelopes = function(envelopes) {\n    \n    envelopes.sort(([aW, aH], [bW, bH]) => {\n        if (aW === bW) return bH - aH;\n        return aW - bW;\n    })\n    \n    const dp = [];\n    for (let i = 0; i < envelopes.length; i++) {\n        const h = envelopes[i][1];\n        let left = 0;\n        let right = dp.length;\n        \n        while (left < right) {\n            let mid = (left + right) >> 1;\n            if (dp[mid] < h) left = mid + 1;\n            else right = mid;\n        }    \n        dp[left] = h;\n    }\n    \n    \n    return dp.length;\n};\n")))}u.isMDXComponent=!0}}]);