"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[71160],{43254:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>c,toc:()=>o});var r=t(74848),s=t(28453);const l={title:"118. Pascal's Triangle",sidebar_label:"118. Pascal's Triangle",tags:["Leetcode Easy"]},a=void 0,c={id:"leetcode/1-500/pascal_triangle",title:"118. Pascal's Triangle",description:"https://leetcode.com/problems/pascals-triangle",source:"@site/docs/leetcode/1-500/118_pascal_triangle.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/pascal_triangle",permalink:"/docs/leetcode/1-500/pascal_triangle",draft:!1,unlisted:!1,tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"}],version:"current",sidebarPosition:118,frontMatter:{title:"118. Pascal's Triangle",sidebar_label:"118. Pascal's Triangle",tags:["Leetcode Easy"]},sidebar:"docSidebar",previous:{title:"117. Populating Next Right Pointers in Each Node II",permalink:"/docs/leetcode/1-500/link_next_right_in_binary_tree_nodes_ii"},next:{title:"119. Pascal's Triangle II",permalink:"/docs/leetcode/1-500/pascal_triangle_II"}},i={},o=[{value:"Python",id:"python",level:2},{value:"Recursive",id:"recursive",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/pascals-triangle",children:"https://leetcode.com/problems/pascals-triangle"})}),"\n",(0,r.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,r.jsx)(n.h3,{id:"recursive",children:"Recursive"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1, 1]]\n\n        return self._generate(3, numRows, [[1], [1, 1]])\n\n    def _generate(self, level, targetLevel, result):\n        if level > targetLevel:\n            return result\n\n        pre_level = result[-1]\n        current = [1]\n        for i in range(1, len(pre_level)):\n            pre = pre_level[i-1]\n            cur = pre_level[i]\n            current.append(pre+cur)\n        current.append(1)\n        result.append(current)\n\n        return self._generate(level+1, targetLevel, result)\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var r=t(96540);const s={},l=r.createContext(s);function a(e){const n=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);