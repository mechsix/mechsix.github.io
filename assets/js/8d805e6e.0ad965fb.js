"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[76554],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var a=r.createContext({}),s=function(e){var t=r.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(a.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,c=e.originalType,a=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(n),m=o,f=p["".concat(a,".").concat(m)]||p[m]||d[m]||c;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=n.length,i=new Array(c);i[0]=m;var l={};for(var a in t)hasOwnProperty.call(t,a)&&(l[a]=t[a]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<c;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},51187:function(e,t,n){n.r(t),n.d(t,{assets:function(){return a},contentTitle:function(){return i},default:function(){return p},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return s}});var r=n(83117),o=(n(67294),n(3905));const c={title:"409. Longest Palindrome",sidebar_label:"409. Longest Palindrome",tags:["Leetcode Easy"]},i=void 0,l={unversionedId:"leetcode/1-500/longest_palindrome",id:"leetcode/1-500/longest_palindrome",title:"409. Longest Palindrome",description:"https://leetcode.com/problems/longest-palindrome/",source:"@site/docs/leetcode/1-500/409_longest_palindrome.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/longest_palindrome",permalink:"/docs/leetcode/1-500/longest_palindrome",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/409_longest_palindrome.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"}],version:"current",sidebarPosition:409,frontMatter:{title:"409. Longest Palindrome",sidebar_label:"409. Longest Palindrome",tags:["Leetcode Easy"]},sidebar:"docSidebar",previous:{title:"406. Queue Reconstruction by Height",permalink:"/docs/leetcode/1-500/queue_reconstruction_by_height"},next:{title:"413. Arithmetic Slices",permalink:"/docs/leetcode/1-500/arithmetic_slices"}},a={},s=[{value:"Python",id:"python",level:2}],u={toc:s};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/longest-palindrome/"},"https://leetcode.com/problems/longest-palindrome/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from collections import Counter\n\n\nclass Solution:\n    def longestPalindrome(self, s: str) -> int:\n        counts = Counter(s)\n\n        ans = 0\n        odd_presented = 0\n        for char, count in counts.items():\n            print(char, count)\n            if count % 2 == 0:\n                ans += count\n            else:\n                ans += (count-1)\n                odd_presented += 1\n\n        if odd_presented > 0:\n            ans += 1\n\n        return ans\n")))}p.isMDXComponent=!0}}]);