"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[67338],{87247:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var o=t(74848),r=t(28453);const i={title:"588. Design In-Memory File System",sidebar_label:"588. Design In-Memory File System",tags:["Leetcode Hard","TODO","Trie"]},s=void 0,a={id:"leetcode/501-1000/design_in_memory_file_system",title:"588. Design In-Memory File System",description:"https://leetcode.com/problems/design-in-memory-file-system/",source:"@site/docs/leetcode/501-1000/588_design_in_memory_file_system.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/design_in_memory_file_system",permalink:"/docs/leetcode/501-1000/design_in_memory_file_system",draft:!1,unlisted:!1,tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"TODO",permalink:"/docs/tags/todo"},{label:"Trie",permalink:"/docs/tags/trie"}],version:"current",sidebarPosition:588,frontMatter:{title:"588. Design In-Memory File System",sidebar_label:"588. Design In-Memory File System",tags:["Leetcode Hard","TODO","Trie"]},sidebar:"docSidebar",previous:{title:"583. Delete Operation for Two Strings",permalink:"/docs/leetcode/501-1000/delete_operation_for_two_strings"},next:{title:"589. N-ary Tree Preorder Traversal",permalink:"/docs/leetcode/501-1000/nary_tree_preorder_traversal"}},l={},c=[{value:"Python",id:"python",level:2},{value:"Javascript",id:"javascript",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://leetcode.com/problems/design-in-memory-file-system/",children:"https://leetcode.com/problems/design-in-memory-file-system/"})}),"\n",(0,o.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,o.jsx)(n.h2,{id:"javascript",children:"Javascript"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:" var FileSystem = function() {\n  this.root = { childs: {} };\n};\n\n/**\n * @param {string} path\n * @return {string[]}\n */\nFileSystem.prototype.ls = function(path) {\n  const node = this.traverse(path);\n\n  const ary = [];\n  if (node.isFile) {\n    ary.push(node.name);\n  } else {\n    for (const key in node.childs) {\n      const child = node.childs[key];\n      ary.push(child.name)\n    }\n  }\n  ary.sort();\n  return ary;\n};\n\n/**\n * @param {string} path\n * @return {void}\n */\nFileSystem.prototype.mkdir = function(path) {\n  this.traverse(path);\n};\n\n/**\n * @param {string} filePath\n * @param {string} content\n * @return {void}\n */\nFileSystem.prototype.addContentToFile = function(filePath, content) {\n    const node = this.traverse(filePath)\n  node.isFile = true;\n  node.content = (node.content || '') + content;\n};\n\n/**\n * @param {string} filePath\n * @return {string}\n */\nFileSystem.prototype.readContentFromFile = function(filePath) {\n  const node = this.traverse(filePath);\n  return node.content;\n\n};\n\nFileSystem.prototype.traverse = function(filePath) {\n  const paths = filePath.split('/')\n  let node = this.root;\n  for (let i = 1; i < paths.length; i++) {\n    const path = paths[i];\n    if (path) {\n      if (!node.childs[path]) {\n        node.childs[path] = { childs: {}, name: path };\n      }\n      node = node.childs[path];\n    }\n  }\n  return node;\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var o=t(96540);const r={},i=o.createContext(r);function s(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);