"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[37926],{3905:function(e,n,r){r.d(n,{Zo:function(){return c},kt:function(){return m}});var t=r(67294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function l(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=t.createContext({}),u=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):l(l({},n),e)),r},c=function(e){var n=u(e.components);return t.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(r),m=o,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||a;return r?t.createElement(f,l(l({ref:n},c),{},{components:r})):t.createElement(f,l({ref:n},c))}));function m(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=p;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var u=2;u<a;u++)l[u]=r[u];return t.createElement.apply(null,l)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},70010:function(e,n,r){r.r(n),r.d(n,{contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return c}});var t=r(87462),o=r(63366),a=(r(67294),r(3905)),l=["components"],i={title:"912. Sort an Array",sidebar_label:"912. Sort an Array",tags:["Leetcode Medium"]},s=void 0,u={unversionedId:"leetcode/501-1000/sort_an_array",id:"leetcode/501-1000/sort_an_array",title:"912. Sort an Array",description:"https://leetcode.com/problems/sort-an-array/",source:"@site/docs/leetcode/501-1000/912_sort_an_array.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/sort_an_array",permalink:"/docs/leetcode/501-1000/sort_an_array",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/912_sort_an_array.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"}],version:"current",sidebarPosition:912,frontMatter:{title:"912. Sort an Array",sidebar_label:"912. Sort an Array",tags:["Leetcode Medium"]},sidebar:"docSidebar",previous:{title:"905. Sort Array By Parity",permalink:"/docs/leetcode/501-1000/sort_array_by_parity"},next:{title:"916. Word Subsets",permalink:"/docs/leetcode/501-1000/word_subsets"}},c=[{value:"Python",id:"python",children:[{value:"Bubble Sort",id:"bubble-sort",children:[],level:3},{value:"Binary Search Tree",id:"binary-search-tree",children:[],level:3}],level:2},{value:"Rust",id:"rust",children:[{value:"Bubble Sort",id:"bubble-sort-1",children:[],level:3}],level:2}],d={toc:c};function p(e){var n=e.components,r=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,t.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/sort-an-array/"},"https://leetcode.com/problems/sort-an-array/")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("h3",{id:"bubble-sort"},"Bubble Sort"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Time: O(N^2)"),(0,a.kt)("li",{parentName:"ul"},"Space: O(1)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def sortArray(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        for _ in range(n-1):\n            for i in range(1, n):\n                if nums[i-1] > nums[i]:\n                    nums[i], nums[i-1] = nums[i-1], nums[i]\n        return nums\n")),(0,a.kt)("h3",{id:"binary-search-tree"},"Binary Search Tree"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class TreeNode:\n    def __init__(self, val=None, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def sortArray(self, nums: List[int]) -> List[int]:\n        def build(node, val):\n            if not node:\n                return TreeNode(val=val)\n            if node.val > val:\n                node.left = build(node.left, val)\n            else:\n                node.right = build(node.right, val)\n            return node\n\n\n        root = TreeNode(val=nums.pop())\n        while nums:\n            num = nums.pop()\n            build(root, num)\n\n        def inorder(node, result):\n            if not node:\n                return result\n\n            inorder(node.left, result)\n            result.append(node.val)\n            inorder(node.right, result)\n\n            return result\n\n        return inorder(root, [])\n")),(0,a.kt)("h2",{id:"rust"},"Rust"),(0,a.kt)("h3",{id:"bubble-sort-1"},"Bubble Sort"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"impl Solution {\n    pub fn sort_array(nums: Vec<i32>) -> Vec<i32> {\n        let mut swapped = true;\n        let mut answer = vec![0; nums.len()];\n        answer[..nums.len()].clone_from_slice(&nums);\n\n        while swapped {\n            swapped = false;\n            for i in 1..answer.len() {\n                if answer[i - 1] > answer[i] {\n                    answer.swap(i - 1, i);\n                    swapped = true\n                }\n            }\n        }\n        answer\n    }\n}\n")))}p.isMDXComponent=!0}}]);