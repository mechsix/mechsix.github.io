"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[8010],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return p}});var i=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=i.createContext({}),a=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=a(e.components);return i.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=a(t),p=r,f=d["".concat(s,".").concat(p)]||d[p]||m[p]||o;return t?i.createElement(f,c(c({ref:n},u),{},{components:t})):i.createElement(f,c({ref:n},u))}));function p(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,c=new Array(o);c[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,c[1]=l;for(var a=2;a<o;a++)c[a]=t[a];return i.createElement.apply(null,c)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},24466:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return a},toc:function(){return u}});var i=t(87462),r=t(63366),o=(t(67294),t(3905)),c=["components"],l={title:"1004. Max Consecutive Ones III",sidebar_label:"1004. Max Consecutive Ones III",tags:["Leetcode Medium","Sliding Window","Prefix Sum"]},s=void 0,a={unversionedId:"leetcode/1001-1500/max_consecutive_ones_iii",id:"leetcode/1001-1500/max_consecutive_ones_iii",title:"1004. Max Consecutive Ones III",description:"https://leetcode.com/problems/max-consecutive-ones-iii/",source:"@site/docs/leetcode/1001-1500/1004_max_consecutive_ones_iii.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/max_consecutive_ones_iii",permalink:"/docs/leetcode/1001-1500/max_consecutive_ones_iii",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1004_max_consecutive_ones_iii.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Sliding Window",permalink:"/docs/tags/sliding-window"},{label:"Prefix Sum",permalink:"/docs/tags/prefix-sum"}],version:"current",sidebarPosition:1004,frontMatter:{title:"1004. Max Consecutive Ones III",sidebar_label:"1004. Max Consecutive Ones III",tags:["Leetcode Medium","Sliding Window","Prefix Sum"]},sidebar:"docSidebar",previous:{title:"923. 3Sum With Multiplicity",permalink:"/docs/leetcode/501-1000/923_3sum_with_multiplicity"},next:{title:"1009. Complement of Base 10 Integer",permalink:"/docs/leetcode/1001-1500/complement_base_10_int"}},u=[{value:"Python",id:"python",children:[{value:"Sliding Window",id:"sliding-window",children:[],level:3},{value:"Prefix Sum",id:"prefix-sum",children:[],level:3}],level:2}],m={toc:u};function d(e){var n=e.components,t=(0,r.Z)(e,c);return(0,o.kt)("wrapper",(0,i.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/max-consecutive-ones-iii/"},"https://leetcode.com/problems/max-consecutive-ones-iii/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"sliding-window"},"Sliding Window"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def longestOnes(self, nums: List[int], k: int) -> int:\n        left, right = 0, 0\n        while right < len(nums):\n            k -= 1 - nums[right]\n            if k < 0:\n                k += 1 - nums[left]\n                left += 1\n            right += 1\n\n        return right - left\n")),(0,o.kt)("h3",{id:"prefix-sum"},"Prefix Sum"),(0,o.kt)("p",null,"Solution from ",(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/glfox/"},"glfox")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def longestOnes(self, nums: List[int], k: int) -> int:\n        if not nums:\n            return 0\n\n        zero_idx = {i:-1 for i in range(-k, 1)}\n        ans, zeros = 0, 0\n        for i in range(len(nums)):\n            if nums[i] == 0:\n                zeros += 1\n                zero_idx[zeros] = i\n            ans = max(ans, i - zero_idx[zeros - k])\n\n        return ans\n")))}d.isMDXComponent=!0}}]);