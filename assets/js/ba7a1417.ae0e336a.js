"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[6149],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=l(n),h=i,d=p["".concat(c,".").concat(h)]||p[h]||m[h]||o;return n?r.createElement(d,s(s({ref:t},u),{},{components:n})):r.createElement(d,s({ref:t},u))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,s=new Array(o);s[0]=p;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:i,s[1]=a;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},75149:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return a},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return u},default:function(){return p}});var r=n(87462),i=n(63366),o=(n(67294),n(3905)),s=["components"],a={title:"1539. Kth Missing Positive Number",sidebar_label:"1539. Kth Missing Positive Number",tags:["Leetcode Easy"]},c=void 0,l={unversionedId:"leetcode/1501-2000/kth_missing_possitive_num",id:"leetcode/1501-2000/kth_missing_possitive_num",title:"1539. Kth Missing Positive Number",description:"https://leetcode.com/problems/kth-missing-positive-number/",source:"@site/docs/leetcode/1501-2000/1539_kth_missing_possitive_num.md",sourceDirName:"leetcode/1501-2000",slug:"/leetcode/1501-2000/kth_missing_possitive_num",permalink:"/docs/leetcode/1501-2000/kth_missing_possitive_num",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1501-2000/1539_kth_missing_possitive_num.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"}],version:"current",sidebarPosition:1539,frontMatter:{title:"1539. Kth Missing Positive Number",sidebar_label:"1539. Kth Missing Positive Number",tags:["Leetcode Easy"]},sidebar:"docSidebar",previous:{title:"1446. Consecutive Characters",permalink:"/docs/leetcode/1001-1500/consecutive_chars"},next:{title:"1612. Check If Two Expression Trees are Equivalent",permalink:"/docs/leetcode/1501-2000/check_experssion_trees_equal"}},u=[{value:"Python",id:"python",children:[{value:"Linear Search",id:"linear-search",children:[],level:3}],level:2}],m={toc:u};function p(e){var t=e.components,n=(0,i.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/kth-missing-positive-number/"},"https://leetcode.com/problems/kth-missing-positive-number/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"linear-search"},"Linear Search"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        low, high = arr[0], arr[-1]\n\n        # The lowest larger than k, won't need to search missing within arr\n        if low > k:\n            return k\n\n        k = k - low + 1\n        i = 0\n        last_missed = None\n\n        for num in range(low, high+1):\n            if k == 0:\n                return last_missed\n\n            # Num is not the missing\n            if num == arr[i]:\n                i += 1\n                continue\n\n            # Missing found, num not in arr\n            last_missed = num\n            k -= 1\n\n        # There are remains k after search missing within arr, ans is the highest arr num + k\n        return high + k\n")))}p.isMDXComponent=!0}}]);