"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[36977],{74152:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>f,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"leetcode/501-1000/diameter_of_binary_tree","title":"543. Diameter of Binary Tree","description":"https://leetcode.com/problems/diameter-of-binary-tree/","source":"@site/docs/leetcode/501-1000/543_diameter_of_binary_tree.md","sourceDirName":"leetcode/501-1000","slug":"/leetcode/501-1000/diameter_of_binary_tree","permalink":"/docs/leetcode/501-1000/diameter_of_binary_tree","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Easy","permalink":"/docs/tags/leetcode-easy"},{"inline":true,"label":"Binary Tree","permalink":"/docs/tags/binary-tree"}],"version":"current","sidebarPosition":543,"frontMatter":{"title":"543. Diameter of Binary Tree","sidebar_label":"543. Diameter of Binary Tree","tags":["Leetcode Easy","Binary Tree"]},"sidebar":"docSidebar","previous":{"title":"540. Single Element in a Sorted Array","permalink":"/docs/leetcode/501-1000/single_elm_in_sotrted_array"},"next":{"title":"560. Subarray Sum Equals K","permalink":"/docs/leetcode/501-1000/subarray_sum_equals_k"}}');var o=n(74848),a=n(28453);const i={title:"543. Diameter of Binary Tree",sidebar_label:"543. Diameter of Binary Tree",tags:["Leetcode Easy","Binary Tree"]},s=void 0,d={},l=[{value:"Python",id:"python",level:2},{value:"DFS",id:"dfs",level:3}];function c(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{href:"https://leetcode.com/problems/diameter-of-binary-tree/",children:"https://leetcode.com/problems/diameter-of-binary-tree/"})}),"\n",(0,o.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,o.jsx)(t.h3,{id:"dfs",children:"DFS"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"class Solution:\n    def diameterOfBinaryTree(self, root: Optional[TreeNode]) -> int:\n        ans = 0\n        def dfs(node):\n            if not node:\n                return 0\n            nonlocal ans\n            left_depth = dfs(node.left)\n            right_depth = dfs(node.right)\n            ans = max(ans, left_depth+right_depth)\n            return 1 + max(left_depth, right_depth)\n\n        dfs(root)\n\n        return ans\n"})})]})}function f(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>s});var r=n(96540);const o={},a=r.createContext(o);function i(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);