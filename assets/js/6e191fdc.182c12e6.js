"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[47619],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(r),m=a,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return r?n.createElement(f,i(i({ref:t},p),{},{components:r})):n.createElement(f,i({ref:t},p))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[d]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},22542:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=r(87462),a=(r(67294),r(3905));const o={title:"498. Diagonal Traverse",sidebar_label:"498. Diagonal Traverse",tags:["Leetcode Medium","Matrix"]},i=void 0,l={unversionedId:"leetcode/1-500/diagonal_traverse",id:"leetcode/1-500/diagonal_traverse",title:"498. Diagonal Traverse",description:"https://leetcode.com/problems/diagonal-traverse",source:"@site/docs/leetcode/1-500/498_diagonal_traverse.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/diagonal_traverse",permalink:"/docs/leetcode/1-500/diagonal_traverse",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/498_diagonal_traverse.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Matrix",permalink:"/docs/tags/matrix"}],version:"current",sidebarPosition:498,frontMatter:{title:"498. Diagonal Traverse",sidebar_label:"498. Diagonal Traverse",tags:["Leetcode Medium","Matrix"]},sidebar:"docSidebar",previous:{title:"495. Teemo Attacking",permalink:"/docs/leetcode/1-500/teemo_attack"},next:{title:"502. IPO",permalink:"/docs/leetcode/501-1000/ipo"}},c={},s=[{value:"Python",id:"python",level:2},{value:"Re-assemble",id:"re-assemble",level:3}],p={toc:s},d="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/diagonal-traverse"},"https://leetcode.com/problems/diagonal-traverse")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("h3",{id:"re-assemble"},"Re-assemble"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Time: O(n*m)"),(0,a.kt)("li",{parentName:"ul"},"Space: O(n*m)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from collections import defaultdict\n\n\nclass Solution:\n    def findDiagonalOrder(self, mat: List[List[int]]) -> List[int]:\n        mapper = defaultdict(list)\n\n        for i in range(len(mat)):\n            for j in range(len(mat[i])):\n                mapper[i+j].append(mat[i][j])\n\n        result = []\n        for key in sorted(mapper.keys()):\n            if key % 2 == 0:\n                result += mapper[key][::-1]\n                continue\n            result += mapper[key]\n\n        return result\n")))}u.isMDXComponent=!0}}]);