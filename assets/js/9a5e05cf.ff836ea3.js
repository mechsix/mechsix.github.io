"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[32829],{22142:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var t=o(74848),r=o(28453);const i={title:"1448. Count Good Nodes in Binary Tree",sidebar_label:"1448. Count Good Nodes in Binary Tree",tags:["Leetcode Medium","Binary Tree","DFS"]},d=void 0,s={id:"leetcode/1001-1500/count_good_nodes_in_binary_tree",title:"1448. Count Good Nodes in Binary Tree",description:"https://leetcode.com/problems/count-good-nodes-in-binary-tree/",source:"@site/docs/leetcode/1001-1500/1448_count_good_nodes_in_binary_tree.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/count_good_nodes_in_binary_tree",permalink:"/docs/leetcode/1001-1500/count_good_nodes_in_binary_tree",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"},{label:"DFS",permalink:"/docs/tags/dfs"}],version:"current",sidebarPosition:1448,frontMatter:{title:"1448. Count Good Nodes in Binary Tree",sidebar_label:"1448. Count Good Nodes in Binary Tree",tags:["Leetcode Medium","Binary Tree","DFS"]},sidebar:"docSidebar",previous:{title:"1446. Consecutive Characters",permalink:"/docs/leetcode/1001-1500/consecutive_chars"},next:{title:"1457. Pseudo-Palindromic Paths in a Binary Tree",permalink:"/docs/leetcode/1001-1500/pseudo_palindromic_paths_in_a_binary_tree"}},a={},c=[{value:"Python",id:"python",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/count-good-nodes-in-binary-tree/",children:"https://leetcode.com/problems/count-good-nodes-in-binary-tree/"})}),"\n",(0,t.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from math import inf\n\n\nclass Solution:\n    def goodNodes(self, root: TreeNode) -> int:\n\n        def dfs(node: TreeNode, max_val: int):\n            if not node:\n                return 0\n\n            count = 1 if node.val >= max_val else 0\n\n            count += dfs(node.left, max(max_val, node.val))\n            count += dfs(node.right, max(max_val, node.val))\n            return count\n\n        return dfs(root, -inf)\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>d,x:()=>s});var t=o(96540);const r={},i=t.createContext(r);function d(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);