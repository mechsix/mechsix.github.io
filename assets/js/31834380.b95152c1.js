"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[54599],{81970:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>u,toc:()=>l});var o=t(74848),r=t(28453);const s={title:"250. Count Univalue Subtrees",sidebar_label:"250. Count Univalue Subtrees",tags:["Leetcode Medium","Binary Tree"]},i=void 0,u={id:"leetcode/1-500/count_univalue_subtree",title:"250. Count Univalue Subtrees",description:"https://leetcode.com/problems/count-univalue-subtrees",source:"@site/docs/leetcode/1-500/250_count_univalue_subtree.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/count_univalue_subtree",permalink:"/docs/leetcode/1-500/count_univalue_subtree",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"}],version:"current",sidebarPosition:250,frontMatter:{title:"250. Count Univalue Subtrees",sidebar_label:"250. Count Univalue Subtrees",tags:["Leetcode Medium","Binary Tree"]},sidebar:"docSidebar",previous:{title:"242. Valid Anagram",permalink:"/docs/leetcode/1-500/valid_anagram"},next:{title:"252. Meeting Rooms",permalink:"/docs/leetcode/1-500/meeting_rooms"}},a={},l=[{value:"Python",id:"python",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://leetcode.com/problems/count-univalue-subtrees",children:"https://leetcode.com/problems/count-univalue-subtrees"})}),"\n",(0,o.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def __init__(self):\n        self.ans = 0\n\n    def countUnivalSubtrees(self, root: Optional[TreeNode]) -> int:\n        if not root:\n            return 0\n\n        if self.check_tree(root, root.val):\n            self.ans += 1\n\n        self.countUnivalSubtrees(root.left)\n        self.countUnivalSubtrees(root.right)\n\n        return self.ans\n\n    def check_tree(self, node: Optional[TreeNode], parent_var: int) -> int:\n        if not node:\n            return True\n\n        if  node.val == parent_var \\\n        and self.check_tree(node.left, parent_var) \\\n        and self.check_tree(node.right, parent_var):\n            return True\n\n        return False\n"})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>u});var o=t(96540);const r={},s=o.createContext(r);function i(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function u(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);