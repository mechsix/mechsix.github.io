"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[76788],{3905:function(e,r,t){t.d(r,{Zo:function(){return s},kt:function(){return v}});var n=t(67294);function l(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){l(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,l=function(e,r){if(null==e)return{};var t,n,l={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(l[t]=e[t]);return l}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var c=n.createContext({}),u=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},s=function(e){var r=u(e.components);return n.createElement(c.Provider,{value:r},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,l=e.mdxType,o=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=u(t),f=l,v=d["".concat(c,".").concat(f)]||d[f]||p[f]||o;return t?n.createElement(v,a(a({ref:r},s),{},{components:t})):n.createElement(v,a({ref:r},s))}));function v(e,r){var t=arguments,l=r&&r.mdxType;if("string"==typeof e||l){var o=t.length,a=new Array(o);a[0]=f;var i={};for(var c in r)hasOwnProperty.call(r,c)&&(i[c]=r[c]);i.originalType=e,i[d]="string"==typeof e?e:l,a[1]=i;for(var u=2;u<o;u++)a[u]=t[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},33343:function(e,r,t){t.r(r),t.d(r,{assets:function(){return c},contentTitle:function(){return a},default:function(){return d},frontMatter:function(){return o},metadata:function(){return i},toc:function(){return u}});var n=t(83117),l=(t(67294),t(3905));const o={title:"102. Binary Tree Level Order Traversal",slidebar_label:"102. Binary Tree Level Order",tags:["Leetcode Medium","Binary Tree"]},a=void 0,i={unversionedId:"leetcode/1-500/binary_tree_levelorder",id:"leetcode/1-500/binary_tree_levelorder",title:"102. Binary Tree Level Order Traversal",description:"https://leetcode.com/problems/binary-tree-level-order-traversal",source:"@site/docs/leetcode/1-500/102_binary_tree_levelorder.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/binary_tree_levelorder",permalink:"/docs/leetcode/1-500/binary_tree_levelorder",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/102_binary_tree_levelorder.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"}],version:"current",sidebarPosition:102,frontMatter:{title:"102. Binary Tree Level Order Traversal",slidebar_label:"102. Binary Tree Level Order",tags:["Leetcode Medium","Binary Tree"]},sidebar:"docSidebar",previous:{title:"101. Symmetric Tree",permalink:"/docs/leetcode/1-500/symmetric_tree"},next:{title:"103. Binary Tree Zigzag Level Order Traversal",permalink:"/docs/leetcode/1-500/binary_tree_zigzag_level_order"}},c={},u=[{value:"Python",id:"python",level:2},{value:"Javascript",id:"javascript",level:2}],s={toc:u};function d(e){let{components:r,...t}=e;return(0,l.kt)("wrapper",(0,n.Z)({},s,t,{components:r,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/binary-tree-level-order-traversal"},"https://leetcode.com/problems/binary-tree-level-order-traversal")),(0,l.kt)("h2",{id:"python"},"Python"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u6709\u8b8a\u5f62\u984c",(0,l.kt)("a",{parentName:"li",href:"/docs/leetcode/1-500/binary_tree_right_side_view"},"199. Binary Tree Right Side View"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        return self._travel([], 0, root)\n\n    def _travel(self, result, level, node):\n        if not node:\n            return result\n\n        if len(result) < level+1:\n            result.append([])\n\n        result[level].append(node.val)\n        self._travel(result, level+1, node.left)\n        self._travel(result, level+1, node.right)\n\n        return result\n")),(0,l.kt)("h2",{id:"javascript"},"Javascript"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"var levelOrder = function(root) {\n  const queue = [];\n  const res = [];  \n  let level = 0;\n  \n  if (root) queue.push(root);\n  \n  while (queue.length) {\n    const total = queue.length;\n    res.push([]);\n    \n    for (let i = 0; i < total; i++) {\n      const currNode = queue.shift();    \n      res[level].push(currNode.val);\n    \n      if (currNode.left) queue.push(currNode.left);\n      if (currNode.right) queue.push(currNode.right);\n    }\n    level += 1;\n  }\n  return res;\n};\n")))}d.isMDXComponent=!0}}]);