"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[80534],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return d}});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},s=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),u=p(r),m=i,d=u["".concat(l,".").concat(m)]||u[m]||f[m]||o;return r?n.createElement(d,c(c({ref:t},s),{},{components:r})):n.createElement(d,c({ref:t},s))}));function d(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,c=new Array(o);c[0]=m;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[u]="string"==typeof e?e:i,c[1]=a;for(var p=2;p<o;p++)c[p]=r[p];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},82608:function(e,t,r){r.r(t),r.d(t,{assets:function(){return l},contentTitle:function(){return c},default:function(){return u},frontMatter:function(){return o},metadata:function(){return a},toc:function(){return p}});var n=r(83117),i=(r(67294),r(3905));const o={title:"71. Simplify Path",sidebar_label:"71. Simplify Path",tags:["Leetcode Medium","Stack"]},c=void 0,a={unversionedId:"leetcode/1-500/simplify_path",id:"leetcode/1-500/simplify_path",title:"71. Simplify Path",description:"https://leetcode.com/problems/simplify-path/",source:"@site/docs/leetcode/1-500/71_simplify_path.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/simplify_path",permalink:"/docs/leetcode/1-500/simplify_path",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/71_simplify_path.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Stack",permalink:"/docs/tags/stack"}],version:"current",sidebarPosition:71,frontMatter:{title:"71. Simplify Path",sidebar_label:"71. Simplify Path",tags:["Leetcode Medium","Stack"]},sidebar:"docSidebar",previous:{title:"70. Climbing Stairs",permalink:"/docs/leetcode/1-500/climbing_stairs"},next:{title:"72. Edit Distance",permalink:"/docs/leetcode/1-500/edit_distance"}},l={},p=[{value:"Python",id:"python",level:2}],s={toc:p};function u(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/simplify-path/"},"https://leetcode.com/problems/simplify-path/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u4e4d\u770b\u6709\u9ede\u8907\u96dc\uff0c\u4f46\u5176\u5be6\u6c92\u4ec0\u9ebc\u96e3\u5ea6\u76f4\u76f4\u5beb\u904e\u53bb...")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def simplifyPath(self, path: str) -> str:\n        stack = []\n\n        cur = ''\n        for letter in path:\n            if letter == '/':\n                if cur == '..':\n                    if stack:\n                        stack.pop()\n                    cur = ''\n                elif cur == '.':\n                    cur = ''\n                elif cur:\n                    stack.append(cur)\n                cur = ''\n            else:\n                cur += letter\n\n        if cur == '..':\n            if stack:\n                stack.pop()\n        elif cur != '.':\n            stack.append(cur)\n")))}u.isMDXComponent=!0}}]);