"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[947],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return d}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},s=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),m=c(r),d=o,f=m["".concat(l,".").concat(d)]||m[d]||p[d]||i;return r?n.createElement(f,a(a({ref:t},s),{},{components:r})):n.createElement(f,a({ref:t},s))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=m;var u={};for(var l in t)hasOwnProperty.call(t,l)&&(u[l]=t[l]);u.originalType=e,u.mdxType="string"==typeof e?e:o,a[1]=u;for(var c=2;c<i;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},61249:function(e,t,r){r.r(t),r.d(t,{contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return u},metadata:function(){return c},toc:function(){return s}});var n=r(87462),o=r(63366),i=(r(67294),r(3905)),a=["components"],u={title:"88. Merge Sorted Array",sidebar_label:"88. Merge Sorted Array",tags:["Leetcode Easy","Leetcode Optimable"]},l=void 0,c={unversionedId:"leetcode/1-500/merge_sorted_array",id:"leetcode/1-500/merge_sorted_array",title:"88. Merge Sorted Array",description:"https://leetcode.com/problems/merge-sorted-array",source:"@site/docs/leetcode/1-500/88_merge_sorted_array.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/merge_sorted_array",permalink:"/docs/leetcode/1-500/merge_sorted_array",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/88_merge_sorted_array.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Leetcode Optimable",permalink:"/docs/tags/leetcode-optimable"}],version:"current",sidebarPosition:88,frontMatter:{title:"88. Merge Sorted Array",sidebar_label:"88. Merge Sorted Array",tags:["Leetcode Easy","Leetcode Optimable"]},sidebar:"docSidebar",previous:{title:"86. Partition List",permalink:"/docs/leetcode/1-500/partition_list"},next:{title:"90. Subsets II",permalink:"/docs/leetcode/1-500/subsets_ii"}},s=[{value:"Python",id:"python",children:[{value:"Merge and sort",id:"merge-and-sort",children:[],level:3},{value:"Two pointers",id:"two-pointers",children:[],level:3}],level:2}],p={toc:s};function m(e){var t=e.components,r=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/merge-sorted-array"},"https://leetcode.com/problems/merge-sorted-array")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"merge-and-sort"},"Merge and sort"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Time: O((n+m)log(n+m))"),(0,i.kt)("li",{parentName:"ul"},"Space: O(n)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from typing import List\n\n\nclass Solution:\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:\n        if not nums2:\n            return\n\n        for i in range(m, len(nums1)):\n            nums1[i] = nums2.pop()\n\n        nums1.sort()\n")),(0,i.kt)("h3",{id:"two-pointers"},"Two pointers"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Time: O(m+n)"),(0,i.kt)("li",{parentName:"ul"},"Space: O(m+n)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from collections import deque\n\n\nclass Solution:\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:\n        """\n        Do not return anything, modify nums1 in-place instead.\n        """\n        queue1 = deque(nums1[:m])\n        queue2 = deque(nums2)\n\n        for cur in range(m+n):\n            if queue1 and queue2:\n                nums1[cur] = queue1.popleft() if queue1[0] <= queue2[0] else queue2.popleft()\n                continue\n\n            if queue1:\n                nums1[cur] = queue1.popleft()\n\n            if queue2:\n                nums1[cur] = queue2.popleft()\n')))}m.isMDXComponent=!0}}]);