"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[6788],{3905:function(e,r,t){t.d(r,{Zo:function(){return u},kt:function(){return f}});var n=t(67294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function l(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?l(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=n.createContext({}),s=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},u=function(e){var r=s(e.components);return n.createElement(c.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},p=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,l=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=s(t),f=o,m=p["".concat(c,".").concat(f)]||p[f]||d[f]||l;return t?n.createElement(m,a(a({ref:r},u),{},{components:t})):n.createElement(m,a({ref:r},u))}));function f(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var l=t.length,a=new Array(l);a[0]=p;var i={};for(var c in r)hasOwnProperty.call(r,c)&&(i[c]=r[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var s=2;s<l;s++)a[s]=t[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},33343:function(e,r,t){t.r(r),t.d(r,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return u},default:function(){return p}});var n=t(87462),o=t(63366),l=(t(67294),t(3905)),a=["components"],i={title:"102. Binary Tree Level Order Traversal",slidebar_label:"102. Binary Tree Level Order",tags:["Leetcode Medium","Binary Tree"]},c=void 0,s={unversionedId:"leetcode/1-500/binary_tree_levelorder",id:"leetcode/1-500/binary_tree_levelorder",title:"102. Binary Tree Level Order Traversal",description:"https://leetcode.com/problems/binary-tree-level-order-traversal",source:"@site/docs/leetcode/1-500/102_binary_tree_levelorder.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/binary_tree_levelorder",permalink:"/docs/leetcode/1-500/binary_tree_levelorder",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/102_binary_tree_levelorder.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"}],version:"current",sidebarPosition:102,frontMatter:{title:"102. Binary Tree Level Order Traversal",slidebar_label:"102. Binary Tree Level Order",tags:["Leetcode Medium","Binary Tree"]},sidebar:"docSidebar",previous:{title:"100. Same Tree",permalink:"/docs/leetcode/1-500/same_tree"},next:{title:"104. Maximum Depth of Binary Tree",permalink:"/docs/leetcode/1-500/max_depth_of_binary_tree"}},u=[{value:"Python",id:"python",children:[],level:2}],d={toc:u};function p(e){var r=e.components,t=(0,o.Z)(e,a);return(0,l.kt)("wrapper",(0,n.Z)({},d,t,{components:r,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/binary-tree-level-order-traversal"},"https://leetcode.com/problems/binary-tree-level-order-traversal")),(0,l.kt)("h2",{id:"python"},"Python"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        return self._travel([], 0, root)\n\n    def _travel(self, result, level, node):\n        if not node:\n            return result\n\n        if len(result) < level+1:\n            result.append([])\n\n        result[level].append(node.val)\n\n        result = self._travel(result, level+1, node.left)\n        result = self._travel(result, level+1, node.right)\n        return result\n")))}p.isMDXComponent=!0}}]);