"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[4982],{3905:function(e,t,r){r.d(t,{Zo:function(){return d},kt:function(){return m}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=s(r),f=o,m=u["".concat(l,".").concat(f)]||u[f]||p[f]||a;return r?n.createElement(m,i(i({ref:t},d),{},{components:r})):n.createElement(m,i({ref:t},d))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=f;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[u]="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},88300:function(e,t,r){r.r(t),r.d(t,{assets:function(){return l},contentTitle:function(){return i},default:function(){return u},frontMatter:function(){return a},metadata:function(){return c},toc:function(){return s}});var n=r(83117),o=(r(67294),r(3905));const a={title:"1857. Largest Color Value in a Directed Graph",sidebar_label:"1857. Largest Color Value in a Directed Graph",tags:["Leetcode Hard","DP","Graph","BFS"]},i=void 0,c={unversionedId:"leetcode/1501-2000/largest_color_value_in_a_directed_graph",id:"leetcode/1501-2000/largest_color_value_in_a_directed_graph",title:"1857. Largest Color Value in a Directed Graph",description:"Python",source:"@site/docs/leetcode/1501-2000/1857_largest_color_value_in_a_directed_graph.md",sourceDirName:"leetcode/1501-2000",slug:"/leetcode/1501-2000/largest_color_value_in_a_directed_graph",permalink:"/docs/leetcode/1501-2000/largest_color_value_in_a_directed_graph",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1501-2000/1857_largest_color_value_in_a_directed_graph.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"DP",permalink:"/docs/tags/dp"},{label:"Graph",permalink:"/docs/tags/graph"},{label:"BFS",permalink:"/docs/tags/bfs"}],version:"current",sidebarPosition:1857,frontMatter:{title:"1857. Largest Color Value in a Directed Graph",sidebar_label:"1857. Largest Color Value in a Directed Graph",tags:["Leetcode Hard","DP","Graph","BFS"]},sidebar:"docSidebar",previous:{title:"1832. Check if the Sentence Is Pangram",permalink:"/docs/leetcode/1501-2000/check_if_the_sentence_is_pangram"},next:{title:"1911. Maximum Alternating Subsequence Sum",permalink:"/docs/leetcode/1501-2000/maximum_alternating_subsequence_sum"}},l={},s=[{value:"Python",id:"python",level:2},{value:"BFS Travel and Bottom-Up DP",id:"bfs-travel-and-bottom-up-dp",level:3}],d={toc:s};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"bfs-travel-and-bottom-up-dp"},"BFS Travel and Bottom-Up DP"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from collections import defaultdict\n\n\nclass Solution:\n    def largestPathValue(self, colors: str, edges: List[List[int]]) -> int:\n        graph = defaultdict(set)\n        indegrees = [0] * len(colors)\n\n        for src, dst in edges:\n            graph[src].add(dst)\n            indegrees[dst] += 1\n\n        # DP Table: row as the current count of a color (alphabet); rol as the zero indegree count\n        dp = [[0]*26 for _ in range(len(colors))]\n        for i, color in enumerate(colors):\n            dp[i][ord(color)-ord('a')] += 1\n\n        queue = [i for i, indegree in enumerate(indegrees) if indegree == 0]\n        max_count, visited = 0, 0\n\n        # BFS Travel the Graph\n        while queue:\n            cand = queue.pop()\n            visited += 1\n\n            for dst in graph[cand]:\n                for i in range(26):\n                    dst_count = 1 if ord(colors[dst]) - ord('a') == i else 0\n                    dp[dst][i] = max(\n                        dp[dst][i],\n                        dp[cand][i] + dst_count\n                    )\n                indegrees[dst] -= 1\n\n                if indegrees[dst] == 0:\n                    queue.append(dst)\n\n            max_count = max(max_count, max(dp[cand]))\n\n        return max_count if visited == len(colors) else -1\n")))}u.isMDXComponent=!0}}]);