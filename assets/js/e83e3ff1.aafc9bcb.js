"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[54548],{80121:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var o=t(74848),l=t(28453);const i={title:"98. Validate Binary Search Tree",sidebar_label:"98. Validate Binary Search Tree",tags:["Leetcode Medium","BST","Rust"]},r=void 0,s={id:"leetcode/1-500/bst_validation",title:"98. Validate Binary Search Tree",description:"https://leetcode.com/problems/validate-binary-search-tree",source:"@site/docs/leetcode/1-500/98_bst_validation.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/bst_validation",permalink:"/docs/leetcode/1-500/bst_validation",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"BST",permalink:"/docs/tags/bst"},{label:"Rust",permalink:"/docs/tags/rust"}],version:"current",sidebarPosition:98,frontMatter:{title:"98. Validate Binary Search Tree",sidebar_label:"98. Validate Binary Search Tree",tags:["Leetcode Medium","BST","Rust"]},sidebar:"docSidebar",previous:{title:"97. Interleaving String",permalink:"/docs/leetcode/1-500/interleaving_string"},next:{title:"99. Recover Binary Search Tree",permalink:"/docs/leetcode/1-500/recover_bst"}},a={},d=[{value:"Python",id:"python",level:2},{value:"First Solution",id:"first-solution",level:3},{value:"Second Solution",id:"second-solution",level:3},{value:"Rust",id:"rust",level:2},{value:"DFS",id:"dfs",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://leetcode.com/problems/validate-binary-search-tree",children:"https://leetcode.com/problems/validate-binary-search-tree"})}),"\n",(0,o.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,o.jsx)(n.h3,{id:"first-solution",children:"First Solution"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def isValidBST(self, root: Optional[TreeNode]) -> bool:\n        return self._is_valid(root, None, None)\n\n    def _is_valid(self, node, min_val, max_val):\n        if not node:\n            return True\n\n        if (min_val is not None and node.val <= min_val) \\\n        or (max_val is not None and node.val >= max_val):\n            return False\n"})}),"\n",(0,o.jsx)(n.h3,{id:"second-solution",children:"Second Solution"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from math import inf\n\n\nclass Solution:\n    def isValidBST(self, root: Optional[TreeNode]) -> bool:\n\n        def dfs(node, left, right):\n            if not node:\n                return True\n\n            if node.val <= left or node.val >= right:\n                return False\n\n            return dfs(node.left, left, node.val) and dfs(node.right, node.val, right)\n\n        return dfs(root, -inf, inf)\n"})}),"\n",(0,o.jsx)(n.h2,{id:"rust",children:"Rust"}),"\n",(0,o.jsx)(n.h3,{id:"dfs",children:"DFS"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",children:"use std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn is_valid_bst(root: Option<Rc<RefCell<TreeNode>>>) -> bool {\n        Self::dfs(&root, i64::MIN, i64::MAX)\n    }\n\n    fn dfs(node: &Option<Rc<RefCell<TreeNode>>>, low:i64, high:i64) -> bool{\n        match node{\n            None => true,\n            Some(n) =>{\n                let v = n.borrow().val as i64;\n                if v <= low || v >= high{\n                    false\n                } else {\n                    Self::dfs(&n.borrow().left, low, v) &&\n                    Self::dfs(&n.borrow().right, v, high)\n                }\n            }\n        }\n    }\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var o=t(96540);const l={},i=o.createContext(l);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);