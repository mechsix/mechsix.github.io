"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[89216],{3905:(e,r,t)=>{t.d(r,{Zo:()=>a,kt:()=>f});var n=t(67294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function s(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function c(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?s(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=n.createContext({}),u=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):c(c({},r),e)),t},a=function(e){var r=u(e.components);return n.createElement(l.Provider,{value:r},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,a=i(e,["components","mdxType","originalType","parentName"]),d=u(t),m=o,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||s;return t?n.createElement(f,c(c({ref:r},a),{},{components:t})):n.createElement(f,c({ref:r},a))}));function f(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var s=t.length,c=new Array(s);c[0]=m;var i={};for(var l in r)hasOwnProperty.call(r,l)&&(i[l]=r[l]);i.originalType=e,i[d]="string"==typeof e?e:o,c[1]=i;for(var u=2;u<s;u++)c[u]=t[u];return n.createElement.apply(null,c)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},32258:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var n=t(87462),o=(t(67294),t(3905));const s={title:"207. Course Schedule",sidebar_label:"207. Course Schedule",tags:["Leetcode Medium","Graph","BFS"]},c=void 0,i={unversionedId:"leetcode/1-500/course_schedule",id:"leetcode/1-500/course_schedule",title:"207. Course Schedule",description:"https://leetcode.com/problems/course-schedule/",source:"@site/docs/leetcode/1-500/207_course_schedule.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/course_schedule",permalink:"/docs/leetcode/1-500/course_schedule",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/207_course_schedule.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Graph",permalink:"/docs/tags/graph"},{label:"BFS",permalink:"/docs/tags/bfs"}],version:"current",sidebarPosition:207,frontMatter:{title:"207. Course Schedule",sidebar_label:"207. Course Schedule",tags:["Leetcode Medium","Graph","BFS"]},sidebar:"docSidebar",previous:{title:"206. Reverse Linked List",permalink:"/docs/leetcode/1-500/reverse_linked_list"},next:{title:"208. Implement Trie (Prefix Tree)",permalink:"/docs/leetcode/1-500/trie_tree"}},l={},u=[{value:"Python",id:"python",level:2},{value:"BFS",id:"bfs",level:3}],a={toc:u},d="wrapper";function p(e){let{components:r,...t}=e;return(0,o.kt)(d,(0,n.Z)({},a,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/course-schedule/"},"https://leetcode.com/problems/course-schedule/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"bfs"},"BFS"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from collections import defaultdict, deque\n\n\nclass Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\n        graph = defaultdict(set)\n        ingress = [0] * numCourses\n\n        for edge in prerequisites:\n            graph[edge[1]].add(edge[0])\n            ingress[edge[0]] += 1\n\n        queue = deque()\n        for course in range(numCourses):\n            if ingress[course] == 0:\n                queue.append(course)\n\n        while queue:\n            course = queue.popleft()\n            for prereq in graph[course]:\n                ingress[prereq] -= 1\n                if ingress[prereq] == 0:\n                    queue.append(prereq)\n\n        return all(item == 0 for item in ingress)\n")))}p.isMDXComponent=!0}}]);