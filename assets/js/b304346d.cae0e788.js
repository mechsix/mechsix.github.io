"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[85321],{15033:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"leetcode/1501-2000/check_experssion_trees_equal","title":"1612. Check If Two Expression Trees are Equivalent","description":"Python","source":"@site/docs/leetcode/1501-2000/1612_check_experssion_trees_equal.md","sourceDirName":"leetcode/1501-2000","slug":"/leetcode/1501-2000/check_experssion_trees_equal","permalink":"/docs/leetcode/1501-2000/check_experssion_trees_equal","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Medium","permalink":"/docs/tags/leetcode-medium"},{"inline":true,"label":"Binary Tree","permalink":"/docs/tags/binary-tree"},{"inline":true,"label":"DFS","permalink":"/docs/tags/dfs"}],"version":"current","sidebarPosition":1612,"frontMatter":{"title":"1612. Check If Two Expression Trees are Equivalent","sidebar_label":"1612. Check If Two Expression Trees are Equivalent","tags":["Leetcode Medium","Binary Tree","DFS"]},"sidebar":"docSidebar","previous":{"title":"1601. Maximum Number of Achievable Transfer Requests","permalink":"/docs/leetcode/1501-2000/max_num_of_achievable_trans_request"},"next":{"title":"1630. Arithmetic Subarrays","permalink":"/docs/leetcode/1501-2000/arithmetic_subarray"}}');var o=r(74848),s=r(28453);const a={title:"1612. Check If Two Expression Trees are Equivalent",sidebar_label:"1612. Check If Two Expression Trees are Equivalent",tags:["Leetcode Medium","Binary Tree","DFS"]},i=void 0,l={},c=[{value:"Python",id:"python",level:2}];function d(e){const n={code:"code",h2:"h2",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def checkEquivalence(self, root1: 'Node', root2: 'Node') -> bool:\n        root1_operand = sorted(self.extract_operand(root1, []))\n        root2_operand = sorted(self.extract_operand(root2, []))\n\n        if len(root1_operand) != len(root2_operand):\n            return False\n\n        for i in range(len(root1_operand)):\n            if root1_operand[i] != root2_operand[i]:\n                return False\n        return True\n\n\n    def extract_operand(self, node, holder: list):\n        if not node:\n            return\n\n        if node.val != '+':\n            holder.append(node.val)\n        self.extract_operand(node.left, holder)\n        self.extract_operand(node.right, holder)\n\n        return holder\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>i});var t=r(96540);const o={},s=t.createContext(o);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);