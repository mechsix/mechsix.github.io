"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[9721],{3905:function(e,r,n){n.d(r,{Zo:function(){return f},kt:function(){return u}});var t=n(67294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function i(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=t.createContext({}),c=function(e){var r=t.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):l(l({},r),e)),n},f=function(e){var r=c(e.components);return t.createElement(s.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},m=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,f=i(e,["components","mdxType","originalType","parentName"]),m=c(n),u=o,p=m["".concat(s,".").concat(u)]||m[u]||d[u]||a;return n?t.createElement(p,l(l({ref:r},f),{},{components:n})):t.createElement(p,l({ref:r},f))}));function u(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=m;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var c=2;c<a;c++)l[c]=n[c];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},78678:function(e,r,n){n.r(r),n.d(r,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return f},default:function(){return m}});var t=n(87462),o=n(63366),a=(n(67294),n(3905)),l=["components"],i={title:"695. Max Area of Island",sidebar_label:"695. Max Area of Island",tags:["Leetcode Medium","DFS","BFS"]},s=void 0,c={unversionedId:"leetcode/501-1000/max_area_of_islands",id:"leetcode/501-1000/max_area_of_islands",title:"695. Max Area of Island",description:"https://leetcode.com/problems/max-area-of-island/",source:"@site/docs/leetcode/501-1000/695_max_area_of_islands.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/max_area_of_islands",permalink:"/docs/leetcode/501-1000/max_area_of_islands",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/695_max_area_of_islands.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"DFS",permalink:"/docs/tags/dfs"},{label:"BFS",permalink:"/docs/tags/bfs"}],version:"current",sidebarPosition:695,frontMatter:{title:"695. Max Area of Island",sidebar_label:"695. Max Area of Island",tags:["Leetcode Medium","DFS","BFS"]},sidebar:"docSidebar",previous:{title:"654. Maximum Binary Tree",permalink:"/docs/leetcode/501-1000/max_binary_tree"},next:{title:"700. Search in a Binary Search Tree",permalink:"/docs/leetcode/501-1000/search_bst"}},f=[{value:"Python",id:"python",children:[{value:"DFS",id:"dfs",children:[],level:3},{value:"BFS",id:"bfs",children:[],level:3}],level:2}],d={toc:f};function m(e){var r=e.components,n=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,t.Z)({},d,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/max-area-of-island/"},"https://leetcode.com/problems/max-area-of-island/")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("h3",{id:"dfs"},"DFS"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def __init__(self):\n        self.grid = []\n        self.seem = set()\n        self.row_limit = 0\n        self.col_limit = 0\n\n    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:\n        self.grid = grid\n        self.seem = set()\n        self.row_limit = len(grid)\n        self.col_limit = len(grid[0])\n\n        maximum = 0\n        for row in range(self.row_limit):\n            for col in range(self.col_limit):\n                if (row, col) in self.seem:\n                    continue\n                maximum = max(maximum, self._dfs(row, col))\n        return maximum\n\n    def _dfs(self, row, col):\n        if (row, col) in self.seem:\n            return 0\n\n        area = 0\n        if self.grid[row][col] == 1:\n            area += 1\n            self.seem.add((row, col))\n            if row - 1 >= 0:\n                area += self._dfs(row-1, col)\n            if row + 1 < self.row_limit:\n                area += self._dfs(row+1, col)\n            if col - 1 >= 0:\n                area += self._dfs(row, col-1)\n            if col + 1 < self.col_limit:\n                area += self._dfs(row, col+1)\n\n        return area\n")),(0,a.kt)("h3",{id:"bfs"},"BFS"),(0,a.kt)("p",null,"(TODO)"))}m.isMDXComponent=!0}}]);