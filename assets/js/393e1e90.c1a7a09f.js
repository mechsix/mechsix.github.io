"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[42975],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return d}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),u=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=u(r),d=o,f=m["".concat(c,".").concat(d)]||m[d]||s[d]||a;return r?n.createElement(f,i(i({ref:t},p),{},{components:r})):n.createElement(f,i({ref:t},p))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var u=2;u<a;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},97981:function(e,t,r){r.r(t),r.d(t,{contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return p}});var n=r(87462),o=r(63366),a=(r(67294),r(3905)),i=["components"],l={title:"221. Maximal Square",sidebar_label:"221. Maximal Square",tags:["DP"]},c=void 0,u={unversionedId:"leetcode/1-500/max_square",id:"leetcode/1-500/max_square",title:"221. Maximal Square",description:"https://leetcode.com/problems/maximal-square/",source:"@site/docs/leetcode/1-500/221_max_square.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/max_square",permalink:"/docs/leetcode/1-500/max_square",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/221_max_square.md",tags:[{label:"DP",permalink:"/docs/tags/dp"}],version:"current",sidebarPosition:221,frontMatter:{title:"221. Maximal Square",sidebar_label:"221. Maximal Square",tags:["DP"]},sidebar:"docSidebar",previous:{title:"217. Contains Duplicate",permalink:"/docs/leetcode/1-500/containers_duplicate"},next:{title:"222. Count Complete Tree Nodes",permalink:"/docs/leetcode/1-500/count_complete_bin_tree"}},p=[{value:"Python",id:"python",children:[{value:"Bottom Up DP",id:"bottom-up-dp",children:[],level:3}],level:2}],s={toc:p};function m(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/maximal-square/"},"https://leetcode.com/problems/maximal-square/")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("h3",{id:"bottom-up-dp"},"Bottom Up DP"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Time: O(M*N)"),(0,a.kt)("li",{parentName:"ul"},"Space: O(M*N)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'class Solution:\n    def maximalSquare(self, matrix: List[List[str]]) -> int:\n        m, n = len(matrix), len(matrix[0])\n\n        dp = [[0]*(n+1) for _ in range(m+1)]\n        ans = 0\n\n        for row in range(1, m+1):\n            for col in range(1, n+1):\n                if matrix[row-1][col-1] != "1":\n                    continue\n\n                dp[row][col] = 1 + min([\n                    dp[row-1][col], dp[row][col-1], dp[row-1][col-1]\n                ])\n\n                ans = max(ans, dp[row][col])\n\n        return ans**2\n')))}m.isMDXComponent=!0}}]);