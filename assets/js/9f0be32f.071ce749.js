"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[64942],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return d}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),a=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},l=function(e){var n=a(e.components);return r.createElement(s.Provider,{value:n},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),m=a(t),f=o,d=m["".concat(s,".").concat(f)]||m[f]||p[f]||i;return t?r.createElement(d,c(c({ref:n},l),{},{components:t})):r.createElement(d,c({ref:n},l))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,c=new Array(i);c[0]=f;var u={};for(var s in n)hasOwnProperty.call(n,s)&&(u[s]=n[s]);u.originalType=e,u[m]="string"==typeof e?e:o,c[1]=u;for(var a=2;a<i;a++)c[a]=t[a];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},12705:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return a}});var r=t(83117),o=(t(67294),t(3905));const i={title:"673. Number of Longest Increasing Subsequence",sidebar_label:"673. Number of Longest Increasing Subsequence",tags:["Leetcode Medium","DP"]},c=void 0,u={unversionedId:"leetcode/501-1000/num_of_longest_increasing_subsequence",id:"leetcode/501-1000/num_of_longest_increasing_subsequence",title:"673. Number of Longest Increasing Subsequence",description:"https://leetcode.com/problems/number-of-longest-increasing-subsequence/",source:"@site/docs/leetcode/501-1000/673_num_of_longest_increasing_subsequence.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/num_of_longest_increasing_subsequence",permalink:"/docs/leetcode/501-1000/num_of_longest_increasing_subsequence",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/673_num_of_longest_increasing_subsequence.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"DP",permalink:"/docs/tags/dp"}],version:"current",sidebarPosition:673,frontMatter:{title:"673. Number of Longest Increasing Subsequence",sidebar_label:"673. Number of Longest Increasing Subsequence",tags:["Leetcode Medium","DP"]},sidebar:"docSidebar",previous:{title:"669. Trim a Binary Search Tree",permalink:"/docs/leetcode/501-1000/trim_bst"},next:{title:"680. Valid Palindrome II",permalink:"/docs/leetcode/501-1000/valid_palindrome_ii"}},s={},a=[{value:"Python",id:"python",level:2}],l={toc:a};function m(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/number-of-longest-increasing-subsequence/"},"https://leetcode.com/problems/number-of-longest-increasing-subsequence/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def findNumberOfLIS(self, nums: List[int]) -> int:\n        n = len(nums)\n        dp = [1 for _ in range(n)]\n        counter = [1 for _ in range(n)]\n\n        max_item = 1\n\n        for i in range(1, n):\n            for j in range(i):\n                if nums[i] <= nums[j]:\n                    continue\n\n                if dp[i] == dp[j]+1:\n                    counter[i] += counter[j]\n                    continue\n\n                if dp[i] < dp[j]+1:\n                    dp[i] = dp[j] + 1\n                    counter[i] = counter[j]\n            max_item = max(max_item, dp[i])\n\n        ans = 0\n        for i, item in enumerate(dp):\n            if item == max_item:\n                ans += counter[i]\n        return ans\n")))}m.isMDXComponent=!0}}]);