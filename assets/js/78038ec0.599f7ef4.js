"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[39561],{60069:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"leetcode/1-500/valid_anagram","title":"242. Valid Anagram","description":"https://leetcode.com/problems/valid-anagram/","source":"@site/docs/leetcode/1-500/242_valid_anagram.md","sourceDirName":"leetcode/1-500","slug":"/leetcode/1-500/valid_anagram","permalink":"/docs/leetcode/1-500/valid_anagram","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Easy","permalink":"/docs/tags/leetcode-easy"},{"inline":true,"label":"Bit Manipulation","permalink":"/docs/tags/bit-manipulation"},{"inline":true,"label":"Rust","permalink":"/docs/tags/rust"},{"inline":true,"label":"CTCI","permalink":"/docs/tags/ctci"}],"version":"current","sidebarPosition":242,"frontMatter":{"title":"242. Valid Anagram","sidebar_label":"242. Valid Anagram","tags":["Leetcode Easy","Bit Manipulation","Rust","CTCI"]},"sidebar":"docSidebar","previous":{"title":"240. Search a 2D Matrix II","permalink":"/docs/leetcode/1-500/search_2d_matrix_ii"},"next":{"title":"250. Count Univalue Subtrees","permalink":"/docs/leetcode/1-500/count_univalue_subtree"}}');var r=t(74848),i=t(28453);const l={title:"242. Valid Anagram",sidebar_label:"242. Valid Anagram",tags:["Leetcode Easy","Bit Manipulation","Rust","CTCI"]},a=void 0,c={},o=[{value:"Python",id:"python",level:2},{value:"Sort the string counts",id:"sort-the-string-counts",level:3},{value:"Counter",id:"counter",level:3},{value:"Bit Manipulation",id:"bit-manipulation",level:3},{value:"Rust",id:"rust",level:2},{value:"Mapper",id:"mapper",level:3},{value:"Sort the string",id:"sort-the-string",level:3},{value:"Plus the Minus",id:"plus-the-minus",level:3},{value:"Bit Manipulation",id:"bit-manipulation-1",level:3}];function d(n){const e={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.p,{children:(0,r.jsx)(e.a,{href:"https://leetcode.com/problems/valid-anagram/",children:"https://leetcode.com/problems/valid-anagram/"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"CTCI 1.2 Check Permutation"}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"python",children:"Python"}),"\n",(0,r.jsx)(e.h3,{id:"sort-the-string-counts",children:"Sort the string counts"}),"\n",(0,r.jsxs)(e.p,{children:["Consider ",(0,r.jsx)(e.code,{children:"s"})," has length ",(0,r.jsx)(e.code,{children:"M"}),"; ",(0,r.jsx)(e.code,{children:"t"})," has length ",(0,r.jsx)(e.code,{children:"N"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Time: O(NlogN * MlogM)"}),"\n",(0,r.jsx)(e.li,{children:"Space: O(N+M)"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"class Solution:\n    def isAnagram(self, s: str, t: str) -> bool:\n        if len(s) != len(t):\n            return False\n\n        s_chars = list(s)\n        t_chars = list(t)\n        s_chars.sort()\n        t_chars.sort()\n\n        for i in range(len(s_chars)-1, -1, -1):\n            s_char = s_chars[i]\n            if s_char != t_chars[-1]:\n                return False\n            t_chars.pop()\n        return True\n"})}),"\n",(0,r.jsx)(e.h3,{id:"counter",children:"Counter"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Time: O(M)"}),"\n",(0,r.jsx)(e.li,{children:"Space: O(M+N) worst case"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"from collections import Counter\n\nclass Solution:\n    def isAnagram(self, s: str, t: str) -> bool:\n        if len(s) != len(t):\n            return False\n\n        s_counts = Counter(s)\n        t_counts = Counter(t)\n\n        for char, count in s_counts.items():\n            if char not in t_counts or t_counts[char] != count:\n                return False\n        return True\n"})}),"\n",(0,r.jsx)(e.h3,{id:"bit-manipulation",children:"Bit Manipulation"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\u7528\u4e00\u500b\u6574\u6578",(0,r.jsx)(e.code,{children:"bit_vector"}),"\u4f5c\u70bamapper\uff0c\u6bcf\u500bbit\u90fd\u8868\u793a\uff1a\u7279\u5b9a\u5b57\u5143\u7684\u51fa\u73fe\u6b21\u6578\u662f\u5426\u70ba\u5947\u6578","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u7b2c0bit\uff0c\u8868\u793a'a'\u5728\u5b57\u4e32\u4e2d\u662f\u5426\u51fa\u73fe\u6b21\u6578\u70ba\u5947\u6578"}),"\n",(0,r.jsx)(e.li,{children:"\u7d2f\u9032\u6642\u8981\u6ce8\u610fbit\u6709\u6c92\u6709\u91cd\u758a\uff0c\u6709\u91cd\u758a\u5f80\u4e0a\u758a\u6703\u5c0e\u81f4\u9000\u4f4d"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\u6700\u7d42\u6aa2\u67e5",(0,r.jsx)(e.code,{children:"bit_vector"}),"\u662f\u5426\u53ea\u6709\u4e00\u500bbit\u70ba1 - \u5373\u8a72\u5b57\u4e32\u7684\u5b57\u5143\u7d44\u5408\u53ef\u4ee5\u7d44\u51fa\u8ff4\u6587","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"b11110 & b00001 = 0"}),"\uff0c\u5373 ",(0,r.jsx)(e.code,{children:"(b11110 - 1) & b11110"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"class Solution:\n    def canPermutePalindrome(self, s: str) -> bool:\n        # 1st bit present 'a' is even, 2nd bit present 'b' is event and so on\n        bit_vector = 0\n\n        for letter in s:\n            mask = 1 << (ord(letter) - ord('a'))\n            if bit_vector & mask == 0:\n                # bit has overlay\n                bit_vector |= mask\n            else:\n                bit_vector &= ~mask\n\n        return (bit_vector & (bit_vector - 1)) == 0\n"})}),"\n",(0,r.jsx)(e.h2,{id:"rust",children:"Rust"}),"\n",(0,r.jsx)(e.h3,{id:"mapper",children:"Mapper"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Time: O(N)"}),"\n",(0,r.jsx)(e.li,{children:"Space: O(1)"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-rust",children:"impl Solution {\n    pub fn is_anagram(s: String, t: String) -> bool {\n        if s.len() != t.len() {\n            return false\n        }\n\n        let mut mapper_s = [0; 26];\n        let mut mapper_t = [0; 26];\n\n        for i in s.as_bytes().iter() {\n            mapper_s[(i-b'a') as usize] += 1;\n        }\n        for j in t.as_bytes().iter() {\n            mapper_t[(j-b'a') as usize] += 1;\n        }\n\n        mapper_s == mapper_t\n    }\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"sort-the-string",children:"Sort the string"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Time: O(NlogN) // by sort"}),"\n",(0,r.jsx)(e.li,{children:"Space: O(1)"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-rust",children:"use std::iter::Iterator;\nuse std::iter::FromIterator;\n\n\nimpl Solution {\n    pub fn is_anagram(s: String, t: String) -> bool {\n        if s.len() != t.len() {\n            return false\n        }\n\n        let slice_s: &str = &s[..];\n        let slice_t: &str = &t[..];\n\n        let mut chars_s: Vec<char> = slice_s.chars().collect();\n        let mut chars_t: Vec<char> = slice_t.chars().collect();\n\n        chars_s.sort_by(|pre, cur| cur.cmp(pre));\n        chars_t.sort_by(|pre, cur| cur.cmp(pre));\n\n        let sorted_s = String::from_iter(chars_s);\n        let sorted_t = String::from_iter(chars_t);\n\n        sorted_s == sorted_t\n    }\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"plus-the-minus",children:"Plus the Minus"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u4e00\u52a0\u4e00\u6e1b\uff0c\u5982\u679c\u662f\u76f8\u540c\u7d44\u5408\uff0c\u6700\u7d42mapper\u61c9\u8a72\u6703\u90fd\u662f0"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-rust",children:"impl Solution {\n    pub fn is_anagram(s: String, t: String) -> bool {\n        if s.len() != t.len() {\n            return false\n        }\n\n        let mut mapper = [0; 26];\n        for i in s.as_bytes().iter() {\n            mapper[(i-b'a') as usize] += 1;\n        }\n\n        for i in t.as_bytes().iter() {\n            let letter_id = (i - b'a') as usize;\n            mapper[letter_id] -= 1;\n            if mapper[letter_id] < 0 {\n                return false;\n            }\n        }\n\n        true\n    }\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"bit-manipulation-1",children:"Bit Manipulation"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-rust",children:"impl Solution {\n    pub fn can_permute_palindrome(s: String) -> bool {\n        let mut bit_vector = 0;\n\n        for letter in s.chars() {\n            let mask = 1 << (letter as u32 - 'a' as u32);\n            if bit_vector & mask == 0 {\n                bit_vector |= mask;\n            } else {\n                bit_vector &= !mask;\n            }\n        }\n\n        (bit_vector & (bit_vector - 1)) == 0\n    }\n}\n"})})]})}function u(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}},28453:(n,e,t)=>{t.d(e,{R:()=>l,x:()=>a});var s=t(96540);const r={},i=s.createContext(r);function l(n){const e=s.useContext(i);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:l(n.components),s.createElement(i.Provider,{value:e},n.children)}}}]);