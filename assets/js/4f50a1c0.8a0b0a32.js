"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[5050],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return p}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):u(u({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),m=l(n),p=o,f=m["".concat(s,".").concat(p)]||m[p]||d[p]||i;return n?r.createElement(f,u(u({ref:t},c),{},{components:n})):r.createElement(f,u({ref:t},c))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,u=new Array(i);u[0]=m;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a.mdxType="string"==typeof e?e:o,u[1]=a;for(var l=2;l<i;l++)u[l]=n[l];return r.createElement.apply(null,u)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9695:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return c}});var r=n(87462),o=n(63366),i=(n(67294),n(3905)),u=["components"],a={title:"416. Partition Equal Subset Sum",sidebar_label:"416. Partition Equal Subset Sum",tags:["Leetcode Medium","DFS","DP"]},s=void 0,l={unversionedId:"leetcode/1-500/partition_equal_subset_sum",id:"leetcode/1-500/partition_equal_subset_sum",title:"416. Partition Equal Subset Sum",description:"https://leetcode.com/problems/partition-equal-subset-sum",source:"@site/docs/leetcode/1-500/416_partition_equal_subset_sum.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/partition_equal_subset_sum",permalink:"/docs/leetcode/1-500/partition_equal_subset_sum",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/416_partition_equal_subset_sum.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"DFS",permalink:"/docs/tags/dfs"},{label:"DP",permalink:"/docs/tags/dp"}],version:"current",sidebarPosition:416,frontMatter:{title:"416. Partition Equal Subset Sum",sidebar_label:"416. Partition Equal Subset Sum",tags:["Leetcode Medium","DFS","DP"]},sidebar:"docSidebar",previous:{title:"415. Add Strings",permalink:"/docs/leetcode/1-500/add_strings"},next:{title:"421. Maximum XOR of Two Numbers in an Array",permalink:"/docs/leetcode/1-500/max_xor_of_2_nums_in_array"}},c=[{value:"Python",id:"python",children:[{value:"DFS (Failed Try)",id:"dfs-failed-try",children:[],level:3},{value:"Top Down DP",id:"top-down-dp",children:[],level:3}],level:2}],d={toc:c};function m(e){var t=e.components,n=(0,o.Z)(e,u);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/partition-equal-subset-sum"},"https://leetcode.com/problems/partition-equal-subset-sum")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"dfs-failed-try"},"DFS (Failed Try)"),(0,i.kt)("p",null,"Fail try, did not really get the idea...\n(2021/12/12)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def canPartition(self, nums: List[int]) -> bool:\n        if not nums:\n            return False\n\n        total = sum(nums)\n        if total % 2:\n            return False\n\n        target = total / 2\n        sorted_nums = sorted(nums, reverse=True)\n\n        return self._dfs(sorted_nums, 0, target)\n\n    def _dfs(self, nums, index, target):\n        if target < nums[index]:\n            return False\n\n        target -= nums[index]\n        if target == 0 or self._dfs(nums, index+1, target):\n            return True\n        target += nums[index]\n")),(0,i.kt)("h3",{id:"top-down-dp"},"Top Down DP"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from functools import cache\n\n\nclass Solution:\n    def canPartition(self, nums: List[int]) -> bool:\n        nums.sort()\n\n        @cache\n        def dp(i: int, sum1: int, sum2: int):\n            if i == len(nums):\n                if sum1 == sum2:\n                    return True\n                return False\n\n            num = nums[i]\n\n            return dp(i+1, sum1, sum2+num) or dp(i+1, sum1+num, sum2)\n\n        return dp(0, 0, 0)\n")))}m.isMDXComponent=!0}}]);