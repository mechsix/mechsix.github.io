"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[38696],{80136:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var r=t(74848),o=t(28453);const i={title:"905. Sort Array By Parity",sidebar_label:"905. Sort Array By Parity",tags:["Leetcode Easy","Two Pointer"]},s=void 0,a={id:"leetcode/501-1000/sort_array_by_parity",title:"905. Sort Array By Parity",description:"Python",source:"@site/docs/leetcode/501-1000/905_sort_array_by_parity.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/sort_array_by_parity",permalink:"/docs/leetcode/501-1000/sort_array_by_parity",draft:!1,unlisted:!1,tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Two Pointer",permalink:"/docs/tags/two-pointer"}],version:"current",sidebarPosition:905,frontMatter:{title:"905. Sort Array By Parity",sidebar_label:"905. Sort Array By Parity",tags:["Leetcode Easy","Two Pointer"]},sidebar:"docSidebar",previous:{title:"897. Increasing Order Search Tree",permalink:"/docs/leetcode/501-1000/increasing_order_bst"},next:{title:"912. Sort an Array",permalink:"/docs/leetcode/501-1000/sort_an_array"}},l={},c=[{value:"Python",id:"python",level:2},{value:"Two Pointer - Slow and Fast",id:"two-pointer---slow-and-fast",level:3},{value:"Two Pointer - Left Right Approaching",id:"two-pointer---left-right-approaching",level:3}];function u(e){const n={code:"code",h2:"h2",h3:"h3",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,r.jsx)(n.h3,{id:"two-pointer---slow-and-fast",children:"Two Pointer - Slow and Fast"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def sortArrayByParity(self, nums: List[int]) -> List[int]:\n        if len(nums) < 2:\n            return nums\n\n        cur, r = 0, 0\n\n        while r < len(nums):\n            if nums[cur] % 2 == 0:\n                cur += 1\n                r = cur\n                continue\n\n            if nums[r] % 2 != 0:\n                r += 1\n                continue\n\n            nums[cur], nums[r] = nums[r], nums[cur]\n            cur += 1\n\n        return nums\n"})}),"\n",(0,r.jsx)(n.h3,{id:"two-pointer---left-right-approaching",children:"Two Pointer - Left Right Approaching"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def sortArrayByParity(self, nums: List[int]) -> List[int]:\n        if len(nums) < 2:\n            return nums\n\n        left, right = 0, len(nums)-1\n\n        while left < right:\n            if nums[left] % 2 == 0:\n                left += 1\n            elif nums[right] % 2 != 0:\n                right -= 1\n            else:\n                nums[left], nums[right] = nums[right], nums[left]\n                left += 1\n                right -= 1\n\n        return nums\n"})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var r=t(96540);const o={},i=r.createContext(o);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);