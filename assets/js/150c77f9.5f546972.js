"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[97301],{3905:function(r,e,n){n.d(e,{Zo:function(){return s},kt:function(){return p}});var t=n(67294);function o(r,e,n){return e in r?Object.defineProperty(r,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):r[e]=n,r}function a(r,e){var n=Object.keys(r);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(r);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable}))),n.push.apply(n,t)}return n}function c(r){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){o(r,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(r,e,Object.getOwnPropertyDescriptor(n,e))}))}return r}function l(r,e){if(null==r)return{};var n,t,o=function(r,e){if(null==r)return{};var n,t,o={},a=Object.keys(r);for(t=0;t<a.length;t++)n=a[t],e.indexOf(n)>=0||(o[n]=r[n]);return o}(r,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(r);for(t=0;t<a.length;t++)n=a[t],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(r,n)&&(o[n]=r[n])}return o}var d=t.createContext({}),i=function(r){var e=t.useContext(d),n=e;return r&&(n="function"==typeof r?r(e):c(c({},e),r)),n},s=function(r){var e=i(r.components);return t.createElement(d.Provider,{value:e},r.children)},u={inlineCode:"code",wrapper:function(r){var e=r.children;return t.createElement(t.Fragment,{},e)}},b=t.forwardRef((function(r,e){var n=r.components,o=r.mdxType,a=r.originalType,d=r.parentName,s=l(r,["components","mdxType","originalType","parentName"]),b=i(n),p=o,h=b["".concat(d,".").concat(p)]||b[p]||u[p]||a;return n?t.createElement(h,c(c({ref:e},s),{},{components:n})):t.createElement(h,c({ref:e},s))}));function p(r,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof r||o){var a=n.length,c=new Array(a);c[0]=b;var l={};for(var d in e)hasOwnProperty.call(e,d)&&(l[d]=e[d]);l.originalType=r,l.mdxType="string"==typeof r?r:o,c[1]=l;for(var i=2;i<a;i++)c[i]=n[i];return t.createElement.apply(null,c)}return t.createElement.apply(null,n)}b.displayName="MDXCreateElement"},75225:function(r,e,n){n.r(e),n.d(e,{contentTitle:function(){return d},default:function(){return b},frontMatter:function(){return l},metadata:function(){return i},toc:function(){return s}});var t=n(87462),o=n(63366),a=(n(67294),n(3905)),c=["components"],l={title:"723. Candy Crush",sidebar_label:"723. Candy Crush",tags:["Two Pointer","Leetcode Medium"]},d=void 0,i={unversionedId:"leetcode/501-1000/candy_crush",id:"leetcode/501-1000/candy_crush",title:"723. Candy Crush",description:"https://leetcode.com/problems/candy-crush/",source:"@site/docs/leetcode/501-1000/723_candy_crush.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/candy_crush",permalink:"/docs/leetcode/501-1000/candy_crush",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/723_candy_crush.md",tags:[{label:"Two Pointer",permalink:"/docs/tags/two-pointer"},{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"}],version:"current",sidebarPosition:723,frontMatter:{title:"723. Candy Crush",sidebar_label:"723. Candy Crush",tags:["Two Pointer","Leetcode Medium"]},sidebar:"docSidebar",previous:{title:"718. Maximum Length of Repeated Subarray",permalink:"/docs/leetcode/501-1000/max_length_of_repeated_subarray"},next:{title:"724. Find Pivot Index",permalink:"/docs/leetcode/501-1000/find_pivot_index"}},s=[{value:"Python",id:"python",children:[],level:2},{value:"Javascript",id:"javascript",children:[],level:2}],u={toc:s};function b(r){var e=r.components,n=(0,o.Z)(r,c);return(0,a.kt)("wrapper",(0,t.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/candy-crush/"},"https://leetcode.com/problems/candy-crush/")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def candyCrush(self, board: List[List[int]]) -> List[List[int]]:\n        while self.crash(board):\n            self.drop(board)\n\n        return board\n\n    def crash(self, board) -> bool:\n        m = len(board)\n        n = len(board[0])\n\n        should_crash = set()\n        for row in range(m):\n            for col in range(n):\n                if board[row][col] == 0:\n                    continue\n\n                if row > 1 and board[row][col] == board[row-1][col] == board[row-2][col]:\n                    should_crash.add((row, col))\n                    should_crash.add((row-1, col))\n                    should_crash.add((row-2, col))\n\n                if col > 1 and board[row][col] == board[row][col-1] == board[row][col-2]:\n                    should_crash.add((row, col))\n                    should_crash.add((row, col-1))\n                    should_crash.add((row, col-2))\n\n        if should_crash:\n            for row, col in should_crash:\n                board[row][col] = 0\n            return True\n\n        return False\n\n    def drop(self, board):\n        m = len(board)\n        n = len(board[0])\n\n        for col in range(n):\n            idx = len(board)-1\n            for row in range(m-1, -1, -1):\n                if board[row][col]>0:\n                    board[idx][col] = board[row][col]\n                    idx -= 1\n\n            for row in range(idx+1):\n                board[row][col] = 0\n")),(0,a.kt)("h2",{id:"javascript"},"Javascript"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"var candyCrush = function(board) {\n   let crush = false;\n  // row\n  for (let r = 0; r < board.length; r++) {\n    for (let c = 0; c < board[r].length - 2; c++) {\n      const target = Math.abs(board[r][c]);\n      const allEqual = (target === Math.abs(board[r][c + 1])) && (target === Math.abs(board[r][c + 2]));\n      if (board[r][c] !== 0 && allEqual) {\n        board[r][c] = board[r][c + 1] = board[r][c + 2] = -target;\n        crush = true;\n      }\n    }\n  }\n\n  // col\n  for (let c = 0; c < board[0].length; c++) {\n    for (let r = 0; r < board.length - 2; r++) {\n      const target = Math.abs(board[r][c]);\n      const allEqual = (target === Math.abs(board[r + 1][c])) && (target === Math.abs(board[r + 2][c]));\n\n      if (board[r][c] !== 0 && allEqual) {\n        board[r][c] = board[r + 1][c] = board[r + 2][c] = -target;\n        crush = true;\n      }\n    }\n  }\n\n  for (let c = 0; c < board[0].length; c++) {\n    let tmp = board.length - 1;\n    for (let r = board.length - 1; r >= 0; r--) {\n      if (board[r][c] > 0) {\n        board[tmp--][c] = board[r][c]\n      }\n    }\n    while (tmp >= 0) board[tmp--][c] = 0;\n  }\n  // console.log(board)\n\n  if (crush) return candyCrush(board);\n  else return board;\n};\n")))}b.isMDXComponent=!0}}]);