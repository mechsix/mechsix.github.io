"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[15343],{99528:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>a,contentTitle:()=>d,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=o(74848),t=o(28453);const i={title:"130 Surrounded Regions",sidebar_label:"130. Surrounded Regions",tags:["Leetcode Medium","TODO"]},d=void 0,s={id:"leetcode/1-500/surrounded_regions",title:"130 Surrounded Regions",description:"https://leetcode.com/problems/surrounded-regions",source:"@site/docs/leetcode/1-500/130_surrounded_regions.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/surrounded_regions",permalink:"/docs/leetcode/1-500/surrounded_regions",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"TODO",permalink:"/docs/tags/todo"}],version:"current",sidebarPosition:130,frontMatter:{title:"130 Surrounded Regions",sidebar_label:"130. Surrounded Regions",tags:["Leetcode Medium","TODO"]},sidebar:"docSidebar",previous:{title:"128. Longest Consecutive Sequence",permalink:"/docs/leetcode/1-500/longest_consecutive_sequence"},next:{title:"131. Palindrome Partitioning",permalink:"/docs/leetcode/1-500/palindrome_partitioning"}},a={},l=[{value:"Python",id:"python",level:2},{value:"Fail Try",id:"fail-try",level:3},{value:"Second Try (Not Correct)",id:"second-try-not-correct",level:3}];function c(n){const e={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,t.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.p,{children:(0,r.jsx)(e.a,{href:"https://leetcode.com/problems/surrounded-regions",children:"https://leetcode.com/problems/surrounded-regions"})}),"\n",(0,r.jsx)(e.h2,{id:"python",children:"Python"}),"\n",(0,r.jsx)(e.h3,{id:"fail-try",children:"Fail Try"}),"\n",(0,r.jsx)(e.p,{children:"Did not consider the turns of traversal..."}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"Two cells are connected if they are adjacent cells connected horizontally or vertically."}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"def solve(self, board: List[List[str]]) -> None:\n    for m in range(1, len(board)-1):\n        for n in range(1, len(board[m])-1):\n            if board[m][n] == 'O':\n                left  = next((nx for nx in range(n-1, -1, -1)        if board[m][nx] == 'X'), None)\n                right = next((nx for nx in range(n+1, len(board[m])) if board[m][nx] == 'X'), None)\n                up    = next((mx for mx in range(m-1, -1, -1)        if board[mx][n] == 'X'), None)\n                down  = next((mx for mx in range(m+1, len(board))    if board[mx][n] == 'X'), None)\n\n\n                # print(f\"[{m}, {n}] {left} {right} {up} {down}\")\n                if left  is not None and  \\\n                   right is not None and \\\n                   up    is not None and \\\n                   down  is not None:\n                    board[m][n] = 'X'\n\n"})}),"\n",(0,r.jsx)(e.h3,{id:"second-try-not-correct",children:"Second Try (Not Correct)"}),"\n",(0,r.jsx)(e.p,{children:"Start from edge and determine by DFS alg"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"def solve(self, board: List[List[str]]) -> None:\n    for m in range(1, len(board)-1):\n        for n in range(1, len(board[m])-1):\n            if board[m][n] == 'O':\n                left  =  next((\n                    nx for nx in range(n-1, -1, -1)\n                    if board[m][nx] == 'X'),\n                    None\n                )\n                right = next((\n                    nx for nx in range(n+1, len(board[m]))\n                    if board[m][nx] == 'X'),\n                    None\n                 )\n                up = next((\n                    mx for mx in range(m-1, -1, -1)\n                    if board[mx][n] == 'X'),\n                    None\n                )\n                bottom = next((\n                    mx for mx in range(m+1, len(board))\n                    if board[mx][n] == 'X'),\n                    None\n                )\n\n                if left is not None and right is not None and up is not None and bottom is not None:\n                    board[m][n] = 'X'\n"})})]})}function u(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(c,{...n})}):c(n)}},28453:(n,e,o)=>{o.d(e,{R:()=>d,x:()=>s});var r=o(96540);const t={},i=r.createContext(t);function d(n){const e=r.useContext(i);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:d(n.components),r.createElement(i.Provider,{value:e},n.children)}}}]);