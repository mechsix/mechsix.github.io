"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[89821],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>f});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function u(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):u(u({},t),e)),r},l=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),m=s(r),d=o,f=m["".concat(c,".").concat(d)]||m[d]||p[d]||a;return r?n.createElement(f,u(u({ref:t},l),{},{components:r})):n.createElement(f,u({ref:t},l))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,u=new Array(a);u[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[m]="string"==typeof e?e:o,u[1]=i;for(var s=2;s<a;s++)u[s]=r[s];return n.createElement.apply(null,u)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},24383:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>u,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var n=r(87462),o=(r(67294),r(3905));const a={title:"523. Continuous Subarray Sum",sidebar_label:"523. Continuous Subarray Sum",tags:["Leetcode Medium","Prefix Sum"]},u=void 0,i={unversionedId:"leetcode/501-1000/continuous_subarray_sum",id:"leetcode/501-1000/continuous_subarray_sum",title:"523. Continuous Subarray Sum",description:"https://leetcode.com/problems/continuous-subarray-sum/",source:"@site/docs/leetcode/501-1000/523_continuous_subarray_sum.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/continuous_subarray_sum",permalink:"/docs/leetcode/501-1000/continuous_subarray_sum",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/523_continuous_subarray_sum.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Prefix Sum",permalink:"/docs/tags/prefix-sum"}],version:"current",sidebarPosition:523,frontMatter:{title:"523. Continuous Subarray Sum",sidebar_label:"523. Continuous Subarray Sum",tags:["Leetcode Medium","Prefix Sum"]},sidebar:"docSidebar",previous:{title:"520. Detect Capital",permalink:"/docs/leetcode/501-1000/detect_capital"},next:{title:"525. Contiguous Array",permalink:"/docs/leetcode/501-1000/contiguous_array"}},c={},s=[{value:"Python",id:"python",level:2}],l={toc:s},m="wrapper";function p(e){let{components:t,...r}=e;return(0,o.kt)(m,(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/continuous-subarray-sum/"},"https://leetcode.com/problems/continuous-subarray-sum/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def checkSubarraySum(self, nums: List[int], k: int) -> bool:\n        if k <= 0:\n            return\n\n        # key: sum mod k, value: index\n        prefix_map = {0: -1}\n        remainder = 0\n\n        for i, num in enumerate(nums):\n            remainder += num\n            remainder %= k\n\n            if remainder in prefix_map:\n                if i - prefix_map.get(remainder) > 1:\n                    return True\n            else:\n                prefix_map[remainder] = i\n\n        return False\n")))}p.isMDXComponent=!0}}]);