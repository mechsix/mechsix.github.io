"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[1848],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return p}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function d(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),m=s(r),p=o,f=m["".concat(l,".").concat(p)]||m[p]||u[p]||a;return r?n.createElement(f,i(i({ref:t},c),{},{components:r})):n.createElement(f,i({ref:t},c))}));function p(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=m;var d={};for(var l in t)hasOwnProperty.call(t,l)&&(d[l]=t[l]);d.originalType=e,d.mdxType="string"==typeof e?e:o,i[1]=d;for(var s=2;s<a;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},57393:function(e,t,r){r.r(t),r.d(t,{contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return d},metadata:function(){return s},toc:function(){return c}});var n=r(87462),o=r(63366),a=(r(67294),r(3905)),i=["components"],d={title:"4. Median of Two Sorted Arrays",sidebar_label:"4. Median of Two Sorted Arrays",tags:["Leetcode Hard"]},l=void 0,s={unversionedId:"leetcode/1-500/median_two_sorted_array",id:"leetcode/1-500/median_two_sorted_array",title:"4. Median of Two Sorted Arrays",description:"https://leetcode.com/problems/median-of-two-sorted-arrays/",source:"@site/docs/leetcode/1-500/4_median_two_sorted_array.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/median_two_sorted_array",permalink:"/docs/leetcode/1-500/median_two_sorted_array",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/4_median_two_sorted_array.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"}],version:"current",sidebarPosition:4,frontMatter:{title:"4. Median of Two Sorted Arrays",sidebar_label:"4. Median of Two Sorted Arrays",tags:["Leetcode Hard"]},sidebar:"docSidebar",previous:{title:"3. Longest Substring Without Repeating Characters",permalink:"/docs/leetcode/1-500/longest_no_repeat_substring"},next:{title:"5. Longest Palindromic Substring",permalink:"/docs/leetcode/1-500/longest_palindromic_substring"}},c=[{value:"Python",id:"python",children:[{value:"Merge and Sort",id:"merge-and-sort",children:[],level:3},{value:"Use the sorted advantage",id:"use-the-sorted-advantage",children:[],level:3}],level:2}],u={toc:c};function m(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/median-of-two-sorted-arrays/"},"https://leetcode.com/problems/median-of-two-sorted-arrays/")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("h3",{id:"merge-and-sort"},"Merge and Sort"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Time: O((M+N)log(M+N))  # For the sorting"),(0,a.kt)("li",{parentName:"ul"},"Space: O(M+N)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        merged = sorted(nums1 + nums2)\n\n        mid = len(merged) >> 1\n        if len(merged) % 2 == 1:\n            return merged[mid]\n        else:\n            return (merged[mid] + merged[mid-1]) / 2\n")),(0,a.kt)("h3",{id:"use-the-sorted-advantage"},"Use the sorted advantage"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Time: O(M+N)"),(0,a.kt)("li",{parentName:"ul"},"Space: O(M+N)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from collections import deque\n\nclass Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        merged = deque()\n\n        # Merge and keep it sorted\n        while nums1 or nums2:\n            if not nums1:\n                merged.appendleft(nums2.pop())\n            elif not nums2:\n                merged.appendleft(nums1.pop())\n            else:\n                if nums1[-1] > nums2[-1]:\n                    merged.appendleft(nums1.pop())\n                else:\n                    merged.appendleft(nums2.pop())\n\n        mid = len(merged) >> 1\n        if len(merged) % 2 == 1:\n            return merged[mid]\n        else:\n            return (merged[mid] + merged[mid-1]) / 2\n")))}m.isMDXComponent=!0}}]);