"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[8638],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return f}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(r),f=o,m=p["".concat(s,".").concat(f)]||p[f]||d[f]||a;return r?n.createElement(m,i(i({ref:t},u),{},{components:r})):n.createElement(m,i({ref:t},u))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},46364:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return p}});var n=r(87462),o=r(63366),a=(r(67294),r(3905)),i=["components"],l={title:"977. Squares of a Sorted Array",sidebar_label:"977. Squares of a Sorted Array",tags:["Leetcode Easy","Two Pointer"]},s=void 0,c={unversionedId:"leetcode/501-1000/squares_of_sorted_array",id:"leetcode/501-1000/squares_of_sorted_array",title:"977. Squares of a Sorted Array",description:"Python",source:"@site/docs/leetcode/501-1000/977_squares_of_sorted_array.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/squares_of_sorted_array",permalink:"/docs/leetcode/501-1000/squares_of_sorted_array",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/977_squares_of_sorted_array.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Two Pointer",permalink:"/docs/tags/two-pointer"}],version:"current",sidebarPosition:977,frontMatter:{title:"977. Squares of a Sorted Array",sidebar_label:"977. Squares of a Sorted Array",tags:["Leetcode Easy","Two Pointer"]},sidebar:"docSidebar",previous:{title:"941. Valid Mountain Array",permalink:"/docs/leetcode/501-1000/valid_mountain_array"},next:{title:"986. Interval List Intersections",permalink:"/docs/leetcode/501-1000/interval_list_intersections"}},u=[{value:"Python",id:"python",children:[{value:"Cacluate and Sort",id:"cacluate-and-sort",children:[],level:3},{value:"Two Pointer",id:"two-pointer",children:[],level:3}],level:2}],d={toc:u};function p(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("h3",{id:"cacluate-and-sort"},"Cacluate and Sort"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def sortedSquares(self, nums: List[int]) -> List[int]:\n        return sorted([i**2 for i in nums])\n")),(0,a.kt)("h3",{id:"two-pointer"},"Two Pointer"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Use the adventage from the ",(0,a.kt)("inlineCode",{parentName:"li"},"sorted")," natural")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def sortedSquares(self, nums: List[int]) -> List[int]:\n        length = len(nums)\n\n        result = [0] * length\n        left, right = 0, length-1\n\n        for i in range(length-1, -1, -1):\n            if abs(nums[left]) < abs(nums[right]):\n                result[i] = nums[right] ** 2\n                right -= 1\n            else:\n                result[i] = nums[left] ** 2\n                left += 1\n        return result\n")))}p.isMDXComponent=!0}}]);