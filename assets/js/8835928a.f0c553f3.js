"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[9096],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return f}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),u=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,c=e.originalType,i=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),m=u(n),f=o,d=m["".concat(i,".").concat(f)]||m[f]||p[f]||c;return n?r.createElement(d,s(s({ref:t},l),{},{components:n})):r.createElement(d,s({ref:t},l))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=n.length,s=new Array(c);s[0]=m;var a={};for(var i in t)hasOwnProperty.call(t,i)&&(a[i]=t[i]);a.originalType=e,a.mdxType="string"==typeof e?e:o,s[1]=a;for(var u=2;u<c;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},62131:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return a},contentTitle:function(){return i},metadata:function(){return u},toc:function(){return l},default:function(){return m}});var r=n(87462),o=n(63366),c=(n(67294),n(3905)),s=["components"],a={title:"232. Implement Queue using Stacks",sidebar_label:"232. Implement Queue using Stacks",tags:["Leetcode Easy","Stack"]},i=void 0,u={unversionedId:"leetcode/1-500/implement_queue_using_stacks",id:"leetcode/1-500/implement_queue_using_stacks",title:"232. Implement Queue using Stacks",description:"https://leetcode.com/problems/implement-queue-using-stacks/",source:"@site/docs/leetcode/1-500/232_implement_queue_using_stacks.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/implement_queue_using_stacks",permalink:"/docs/leetcode/1-500/implement_queue_using_stacks",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/232_implement_queue_using_stacks.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Stack",permalink:"/docs/tags/stack"}],version:"current",sidebarPosition:232,frontMatter:{title:"232. Implement Queue using Stacks",sidebar_label:"232. Implement Queue using Stacks",tags:["Leetcode Easy","Stack"]},sidebar:"docSidebar",previous:{title:"231. Power of Two",permalink:"/docs/leetcode/1-500/power_of_two"},next:{title:"236. Lowest Common Ancestor of a Binary Tree",permalink:"/docs/leetcode/1-500/lowest_common_ancestor_of_bt"}},l=[{value:"Python",id:"python",children:[],level:2}],p={toc:l};function m(e){var t=e.components,n=(0,o.Z)(e,s);return(0,c.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/implement-queue-using-stacks/"},"https://leetcode.com/problems/implement-queue-using-stacks/")),(0,c.kt)("h2",{id:"python"},"Python"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-python"},"class MyQueue:\n    def __init__(self):\n        self.stack = []\n\n    def push(self, x: int) -> None:\n        self.stack.append(x)\n\n    def pop(self) -> int:\n        keep = []\n\n        while self.stack:\n            keep.append(self.stack.pop())\n        \n        result = keep.pop()\n        \n        while keep:\n            self.stack.append(keep.pop())\n\n        return result\n        \n\n    def peek(self) -> int:\n        return self.stack[0]\n        \n\n    def empty(self) -> bool:\n        return not bool(self.stack)\n")))}m.isMDXComponent=!0}}]);