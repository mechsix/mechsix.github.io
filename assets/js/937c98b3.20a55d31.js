"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[73732],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=n.createContext({}),a=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},c=function(e){var t=a(e.components);return n.createElement(u.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=a(r),m=o,f=p["".concat(u,".").concat(m)]||p[m]||d[m]||i;return r?n.createElement(f,s(s({ref:t},c),{},{components:r})):n.createElement(f,s({ref:t},c))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,s=new Array(i);s[0]=m;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[p]="string"==typeof e?e:o,s[1]=l;for(var a=2;a<i;a++)s[a]=r[a];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},37585:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>a});var n=r(87462),o=(r(67294),r(3905));const i={title:"7. Reverse Integer",sidebar_label:"7. Reverse Integer",tags:["Leetcode Medium"]},s=void 0,l={unversionedId:"leetcode/1-500/reverse_int",id:"leetcode/1-500/reverse_int",title:"7. Reverse Integer",description:"https://leetcode.com/problems/reverse-integer/",source:"@site/docs/leetcode/1-500/7_reverse_int.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/reverse_int",permalink:"/docs/leetcode/1-500/reverse_int",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/7_reverse_int.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"}],version:"current",sidebarPosition:7,frontMatter:{title:"7. Reverse Integer",sidebar_label:"7. Reverse Integer",tags:["Leetcode Medium"]},sidebar:"docSidebar",previous:{title:"6. Zigzag Conversion",permalink:"/docs/leetcode/1-500/zigzag_conversion"},next:{title:"8. String to Integer (atoi)",permalink:"/docs/leetcode/1-500/atoi"}},u={},a=[{value:"Python",id:"python",level:2},{value:"Forces Bust",id:"forces-bust",level:3},{value:"Queue",id:"queue",level:3}],c={toc:a},p="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/reverse-integer/"},"https://leetcode.com/problems/reverse-integer/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"forces-bust"},"Forces Bust"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def reverse(self, x: int) -> int:\n        digits = str(x)[::-1]\n        \n        \n        if digits[-1] == '-':\n            result = -int(digits[:-1])\n        else:\n            result = int(digits)\n            \n        return result if result > 1-2**31 and result < 2**31-1 else 0\n")),(0,o.kt)("h3",{id:"queue"},"Queue"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from collections import deque\n\n\nclass Solution:\n    def reverse(self, x: int) -> int:\n        queue = deque()\n        \n        # Check is native or not\n        if x < 0:\n            is_native = True\n            x = abs(x)\n        else:\n            is_native = False\n        \n        # Push to queue\n        while x // 10 > 0:\n            queue.append(x % 10)\n            x //= 10\n        queue.append(x)\n        \n        # Pop from queue and accumulate to the reversed num\n        power = len(queue) - 1\n        result = 0\n        while queue:\n            result += queue.popleft() * (10 ** power)\n            power -= 1\n            \n        if is_native:\n            result = -result\n\n        return result if result > 1-2**31 and result < 2**31-1 else 0\n")))}d.isMDXComponent=!0}}]);