"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[62684],{88669:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"leetcode/501-1000/binary_tree_pruning","title":"814. Binary Tree Pruning","description":"https://leetcode.com/problems/binary-tree-pruning/","source":"@site/docs/leetcode/501-1000/814_binary_tree_pruning.md","sourceDirName":"leetcode/501-1000","slug":"/leetcode/501-1000/binary_tree_pruning","permalink":"/docs/leetcode/501-1000/binary_tree_pruning","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Medium","permalink":"/docs/tags/leetcode-medium"},{"inline":true,"label":"Binary Tree","permalink":"/docs/tags/binary-tree"}],"version":"current","sidebarPosition":814,"frontMatter":{"title":"814. Binary Tree Pruning","sidebar_label":"814. Binary Tree Pruning","tags":["Leetcode Medium","Binary Tree"]},"sidebar":"docSidebar","previous":{"title":"804. Unique Morse Code Words","permalink":"/docs/leetcode/501-1000/unique_morse_code_words"},"next":{"title":"820. Short Encoding of Words","permalink":"/docs/leetcode/501-1000/short_encoding_of_words"}}');var o=r(74848),i=r(28453);const s={title:"814. Binary Tree Pruning",sidebar_label:"814. Binary Tree Pruning",tags:["Leetcode Medium","Binary Tree"]},a=void 0,d={},l=[{value:"Python",id:"python",level:2},{value:"Postfix Traversal",id:"postfix-traversal",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://leetcode.com/problems/binary-tree-pruning/",children:"https://leetcode.com/problems/binary-tree-pruning/"})}),"\n",(0,o.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,o.jsx)(n.h3,{id:"postfix-traversal",children:"Postfix Traversal"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def pruneTree(self, node: Optional[TreeNode]) -> Optional[TreeNode]:\n        if not node:\n            return\n\n        node.left = self.pruneTree(node.left)\n        node.right = self.pruneTree(node.right)\n        \n        if node.val == 0 and not node.left and not node.right:\n            return\n\n        return node\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>a});var t=r(96540);const o={},i=t.createContext(o);function s(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);