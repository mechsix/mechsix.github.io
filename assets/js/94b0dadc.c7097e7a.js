"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[7379],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),a=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=a(e.components);return r.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=a(t),m=o,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||i;return t?r.createElement(f,l(l({ref:n},u),{},{components:t})):r.createElement(f,l({ref:n},u))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,l=new Array(i);l[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,l[1]=s;for(var a=2;a<i;a++)l[a]=t[a];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},80590:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return s},metadata:function(){return a},toc:function(){return u}});var r=t(87462),o=t(63366),i=(t(67294),t(3905)),l=["components"],s={title:"1557. Minimum Number of Vertices to Reach All Nodes",sidebar_label:"1557. Minimum Number of Vertices to Reach All Nodes",tags:["Leetcode Medium","MST","Graph","Kruskal Algorithm"]},c=void 0,a={unversionedId:"leetcode/1501-2000/min_cost_connect_all_points",id:"leetcode/1501-2000/min_cost_connect_all_points",title:"1557. Minimum Number of Vertices to Reach All Nodes",description:"https://leetcode.com/problems/min-cost-to-connect-all-points/",source:"@site/docs/leetcode/1501-2000/1584_min_cost_connect_all_points.md",sourceDirName:"leetcode/1501-2000",slug:"/leetcode/1501-2000/min_cost_connect_all_points",permalink:"/docs/leetcode/1501-2000/min_cost_connect_all_points",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1501-2000/1584_min_cost_connect_all_points.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"MST",permalink:"/docs/tags/mst"},{label:"Graph",permalink:"/docs/tags/graph"},{label:"Kruskal Algorithm",permalink:"/docs/tags/kruskal-algorithm"}],version:"current",sidebarPosition:1584,frontMatter:{title:"1557. Minimum Number of Vertices to Reach All Nodes",sidebar_label:"1557. Minimum Number of Vertices to Reach All Nodes",tags:["Leetcode Medium","MST","Graph","Kruskal Algorithm"]},sidebar:"docSidebar",previous:{title:"1557. Minimum Number of Vertices to Reach All Nodes",permalink:"/docs/leetcode/1501-2000/min_number_vertice_reach_all_nodes"},next:{title:"743. Network Delay Time",permalink:"/docs/leetcode/1501-2000/network_delay_time"}},u=[{value:"Python",id:"python",children:[{value:"Kruskal&#39;s Algorithm",id:"kruskals-algorithm",children:[],level:3}],level:2}],p={toc:u};function d(e){var n=e.components,t=(0,o.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/min-cost-to-connect-all-points/"},"https://leetcode.com/problems/min-cost-to-connect-all-points/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"kruskals-algorithm"},"Kruskal's Algorithm"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Time: O(N^2 * logN)"),(0,i.kt)("li",{parentName:"ul"},"Space: O(N^2)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class UnionFind:\n    def __init__(self, size: int) -> None:\n        self.group = [0] * size\n        self.rank = [0] * size\n\n        for i in range(size):\n            self.group[i] = i\n\n    def find(self, node: int) -> int:\n        if self.group[node] != node:\n            self.group[node] = self.find(self.group[node])\n        return self.group[node]\n\n    def join(self, node1: int, node2: int) -> bool:\n        group1 = self.find(node1)\n        group2 = self.find(node2)\n\n        # node1 and node2 already belong to same group.\n        if group1 == group2:\n            return False\n\n        if self.rank[group1] > self.rank[group2]:\n            self.group[group2] = group1\n        elif self.rank[group1] < self.rank[group2]:\n            self.group[group1] = group2\n        else:\n            self.group[group1] = group2\n            self.rank[group2] += 1\n\n        return True\n\nclass Solution:\n    def minCostConnectPoints(self, points: List[List[int]]) -> int:\n        n = len(points)\n\n        edges = []\n        for i in range(n):\n            for j in range(i+1, n):\n                weight = abs(points[i][0]-points[j][0]) + abs(points[i][1]-points[j][1])\n                edges.append((weight, i, j))\n\n        edges.sort(key=lambda edge: edge[0])\n\n        uf = UnionFind(n)\n        cost = 0\n        edges_used = 0\n\n        for weight, i, j in edges:\n            if uf.join(i, j):\n                cost += weight\n                edges_used += 1\n\n                if edges_used == n-1:\n                    break\n        return cost\n")))}d.isMDXComponent=!0}}]);