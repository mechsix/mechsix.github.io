"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[85424],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),u=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=u(e.components);return o.createElement(s.Provider,{value:t},e.children)},l="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),l=u(n),m=r,f=l["".concat(s,".").concat(m)]||l[m]||p[m]||a;return n?o.createElement(f,c(c({ref:t},d),{},{components:n})):o.createElement(f,c({ref:t},d))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,c=new Array(a);c[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[l]="string"==typeof e?e:r,c[1]=i;for(var u=2;u<a;u++)c[u]=n[u];return o.createElement.apply(null,c)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},48859:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var o=n(87462),r=(n(67294),n(3905));const a={title:"1458. Max Dot Product of Two Subsequences",sidebar_label:"1458. Max Dot Product of Two Subsequences",tags:["Leetcode Hard","DP"]},c=void 0,i={unversionedId:"leetcode/1001-1500/max_dot_product_of_two_subsequences",id:"leetcode/1001-1500/max_dot_product_of_two_subsequences",title:"1458. Max Dot Product of Two Subsequences",description:"https://leetcode.com/problems/max-dot-product-of-two-subsequences",source:"@site/docs/leetcode/1001-1500/1458_max_dot_product_of_two_subsequences.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/max_dot_product_of_two_subsequences",permalink:"/docs/leetcode/1001-1500/max_dot_product_of_two_subsequences",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1458_max_dot_product_of_two_subsequences.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"DP",permalink:"/docs/tags/dp"}],version:"current",sidebarPosition:1458,frontMatter:{title:"1458. Max Dot Product of Two Subsequences",sidebar_label:"1458. Max Dot Product of Two Subsequences",tags:["Leetcode Hard","DP"]},sidebar:"docSidebar",previous:{title:"1457. Pseudo-Palindromic Paths in a Binary Tree",permalink:"/docs/leetcode/1001-1500/pseudo_palindromic_paths_in_a_binary_tree"},next:{title:"1461. Check If a String Contains All Binary Codes of Size K",permalink:"/docs/leetcode/1001-1500/check_a_string_contains_all_bin_codes_of_size_k"}},s={},u=[{value:"Python",id:"python",level:2},{value:"Bottom-Up DP",id:"bottom-up-dp",level:3},{value:"Top Down DP",id:"top-down-dp",level:2}],d={toc:u},l="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(l,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/max-dot-product-of-two-subsequences"},"https://leetcode.com/problems/max-dot-product-of-two-subsequences")),(0,r.kt)("h2",{id:"python"},"Python"),(0,r.kt)("h3",{id:"bottom-up-dp"},"Bottom-Up DP"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from functools import cache\nfrom math import inf\n\n\nclass Solution:\n    def maxDotProduct(self, nums1: List[int], nums2: List[int]) -> int:\n        n, m = len(nums1), len(nums2)\n\n        @cache\n        def dp(i, j):\n            if i == n or j == m:\n                return -inf\n            \n            return max(\n                nums1[i] * nums2[j] + max(dp(i+1, j+1), 0),\n                dp(i+1, j),\n                dp(i, j+1)\n            )\n        return dp(0, 0)\n")),(0,r.kt)("h2",{id:"top-down-dp"},"Top Down DP"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def maxDotProduct(self, nums1: List[int], nums2: List[int]) -> int:\n        n, m = len(nums1), len(nums2)\n\n        dp = [[-inf] * (m+1) for _ in range(n+1)]\n\n        for i in range(n + 1):\n            for j in range(m + 1):\n                if i == 0 or j == 0:\n                    dp[i][j] = float('-inf') \n                    continue\n                    \n                dp[i][j] = max(\n                    nums1[i - 1] * nums2[j - 1] + max(dp[i - 1][j - 1], 0),  \n                    dp[i - 1][j],  \n                    dp[i][j - 1],  \n                )\n\n        return dp[n][m]\n")))}p.isMDXComponent=!0}}]);