"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[44016],{33107:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>a,frontMatter:()=>l,metadata:()=>o,toc:()=>u});const o=JSON.parse('{"id":"leetcode/1001-1500/longest_common_subsequence","title":"1143. Longest Common Subsequence","description":"https://leetcode.com/problems/longest-common-subsequence/","source":"@site/docs/leetcode/1001-1500/1143_longest_common_subsequence.md","sourceDirName":"leetcode/1001-1500","slug":"/leetcode/1001-1500/longest_common_subsequence","permalink":"/docs/leetcode/1001-1500/longest_common_subsequence","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Medium","permalink":"/docs/tags/leetcode-medium"},{"inline":true,"label":"Rust","permalink":"/docs/tags/rust"},{"inline":true,"label":"DP","permalink":"/docs/tags/dp"}],"version":"current","sidebarPosition":1143,"frontMatter":{"title":"1143. Longest Common Subsequence","sidebar_label":"1143. Longest Common Subsequence","tags":["Leetcode Medium","Rust","DP"]},"sidebar":"docSidebar","previous":{"title":"1137. N-th Tribonacci Number","permalink":"/docs/leetcode/1001-1500/nth_tribonacci"},"next":{"title":"1148. Article Views I","permalink":"/docs/leetcode/1001-1500/article_views_i"}}');var r=t(74848),c=t(28453);const l={title:"1143. Longest Common Subsequence",sidebar_label:"1143. Longest Common Subsequence",tags:["Leetcode Medium","Rust","DP"]},s=void 0,i={},u=[{value:"Python",id:"python",level:2},{value:"Top-Down DP from right",id:"top-down-dp-from-right",level:3},{value:"Top-Down DP from left",id:"top-down-dp-from-left",level:3},{value:"Bottom-UP DP",id:"bottom-up-dp",level:3},{value:"Javascript",id:"javascript",level:2},{value:"Rust",id:"rust",level:2},{value:"Bottom-Up DP",id:"bottom-up-dp-1",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/longest-common-subsequence/",children:"https://leetcode.com/problems/longest-common-subsequence/"})}),"\n",(0,r.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,r.jsx)(n.h3,{id:"top-down-dp-from-right",children:"Top-Down DP from right"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from functools import cache\n\n\nclass Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -> int:\n        @cache\n        def dp(cur1, cur2):\n            if cur1 == -1 or cur2 == -1:\n                return 0\n\n            if text1[cur1] == text2[cur2]:\n                return 1 + dp(cur1-1, cur2-1)\n\n            return max(dp(cur1, cur2-1), dp(cur1-1, cur2))\n\n        return dp(len(text1)-1, len(text2)-1)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"top-down-dp-from-left",children:"Top-Down DP from left"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from functools import cache\n\n\nclass Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -> int:\n        @cache\n        def dp(cur1, cur2):\n            if cur1 == len(text1) or cur2 == len(text2):\n                return 0\n\n            if text1[cur1] == text2[cur2]:\n                return 1 + dp(cur1+1, cur2+1)\n\n            return max(dp(cur1, cur2+1), dp(cur1+1, cur2))\n\n        return dp(0, 0)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"bottom-up-dp",children:"Bottom-UP DP"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -> int:\n        dp = [[0]*(len(text2)+1) for _ in range(len(text1)+1)]\n\n        for col in range(len(text2)-1, -1, -1):\n            for row in range(len(text1)-1, -1, -1):\n                if text2[col] == text1[row]:\n                    dp[row][col] = 1 + dp[row+1][col+1]\n                else:\n                    dp[row][col] = max(dp[row+1][col], dp[row][col+1])\n        return dp[0][0]\n"})}),"\n",(0,r.jsx)(n.h2,{id:"javascript",children:"Javascript"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var longestCommonSubsequence = function(text1, text2) {\n    const dp = [...new Array(text1.length + 1)].map(() => new Array(text2.length + 1).fill(0));\n\n    for (let i = 0; i <= text1.length; i++) {\n        for (let j = 0; j <= text2.length; j++) {\n\n            if (i === 0 || j === 0) dp[i][j] = 0;\n            else {\n                if (text1[i - 1] === text2[j - 1]) {\n                    dp[i][j] = dp[i - 1][j - 1] + 1;\n                } else {\n                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n    }\n\n    return dp[text1.length][text2.length];\n};\n\n/**\n *   0 a c e\n * 0 0 0 0 0\n * a 0 1 1 1\n * b 0 1 1 1\n * c 0 1 2 2\n * d 0 1 2 2\n * e 0 1 2 3\n */\n"})}),"\n",(0,r.jsx)(n.h2,{id:"rust",children:"Rust"}),"\n",(0,r.jsx)(n.h3,{id:"bottom-up-dp-1",children:"Bottom-Up DP"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"use std::cmp::max;\n\n\nimpl Solution {\n    pub fn longest_common_subsequence(text1: String, text2: String) -> i32 {\n        let text1_len = text1.chars().count();\n        let text2_len = text2.chars().count();\n\n        let mut dp = vec![\n            vec![0; text2_len+1];\n            text1_len+1\n        ];\n\n        for row in (0..text1_len).rev() {\n            for col in (0..text2_len).rev() {\n                let letter1 = text1.chars().nth(row).unwrap();\n                let letter2 = text2.chars().nth(col).unwrap();\n\n                dp[row][col] = if letter1 == letter2 {\n                    dp[row+1][col+1] + 1\n                } else {\n                    max(dp[row+1][col], dp[row][col+1])\n                }\n            }\n        }\n\n        dp[0][0]\n    }\n}\n"})})]})}function a(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>s});var o=t(96540);const r={},c=o.createContext(r);function l(e){const n=o.useContext(c);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),o.createElement(c.Provider,{value:n},e.children)}}}]);