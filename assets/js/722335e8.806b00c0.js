"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[67919],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function u(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?u(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):u(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},u=Object.keys(e);for(r=0;r<u.length;r++)n=u[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(e);for(r=0;r<u.length;r++)n=u[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},m="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,u=e.originalType,l=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),m=c(n),d=o,f=m["".concat(l,".").concat(d)]||m[d]||s[d]||u;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var u=n.length,i=new Array(u);i[0]=d;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[m]="string"==typeof e?e:o,i[1]=a;for(var c=2;c<u;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},46813:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return u},metadata:function(){return a},toc:function(){return c}});var r=n(83117),o=(n(67294),n(3905));const u={title:"1696. Jump Game VI",sidebar_label:"1696. Jump Game VI",tags:["Leetcode Medium","DP"]},i=void 0,a={unversionedId:"leetcode/1501-2000/jump_game_vi",id:"leetcode/1501-2000/jump_game_vi",title:"1696. Jump Game VI",description:"https://leetcode.com/problems/jump-game-vi/",source:"@site/docs/leetcode/1501-2000/1696_jump_game_vi.md",sourceDirName:"leetcode/1501-2000",slug:"/leetcode/1501-2000/jump_game_vi",permalink:"/docs/leetcode/1501-2000/jump_game_vi",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1501-2000/1696_jump_game_vi.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"DP",permalink:"/docs/tags/dp"}],version:"current",sidebarPosition:1696,frontMatter:{title:"1696. Jump Game VI",sidebar_label:"1696. Jump Game VI",tags:["Leetcode Medium","DP"]},sidebar:"docSidebar",previous:{title:"1695. Maximum Erasure Value",permalink:"/docs/leetcode/1501-2000/max_erasure_value"},next:{title:"1706. Where Will the Ball Fall",permalink:"/docs/leetcode/1501-2000/where_will_the_ball_fall"}},l={},c=[{value:"Python",id:"python",level:2}],p={toc:c};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/jump-game-vi/"},"https://leetcode.com/problems/jump-game-vi/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from collections import deque\n\n\nclass Solution:\n    def maxResult(self, nums: List[int], k: int) -> int:\n        dp = [0]*len(nums)\n        dp[0] = nums[0]\n\n        queue = deque([0])\n\n        for i in range(1, len(nums)):\n            while queue and queue[0] < i-k:\n                queue.popleft()\n\n            dp[i] = dp[queue[0]] + nums[i]\n            while queue and dp[i] > dp[queue[-1]]:\n                queue.pop()\n\n            queue.append(i)\n\n        return dp[-1]\n")))}m.isMDXComponent=!0}}]);