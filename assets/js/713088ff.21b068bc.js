"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[38651],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return f}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),m=u(r),p=o,f=m["".concat(l,".").concat(p)]||m[p]||d[p]||a;return r?n.createElement(f,i(i({ref:t},s),{},{components:r})):n.createElement(f,i({ref:t},s))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=p;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[m]="string"==typeof e?e:o,i[1]=c;for(var u=2;u<a;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},17374:function(e,t,r){r.r(t),r.d(t,{assets:function(){return l},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return a},metadata:function(){return c},toc:function(){return u}});var n=r(83117),o=(r(67294),r(3905));const a={title:"318. Maximum Product of Word Lengths",sidebar_label:"318. Maximum Product of Word Lengths",tags:["Leetcode Medium","String","Bit Manipulation"]},i=void 0,c={unversionedId:"leetcode/1-500/maximum_product_of_word_lengths",id:"leetcode/1-500/maximum_product_of_word_lengths",title:"318. Maximum Product of Word Lengths",description:"https://leetcode.com/problems/maximum-product-of-word-lengths/",source:"@site/docs/leetcode/1-500/318_maximum_product_of_word_lengths.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/maximum_product_of_word_lengths",permalink:"/docs/leetcode/1-500/maximum_product_of_word_lengths",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/318_maximum_product_of_word_lengths.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"String",permalink:"/docs/tags/string"},{label:"Bit Manipulation",permalink:"/docs/tags/bit-manipulation"}],version:"current",sidebarPosition:318,frontMatter:{title:"318. Maximum Product of Word Lengths",sidebar_label:"318. Maximum Product of Word Lengths",tags:["Leetcode Medium","String","Bit Manipulation"]},sidebar:"docSidebar",previous:{title:"315. Count of Smaller Numbers After Self",permalink:"/docs/leetcode/1-500/count_of_smaller_numbers_after_self"},next:{title:"319. Bulb Switcher",permalink:"/docs/leetcode/1-500/bulb_switcher"}},l={},u=[{value:"Python",id:"python",level:2},{value:"Use Hashmap",id:"use-hashmap",level:3},{value:"Javascript",id:"javascript",level:2}],s={toc:u};function m(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/maximum-product-of-word-lengths/"},"https://leetcode.com/problems/maximum-product-of-word-lengths/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"use-hashmap"},"Use Hashmap"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Time: O(N^2)"),(0,o.kt)("li",{parentName:"ul"},"Space: O(N)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def maxProduct(self, words: List[str]) -> int:\n        mapper = [set(word) for word in words]\n\n        ans = 0\n\n        for i in range(len(words)):\n            for j in range(i+1, len(words)):\n                if not mapper[i] & mapper[j]:\n                    ans = max(ans, len(words[i])*len(words[j]))\n        return ans\n")),(0,o.kt)("h2",{id:"javascript"},"Javascript"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"var maxProduct = function(words) {\n  const intArray = words.map(word => toInt(word));\n  let max = 0;\n\n  for (let i = 0; i < intArray.length - 1; i++) {\n    for (let j = i + 1; j < intArray.length; j++) {\n      if ((intArray[i] & intArray[j]) === 0) {\n        max = Math.max(max, words[i].length * words[j].length);\n      }\n    }\n  }\n\n  return max;\n};\n\nconst toInt = (word) => {\n  let num = 0;\n  const base = ('a').charCodeAt(0);\n\n  for (const char of word) {\n    num |= 1 << char.charCodeAt(0) - base;\n  }\n  return num;\n}\n")))}m.isMDXComponent=!0}}]);