"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[3951],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return s}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=c(n),s=a,f=m["".concat(p,".").concat(s)]||m[s]||d[s]||l;return n?r.createElement(f,o(o({ref:t},u),{},{components:n})):r.createElement(f,o({ref:t},u))}));function s(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var c=2;c<l;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85675:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return u},default:function(){return m}});var r=n(87462),a=n(63366),l=(n(67294),n(3905)),o=["components"],i={title:"Heap"},p=void 0,c={unversionedId:"leetcode_note/heap",id:"leetcode_note/heap",title:"Heap",description:"Definition",source:"@site/docs/leetcode_note/heap.md",sourceDirName:"leetcode_note",slug:"/leetcode_note/heap",permalink:"/docs/leetcode_note/heap",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode_note/heap.md",tags:[],version:"current",frontMatter:{title:"Heap"},sidebar:"docSidebar",previous:{title:"Binary Tree",permalink:"/docs/leetcode_note/binary_search"},next:{title:"Linked List",permalink:"/docs/leetcode_note/linked_list"}},u=[{value:"Definition",id:"definition",children:[{value:"Max Heap",id:"max-heap",children:[],level:3},{value:"Min Heap",id:"min-heap",children:[],level:3}],level:2},{value:"Complexity of operations",id:"complexity-of-operations",children:[],level:2}],d={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,l.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"definition"},"Definition"),(0,l.kt)("p",null,"\u4e2d\u6587\u7a31\u70ba",(0,l.kt)("inlineCode",{parentName:"p"},"\u5806\u7a4d"),"\uff0c\u5206\u70ba\u6700\u5927\u5806\u7a4d(Max Heap)\u8ddf\u6700\u5c0f\u5806\u7a4d(Min Heap)"),(0,l.kt)("h3",{id:"max-heap"},"Max Heap"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Is a complete binary tree"),(0,l.kt)("li",{parentName:"ul"},"All children are equal smaller then current node")),(0,l.kt)("p",null,"Root Node\u6703\u662f\u6700\u5927\u503c"),(0,l.kt)("h3",{id:"min-heap"},"Min Heap"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Is a complete binary tree"),(0,l.kt)("li",{parentName:"ul"},"All children are equal or larger then current node")),(0,l.kt)("p",null,"Root Node\u6703\u662f\u6700\u5c0f\u503c"),(0,l.kt)("h2",{id:"complexity-of-operations"},"Complexity of operations"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Operation"),(0,l.kt)("th",{parentName:"tr",align:null},"Time"),(0,l.kt)("th",{parentName:"tr",align:null},"Space"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Construct"),(0,l.kt)("td",{parentName:"tr",align:null},"O(N)"),(0,l.kt)("td",{parentName:"tr",align:null},"O(N)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Insert a Node"),(0,l.kt)("td",{parentName:"tr",align:null},"O(logN)"),(0,l.kt)("td",{parentName:"tr",align:null},"O(1)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Delete a Node"),(0,l.kt)("td",{parentName:"tr",align:null},"O(logN)"),(0,l.kt)("td",{parentName:"tr",align:null},"O(1)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Get the Max/Min"),(0,l.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,l.kt)("td",{parentName:"tr",align:null},"O(1)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Get size"),(0,l.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,l.kt)("td",{parentName:"tr",align:null},"O(1)")))))}m.isMDXComponent=!0}}]);