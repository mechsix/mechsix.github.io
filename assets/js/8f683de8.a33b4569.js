"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[1406],{3905:function(e,t,r){r.d(t,{Zo:function(){return m},kt:function(){return d}});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var u=n.createContext({}),a=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},m=function(e){var t=a(e.components);return n.createElement(u.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,u=e.parentName,m=c(e,["components","mdxType","originalType","parentName"]),p=a(r),d=i,f=p["".concat(u,".").concat(d)]||p[d]||s[d]||o;return r?n.createElement(f,l(l({ref:t},m),{},{components:r})):n.createElement(f,l({ref:t},m))}));function d(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,l=new Array(o);l[0]=p;var c={};for(var u in t)hasOwnProperty.call(t,u)&&(c[u]=t[u]);c.originalType=e,c.mdxType="string"==typeof e?e:i,l[1]=c;for(var a=2;a<o;a++)l[a]=r[a];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},88617:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return c},contentTitle:function(){return u},metadata:function(){return a},toc:function(){return m},default:function(){return p}});var n=r(87462),i=r(63366),o=(r(67294),r(3905)),l=["components"],c={title:"923. 3Sum With Multiplicity",sidebar_label:"923. 3Sum With Multiplicity",tags:["Leetcode Medium","Two Pointer","Number Sum"]},u=void 0,a={unversionedId:"leetcode/501-1000/923_3sum_with_multiplicity",id:"leetcode/501-1000/923_3sum_with_multiplicity",title:"923. 3Sum With Multiplicity",description:"https://leetcode.com/problems/3sum-with-multiplicity/",source:"@site/docs/leetcode/501-1000/923_3sum_with_multiplicity.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/923_3sum_with_multiplicity",permalink:"/docs/leetcode/501-1000/923_3sum_with_multiplicity",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/923_3sum_with_multiplicity.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Two Pointer",permalink:"/docs/tags/two-pointer"},{label:"Number Sum",permalink:"/docs/tags/number-sum"}],version:"current",frontMatter:{title:"923. 3Sum With Multiplicity",sidebar_label:"923. 3Sum With Multiplicity",tags:["Leetcode Medium","Two Pointer","Number Sum"]},sidebar:"docSidebar",previous:{title:"538. Convert BST to Greater Tree",permalink:"/docs/leetcode/501-1000/538_1038_convert_bst_greater_tree"},next:{title:"1004. Max Consecutive Ones III",permalink:"/docs/leetcode/1001-1500/max_consecutive_ones_iii"}},m=[{value:"Python",id:"python",children:[{value:"Three Pointer",id:"three-pointer",children:[],level:3}],level:2}],s={toc:m};function p(e){var t=e.components,r=(0,i.Z)(e,l);return(0,o.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/3sum-with-multiplicity/"},"https://leetcode.com/problems/3sum-with-multiplicity/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"three-pointer"},"Three Pointer"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def threeSumMulti(self, arr: List[int], target: int) -> int:\n        MOD = 10**9 + 7\n        arr.sort()\n        counter = 0\n\n        for l in range(len(arr)-2):\n            remains = target - arr[l]\n            m = l + 1\n            r = len(arr) - 1\n\n            while m < r:\n                if arr[m] + arr[r] < remains:\n                    m += 1\n                elif arr[m] + arr[r] > remains:\n                    r -= 1\n                else:\n                    if arr[m] != arr[r]:\n                        # Move over all of the same numbers from m\n                        left_count = 1\n                        while m + 1 < r and arr[m] == arr[m+1]:\n                            left_count += 1\n                            m += 1\n\n                        # Move over all of the same number from r\n                        right_count = 1\n                        while r - 1 > m and arr[r] == arr[r-1]:\n                            right_count += 1\n                            r -= 1\n\n                        # Possible numbers btw m and r are left_count * right_count\n                        counter += left_count * right_count\n                        counter %= MOD\n                        m += 1\n                        r -= 1\n                    else:\n                        # All number btw m and r are the same\n                        counter += (r-m+1) * (r-m) // 2\n                        counter %= MOD\n                        break\n\n        return counter\n")))}p.isMDXComponent=!0}}]);