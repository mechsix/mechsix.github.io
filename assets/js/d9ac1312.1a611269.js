"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[4298],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return f}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=l(n),f=o,m=p["".concat(u,".").concat(f)]||p[f]||s[f]||i;return n?r.createElement(m,a(a({ref:t},d),{},{components:n})):r.createElement(m,a({ref:t},d))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=p;var c={};for(var u in t)hasOwnProperty.call(t,u)&&(c[u]=t[u]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var l=2;l<i;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},53727:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return u},metadata:function(){return l},toc:function(){return d},default:function(){return p}});var r=n(87462),o=n(63366),i=(n(67294),n(3905)),a=["components"],c={title:"997. Find the Town Judge",sidebar_label:"997. Find the Town Judge",tags:["Leetcode Easy","Prefix Sum","Graph"]},u=void 0,l={unversionedId:"leetcode/501-1000/find_the_town_judge",id:"leetcode/501-1000/find_the_town_judge",title:"997. Find the Town Judge",description:"https://leetcode.com/problems/find-the-town-judge/",source:"@site/docs/leetcode/501-1000/997_find_the_town_judge.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/find_the_town_judge",permalink:"/docs/leetcode/501-1000/find_the_town_judge",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/997_find_the_town_judge.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Prefix Sum",permalink:"/docs/tags/prefix-sum"},{label:"Graph",permalink:"/docs/tags/graph"}],version:"current",sidebarPosition:997,frontMatter:{title:"997. Find the Town Judge",sidebar_label:"997. Find the Town Judge",tags:["Leetcode Easy","Prefix Sum","Graph"]},sidebar:"docSidebar",previous:{title:"986. Interval List Intersections",permalink:"/docs/leetcode/501-1000/interval_list_intersections"},next:{title:"538. Convert BST to Greater Tree",permalink:"/docs/leetcode/501-1000/538_1038_convert_bst_greater_tree"}},d=[{value:"Python",id:"python",children:[{value:"Prefix Sum (Two Arrays)",id:"prefix-sum-two-arrays",children:[],level:3}],level:2}],s={toc:d};function p(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/find-the-town-judge/"},"https://leetcode.com/problems/find-the-town-judge/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"prefix-sum-two-arrays"},"Prefix Sum (Two Arrays)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Use two arrays to store indegree and outdegree edges")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def findJudge(self, n: int, trust: List[List[int]]) -> int:\n        indegree = [0] * (n+1)\n        outdegree = [0] * (n+1)\n\n        for person, trusted in trust:\n            outdegree[person] += 1\n            indegree[trusted] += 1\n\n        for i in range(1, n+1):\n            if indegree[i] == n-1 and outdegree[i] == 0:\n                return i\n        return -1\n")))}p.isMDXComponent=!0}}]);