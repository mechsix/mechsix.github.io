"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[49029],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(n),d=o,f=p["".concat(c,".").concat(d)]||p[d]||m[d]||i;return n?r.createElement(f,a(a({ref:t},u),{},{components:n})):r.createElement(f,a({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:o,a[1]=l;for(var s=2;s<i;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},73181:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(87462),o=(n(67294),n(3905));const i={title:"46. Permutations",sidebar_label:"46. Permutations",tags:["Leetcode Medium","Backtracking"]},a=void 0,l={unversionedId:"leetcode/1-500/permutations",id:"leetcode/1-500/permutations",title:"46. Permutations",description:"https://leetcode.com/problems/permutations/",source:"@site/docs/leetcode/1-500/46_permutations.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/permutations",permalink:"/docs/leetcode/1-500/permutations",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/46_permutations.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Backtracking",permalink:"/docs/tags/backtracking"}],version:"current",sidebarPosition:46,frontMatter:{title:"46. Permutations",sidebar_label:"46. Permutations",tags:["Leetcode Medium","Backtracking"]},sidebar:"docSidebar",previous:{title:"45. Jump Game II",permalink:"/docs/leetcode/1-500/jump_game_ii"},next:{title:"47. Permutations II",permalink:"/docs/leetcode/1-500/permutations_ii"}},c={},s=[{value:"Python",id:"python",level:2},{value:"Built-in itertools.permutations",id:"built-in-itertoolspermutations",level:3},{value:"Backtracking",id:"backtracking",level:3}],u={toc:s},p="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/permutations/"},"https://leetcode.com/problems/permutations/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"built-in-itertoolspermutations"},"Built-in itertools.permutations"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u7528Python\u4f5c\u5f0a..."),(0,o.kt)("li",{parentName:"ul"},"itertools.permutations\u53ef\u4ee5\u5e36\u7b2c\u4e8c\u500b\u53c3\u6578",(0,o.kt)("inlineCode",{parentName:"li"},"r"),"\uff0c\u6c7a\u5b9a\u8981\u53d6\u7684\u6392\u5217\u9577\u5ea6")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from itertools import permutations\n\n\nclass Solution:\n    def permute(self, nums: List[int]) -> List[List[int]]:\n        return [perm for perm in permutations(nums)]\n")),(0,o.kt)("h3",{id:"backtracking"},"Backtracking"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u56de\u6714\u6cd5\u7aae\u8209")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def permute(self, nums: List[int]) -> List[List[int]]:\n        result = []\n        used = [False] * len(nums)\n\n        def backtrack(path):\n            # Reach leaf, accept the path into result and end the recursive\n            if len(path) == len(nums):\n                result.append(path[:])  # Copy the List to prevent Copy-by-reference\n                return\n\n            # For each options\n            for i in range(len(nums)):\n                # Ignore the invalid option (used in path)\n                if used[i]:\n                    continue\n\n                # Make the choice\n                path.append(nums[i])\n                used[i] = True\n\n                # Go to next level\n                backtrack(path)\n\n                # Rollback the choicen\n                path.pop()\n                used[i] = False\n\n        backtrack([])\n\n        return result\n")))}m.isMDXComponent=!0}}]);