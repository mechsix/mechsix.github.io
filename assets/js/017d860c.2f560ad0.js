"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[41482],{3905:(e,t,o)=>{o.d(t,{Zo:()=>p,kt:()=>_});var n=o(67294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function i(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function c(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?i(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)o=i[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)o=i[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var a=n.createContext({}),l=function(e){var t=n.useContext(a),o=t;return e&&(o="function"==typeof e?e(t):c(c({},t),e)),o},p=function(e){var t=l(e.components);return n.createElement(a.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(o),d=r,_=u["".concat(a,".").concat(d)]||u[d]||m[d]||i;return o?n.createElement(_,c(c({ref:t},p),{},{components:o})):n.createElement(_,c({ref:t},p))}));function _(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=o.length,c=new Array(i);c[0]=d;var s={};for(var a in t)hasOwnProperty.call(t,a)&&(s[a]=t[a]);s.originalType=e,s[u]="string"==typeof e?e:r,c[1]=s;for(var l=2;l<i;l++)c[l]=o[l];return n.createElement.apply(null,c)}return n.createElement.apply(null,o)}d.displayName="MDXCreateElement"},29262:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var n=o(87462),r=(o(67294),o(3905));const i={title:"1217. Minimum Cost to Move Chips to The Same Position",sidebar_label:"1217. Min Cost Move to Same Pos",tags:["Leetcode Easy"]},c=void 0,s={unversionedId:"leetcode/1001-1500/min_cost_move_chips_to_same_pos",id:"leetcode/1001-1500/min_cost_move_chips_to_same_pos",title:"1217. Minimum Cost to Move Chips to The Same Position",description:"Python",source:"@site/docs/leetcode/1001-1500/1217_min_cost_move_chips_to_same_pos.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/min_cost_move_chips_to_same_pos",permalink:"/docs/leetcode/1001-1500/min_cost_move_chips_to_same_pos",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1217_min_cost_move_chips_to_same_pos.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"}],version:"current",sidebarPosition:1217,frontMatter:{title:"1217. Minimum Cost to Move Chips to The Same Position",sidebar_label:"1217. Min Cost Move to Same Pos",tags:["Leetcode Easy"]},sidebar:"docSidebar",previous:{title:"1209. Remove All Adjacent Duplicates in String II",permalink:"/docs/leetcode/1001-1500/remove_all_adjacent_duplicates_in_string_ii"},next:{title:"1218. Longest Arithmetic Subsequence of Given Difference",permalink:"/docs/leetcode/1001-1500/longest_arithmetic_subsequence_of_given_difference"}},a={},l=[{value:"Python",id:"python",level:2}],p={toc:l},u="wrapper";function m(e){let{components:t,...o}=e;return(0,r.kt)(u,(0,n.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"python"},"Python"),(0,r.kt)("p",null,"\u984c\u76ee\u96e3\u61c2\u800c\u5df2\uff0c\u79fb\u52d52\u6b65cost\u70ba\u96f6\uff0c\u554f\u7684\u53ea\u662f\u5947\u6578\u591a\u9084\u662f\u5076\u6578\u591a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def minCostToMoveChips(self, position: List[int]) -> int:\n        if not position:\n            return 0\n\n        odd_count = len([i for i in position if i % 2 == 1])\n        even_count = len([i for i in position if i % 2 == 0])\n\n        if odd_count > even_count:\n            return even_count\n        return odd_count\n\n")))}m.isMDXComponent=!0}}]);