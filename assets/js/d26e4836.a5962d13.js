"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[9793],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return f}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=l(n),f=a,m=u["".concat(p,".").concat(f)]||u[f]||s[f]||o;return n?r.createElement(m,c(c({ref:t},d),{},{components:n})):r.createElement(m,c({ref:t},d))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var l=2;l<o;l++)c[l]=n[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},94322:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return p},default:function(){return u},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return d}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),c=["components"],i={title:"890. Find and Replace Pattern",sidebar_label:"890. Find and Replace Pattern",tags:["Leetcode Medium","Hash"]},p=void 0,l={unversionedId:"leetcode/501-1000/find_and_replace_pattern",id:"leetcode/501-1000/find_and_replace_pattern",title:"890. Find and Replace Pattern",description:"https://leetcode.com/problems/findandreplace_pattern/",source:"@site/docs/leetcode/501-1000/890_find_and_replace_pattern.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/find_and_replace_pattern",permalink:"/docs/leetcode/501-1000/find_and_replace_pattern",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/890_find_and_replace_pattern.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Hash",permalink:"/docs/tags/hash"}],version:"current",sidebarPosition:890,frontMatter:{title:"890. Find and Replace Pattern",sidebar_label:"890. Find and Replace Pattern",tags:["Leetcode Medium","Hash"]},sidebar:"docSidebar",previous:{title:"878. Nth Magical Number",permalink:"/docs/leetcode/501-1000/nth_magical_num"},next:{title:"897. Increasing Order Search Tree",permalink:"/docs/leetcode/501-1000/increasing_order_bst"}},d=[{value:"Python",id:"python",children:[],level:2}],s={toc:d};function u(e){var t=e.components,n=(0,a.Z)(e,c);return(0,o.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/find_and_replace_pattern/"},"https://leetcode.com/problems/find_and_replace_pattern/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def findAndReplacePattern(self, words: List[str], pattern: str) -> List[str]:\n        result = []\n        \n        for word in words:\n            if len(word) != len(pattern):\n                continue\n            \n            mapper, mapped = dict(), set()\n            for i in range(len(pattern)):\n                p, c = pattern[i], word[i]\n                if p not in mapper:\n                    if c in mapped:\n                        break\n\n                    mapper[p] = c\n                    mapped.add(c)\n                else:\n                    if mapper[p] != c:\n                        break\n            else:\n                result.append(word)\n        \n        return result\n")))}u.isMDXComponent=!0}}]);