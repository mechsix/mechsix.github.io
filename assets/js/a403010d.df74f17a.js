"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[41348],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return h}});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),m=i,h=p["".concat(l,".").concat(m)]||p[m]||d[m]||a;return t?r.createElement(h,o(o({ref:n},u),{},{components:t})):r.createElement(h,o({ref:n},u))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},16820:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return o},default:function(){return p},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return c}});var r=t(83117),i=(t(67294),t(3905));const a={title:"35. Search Insert Position",sidebar_label:"35. Search Insert Position",tags:["Leetcode Easy","Binary Search","Go","Rust"]},o=void 0,s={unversionedId:"leetcode/1-500/search_insert_pos",id:"leetcode/1-500/search_insert_pos",title:"35. Search Insert Position",description:"https://leetcode.com/problems/search-insert-position",source:"@site/docs/leetcode/1-500/35_search_insert_pos.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/search_insert_pos",permalink:"/docs/leetcode/1-500/search_insert_pos",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/35_search_insert_pos.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Binary Search",permalink:"/docs/tags/binary-search"},{label:"Go",permalink:"/docs/tags/go"},{label:"Rust",permalink:"/docs/tags/rust"}],version:"current",sidebarPosition:35,frontMatter:{title:"35. Search Insert Position",sidebar_label:"35. Search Insert Position",tags:["Leetcode Easy","Binary Search","Go","Rust"]},sidebar:"docSidebar",previous:{title:"34. Find First and Last Position of Element in Sorted Array",permalink:"/docs/leetcode/1-500/find_first_and_last_pos_of_element_in_sorted_array"},next:{title:"36. Valid Sudoku",permalink:"/docs/leetcode/1-500/valid_sudoku"}},l={},c=[{value:"Python",id:"python",level:2},{value:"Force Busted",id:"force-busted",level:2},{value:"Binary Search",id:"binary-search",level:2},{value:"Go",id:"go",level:2},{value:"Binary Search",id:"binary-search-1",level:3},{value:"Rust",id:"rust",level:2},{value:"Binary Search",id:"binary-search-2",level:3},{value:"Build-in Binary Search",id:"build-in-binary-search",level:3}],u={toc:c};function p(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/search-insert-position"},"https://leetcode.com/problems/search-insert-position")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h2",{id:"force-busted"},"Force Busted"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        insert_pos = 0\n\n        for index, num in enumerate(nums):\n            if target == num:\n                return index\n            if target > num:\n                insert_pos = index+1\n\n        return insert_pos\n")),(0,i.kt)("h2",{id:"binary-search"},"Binary Search"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        l, r = 0, len(nums)-1\n\n        while l <= r:\n            cur = (l+r) // 2\n            if target == nums[cur]:\n                return cur\n            elif target < nums[cur]:\n                r = cur - 1\n            else:\n                l = cur + 1\n        return l\n")),(0,i.kt)("h2",{id:"go"},"Go"),(0,i.kt)("h3",{id:"binary-search-1"},"Binary Search"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"func searchInsert(nums []int, target int) int {\n    l, r := 0, len(nums)-1\n\n    for l <= r {\n        pivot := (l+r) / 2\n        if (target == nums[pivot]) {\n            return pivot\n        } else if (target > nums[pivot]) {\n            l = pivot + 1\n        } else {\n            r = pivot - 1\n        }\n    }\n    return l\n}\n")),(0,i.kt)("h2",{id:"rust"},"Rust"),(0,i.kt)("h3",{id:"binary-search-2"},"Binary Search"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"impl Solution {\n    pub fn search_insert(nums: Vec<i32>, target: i32) -> i32 {\n        let mut l = 0;\n        let mut r = nums.len();\n\n        while l < r {\n            let pivot = (l+r) / 2;\n            let num = nums[pivot];\n            if target == num {\n                return pivot as i32;\n            } else if target > num {\n                l = pivot + 1;\n            } else {\n                r = pivot;\n            }\n        }\n\n        return l as i32;\n    }\n}\n")),(0,i.kt)("h3",{id:"build-in-binary-search"},"Build-in Binary Search"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"impl Solution {\n    pub fn search_insert(nums: Vec<i32>, target: i32) -> i32 {\n        nums.binary_search(&target).unwrap_or_else(|x| x) as i32\n    }\n}\n")))}p.isMDXComponent=!0}}]);