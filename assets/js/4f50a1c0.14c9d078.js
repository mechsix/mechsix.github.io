"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[5050],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return p}});var r=t(67294);function u(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){u(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,u=function(e,n){if(null==e)return{};var t,r,u={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(u[t]=e[t]);return u}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(u[t]=e[t])}return u}var a=r.createContext({}),l=function(e){var n=r.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(a.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,u=e.mdxType,o=e.originalType,a=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(t),p=u,f=d["".concat(a,".").concat(p)]||d[p]||m[p]||o;return t?r.createElement(f,i(i({ref:n},c),{},{components:t})):r.createElement(f,i({ref:n},c))}));function p(e,n){var t=arguments,u=n&&n.mdxType;if("string"==typeof e||u){var o=t.length,i=new Array(o);i[0]=d;var s={};for(var a in n)hasOwnProperty.call(n,a)&&(s[a]=n[a]);s.originalType=e,s.mdxType="string"==typeof e?e:u,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9695:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return a},default:function(){return d},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return c}});var r=t(87462),u=t(63366),o=(t(67294),t(3905)),i=["components"],s={title:"416. Partition Equal Subset Sum",sidebar_label:"416. Partition Equal Subset Sum",tags:["Leetcode Medium","DFS","DP"]},a=void 0,l={unversionedId:"leetcode/1-500/partition_equal_subset_sum",id:"leetcode/1-500/partition_equal_subset_sum",title:"416. Partition Equal Subset Sum",description:"https://leetcode.com/problems/partition-equal-subset-sum",source:"@site/docs/leetcode/1-500/416_partition_equal_subset_sum.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/partition_equal_subset_sum",permalink:"/docs/leetcode/1-500/partition_equal_subset_sum",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/416_partition_equal_subset_sum.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"DFS",permalink:"/docs/tags/dfs"},{label:"DP",permalink:"/docs/tags/dp"}],version:"current",sidebarPosition:416,frontMatter:{title:"416. Partition Equal Subset Sum",sidebar_label:"416. Partition Equal Subset Sum",tags:["Leetcode Medium","DFS","DP"]},sidebar:"docSidebar",previous:{title:"415. Add Strings",permalink:"/docs/leetcode/1-500/add_strings"},next:{title:"417. Pacific Atlantic Water Flow",permalink:"/docs/leetcode/1-500/pacific_atlantic_water_flow"}},c=[{value:"Python",id:"python",children:[{value:"DFS (Failed Try)",id:"dfs-failed-try",children:[],level:3},{value:"Top Down DP",id:"top-down-dp",children:[],level:3}],level:2},{value:"JS",id:"js",children:[],level:2}],m={toc:c};function d(e){var n=e.components,t=(0,u.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/partition-equal-subset-sum"},"https://leetcode.com/problems/partition-equal-subset-sum")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"dfs-failed-try"},"DFS (Failed Try)"),(0,o.kt)("p",null,"Fail try, did not really get the idea...\n(2021/12/12)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def canPartition(self, nums: List[int]) -> bool:\n        if not nums:\n            return False\n\n        total = sum(nums)\n        if total % 2:\n            return False\n\n        target = total / 2\n        sorted_nums = sorted(nums, reverse=True)\n\n        return self._dfs(sorted_nums, 0, target)\n\n    def _dfs(self, nums, index, target):\n        if target < nums[index]:\n            return False\n\n        target -= nums[index]\n        if target == 0 or self._dfs(nums, index+1, target):\n            return True\n        target += nums[index]\n")),(0,o.kt)("h3",{id:"top-down-dp"},"Top Down DP"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from functools import cache\n\n\nclass Solution:\n    def canPartition(self, nums: List[int]) -> bool:\n        nums.sort()\n\n        @cache\n        def dp(i: int, sum1: int, sum2: int):\n            if i == len(nums):\n                if sum1 == sum2:\n                    return True\n                return False\n\n            num = nums[i]\n\n            return dp(i+1, sum1, sum2+num) or dp(i+1, sum1+num, sum2)\n\n        return dp(0, 0, 0)\n")),(0,o.kt)("h2",{id:"js"},"JS"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"// top-down\nvar canPartition = function(nums) {\n   const sum = nums.reduce((acc, cur) => acc + cur, 0);\n   const subSum = Math.ceil(sum / 2);\n    if (subSum * 2 !== sum) return false;\n    \n   const memo = {};\n   const dfs = (i, curSum) => {\n       const key = `${i}${curSum}`;\n       // console.log(i, curSum)\n       if (curSum === 0) return true;\n       if (i === nums.length || curSum < 0) return false;\n       if (memo.hasOwnProperty(key)) return memo[key];\n       \n       memo[key] = dfs(i + 1, curSum - nums[i]) || dfs(i + 1, curSum);\n       return memo[key]\n   }\n   \n   return dfs(0, subSum);\n};\n\n// bottom-up\nvar canPartition = function(nums) {\n    const sum = nums.reduce((acc, cur) => acc + cur);\n    if (sum % 2 !== 0) return false;\n    \n    const total = sum / 2;\n    const dp = [...new Array(nums.length + 1)].map(() => [...new Array(total + 1)].fill(false));\n    \n    for (let i = 1; i <= nums.length; i++) {\n        for (let j = 0; j <= total; j++) {\n            if (j === 0) dp[i][j] = true;\n            else {\n                if (j - nums[i - 1] < 0) {\n                    dp[i][j] = dp[i - 1][j];\n                } else {\n                    dp[i][j] = dp[i - 1][j] || dp[i - 1][j - nums[i - 1]];\n                }\n            }\n        }        \n    }\n  \n    return dp[nums.length][total];\n};\n")))}d.isMDXComponent=!0}}]);