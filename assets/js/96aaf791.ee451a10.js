"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[22703],{34245:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>c,toc:()=>a});var n=r(74848),o=r(28453);const s={title:"606. Construct String from Binary Tree",sidebar_label:"606. Construct String from Binary Tree",tags:["Leetcode Easy","Binary Tree"]},i=void 0,c={id:"leetcode/501-1000/construct_string_from_binary_tree",title:"606. Construct String from Binary Tree",description:"https://leetcode.com/problems/construct-string-from-binary-tree/",source:"@site/docs/leetcode/501-1000/606_construct_string_from_binary_tree.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/construct_string_from_binary_tree",permalink:"/docs/leetcode/501-1000/construct_string_from_binary_tree",draft:!1,unlisted:!1,tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"}],version:"current",sidebarPosition:606,frontMatter:{title:"606. Construct String from Binary Tree",sidebar_label:"606. Construct String from Binary Tree",tags:["Leetcode Easy","Binary Tree"]},sidebar:"docSidebar",previous:{title:"605. Can Place Flowers",permalink:"/docs/leetcode/501-1000/place_flowers"},next:{title:"609. Find Duplicate File in System",permalink:"/docs/leetcode/501-1000/find_duplicate_file_in_system"}},l={},a=[{value:"Python",id:"python",level:2},{value:"Recursion",id:"recursion",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"https://leetcode.com/problems/construct-string-from-binary-tree/",children:"https://leetcode.com/problems/construct-string-from-binary-tree/"})}),"\n",(0,n.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,n.jsx)(t.h2,{id:"recursion",children:"Recursion"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"class Solution:\n    def tree2str(self, root: Optional[TreeNode]) -> str:\n\n        def preorder(node, result):\n            if not node:\n                return\n\n            result.append(str(node.val))\n\n            if node.left:\n                result.append('(')\n                preorder(node.left, result)\n                result.append(')')\n            else:\n                if node.right:\n                    result.append('()')\n            if node.right:\n                result.append('(')\n                preorder(node.right, result)\n                result.append(')')\n\n        result = []\n        preorder(root, result)\n        return ''.join(result)\n"})})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>c});var n=r(96540);const o={},s=n.createContext(o);function i(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);