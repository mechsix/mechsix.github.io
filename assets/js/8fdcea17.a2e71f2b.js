"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[8183],{3905:function(e,r,t){t.d(r,{Zo:function(){return s},kt:function(){return f}});var n=t(67294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function d(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=n.createContext({}),l=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},s=function(e){var r=l(e.components);return n.createElement(c.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},u=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),u=l(t),f=o,m=u["".concat(c,".").concat(f)]||u[f]||p[f]||a;return t?n.createElement(m,i(i({ref:r},s),{},{components:t})):n.createElement(m,i({ref:r},s))}));function f(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=u;var d={};for(var c in r)hasOwnProperty.call(r,c)&&(d[c]=r[c]);d.originalType=e,d.mdxType="string"==typeof e?e:o,i[1]=d;for(var l=2;l<a;l++)i[l]=t[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},36062:function(e,r,t){t.r(r),t.d(r,{contentTitle:function(){return c},default:function(){return u},frontMatter:function(){return d},metadata:function(){return l},toc:function(){return s}});var n=t(87462),o=t(63366),a=(t(67294),t(3905)),i=["components"],d={title:"126. Word Ladder II",sidebar_label:"126. Word Ladder II",tags:["Leetcode Hard","Backtracking"]},c=void 0,l={unversionedId:"leetcode/1-500/word_ladder_ii",id:"leetcode/1-500/word_ladder_ii",title:"126. Word Ladder II",description:"https://leetcode.com/problems/word-ladder-ii/",source:"@site/docs/leetcode/1-500/126_word_ladder_ii.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/word_ladder_ii",permalink:"/docs/leetcode/1-500/word_ladder_ii",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/126_word_ladder_ii.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"Backtracking",permalink:"/docs/tags/backtracking"}],version:"current",sidebarPosition:126,frontMatter:{title:"126. Word Ladder II",sidebar_label:"126. Word Ladder II",tags:["Leetcode Hard","Backtracking"]},sidebar:"docSidebar",previous:{title:"125. Valid Palindrome",permalink:"/docs/leetcode/1-500/valid_palindrome"},next:{title:"127. Word Ladder",permalink:"/docs/leetcode/1-500/word_ladder"}},s=[{value:"Python",id:"python",children:[{value:"Backtracking (Timelimit Exceed)",id:"backtracking-timelimit-exceed",children:[],level:3}],level:2}],p={toc:s};function u(e){var r=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/word-ladder-ii/"},"https://leetcode.com/problems/word-ladder-ii/")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("h3",{id:"backtracking-timelimit-exceed"},"Backtracking (Timelimit Exceed)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u984c\u76ee\u53ea\u60f3\u8981\u6c42shortest transformation sequences\uff0c\u4f46\u9019\u500bbacktrack\u6703\u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u8def\u5f91"),(0,a.kt)("li",{parentName:"ul"},"\u81ea\u5df1\u5beb\u7684\u7559\u500b\u7d00\u9304")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from collections import defaultdict\nfrom string import ascii_lowercase\n\n\nclass Solution:\n    def findLadders(self, beginWord: str, endWord: str, wordList: List[str]) -> List[List[str]]:\n        if endWord not in wordList:\n            return []\n\n        word_set = set(wordList)\n\n        mapper = defaultdict(set)\n        for word in word_set | set([beginWord]):\n            for i in range(len(word)):\n                for char in ascii_lowercase:\n                    new_word = word[:i] + char + word[i+1:]\n                    if char != word[i] and new_word in word_set:\n                        mapper[word].add(new_word)\n\n        def backtrack(path, result):\n            last = path[-1]\n\n            if last == endWord:\n                result.append(path[:])\n                return\n\n            for word in mapper[last]:\n                if word in path:\n                    continue\n                path.append(word)\n                backtrack(path, result)\n                path.pop()\n\n        candidates = []\n        backtrack([beginWord], candidates)\n\n        if not candidates:\n            return []\n\n        result = dict()\n        for cand in candidates:\n            if len(cand) not in result:\n                result[len(cand)] = []\n            result[len(cand)].append(cand)\n\n        return result[min(result.keys())]\n")))}u.isMDXComponent=!0}}]);