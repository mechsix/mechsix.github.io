"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[670],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=o,b=m["".concat(s,".").concat(d)]||m[d]||p[d]||i;return n?r.createElement(b,a(a({ref:t},u),{},{components:n})):r.createElement(b,a({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},24969:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return m}});var r=n(87462),o=n(63366),i=(n(67294),n(3905)),a=["components"],l={title:"452. Minimum Number of Arrows to Burst Balloons",sidebar_label:"452. Minimum Number of Arrows to Burst Balloons",tags:["Leetcode Medium","Sweep Line","Greeding"]},s=void 0,c={unversionedId:"leetcode/1-500/min_arrow_bust_balloons",id:"leetcode/1-500/min_arrow_bust_balloons",title:"452. Minimum Number of Arrows to Burst Balloons",description:"https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons",source:"@site/docs/leetcode/1-500/452_min_arrow_bust_balloons.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/min_arrow_bust_balloons",permalink:"/docs/leetcode/1-500/min_arrow_bust_balloons",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/452_min_arrow_bust_balloons.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Sweep Line",permalink:"/docs/tags/sweep-line"},{label:"Greeding",permalink:"/docs/tags/greeding"}],version:"current",sidebarPosition:452,frontMatter:{title:"452. Minimum Number of Arrows to Burst Balloons",sidebar_label:"452. Minimum Number of Arrows to Burst Balloons",tags:["Leetcode Medium","Sweep Line","Greeding"]},sidebar:"docSidebar",previous:{title:"451. Sort Characters By Frequency",permalink:"/docs/leetcode/1-500/sort_char_by_frequency"},next:{title:"461. Hamming Distance",permalink:"/docs/leetcode/1-500/hamming_distance"}},u=[{value:"Python",id:"python",children:[],level:2}],p={toc:u};function m(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons"},"https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def findMinArrowShots(self, points: List[List[int]]) -> int:\n        if not points:\n            return 0\n\n        points.sort(key=lambda point: point[0])\n\n        cur = points[-1][0]\n        points.pop()\n        counter = 1\n\n        while points:\n            if cur <= points[-1][1]:\n                points.pop()\n                continue\n\n            point = points.pop()\n            cur = point[0]\n            counter += 1\n\n        return counter\n")))}m.isMDXComponent=!0}}]);