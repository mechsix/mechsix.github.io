"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[2435],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var a=n.createContext({}),l=function(e){var t=n.useContext(a),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(a.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(r),m=o,f=p["".concat(a,".").concat(m)]||p[m]||d[m]||i;return r?n.createElement(f,s(s({ref:t},u),{},{components:r})):n.createElement(f,s({ref:t},u))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,s=new Array(i);s[0]=p;var c={};for(var a in t)hasOwnProperty.call(t,a)&&(c[a]=t[a]);c.originalType=e,c.mdxType="string"==typeof e?e:o,s[1]=c;for(var l=2;l<i;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},12502:function(e,t,r){r.r(t),r.d(t,{contentTitle:function(){return a},default:function(){return p},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return u}});var n=r(87462),o=r(63366),i=(r(67294),r(3905)),s=["components"],c={title:"804. Unique Morse Code Words",sidebar_label:"804. Unique Morse Code Words",tags:["Leetcode Easy","Hash"]},a=void 0,l={unversionedId:"leetcode/501-1000/unique_morse_code_words",id:"leetcode/501-1000/unique_morse_code_words",title:"804. Unique Morse Code Words",description:"https://leetcode.com/problems/unique-morse-code-words/",source:"@site/docs/leetcode/501-1000/804_unique_morse_code_words.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/unique_morse_code_words",permalink:"/docs/leetcode/501-1000/unique_morse_code_words",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/804_unique_morse_code_words.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Hash",permalink:"/docs/tags/hash"}],version:"current",sidebarPosition:804,frontMatter:{title:"804. Unique Morse Code Words",sidebar_label:"804. Unique Morse Code Words",tags:["Leetcode Easy","Hash"]},sidebar:"docSidebar",previous:{title:"763. Partition Labels",permalink:"/docs/leetcode/501-1000/all_paths_from_source_to_target"},next:{title:"820. Short Encoding of Words",permalink:"/docs/leetcode/501-1000/short_encoding_of_words"}},u=[{value:"Python",id:"python",children:[],level:2}],d={toc:u};function p(e){var t=e.components,r=(0,o.Z)(e,s);return(0,i.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/unique-morse-code-words/"},"https://leetcode.com/problems/unique-morse-code-words/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Mapped them and remove duplicate with ",(0,i.kt)("inlineCode",{parentName:"li"},"set"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from string import ascii_lowercase\n\n\nclass Solution:\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\n        mapper = {\n            letter: morse for letter, morse in zip(\n                ascii_lowercase,\n                [\n                    ".-","-...","-.-.","-..",".",\n                    "..-.","--.","....","..",".---",\n                    "-.-",".-..","--","-.","---",\n                    ".--.","--.-",".-.","...","-",\n                    "..-","...-",".--","-..-","-.--",\n                    "--.."\n                ]\n            )\n        }\n\n        morses = set([\'\'.join([mapper[letter] for letter in word]) for word in words])\n        return len(morses)\n')))}p.isMDXComponent=!0}}]);