"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[64096],{92421:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>d,frontMatter:()=>c,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"leetcode/1-500/subsets","title":"78. Subsets","description":"Python","source":"@site/docs/leetcode/1-500/78_subsets.md","sourceDirName":"leetcode/1-500","slug":"/leetcode/1-500/subsets","permalink":"/docs/leetcode/1-500/subsets","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Medium","permalink":"/docs/tags/leetcode-medium"}],"version":"current","sidebarPosition":78,"frontMatter":{"title":"78. Subsets","sidebar_label":"78. Subsets","tags":["Leetcode Medium"]},"sidebar":"docSidebar","previous":{"title":"77. Combinations","permalink":"/docs/leetcode/1-500/combinations"},"next":{"title":"79. Word Search","permalink":"/docs/leetcode/1-500/word_search"}}');var r=t(74848),i=t(28453);const c={title:"78. Subsets",sidebar_label:"78. Subsets",tags:["Leetcode Medium"]},a=void 0,o={},l=[{value:"Python",id:"python",level:2},{value:"Package Answer",id:"package-answer",level:3},{value:"Loop and attach",id:"loop-and-attach",level:3},{value:"Backtracking",id:"backtracking",level:3},{value:"Javascript",id:"javascript",level:2}];function u(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,r.jsx)(n.h3,{id:"package-answer",children:"Package Answer"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Quick answer with Python built-in combinations package"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from itertools import combinations\n\n\nclass Solution:\n    def subsets(self, nums: List[int]) -> List[List[int]]:\n        result = []\n        for length in range(len(nums)+1):\n            for comb in combinations(nums, length):\n                result.append(comb)\n        return result\n"})}),"\n",(0,r.jsx)(n.h3,{id:"loop-and-attach",children:"Loop and attach"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def subsets(self, nums: List[int]) -> List[List[int]]:\n        result = [[]]\n        for num in nums:\n            result += [item+[num] for item in result]\n        return result\n"})}),"\n",(0,r.jsx)(n.h3,{id:"backtracking",children:"Backtracking"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(TODO)"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"javascript",children:"Javascript"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:" var subsets = function(nums) {\n   var result = [[]];\n   var backtrack = function(start, max, record) {\n     if (record.length === max) {\n       result.push(record.slice());\n       return;\n     }\n\n     for (let i = start; i < nums.length; i++) {\n       record.push(nums[i])\n       backtrack(i + 1, max, record);\n       record.pop();\n     }\n   }\n\n   for (let k = 1; k <= nums.length; k++) {\n     backtrack(0, k, [])\n   }\n   return result;\n};\n"})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>a});var s=t(96540);const r={},i=s.createContext(r);function c(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);