"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[42069],{3905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>y});var o=t(67294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function d(e,r){if(null==e)return{};var t,o,n=function(e,r){if(null==e)return{};var t,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var s=o.createContext({}),l=function(e){var r=o.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},c=function(e){var r=l(e.components);return o.createElement(s.Provider,{value:r},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},m=o.forwardRef((function(e,r){var t=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),p=l(t),m=n,y=p["".concat(s,".").concat(m)]||p[m]||u[m]||a;return t?o.createElement(y,i(i({ref:r},c),{},{components:t})):o.createElement(y,i({ref:r},c))}));function y(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var a=t.length,i=new Array(a);i[0]=m;var d={};for(var s in r)hasOwnProperty.call(r,s)&&(d[s]=r[s]);d.originalType=e,d[p]="string"==typeof e?e:n,i[1]=d;for(var l=2;l<a;l++)i[l]=t[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},92012:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>d,toc:()=>l});var o=t(87462),n=(t(67294),t(3905));const a={title:"106. Construct Binary Tree from Inorder and Postorder Traversal",sidebar_label:"106. Construct Binary Tree from Inorder and Postorder Traversal",tags:["Binary Tree","Leetcode Medium"]},i=void 0,d={unversionedId:"leetcode/1-500/construct_bin_tree_from_inorder_postorder_traversal",id:"leetcode/1-500/construct_bin_tree_from_inorder_postorder_traversal",title:"106. Construct Binary Tree from Inorder and Postorder Traversal",description:"https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal",source:"@site/docs/leetcode/1-500/106_construct_bin_tree_from_inorder_postorder_traversal.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/construct_bin_tree_from_inorder_postorder_traversal",permalink:"/docs/leetcode/1-500/construct_bin_tree_from_inorder_postorder_traversal",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/106_construct_bin_tree_from_inorder_postorder_traversal.md",tags:[{label:"Binary Tree",permalink:"/docs/tags/binary-tree"},{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"}],version:"current",sidebarPosition:106,frontMatter:{title:"106. Construct Binary Tree from Inorder and Postorder Traversal",sidebar_label:"106. Construct Binary Tree from Inorder and Postorder Traversal",tags:["Binary Tree","Leetcode Medium"]},sidebar:"docSidebar",previous:{title:"105. Construct Binary Tree from Preorder and Inorder Traversal",permalink:"/docs/leetcode/1-500/binary_tree_preorder_inorder"},next:{title:"108. Convert Sorted Array to Binary Search Tree",permalink:"/docs/leetcode/1-500/convert_sorted_array_to_bst"}},s={},l=[{value:"Python",id:"python",level:2},{value:"Study only try",id:"study-only-try",level:3},{value:"Second try",id:"second-try",level:3}],c={toc:l},p="wrapper";function u(e){let{components:r,...t}=e;return(0,n.kt)(p,(0,o.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal"},"https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal")),(0,n.kt)("h2",{id:"python"},"Python"),(0,n.kt)("h3",{id:"study-only-try"},"Study only try"),(0,n.kt)("p",null,"Not self solution, the answer from ",(0,n.kt)("a",{parentName:"p",href:"https://www.itread01.com/content/1544514664.html"},"here")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'class Solution:\n    def buildTree(self, inorder, postorder):\n        """\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        """\n        if not inorder or not postorder:\n            return None\n        root = postorder[-1]\n        index = inorder.index(root)\n        ret = TreeNode(postorder.pop())\n        ret.right = self.buildTree(inorder[index+1:], postorder)\n        ret.left = self.buildTree(inorder[:index], postorder)\n        return ret\n')),(0,n.kt)("h3",{id:"second-try"},"Second try"),(0,n.kt)("p",null,"Solution which more Pythonic"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def buildTree(self, inorder: List[int], postorder: List[int]) -> Optional[TreeNode]:\n        if not inorder or not postorder:\n            return None\n\n        root_val = postorder[-1]\n        root_index = inorder.index(root_val)\n\n        return TreeNode(\n            val=root_val,\n            left=self.buildTree(\n                inorder[:root_index],\n                postorder[:root_index]\n            ),\n            right=self.buildTree(\n                inorder[root_index+1:],\n                postorder[root_index:-1]\n            )\n        )\n")))}u.isMDXComponent=!0}}]);