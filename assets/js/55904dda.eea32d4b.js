"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[43487],{88227:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>m,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var s=a(74848),t=a(28453);const r={title:"1695. Maximum Erasure Value",sidebar_label:"1695. Maximum Erasure Value",tags:["Leetcode Medium","Hash","Two Pointer"]},i=void 0,o={id:"leetcode/1501-2000/max_erasure_value",title:"1695. Maximum Erasure Value",description:"https://leetcode.com/problems/maximum-erasure-value/",source:"@site/docs/leetcode/1501-2000/1695_max_erasure_value.md",sourceDirName:"leetcode/1501-2000",slug:"/leetcode/1501-2000/max_erasure_value",permalink:"/docs/leetcode/1501-2000/max_erasure_value",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Hash",permalink:"/docs/tags/hash"},{label:"Two Pointer",permalink:"/docs/tags/two-pointer"}],version:"current",sidebarPosition:1695,frontMatter:{title:"1695. Maximum Erasure Value",sidebar_label:"1695. Maximum Erasure Value",tags:["Leetcode Medium","Hash","Two Pointer"]},sidebar:"docSidebar",previous:{title:"1689. Partitioning Into Minimum Number Of Deci-Binary Numbers",permalink:"/docs/leetcode/1501-2000/partitioning_into_min_num_of_deci_binary_nums"},next:{title:"1696. Jump Game VI",permalink:"/docs/leetcode/1501-2000/jump_game_vi"}},m={},l=[{value:"Python",id:"python",level:2},{value:"Two Pointers with Hashmap",id:"two-pointers-with-hashmap",level:3},{value:"Javascript",id:"javascript",level:2}];function u(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/maximum-erasure-value/",children:"https://leetcode.com/problems/maximum-erasure-value/"})}),"\n",(0,s.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,s.jsx)(n.h3,{id:"two-pointers-with-hashmap",children:"Two Pointers with Hashmap"}),"\n",(0,s.jsx)(n.p,{children:"(Catepillar Two Pointer, Same Direction Two Pointer)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Time: O()"}),"\n",(0,s.jsx)(n.li,{children:"Space: O()"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def maximumUniqueSubarray(self, nums: List[int]) -> int:\n        seen = set()\n        score, max_score = 0, 0\n        start = 0\n\n        for end in range(len(nums)):\n            while nums[end] in seen:\n                seen.remove(nums[start])\n                score -= nums[start]\n                start += 1\n\n            score += nums[end]\n            seen.add(nums[end])\n\n            max_score = max(max_score, score)\n\n        return max_score\n"})}),"\n",(0,s.jsx)(n.h2,{id:"javascript",children:"Javascript"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"var maximumUniqueSubarray = function(nums) {\n    let slow = 0;\n    let fast = 0;\n    const hashmap = new Map();\n    let max = -1;\n    let sum = 0;\n    \n    while (fast < nums.length) {\n        sum += nums[fast];\n        \n        if (hashmap.has(nums[fast])) {\n            max = Math.max(max, sum - nums[fast]);\n            \n            while (slow <= hashmap.get(nums[fast])) {\n                sum -= nums[slow];\n                slow++;\n            }\n            hashmap.delete(nums[fast]);\n        }\n        \n        hashmap.set(nums[fast], fast);\n        fast++;\n    }\n    \n    max = Math.max(max, sum);\n    return max;\n};\n"})})]})}function c(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},28453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>o});var s=a(96540);const t={},r=s.createContext(t);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);