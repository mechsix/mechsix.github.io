"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[2972],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return d}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},s=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),s=l(r),d=o,f=s["".concat(c,".").concat(d)]||s[d]||m[d]||a;return r?n.createElement(f,i(i({ref:t},p),{},{components:r})):n.createElement(f,i({ref:t},p))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=s;var u={};for(var c in t)hasOwnProperty.call(t,c)&&(u[c]=t[c]);u.originalType=e,u.mdxType="string"==typeof e?e:o,i[1]=u;for(var l=2;l<a;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}s.displayName="MDXCreateElement"},18963:function(e,t,r){r.r(t),r.d(t,{contentTitle:function(){return c},default:function(){return s},frontMatter:function(){return u},metadata:function(){return l},toc:function(){return p}});var n=r(87462),o=r(63366),a=(r(67294),r(3905)),i=["components"],u={title:"718. Maximum Length of Repeated Subarray",sidebar_label:"718. Maximum Length of Repeated Subarray",tags:["DP"]},c=void 0,l={unversionedId:"leetcode/501-1000/max_length_of_repeated_subarray",id:"leetcode/501-1000/max_length_of_repeated_subarray",title:"718. Maximum Length of Repeated Subarray",description:"https://leetcode.com/problems/maximum-length-of-repeated-subarray/",source:"@site/docs/leetcode/501-1000/718_max_length_of_repeated_subarray.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/max_length_of_repeated_subarray",permalink:"/docs/leetcode/501-1000/max_length_of_repeated_subarray",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/718_max_length_of_repeated_subarray.md",tags:[{label:"DP",permalink:"/docs/tags/dp"}],version:"current",sidebarPosition:718,frontMatter:{title:"718. Maximum Length of Repeated Subarray",sidebar_label:"718. Maximum Length of Repeated Subarray",tags:["DP"]},sidebar:"docSidebar",previous:{title:"712. Minimum ASCII Delete Sum for Two Strings",permalink:"/docs/leetcode/501-1000/minimum-ascii-delete-sum-for-two-strings"},next:{title:"723. Candy Crush",permalink:"/docs/leetcode/501-1000/candy_crush"}},p=[{value:"Python",id:"python",children:[{value:"Bottom Up DP",id:"bottom-up-dp",children:[],level:3}],level:2}],m={toc:p};function s(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/maximum-length-of-repeated-subarray/"},"https://leetcode.com/problems/maximum-length-of-repeated-subarray/")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("h3",{id:"bottom-up-dp"},"Bottom Up DP"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def findLength(self, nums1: List[int], nums2: List[int]) -> int:\n        m, n = len(nums1), len(nums2)\n\n        dp = [[0]*(n+1) for _ in range(m+1)]\n\n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                if nums1[i-1] == nums2[j-1]:\n\n                    dp[i][j] = dp[i-1][j-1] + 1\n\n        return max([max(row) for row in dp])\n")))}s.isMDXComponent=!0}}]);