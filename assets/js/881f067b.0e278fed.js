"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[31499],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return d}});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function u(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),c=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):u(u({},t),e)),r},s=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=c(r),d=a,f=p["".concat(i,".").concat(d)]||p[d]||m[d]||o;return r?n.createElement(f,u(u({ref:t},s),{},{components:r})):n.createElement(f,u({ref:t},s))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,u=new Array(o);u[0]=p;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,u[1]=l;for(var c=2;c<o;c++)u[c]=r[c];return n.createElement.apply(null,u)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},32477:function(e,t,r){r.r(t),r.d(t,{contentTitle:function(){return i},default:function(){return p},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return s}});var n=r(87462),a=r(63366),o=(r(67294),r(3905)),u=["components"],l={title:"560. Subarray Sum Equals K",sidebar_label:"560. Subarray Sum Equals K",tags:["Leetcode Medium"]},i=void 0,c={unversionedId:"leetcode/501-1000/subarray_sum_equals_k",id:"leetcode/501-1000/subarray_sum_equals_k",title:"560. Subarray Sum Equals K",description:"https://leetcode.com/problems/subarray-sum-equals-k/",source:"@site/docs/leetcode/501-1000/560_subarray_sum_equals_k.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/subarray_sum_equals_k",permalink:"/docs/leetcode/501-1000/subarray_sum_equals_k",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/560_subarray_sum_equals_k.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"}],version:"current",sidebarPosition:560,frontMatter:{title:"560. Subarray Sum Equals K",sidebar_label:"560. Subarray Sum Equals K",tags:["Leetcode Medium"]},sidebar:"docSidebar",previous:{title:"540. Single Element in a Sorted Array",permalink:"/docs/leetcode/501-1000/single_elm_in_sotrted_array"},next:{title:"563. Binary Tree Tilt",permalink:"/docs/leetcode/501-1000/binary_tree_tilt"}},s=[{value:"Python",id:"python",children:[],level:2}],m={toc:s};function p(e){var t=e.components,r=(0,a.Z)(e,u);return(0,o.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/subarray-sum-equals-k/"},"https://leetcode.com/problems/subarray-sum-equals-k/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from collections import defaultdict\n\n\nclass Solution:\n    def subarraySum(self, nums: List[int], k: int) -> int:\n        # Key as the total, value is the count of this total\n        sum_map = defaultdict(lambda: 0)\n\n        # counter to accumulate the answer\n        count = 0\n\n        # The current sum\n        total = 0\n\n        # Edge case, total == 0 initial with one possible combination: []\n        sum_map[0] = 1\n\n        for num in nums:\n            total += num\n            count += sum_map[total-k]\n            sum_map[total] += 1\n\n        return count\n")))}p.isMDXComponent=!0}}]);