"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[95512],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>y});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=c(r),p=o,y=m["".concat(l,".").concat(p)]||m[p]||u[p]||a;return r?n.createElement(y,i(i({ref:t},d),{},{components:r})):n.createElement(y,i({ref:t},d))}));function y(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},22198:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var n=r(87462),o=(r(67294),r(3905));const a={title:"981. Time Based Key-Value Store",sidebar_label:"981. Time Based Key-Value Store",tags:["Leetcode Medium","Binary Search"]},i=void 0,s={unversionedId:"leetcode/501-1000/time_based_key_value_store",id:"leetcode/501-1000/time_based_key_value_store",title:"981. Time Based Key-Value Store",description:"https://leetcode.com/problems/time-based-key-value-store/",source:"@site/docs/leetcode/501-1000/981_time_based_key_value_store.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/time_based_key_value_store",permalink:"/docs/leetcode/501-1000/time_based_key_value_store",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/981_time_based_key_value_store.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Binary Search",permalink:"/docs/tags/binary-search"}],version:"current",sidebarPosition:981,frontMatter:{title:"981. Time Based Key-Value Store",sidebar_label:"981. Time Based Key-Value Store",tags:["Leetcode Medium","Binary Search"]},sidebar:"docSidebar",previous:{title:"977. Squares of a Sorted Array",permalink:"/docs/leetcode/501-1000/squares_of_sorted_array"},next:{title:"983. Minimum Cost For Tickets",permalink:"/docs/leetcode/501-1000/min_cost_for_tickets"}},l={},c=[{value:"Python",id:"python",level:2},{value:"Get by Binary Search",id:"get-by-binary-search",level:3}],d={toc:c},m="wrapper";function u(e){let{components:t,...r}=e;return(0,o.kt)(m,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/time-based-key-value-store/"},"https://leetcode.com/problems/time-based-key-value-store/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"get-by-binary-search"},"Get by Binary Search"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from collections import defaultdict\n\n\nclass TimeMap:\n    def __init__(self):\n        self.memory = defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        # The question did not indicate the timestamp will be set always in incremental order\n        # But the test case riase error if you\'re not set in the order, so we can skip the\n        # ordering find of append\n        self.memory[key].append((timestamp, value))\n\n\n    def get(self, key: str, timestamp: int) -> str:\n        result = ""\n        l, r = 0, len(self.memory[key])-1\n        while l <= r:\n            pivot = (l+r) >> 1\n            if self.memory[key][pivot][0] <= timestamp:\n                result = self.memory[key][pivot][1]\n                l = pivot+1\n            else:\n                r = pivot-1\n        return result\n')))}u.isMDXComponent=!0}}]);