"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[79477],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return g}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=s(n),f=o,g=d["".concat(l,".").concat(f)]||d[f]||p[f]||i;return n?r.createElement(g,a(a({ref:t},u),{},{components:n})):r.createElement(g,a({ref:t},u))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=f;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[d]="string"==typeof e?e:o,a[1]=c;for(var s=2;s<i;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},76235:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return a},default:function(){return d},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return s}});var r=n(83117),o=(n(67294),n(3905));const i={title:"1372. Longest ZigZag Path in a Binary Tree",sidebar_label:"1372. Longest ZigZag Path in a Binary Tree",tags:["Leetcode Hard","Binary Tree","DFS"]},a=void 0,c={unversionedId:"leetcode/1001-1500/longest_zigzag_path_in_binary_tree",id:"leetcode/1001-1500/longest_zigzag_path_in_binary_tree",title:"1372. Longest ZigZag Path in a Binary Tree",description:"Python",source:"@site/docs/leetcode/1001-1500/1372_longest_zigzag_path_in_binary_tree.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/longest_zigzag_path_in_binary_tree",permalink:"/docs/leetcode/1001-1500/longest_zigzag_path_in_binary_tree",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1372_longest_zigzag_path_in_binary_tree.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"},{label:"DFS",permalink:"/docs/tags/dfs"}],version:"current",sidebarPosition:1372,frontMatter:{title:"1372. Longest ZigZag Path in a Binary Tree",sidebar_label:"1372. Longest ZigZag Path in a Binary Tree",tags:["Leetcode Hard","Binary Tree","DFS"]},sidebar:"docSidebar",previous:{title:"1346. Check If N and Its Double Exist",permalink:"/docs/leetcode/1001-1500/check_n_and_its_double_in_arr"},next:{title:"1373. Maximum Sum BST in Binary Tree",permalink:"/docs/leetcode/1001-1500/max_sum_bst_of_bt"}},l={},s=[{value:"Python",id:"python",level:2},{value:"DFS",id:"dfs",level:3}],u={toc:s};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"dfs"},"DFS"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def longestZigZag(self, root: Optional[TreeNode]) -> int:\n\n        def dfs(node, pre_direction, total):\n            if not node:\n                return total\n            \n            # If pre_direction is '', both sub-dfs will use 1 as 3rd arg\n            return max(\n                dfs(node.left, 'left', total+1 if pre_direction == 'right' else 1),\n                dfs(node.right, 'right', total+1 if pre_direction == 'left' else 1)\n            )\n        return dfs(root, '', 0) - 1\n")))}d.isMDXComponent=!0}}]);