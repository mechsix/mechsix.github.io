"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[74453],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>g});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),c=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,l=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(r),m=o,g=u["".concat(i,".").concat(m)]||u[m]||d[m]||l;return r?n.createElement(g,a(a({ref:t},p),{},{components:r})):n.createElement(g,a({ref:t},p))}));function g(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=r.length,a=new Array(l);a[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[u]="string"==typeof e?e:o,a[1]=s;for(var c=2;c<l;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},91398:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var n=r(87462),o=(r(67294),r(3905));const l={title:"1768. Merge Strings Alternately",sidebar_label:"1768. Merge Strings Alternately",tags:["Leetcode Easy"]},a=void 0,s={unversionedId:"leetcode/1501-2000/merge_strings_alternately",id:"leetcode/1501-2000/merge_strings_alternately",title:"1768. Merge Strings Alternately",description:"https://leetcode.com/problems/merge-strings-alternately/",source:"@site/docs/leetcode/1501-2000/1768_merge_strings_alternately.md",sourceDirName:"leetcode/1501-2000",slug:"/leetcode/1501-2000/merge_strings_alternately",permalink:"/docs/leetcode/1501-2000/merge_strings_alternately",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1501-2000/1768_merge_strings_alternately.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"}],version:"current",sidebarPosition:1768,frontMatter:{title:"1768. Merge Strings Alternately",sidebar_label:"1768. Merge Strings Alternately",tags:["Leetcode Easy"]},sidebar:"docSidebar",previous:{title:"1751. Maximum Number of Events That Can Be Attended II",permalink:"/docs/leetcode/1501-2000/max_number_of_events_that_can_be_attended_ii"},next:{title:"1770. Maximum Score from Performing Multiplication Operations",permalink:"/docs/leetcode/1501-2000/max_score_from_performing_multiplication_operations"}},i={},c=[{value:"Python",id:"python",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/merge-strings-alternately/"},"https://leetcode.com/problems/merge-strings-alternately/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def mergeAlternately(self, word1: str, word2: str) -> str:\n        result = [] \n\n        letters1 = list(word1[::-1])\n        letters2 = list(word2[::-1])\n\n        is_word1 = True\n\n        while letters1 or letters2:\n            if is_word1:\n                if letters1:\n                    result.append(letters1.pop())\n                is_word1 = False\n            \n            if not is_word1:\n                if letters2:\n                    result.append(letters2.pop())\n                is_word1 = True\n        \n        return ''.join(result)\n")))}d.isMDXComponent=!0}}]);