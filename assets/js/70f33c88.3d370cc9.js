"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[22020],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=s(n),d=o,f=p["".concat(l,".").concat(d)]||p[d]||m[d]||i;return n?r.createElement(f,a(a({ref:t},u),{},{components:n})):r.createElement(f,a({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[p]="string"==typeof e?e:o,a[1]=c;for(var s=2;s<i;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},21960:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return a},default:function(){return p},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return s}});var r=n(83117),o=(n(67294),n(3905));const i={title:"17. Letter Combinations of a Phone Number",sidebar_label:"17. Letter Combinations of a Phone Number",tags:["Leetcode Medium","Backtracking"]},a=void 0,c={unversionedId:"leetcode/1-500/letter_combinations_of_phone_number",id:"leetcode/1-500/letter_combinations_of_phone_number",title:"17. Letter Combinations of a Phone Number",description:"https://leetcode.com/problems/letter-combinations-of-a-phone-number/",source:"@site/docs/leetcode/1-500/17_letter_combinations_of_phone_number.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/letter_combinations_of_phone_number",permalink:"/docs/leetcode/1-500/letter_combinations_of_phone_number",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/17_letter_combinations_of_phone_number.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Backtracking",permalink:"/docs/tags/backtracking"}],version:"current",sidebarPosition:17,frontMatter:{title:"17. Letter Combinations of a Phone Number",sidebar_label:"17. Letter Combinations of a Phone Number",tags:["Leetcode Medium","Backtracking"]},sidebar:"docSidebar",previous:{title:"16. 3Sum Closest",permalink:"/docs/leetcode/1-500/three_sum_closest"},next:{title:"19. Remove Nth Node From End of List",permalink:"/docs/leetcode/1-500/remove_nth_from_eof_linked_list"}},l={},s=[{value:"Python",id:"python",level:2},{value:"Javascript",id:"javascript",level:2}],u={toc:s};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/letter-combinations-of-a-phone-number/"},"https://leetcode.com/problems/letter-combinations-of-a-phone-number/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Time: O(4^N)")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"7 and 9 has 4 characters")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Space: O(1)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    MAP = {\n        '2': 'abc',\n        '3': 'def',\n        '4': 'ghi',\n        '5': 'jkl',\n        '6': 'mno',\n        '7': 'pqrs',\n        '8': 'tuv',\n        '9': 'wxyz',\n    }\n\n    def letterCombinations(self, digits: str) -> List[str]:\n        result = []\n\n        if not digits:\n            return result\n\n        def backtrack(word, i):\n            if len(word) == len(digits):\n                result.append(word)\n                return\n\n            for char in self.MAP[digits[i]]:\n                backtrack(word+char, i+1)\n\n        backtrack('', 0)\n\n        return result\n")),(0,o.kt)("h2",{id:"javascript"},"Javascript"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const phones = {\n    2: "abc",\n    3: "def",\n    4: "ghi",\n    5: "jkl",\n    6: "mno",\n    7: "pqrs",\n    8: "tuv",\n    9: "wxyz",\n};\n\nvar letterCombinations = function (digits) {\n  if (!digits.length) return [];\n    const result = [];\n\n    var backtrack = function (start, digits, record = []) {\n        if (record.length === digits.length) {\n            result.push(record.join(""));\n            return;\n        }\n\n        for (let char of phones[digits[start]]) {\n            record.push(char);\n            backtrack(start + 1, digits, record);\n            record.pop();\n        }\n    };\n    backtrack(0, digits);\n\n    return result;\n};\n')))}p.isMDXComponent=!0}}]);