"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[18841],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return d}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function u(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?u(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):u(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},u=Object.keys(e);for(r=0;r<u.length;r++)n=u[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(e);for(r=0;r<u.length;r++)n=u[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),i=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=i(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,u=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=i(n),f=o,d=p["".concat(l,".").concat(f)]||p[f]||m[f]||u;return n?r.createElement(d,a(a({ref:t},s),{},{components:n})):r.createElement(d,a({ref:t},s))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var u=n.length,a=new Array(u);a[0]=f;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[p]="string"==typeof e?e:o,a[1]=c;for(var i=2;i<u;i++)a[i]=n[i];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},69393:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return a},default:function(){return p},frontMatter:function(){return u},metadata:function(){return c},toc:function(){return i}});var r=n(83117),o=(n(67294),n(3905));const u={title:"225. Implement Stack using Queues",sidebar_label:"225. Implement Stack using Queues",tags:["Leetcode Easy","Stack","Queue"]},a=void 0,c={unversionedId:"leetcode/1-500/implement_stack_with_queue",id:"leetcode/1-500/implement_stack_with_queue",title:"225. Implement Stack using Queues",description:"https://leetcode.com/problems/implement-stack-using-queues/",source:"@site/docs/leetcode/1-500/225_implement_stack_with_queue.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/implement_stack_with_queue",permalink:"/docs/leetcode/1-500/implement_stack_with_queue",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/225_implement_stack_with_queue.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Stack",permalink:"/docs/tags/stack"},{label:"Queue",permalink:"/docs/tags/queue"}],version:"current",sidebarPosition:225,frontMatter:{title:"225. Implement Stack using Queues",sidebar_label:"225. Implement Stack using Queues",tags:["Leetcode Easy","Stack","Queue"]},sidebar:"docSidebar",previous:{title:"223. Rectangle Area",permalink:"/docs/leetcode/1-500/rectangle_area"},next:{title:"226. Invert Binary Tree",permalink:"/docs/leetcode/1-500/invert_binary_tree"}},l={},i=[{value:"Python",id:"python",level:2}],s={toc:i};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/implement-stack-using-queues/"},"https://leetcode.com/problems/implement-stack-using-queues/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from collections import deque\n\n\nclass MyStack:\n\n    def __init__(self):\n        self.queue = deque()\n        self.head = None\n\n    def push(self, x: int) -> None:\n        self.queue.append(x)\n        self.head = x\n\n    def pop(self) -> int:\n        temp = deque()\n        while len(self.queue) > 1:\n            x = self.queue.popleft()\n            temp.append(x)\n            self.head = x\n\n        ans = self.queue.popleft()\n\n        self.queue = temp\n\n        return ans\n\n    def top(self) -> int:\n        return self.head\n\n    def empty(self) -> bool:\n        return not bool(self.queue)\n")))}p.isMDXComponent=!0}}]);