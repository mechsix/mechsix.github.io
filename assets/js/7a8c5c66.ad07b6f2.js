"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[77033],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>m});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},b=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(r),b=o,m=u["".concat(c,".").concat(b)]||u[b]||p[b]||a;return r?n.createElement(m,i(i({ref:t},d),{},{components:r})):n.createElement(m,i({ref:t},d))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=b;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}b.displayName="MDXCreateElement"},92908:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var n=r(87462),o=(r(67294),r(3905));const a={title:"109. Convert Sorted List to Binary Search Tree",slidebar_label:"109. Convert Sorted List to Binary Search Tree",tags:["Leetcode Medium","BST"]},i=void 0,l={unversionedId:"leetcode/1-500/convert_sorted_list_to_hight_balanced_bst",id:"leetcode/1-500/convert_sorted_list_to_hight_balanced_bst",title:"109. Convert Sorted List to Binary Search Tree",description:"https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/",source:"@site/docs/leetcode/1-500/109_convert_sorted_list_to_hight_balanced_bst.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/convert_sorted_list_to_hight_balanced_bst",permalink:"/docs/leetcode/1-500/convert_sorted_list_to_hight_balanced_bst",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/109_convert_sorted_list_to_hight_balanced_bst.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"BST",permalink:"/docs/tags/bst"}],version:"current",sidebarPosition:109,frontMatter:{title:"109. Convert Sorted List to Binary Search Tree",slidebar_label:"109. Convert Sorted List to Binary Search Tree",tags:["Leetcode Medium","BST"]},sidebar:"docSidebar",previous:{title:"108. Convert Sorted Array to Binary Search Tree",permalink:"/docs/leetcode/1-500/convert_sorted_array_to_bst"},next:{title:"110. Balanced Binary Tree",permalink:"/docs/leetcode/1-500/balanced_binary_tree"}},c={},s=[{value:"Python",id:"python",level:2},{value:"Convert to array and rebuild",id:"convert-to-array-and-rebuild",level:3}],d={toc:s},u="wrapper";function p(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/"},"https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"convert-to-array-and-rebuild"},"Convert to array and rebuild"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Ref to ",(0,o.kt)("a",{parentName:"li",href:"../1001-1500/balance_a_bst"},"1382. Balance a Binary Search Tree"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:\n        if not head:\n            return\n\n        nums, cur = [], head\n        while cur:\n            nums.append(cur.val)\n            cur = cur.next\n\n        def build(left, right):\n            if left > right:\n                return\n\n            mid = (left+right) >> 1\n            return TreeNode(nums[mid], build(left,mid-1), build(mid+1,right))\n\n        return build(0, len(nums)-1)\n")))}p.isMDXComponent=!0}}]);