"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[8720],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return d}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),u=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},s=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),f=u(r),d=o,m=f["".concat(c,".").concat(d)]||f[d]||p[d]||i;return r?n.createElement(m,l(l({ref:t},s),{},{components:r})):n.createElement(m,l({ref:t},s))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,l=new Array(i);l[0]=f;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:o,l[1]=a;for(var u=2;u<i;u++)l[u]=r[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},96163:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return a},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return s},default:function(){return f}});var n=r(87462),o=r(63366),i=(r(67294),r(3905)),l=["components"],a={title:"114. Flatten Binary Tree to Linked List",sidebar_label:"114. Flatten Binary Tree to Linked List",tags:["Binary Tree","Leetcode Medium"]},c=void 0,u={unversionedId:"leetcode/1-500/flatten_binary_tree_to_ll",id:"leetcode/1-500/flatten_binary_tree_to_ll",title:"114. Flatten Binary Tree to Linked List",description:"https://leetcode.com/problems/flatten-binary-tree-to-linked-list",source:"@site/docs/leetcode/1-500/114_flatten_binary_tree_to_ll.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/flatten_binary_tree_to_ll",permalink:"/docs/leetcode/1-500/flatten_binary_tree_to_ll",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/114_flatten_binary_tree_to_ll.md",tags:[{label:"Binary Tree",permalink:"/docs/tags/binary-tree"},{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"}],version:"current",sidebarPosition:114,frontMatter:{title:"114. Flatten Binary Tree to Linked List",sidebar_label:"114. Flatten Binary Tree to Linked List",tags:["Binary Tree","Leetcode Medium"]},sidebar:"docSidebar",previous:{title:"112. Path Sum",permalink:"/docs/leetcode/1-500/path_sum"},next:{title:"116. Populating Next Right Pointers in Each Node",permalink:"/docs/leetcode/1-500/link_next_right_in_binary_tree_nodes"}},s=[{value:"Python",id:"python",children:[],level:2}],p={toc:s};function f(e){var t=e.components,r=(0,o.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/flatten-binary-tree-to-linked-list"},"https://leetcode.com/problems/flatten-binary-tree-to-linked-list")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def flatten(self, root: Optional[TreeNode]) -> None:\n        if root is None:\n            return None\n\n        # 1. Flattern both sub-trees\n        self.flatten(root.left)\n        self.flatten(root.right)\n\n        # 2. Left subtree as right tree\n        origin_left = root.left\n        origin_right = root.right\n\n        root.left = None\n        root.right = origin_left\n\n        # 3. Attach origin right tree to the eof right tree\n        cur = root\n        while cur.right:\n            cur = cur.right\n        cur.right = origin_right\n")))}f.isMDXComponent=!0}}]);