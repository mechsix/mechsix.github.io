"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[84083],{50035:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>u,toc:()=>i});var t=a(74848),r=a(28453);const s={title:"53. Maximum Subarray",sidebar_label:"53. Maximum Subarray",tags:["Leetcode Easy","Max Subarray","Kadane Algorithm","Go"]},o=void 0,u={id:"leetcode/1-500/max_subarray",title:"53. Maximum Subarray",description:"https://leetcode.com/problems/maximum-subarray",source:"@site/docs/leetcode/1-500/53_max_subarray.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/max_subarray",permalink:"/docs/leetcode/1-500/max_subarray",draft:!1,unlisted:!1,tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Max Subarray",permalink:"/docs/tags/max-subarray"},{label:"Kadane Algorithm",permalink:"/docs/tags/kadane-algorithm"},{label:"Go",permalink:"/docs/tags/go"}],version:"current",sidebarPosition:53,frontMatter:{title:"53. Maximum Subarray",sidebar_label:"53. Maximum Subarray",tags:["Leetcode Easy","Max Subarray","Kadane Algorithm","Go"]},sidebar:"docSidebar",previous:{title:"51. N-Queens",permalink:"/docs/leetcode/1-500/n_queens"},next:{title:"54. Spiral Matrix",permalink:"/docs/leetcode/1-500/spiral_matrix"}},l={},i=[{value:"Python",id:"python",level:2},{value:"First Try",id:"first-try",level:3},{value:"O(n) Solution",id:"on-solution",level:3},{value:"### O(n) clear solution",id:"-on-clear-solution",level:3},{value:"Bottom-Up DP",id:"bottom-up-dp",level:3},{value:"Go",id:"go",level:2},{value:"JS",id:"js",level:2}];function m(n){const e={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:"https://leetcode.com/problems/maximum-subarray",children:"https://leetcode.com/problems/maximum-subarray"})}),"\n",(0,t.jsx)(e.h2,{id:"python",children:"Python"}),"\n",(0,t.jsx)(e.h3,{id:"first-try",children:"First Try"}),"\n",(0,t.jsx)(e.p,{children:"Timeout, O(nlogn)"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"class Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        ans_sum = 0\n        for start in range(0, len(nums)):\n            for end in range(start, len(nums)+1):\n                if (current_sum := sum(nums[start:end])) > ans_sum:\n                    ans_sum = current_sum\n        return ans_sum\n"})}),"\n",(0,t.jsx)(e.h3,{id:"on-solution",children:"O(n) Solution"}),"\n",(0,t.jsx)(e.p,{children:"O(n) Solution, which don't care the ans array but only reach the sum()"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"class Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        ans_sum = None\n        current_sum = -10^4\n        for num in nums:\n            current_sum = max(current_sum + num, num)\n            ans_sum = current_sum if ans_sum is None else max(ans_sum, current_sum)\n        return ans_sum\n\n"})}),"\n",(0,t.jsx)(e.h3,{id:"-on-clear-solution",children:"### O(n) clear solution"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"from math import inf\n\n\nclass Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        total = -inf\n        max_total = -inf\n        for num in nums:\n            total = max(total+num, num)\n            max_total = max(max_total, total)\n        return max_total\n"})}),"\n",(0,t.jsx)(e.h3,{id:"bottom-up-dp",children:"Bottom-Up DP"}),"\n",(0,t.jsx)(e.p,{children:"Same as previous solution, but follow the DP pattern"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"class Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        dp = [0] * (len(nums)+1)\n\n        ans = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i-1] > 0:\n                nums[i] = nums[i] + nums[i-1]\n                ans = max(ans, nums[i])\n\n        return ans\n"})}),"\n",(0,t.jsx)(e.h2,{id:"go",children:"Go"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:"func maxSubArray(nums []int) int {\n    var total int = -10000\n    var max_total int = -10000\n\n    for _, num := range nums {\n        if num > total + num {\n            total = num\n        } else {\n            total += num\n        }\n\n        if (max_total < total) {\n            max_total = total\n        }\n    }\n\n    return max_total\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"js",children:"JS"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxSubArray = function(nums) {\n    let max = -Infinity;\n    let cur = 0;\n\n    for (let num of nums) {\n        if (cur + num < num) {\n            cur = num;\n        } else {\n            cur += num;\n        }\n        max = Math.max(cur, max);\n    }\n\n    return max;\n};\n\n/**\n * max -2  1  1  4  4  5  6  6  6\n *\n * cur -2  1 -2  4  3  5  6  1  5\n * num -2  1 -3  4 -1  2  1 -5  4\n *.        *    *\n *  1 > (-2 + 1) -> max: 1, cur: 1\n *  4 > (-2 + 4) -> max: 4, cur: 4\n */\n"})})]})}function c(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(m,{...n})}):m(n)}},28453:(n,e,a)=>{a.d(e,{R:()=>o,x:()=>u});var t=a(96540);const r={},s=t.createContext(r);function o(n){const e=t.useContext(s);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function u(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:o(n.components),t.createElement(s.Provider,{value:e},n.children)}}}]);