"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[68377],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>f});var n=r(67294);function l(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){l(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,l=function(e,t){if(null==e)return{};var r,n,l={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(l[r]=e[r]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(l[r]=e[r])}return l}var c=n.createContext({}),u=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},s="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,l=e.mdxType,o=e.originalType,c=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),s=u(r),m=l,f=s["".concat(c,".").concat(m)]||s[m]||p[m]||o;return r?n.createElement(f,i(i({ref:t},d),{},{components:r})):n.createElement(f,i({ref:t},d))}));function f(e,t){var r=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=r.length,i=new Array(o);i[0]=m;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a[s]="string"==typeof e?e:l,i[1]=a;for(var u=2;u<o;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},87965:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>u});var n=r(87462),l=(r(67294),r(3905));const o={title:"430. Flatten a Multilevel Doubly Linked List",sidebar_label:"430. Flatten Doubly Linked List",tags:["Leetcode Medium"]},i=void 0,a={unversionedId:"leetcode/1-500/flatten_multilevel_doubly_linked_list",id:"leetcode/1-500/flatten_multilevel_doubly_linked_list",title:"430. Flatten a Multilevel Doubly Linked List",description:"https://leetcode.com/problems/flatten-a-multilevel-doubly-linked-list",source:"@site/docs/leetcode/1-500/430_flatten_multilevel_doubly_linked_list.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/flatten_multilevel_doubly_linked_list",permalink:"/docs/leetcode/1-500/flatten_multilevel_doubly_linked_list",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/430_flatten_multilevel_doubly_linked_list.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"}],version:"current",sidebarPosition:430,frontMatter:{title:"430. Flatten a Multilevel Doubly Linked List",sidebar_label:"430. Flatten Doubly Linked List",tags:["Leetcode Medium"]},sidebar:"docSidebar",previous:{title:"429. N-ary Tree Level Order Traversal",permalink:"/docs/leetcode/1-500/nary_tree_level_order_traversal"},next:{title:"435. Non-overlapping Intervals",permalink:"/docs/leetcode/1-500/non_overlapping_intervals"}},c={},u=[{value:"Python",id:"python",level:2}],d={toc:u},s="wrapper";function p(e){let{components:t,...r}=e;return(0,l.kt)(s,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/flatten-a-multilevel-doubly-linked-list"},"https://leetcode.com/problems/flatten-a-multilevel-doubly-linked-list")),(0,l.kt)("h2",{id:"python"},"Python"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def flatten(self, head: 'Node') -> 'Node':\n    cur, stack = head, []\n    while cur:\n        if cur.child:\n            if cur.next:\n                stack.append(cur.next)\n            cur.child.prev, cur.next, cur.child = cur, cur.child, None\n        elif not cur.next and stack:\n            cur.next, cur.next.prev = stack.pop(), cur\n        cur = cur.next\n    return head\n")))}p.isMDXComponent=!0}}]);