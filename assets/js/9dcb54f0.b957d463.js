"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[75533],{3905:function(e,t,n){n.d(t,{Zo:function(){return f},kt:function(){return d}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},f=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,f=c(e,["components","mdxType","originalType","parentName"]),s=u(n),p=o,d=s["".concat(l,".").concat(p)]||s[p]||m[p]||a;return n?r.createElement(d,i(i({ref:t},f),{},{components:n})):r.createElement(d,i({ref:t},f))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=p;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[s]="string"==typeof e?e:o,i[1]=c;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},14485:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return i},default:function(){return s},frontMatter:function(){return a},metadata:function(){return c},toc:function(){return u}});var r=n(83117),o=(n(67294),n(3905));const a={title:"289. Game of Life",sidebar_label:"289. Game of Life",tags:["Leetcode Medium","Matrix"]},i=void 0,c={unversionedId:"leetcode/1-500/game_of_life",id:"leetcode/1-500/game_of_life",title:"289. Game of Life",description:"https://leetcode.com/problems/game-of-life/",source:"@site/docs/leetcode/1-500/289_game_of_life.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/game_of_life",permalink:"/docs/leetcode/1-500/game_of_life",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/289_game_of_life.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Matrix",permalink:"/docs/tags/matrix"}],version:"current",sidebarPosition:289,frontMatter:{title:"289. Game of Life",sidebar_label:"289. Game of Life",tags:["Leetcode Medium","Matrix"]},sidebar:"docSidebar",previous:{title:"284. Peeking Iterator",permalink:"/docs/leetcode/1-500/peeking_iterator"},next:{title:"290. Word Pattern",permalink:"/docs/leetcode/1-500/word_pattern"}},l={},u=[{value:"Python",id:"python",level:2}],f={toc:u};function s(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/game-of-life/"},"https://leetcode.com/problems/game-of-life/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Time: O(m*n+k)"),(0,o.kt)("li",{parentName:"ul"},"Space: O(k)  # k is the matched of rule 1, 3, 4")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def gameOfLife(self, board: List[List[int]]) -> None:\n        m, n = len(board), len(board[0])\n\n        matches = []   # (row, col, new_value)\n\n        for row in range(m):\n            for col in range(n):\n                lives = self.count_lives_neighbors(board, row, col)\n                if board[row][col] == 1:\n                    if lives < 2 or lives > 3:\n                        # Rule 1 & 3\n                        matches.append((row, col, 0))\n                else:\n                    # Rule 4\n                    if lives == 3:\n                        matches.append((row, col, 1))\n\n        for match in matches:\n            row, col, value = match\n            board[row][col] = value\n\n\n    @staticmethod\n    def count_lives_neighbors(board, row, col):\n        count = 0\n        for r in range(max(0, row-1), min(row+2, len(board))):\n            for c in range(max(0, col-1), min(col+2, len(board[0]))):\n                count += board[r][c]\n        return count - board[row][col]\n")))}s.isMDXComponent=!0}}]);