"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[9257],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(n),m=i,f=p["".concat(s,".").concat(m)]||p[m]||u[m]||o;return n?r.createElement(f,a(a({ref:t},d),{},{components:n})):r.createElement(f,a({ref:t},d))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:i,a[1]=l;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},13690:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(87462),i=(n(67294),n(3905));const o={title:"1721. Swapping Nodes in a Linked List",sidebar_label:"1721. Swapping Nodes in a Linked List",tags:["Leetcode Medium","Linked List"]},a=void 0,l={unversionedId:"leetcode/1501-2000/swap_nodes_in_linked_list",id:"leetcode/1501-2000/swap_nodes_in_linked_list",title:"1721. Swapping Nodes in a Linked List",description:"https://mech.run/docs/leetcode/1-500/swapnodesin_pairs",source:"@site/docs/leetcode/1501-2000/1721_swap_nodes_in_linked_list.md",sourceDirName:"leetcode/1501-2000",slug:"/leetcode/1501-2000/swap_nodes_in_linked_list",permalink:"/docs/leetcode/1501-2000/swap_nodes_in_linked_list",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1501-2000/1721_swap_nodes_in_linked_list.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Linked List",permalink:"/docs/tags/linked-list"}],version:"current",sidebarPosition:1721,frontMatter:{title:"1721. Swapping Nodes in a Linked List",sidebar_label:"1721. Swapping Nodes in a Linked List",tags:["Leetcode Medium","Linked List"]},sidebar:"docSidebar",previous:{title:"1706. Where Will the Ball Fall",permalink:"/docs/leetcode/1501-2000/where_will_the_ball_fall"},next:{title:"1732. Find the Highest Altitude",permalink:"/docs/leetcode/1501-2000/find_highest_altitude"}},s={},c=[{value:"Python",id:"python",level:2}],d={toc:c},p="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://mech.run/docs/leetcode/1-500/swap_nodes_in_pairs"},"https://mech.run/docs/leetcode/1-500/swap_nodes_in_pairs")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Time: O(N+K)"),(0,i.kt)("li",{parentName:"ul"},"Space: O(N)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def swapNodes(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        dummy = ListNode(next=head)\n\n        # Find left position\n        lpre, lcur = dummy, head\n        for i in range(k-1):\n            lpre = lpre.next\n            lcur = lcur.next\n\n        # Build the stack get ready to reverse travel\n        stack = []\n        cur = dummy\n        while cur:\n            stack.append(cur)\n            cur = cur.next\n\n        # Find right position from stack\n        rcur = stack[-1]\n        for i in range(k):\n            rcur = stack.pop()\n        rpre = stack.pop()\n\n        # Swap the left and right position\n        lpre.next, rpre.next = rcur, lcur\n        lcur.next, rcur.next = rcur.next, lcur.next\n\n        return dummy.next\n")))}u.isMDXComponent=!0}}]);