"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[96520],{70095:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"leetcode/1001-1500/longest_zigzag_path_in_binary_tree","title":"1372. Longest ZigZag Path in a Binary Tree","description":"Python","source":"@site/docs/leetcode/1001-1500/1372_longest_zigzag_path_in_binary_tree.md","sourceDirName":"leetcode/1001-1500","slug":"/leetcode/1001-1500/longest_zigzag_path_in_binary_tree","permalink":"/docs/leetcode/1001-1500/longest_zigzag_path_in_binary_tree","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Hard","permalink":"/docs/tags/leetcode-hard"},{"inline":true,"label":"Binary Tree","permalink":"/docs/tags/binary-tree"},{"inline":true,"label":"DFS","permalink":"/docs/tags/dfs"}],"version":"current","sidebarPosition":1372,"frontMatter":{"title":"1372. Longest ZigZag Path in a Binary Tree","sidebar_label":"1372. Longest ZigZag Path in a Binary Tree","tags":["Leetcode Hard","Binary Tree","DFS"]},"sidebar":"docSidebar","previous":{"title":"1351. Count Negative Numbers in a Sorted Matrix","permalink":"/docs/leetcode/1001-1500/count_negative_num_in_a_sorted_matrix"},"next":{"title":"1373. Maximum Sum BST in Binary Tree","permalink":"/docs/leetcode/1001-1500/max_sum_bst_of_bt"}}');var r=n(74848),o=n(28453);const a={title:"1372. Longest ZigZag Path in a Binary Tree",sidebar_label:"1372. Longest ZigZag Path in a Binary Tree",tags:["Leetcode Hard","Binary Tree","DFS"]},s=void 0,l={},d=[{value:"Python",id:"python",level:2},{value:"DFS",id:"dfs",level:3}];function c(e){const t={code:"code",h2:"h2",h3:"h3",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,r.jsx)(t.h3,{id:"dfs",children:"DFS"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"class Solution:\n    def longestZigZag(self, root: Optional[TreeNode]) -> int:\n\n        def dfs(node, pre_direction, total):\n            if not node:\n                return total\n            \n            # If pre_direction is '', both sub-dfs will use 1 as 3rd arg\n            return max(\n                dfs(node.left, 'left', total+1 if pre_direction == 'right' else 1),\n                dfs(node.right, 'right', total+1 if pre_direction == 'left' else 1)\n            )\n        return dfs(root, '', 0) - 1\n"})})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>s});var i=n(96540);const r={},o=i.createContext(r);function a(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);