"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[32404],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>g});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),u=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},l=function(e){var t=u(e.components);return n.createElement(i.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=u(r),d=o,g=p["".concat(i,".").concat(d)]||p[d]||m[d]||a;return r?n.createElement(g,s(s({ref:t},l),{},{components:r})):n.createElement(g,s({ref:t},l))}));function g(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=d;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c[p]="string"==typeof e?e:o,s[1]=c;for(var u=2;u<a;u++)s[u]=r[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},9240:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>c,toc:()=>u});var n=r(87462),o=(r(67294),r(3905));const a={title:"49. Group Anagrams",sidebar_label:"49. Group Anagrams",tags:["Leetcode Medium"]},s=void 0,c={unversionedId:"leetcode/1-500/group_anagrams",id:"leetcode/1-500/group_anagrams",title:"49. Group Anagrams",description:"https://leetcode.com/problems/group-anagrams/",source:"@site/docs/leetcode/1-500/49_group_anagrams.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/group_anagrams",permalink:"/docs/leetcode/1-500/group_anagrams",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/49_group_anagrams.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"}],version:"current",sidebarPosition:49,frontMatter:{title:"49. Group Anagrams",sidebar_label:"49. Group Anagrams",tags:["Leetcode Medium"]},sidebar:"docSidebar",previous:{title:"48. Rotate Image",permalink:"/docs/leetcode/1-500/rotate_image"},next:{title:"51. N-Queens",permalink:"/docs/leetcode/1-500/n_queens"}},i={},u=[{value:"Python",id:"python",level:2},{value:"Group by custom key",id:"group-by-custom-key",level:3}],l={toc:u},p="wrapper";function m(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/group-anagrams/"},"https://leetcode.com/problems/group-anagrams/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"group-by-custom-key"},"Group by custom key"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Time: O(2N)"),(0,o.kt)("li",{parentName:"ul"},"Space: O(N+M), which M is the final group number")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from collections import defaultdict, Counter\n\n\nclass Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        groups = defaultdict(list)\n\n        for string in strs:\n            key = self.gen_key(string)\n            groups[key].append(string)\n\n        return list(groups.values())\n\n    @staticmethod\n    def gen_key(string):\n        """\n        return: str, which "{char}{count}" * n, with sorted char order\n            ate => "a1e1t1"\n            eel => "e2l1"\n        """\n        counts = Counter(string)\n        sequence = []\n        for char in sorted(counts.keys()):\n            sequence.append(char)\n            sequence.append(str(counts[char]))\n        return \'\'.join(sequence)\n')))}m.isMDXComponent=!0}}]);