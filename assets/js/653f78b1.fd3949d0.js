"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[41976],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),p=u(n),d=o,m=p["".concat(l,".").concat(d)]||p[d]||f[d]||i;return n?r.createElement(m,c(c({ref:t},s),{},{components:n})):r.createElement(m,c({ref:t},s))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,c=new Array(i);c[0]=d;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[p]="string"==typeof e?e:o,c[1]=a;for(var u=2;u<i;u++)c[u]=n[u];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},95339:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return i},metadata:function(){return a},toc:function(){return u}});var r=n(83117),o=(n(67294),n(3905));const i={title:"958. Check Completeness of a Binary Tree",sidebar_label:"958. Check Completeness of a Binary Tree",tags:["Leetcode Medium","Binary Tree","BFS"]},c=void 0,a={unversionedId:"leetcode/501-1000/check_completeness_of_binary_tree",id:"leetcode/501-1000/check_completeness_of_binary_tree",title:"958. Check Completeness of a Binary Tree",description:"Python",source:"@site/docs/leetcode/501-1000/958_check_completeness_of_binary_tree.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/check_completeness_of_binary_tree",permalink:"/docs/leetcode/501-1000/check_completeness_of_binary_tree",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/958_check_completeness_of_binary_tree.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"},{label:"BFS",permalink:"/docs/tags/bfs"}],version:"current",sidebarPosition:958,frontMatter:{title:"958. Check Completeness of a Binary Tree",sidebar_label:"958. Check Completeness of a Binary Tree",tags:["Leetcode Medium","Binary Tree","BFS"]},sidebar:"docSidebar",previous:{title:"953. Verifying an Alien Dictionary",permalink:"/docs/leetcode/501-1000/verifying_an_alien_dictionary"},next:{title:"967. Numbers With Same Consecutive Differences",permalink:"/docs/leetcode/501-1000/numbers_with_same_consecutive_differences"}},l={},u=[{value:"Python",id:"python",level:2},{value:"BFS",id:"bfs",level:3}],s={toc:u};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"bfs"},"BFS"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from collections import deque\n\n\nclass Solution:\n    def isCompleteTree(self, root: Optional[TreeNode]) -> bool:\n        queue = deque([root])\n\n        while queue:\n            node = queue.popleft()\n\n            if node:\n                queue.append(node.left)\n                queue.append(node.right)\n                continue\n            while queue:\n                if queue.popleft():\n                    return False\n        return True\n")))}p.isMDXComponent=!0}}]);