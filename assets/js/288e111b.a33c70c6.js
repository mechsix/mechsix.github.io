"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[32391],{23455:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"leetcode/501-1000/split_array_into_consecutive_subsequences","title":"659. Split Array into Consecutive Subsequences","description":"https://leetcode.com/problems/split-array-into-consecutive-subsequences/","source":"@site/docs/leetcode/501-1000/659_split_array_into_consecutive_subsequences.md","sourceDirName":"leetcode/501-1000","slug":"/leetcode/501-1000/split_array_into_consecutive_subsequences","permalink":"/docs/leetcode/501-1000/split_array_into_consecutive_subsequences","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Medium","permalink":"/docs/tags/leetcode-medium"},{"inline":true,"label":"Heap","permalink":"/docs/tags/heap"}],"version":"current","sidebarPosition":659,"frontMatter":{"title":"659. Split Array into Consecutive Subsequences","sidebar_label":"659. Split Array into Consecutive Subsequences","tags":["Leetcode Medium","Heap"]},"sidebar":"docSidebar","previous":{"title":"658. Find K Closest Elements","permalink":"/docs/leetcode/501-1000/find_k_closest_elements"},"next":{"title":"664. Strange Printer","permalink":"/docs/leetcode/501-1000/strange_printer"}}');var i=t(74848),o=t(28453);const a={title:"659. Split Array into Consecutive Subsequences",sidebar_label:"659. Split Array into Consecutive Subsequences",tags:["Leetcode Medium","Heap"]},r=void 0,c={},l=[{value:"Python",id:"python",level:2},{value:"Heap and sort (Timelimit Exceed)",id:"heap-and-sort-timelimit-exceed",level:3},{value:"Bottom Up DP with Heap",id:"bottom-up-dp-with-heap",level:3}];function p(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/split-array-into-consecutive-subsequences/",children:"https://leetcode.com/problems/split-array-into-consecutive-subsequences/"})}),"\n",(0,i.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,i.jsx)(n.h3,{id:"heap-and-sort-timelimit-exceed",children:"Heap and sort (Timelimit Exceed)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import heapq\n\n\nclass Solution:\n    def isPossible(self, nums: List[int]) -> bool:\n        heaps = []\n\n        for num in nums:\n            for heap in heaps:\n                if -heap[0] == num-1:\n                    heapq.heappush(heap, -num)\n                    break\n            else:\n                heap = [-num]\n                heaps.append(heap)\n\n            heaps.sort(key=lambda h: len(h))\n\n        return not any([len(h)<3 for h in heaps])\n"})}),"\n",(0,i.jsx)(n.h3,{id:"bottom-up-dp-with-heap",children:"Bottom Up DP with Heap"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from heapq import heappush, heappop\nfrom collections import defaultdict\n\n\nclass Solution:\n    def isPossible(self, nums: List[int]) -> bool:\n        dp = defaultdict(list)\n\n        for num in nums:\n            if dp[num-1]:\n                head = heappop(dp[num-1])\n                heappush(dp[num], head+1)\n            else:\n                heappush(dp[num], 1)\n\n        for heap in dp.values():\n            if not heap:\n                continue\n            if not all(x >= 3 for x in heap):\n                return False\n        return True\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var s=t(96540);const i={},o=s.createContext(i);function a(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);