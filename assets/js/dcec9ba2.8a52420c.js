"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[86648],{94518:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>f,frontMatter:()=>l,metadata:()=>o,toc:()=>a});var s=n(74848),i=n(28453);const l={title:"341. Flatten Nested List Iterator",sidebar_label:"341. Flatten Nested List Iterator",tags:["Leetcode Medium","Linked List"]},r=void 0,o={id:"leetcode/1-500/flatten_nested_list_lterator",title:"341. Flatten Nested List Iterator",description:"https://leetcode.com/problems/flatten-nested-list-iterator",source:"@site/docs/leetcode/1-500/341_flatten_nested_list_lterator.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/flatten_nested_list_lterator",permalink:"/docs/leetcode/1-500/flatten_nested_list_lterator",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Linked List",permalink:"/docs/tags/linked-list"}],version:"current",sidebarPosition:341,frontMatter:{title:"341. Flatten Nested List Iterator",sidebar_label:"341. Flatten Nested List Iterator",tags:["Leetcode Medium","Linked List"]},sidebar:"docSidebar",previous:{title:"341. Flatten Nested List Iterator",permalink:"/docs/leetcode/1-500/flatten_nested_list_iterator"},next:{title:"342. Power of Four",permalink:"/docs/leetcode/1-500/power_of_4"}},d={},a=[{value:"Python",id:"python",level:2}];function c(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://leetcode.com/problems/flatten-nested-list-iterator",children:"https://leetcode.com/problems/flatten-nested-list-iterator"})}),"\n",(0,s.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'class NestedIterator:\n    def __init__(self, nestedList: [NestedInteger]):\n        self.cache = [item for item in self._flatten(nestedList)]\n        self.cur = 0\n        self.length = len(self.cache)\n\n    def _flatten(self, node):\n        if not node:\n            return\n\n        if isinstance(node, list):\n            items = node\n        elif node.isInteger():\n            items = []\n            yield node\n        else:\n            items = node.getList()\n\n        for item in items:\n            if item.isInteger():\n                yield item.getInteger()\n            else:\n                for children in item.getList():\n                    for child in self._flatten(children):\n                        yield child\n\n    def next(self) -> int:\n        i = self.cur\n        self.cur += 1\n        return self.cache[i]\n\n    def hasNext(self) -> bool:\n         return self.cur < self.length\n# """\n# This is the interface that allows for creating nested lists.\n# You should not implement it, or speculate about its implementation\n# """\n#class NestedInteger:\n#    def isInteger(self) -> bool:\n#        """\n#        @return True if this NestedInteger holds a single integer, rather than a nested list.\n#        """\n#\n#    def getInteger(self) -> int:\n#        """\n#        @return the single integer that this NestedInteger holds, if it holds a single integer\n#        Return None if this NestedInteger holds a nested list\n#        """\n#\n#    def getList(self) -> [NestedInteger]:\n#        """\n#        @return the nested list that this NestedInteger holds, if it holds a nested list\n#        Return None if this NestedInteger holds a single integer\n#        """\n\n\n# Your NestedIterator object will be instantiated and called as such:\n# i, v = NestedIterator(nestedList), []\n# while i.hasNext(): v.append(i.next())\n'})})]})}function f(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var s=n(96540);const i={},l=s.createContext(i);function r(e){const t=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(l.Provider,{value:t},e.children)}}}]);