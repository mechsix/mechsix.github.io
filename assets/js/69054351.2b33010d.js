"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[75897],{3905:function(e,r,t){t.d(r,{Zo:function(){return l},kt:function(){return m}});var n=t(67294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function c(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var d=n.createContext({}),a=function(e){var r=n.useContext(d),t=r;return e&&(t="function"==typeof e?e(r):c(c({},r),e)),t},l=function(e){var r=a(e.components);return n.createElement(d.Provider,{value:r},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},p=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,i=e.originalType,d=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=a(t),p=o,m=u["".concat(d,".").concat(p)]||u[p]||f[p]||i;return t?n.createElement(m,c(c({ref:r},l),{},{components:t})):n.createElement(m,c({ref:r},l))}));function m(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=t.length,c=new Array(i);c[0]=p;var s={};for(var d in r)hasOwnProperty.call(r,d)&&(s[d]=r[d]);s.originalType=e,s[u]="string"==typeof e?e:o,c[1]=s;for(var a=2;a<i;a++)c[a]=t[a];return n.createElement.apply(null,c)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},46168:function(e,r,t){t.r(r),t.d(r,{assets:function(){return d},contentTitle:function(){return c},default:function(){return u},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return a}});var n=t(83117),o=(t(67294),t(3905));const i={title:"820. Short Encoding of Words",sidebar_label:"820. Short Encoding of Words",tags:["Leetcode Medium","Trie"]},c=void 0,s={unversionedId:"leetcode/501-1000/short_encoding_of_words",id:"leetcode/501-1000/short_encoding_of_words",title:"820. Short Encoding of Words",description:"https://leetcode.com/problems/short-encoding-of-words/",source:"@site/docs/leetcode/501-1000/820_short_encoding_of_words.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/short_encoding_of_words",permalink:"/docs/leetcode/501-1000/short_encoding_of_words",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/820_short_encoding_of_words.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Trie",permalink:"/docs/tags/trie"}],version:"current",sidebarPosition:820,frontMatter:{title:"820. Short Encoding of Words",sidebar_label:"820. Short Encoding of Words",tags:["Leetcode Medium","Trie"]},sidebar:"docSidebar",previous:{title:"814. Binary Tree Pruning",permalink:"/docs/leetcode/501-1000/binary_tree_pruning"},next:{title:"823. Binary Trees With Factors",permalink:"/docs/leetcode/501-1000/binary_tree_with_factors"}},d={},a=[{value:"Python",id:"python",level:2},{value:"Reversed words in Trie",id:"reversed-words-in-trie",level:3}],l={toc:a};function u(e){let{components:r,...t}=e;return(0,o.kt)("wrapper",(0,n.Z)({},l,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/short-encoding-of-words/"},"https://leetcode.com/problems/short-encoding-of-words/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"reversed-words-in-trie"},"Reversed words in Trie"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def minimumLengthEncoding(self, words: List[str]) -> int:\n        words = set(words)\n\n        trie = dict()\n        for word in words:\n            cur = trie\n            for char in word[::-1]:\n                cur = cur.setdefault(char, dict())\n\n        ans = 0\n        for word in words:\n            node = trie\n            for char in word[::-1]:\n                if char in node:\n                    node = node[char]\n                    continue\n                break\n\n            # node is leaf, which present the prefix without overlap\n            if len(node) == 0:\n                ans += len(word)+1\n        return ans\n")))}u.isMDXComponent=!0}}]);