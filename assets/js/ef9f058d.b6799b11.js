"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[46582],{53574:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var s=t(74848),i=t(28453);const r={title:"24. Swap Nodes in Pairs",sidebar_label:"24. Swap Nodes in Pairs",tags:["Leetcode Medium","Linked List","Go"]},o=void 0,a={id:"leetcode/1-500/swap_nodes_in_pairs",title:"24. Swap Nodes in Pairs",description:"https://leetcode.com/problems/swap-nodes-in-pairs",source:"@site/docs/leetcode/1-500/24_swap_nodes_in_pairs.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/swap_nodes_in_pairs",permalink:"/docs/leetcode/1-500/swap_nodes_in_pairs",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Linked List",permalink:"/docs/tags/linked-list"},{label:"Go",permalink:"/docs/tags/go"}],version:"current",sidebarPosition:24,frontMatter:{title:"24. Swap Nodes in Pairs",sidebar_label:"24. Swap Nodes in Pairs",tags:["Leetcode Medium","Linked List","Go"]},sidebar:"docSidebar",previous:{title:"23. Merge k Sorted Lists",permalink:"/docs/leetcode/1-500/merge_k_sorted_lists"},next:{title:"25. Reverse Nodes in k-Group",permalink:"/docs/leetcode/1-500/reverse_nodes_in_k_group"}},d={},l=[{value:"Python",id:"python",level:2},{value:"Go",id:"go",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/swap-nodes-in-pairs",children:"https://leetcode.com/problems/swap-nodes-in-pairs"})}),"\n",(0,s.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"First Try"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        if not head:\n            return\n\n        cur = head\n        dummy_head = ListNode(val=None, next=head)\n        pre = dummy_head\n        while cur and cur.next:\n            next_cur = cur.next.next\n            new_left = self._swap(cur, cur.next)\n            pre.next = new_left\n            pre = new_left.next\n            cur = next_cur\n\n        return dummy_head.next\n\n    def _swap(self, left, right):\n        if not right:\n            return left\n        left.next, right.next = right.next, left\n        return right\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Second Try, more clear"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        if not head or not head.next:\n            return head\n\n        left = head\n        right = head.next\n\n        left.next = self.swapPairs(right.next)\n        right.next = left\n\n        return right\n"})}),"\n",(0,s.jsx)(n.h2,{id:"go",children:"Go"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"func swapPairs(head *ListNode) *ListNode {\n    if (head == nil || head.Next == nil) {\n        return head\n    }\n\n    left := head\n    right := head.Next\n\n    left.Next = swapPairs(right.Next)\n    right.Next = left\n\n    return right\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(96540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);