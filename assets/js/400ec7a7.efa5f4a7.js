"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[4769],{3905:function(e,n,t){t.d(n,{Zo:function(){return f},kt:function(){return m}});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},f=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},d="mdxType",s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,f=a(e,["components","mdxType","originalType","parentName"]),d=u(t),p=i,m=d["".concat(l,".").concat(p)]||d[p]||s[p]||o;return t?r.createElement(m,c(c({ref:n},f),{},{components:t})):r.createElement(m,c({ref:n},f))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,c=new Array(o);c[0]=p;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a[d]="string"==typeof e?e:i,c[1]=a;for(var u=2;u<o;u++)c[u]=t[u];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},73377:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return o},metadata:function(){return a},toc:function(){return u}});var r=t(83117),i=(t(67294),t(3905));const o={title:"1823. Find the Winner of the Circular Game",sidebar_label:"1823. Find the Winner of the Circular Game",tags:["Leetcode Medium"]},c=void 0,a={unversionedId:"leetcode/1501-2000/find_winner_of_circular_game",id:"leetcode/1501-2000/find_winner_of_circular_game",title:"1823. Find the Winner of the Circular Game",description:"Python",source:"@site/docs/leetcode/1501-2000/1823_find_winner_of_circular_game.md",sourceDirName:"leetcode/1501-2000",slug:"/leetcode/1501-2000/find_winner_of_circular_game",permalink:"/docs/leetcode/1501-2000/find_winner_of_circular_game",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1501-2000/1823_find_winner_of_circular_game.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"}],version:"current",sidebarPosition:1823,frontMatter:{title:"1823. Find the Winner of the Circular Game",sidebar_label:"1823. Find the Winner of the Circular Game",tags:["Leetcode Medium"]},sidebar:"docSidebar",previous:{title:"1822. Sign of the Product of an Array",permalink:"/docs/leetcode/1501-2000/sign_of_the_product_of_an_array"},next:{title:"1832. Check if the Sentence Is Pangram",permalink:"/docs/leetcode/1501-2000/check_if_the_sentence_is_pangram"}},l={},u=[{value:"Python",id:"python",level:2}],f={toc:u};function d(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class Solution:\n    def findTheWinner(self, n: int, k: int) -> int:\n        friends = list(range(n))\n\n        i = 0\n        while len(friends) > 1:\n            i = (i+k-1) % len(friends)\n            print("Remove {} {}".format(i, friends))\n            friends.pop(i)\n\n        return friends[0] + 1\n')))}d.isMDXComponent=!0}}]);