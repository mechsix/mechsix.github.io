"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[39394],{3905:function(e,r,t){t.d(r,{Zo:function(){return c},kt:function(){return m}});var n=t(67294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),u=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},c=function(e){var r=u(e.components);return n.createElement(s.Provider,{value:r},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(t),f=o,m=p["".concat(s,".").concat(f)]||p[f]||d[f]||i;return t?n.createElement(m,a(a({ref:r},c),{},{components:t})):n.createElement(m,a({ref:r},c))}));function m(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=f;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l[p]="string"==typeof e?e:o,a[1]=l;for(var u=2;u<i;u++)a[u]=t[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},55057:function(e,r,t){t.r(r),t.d(r,{SpanBlue:function(){return c},SpanGreen:function(){return p},assets:function(){return s},contentTitle:function(){return a},default:function(){return f},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return u}});var n=t(83117),o=(t(67294),t(3905));const i={title:"336. Palindrome Pairs",sidebar_label:"336. Palindrome Pairs",tags:["Leetcode Hard","Trie"]},a=void 0,l={unversionedId:"leetcode/1-500/palindrome_pairs",id:"leetcode/1-500/palindrome_pairs",title:"336. Palindrome Pairs",description:"https://leetcode.com/problems/palindrome-pairs/",source:"@site/docs/leetcode/1-500/336_palindrome_pairs.mdx",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/palindrome_pairs",permalink:"/docs/leetcode/1-500/palindrome_pairs",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/336_palindrome_pairs.mdx",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"Trie",permalink:"/docs/tags/trie"}],version:"current",sidebarPosition:336,frontMatter:{title:"336. Palindrome Pairs",sidebar_label:"336. Palindrome Pairs",tags:["Leetcode Hard","Trie"]},sidebar:"docSidebar",previous:{title:"334. Increasing Triplet Subsequence",permalink:"/docs/leetcode/1-500/increasing_triplet_subsequence"},next:{title:"337. House Robber III",permalink:"/docs/leetcode/1-500/house_robber_iii"}},s={},u=[{value:"Python",id:"python",level:2},{value:"Remember Suffix in Trie Tree",id:"remember-suffix-in-trie-tree",level:3}],c=e=>{let{children:r,color:t}=e;return(0,o.kt)("span",{style:{color:"blue"}},r)},p=e=>{let{children:r,color:t}=e;return(0,o.kt)("span",{style:{color:"green"}},r)},d={toc:u,SpanBlue:c,SpanGreen:p};function f(e){let{components:r,...t}=e;return(0,o.kt)("wrapper",(0,n.Z)({},d,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/palindrome-pairs/"},"https://leetcode.com/problems/palindrome-pairs/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"remember-suffix-in-trie-tree"},"Remember Suffix in Trie Tree"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"K")," is the length of logest word; ",(0,o.kt)("inlineCode",{parentName:"p"},"N")," is length of words"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Time: O(K^2+N)"),(0,o.kt)("li",{parentName:"ul"},"Space: O((K+N)^2)")),(0,o.kt)("p",null,"Consider ",(0,o.kt)("strong",{parentName:"p"},"3")," cases in ",(0,o.kt)(c,{mdxType:"SpanBlue"},"Word1")," and ",(0,o.kt)(p,{mdxType:"SpanGreen"},"Word2"),":"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Word1 is reversed Word2: ",(0,o.kt)(c,{mdxType:"SpanBlue"},"CAT"),(0,o.kt)(p,{mdxType:"SpanGreen"},"TAC")),(0,o.kt)("li",{parentName:"ol"},"Word2 suffix is reversed Word1: ",(0,o.kt)(c,{mdxType:"SpanBlue"},"CAT"),(0,o.kt)(p,{mdxType:"SpanGreen"},"SOLOSTAC")),(0,o.kt)("li",{parentName:"ol"},"Word1 prefix is reversed Word2: ",(0,o.kt)(c,{mdxType:"SpanBlue"},"CATSOLOS"),(0,o.kt)(p,{mdxType:"SpanGreen"},"TAC"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def palindromePairs(self, words: List[str]) -> List[List[int]]:\n        # Build the trie tree\n        trie = {}\n        for i, word in enumerate(words):\n            cur = trie\n            word = word[::-1] # Build the trie tree with inverse order of the word\n            for j, letter in enumerate(word):\n                if word[j:] == word[j:][::-1]:\n                    if 'suffix' not in cur:\n                        cur['suffix'] = []\n                    cur['suffix'].append(i)   # Remember any suffix id (index) on the level if exist\n                cur = cur.setdefault(letter, {})\n            cur['eow'] = i\n\n        # Consider cases and find solutions\n        solutions = []\n        for i, word in enumerate(words):\n            cur = trie\n            for j, letter in enumerate(word):\n                # Case 3\n                if cur.get('eow') is not None:\n                    if word[j:] == word[j:][::-1]:\n                        solutions.append([i, cur.get('eow')])\n                if letter not in cur:\n                    break\n                cur = cur[letter]\n            else:\n                # Case 1\n                if cur.get('eow') is not None and cur['eow'] != i:\n                    solutions.append([i, cur['eow']])\n\n                # Case 2\n                for j in cur.get('suffix', []):\n                    solutions.append([i, j])\n\n        return solutions\n")))}f.isMDXComponent=!0}}]);