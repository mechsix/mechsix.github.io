"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[13530],{15839:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>l,metadata:()=>t,toc:()=>s});const t=JSON.parse('{"id":"leetcode/1-500/game_of_life","title":"289. Game of Life","description":"https://leetcode.com/problems/game-of-life/","source":"@site/docs/leetcode/1-500/289_game_of_life.md","sourceDirName":"leetcode/1-500","slug":"/leetcode/1-500/game_of_life","permalink":"/docs/leetcode/1-500/game_of_life","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Medium","permalink":"/docs/tags/leetcode-medium"},{"inline":true,"label":"Matrix","permalink":"/docs/tags/matrix"}],"version":"current","sidebarPosition":289,"frontMatter":{"title":"289. Game of Life","sidebar_label":"289. Game of Life","tags":["Leetcode Medium","Matrix"]},"sidebar":"docSidebar","previous":{"title":"284. Peeking Iterator","permalink":"/docs/leetcode/1-500/peeking_iterator"},"next":{"title":"290. Word Pattern","permalink":"/docs/leetcode/1-500/word_pattern"}}');var r=o(74848),i=o(28453);const l={title:"289. Game of Life",sidebar_label:"289. Game of Life",tags:["Leetcode Medium","Matrix"]},a=void 0,c={},s=[{value:"Python",id:"python",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/game-of-life/",children:"https://leetcode.com/problems/game-of-life/"})}),"\n",(0,r.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Time: O(m*n+k)"}),"\n",(0,r.jsx)(n.li,{children:"Space: O(k)  # k is the matched of rule 1, 3, 4"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def gameOfLife(self, board: List[List[int]]) -> None:\n        m, n = len(board), len(board[0])\n\n        matches = []   # (row, col, new_value)\n\n        for row in range(m):\n            for col in range(n):\n                lives = self.count_lives_neighbors(board, row, col)\n                if board[row][col] == 1:\n                    if lives < 2 or lives > 3:\n                        # Rule 1 & 3\n                        matches.append((row, col, 0))\n                else:\n                    # Rule 4\n                    if lives == 3:\n                        matches.append((row, col, 1))\n\n        for match in matches:\n            row, col, value = match\n            board[row][col] = value\n\n\n    @staticmethod\n    def count_lives_neighbors(board, row, col):\n        count = 0\n        for r in range(max(0, row-1), min(row+2, len(board))):\n            for c in range(max(0, col-1), min(col+2, len(board[0]))):\n                count += board[r][c]\n        return count - board[row][col]\n"})})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>l,x:()=>a});var t=o(96540);const r={},i=t.createContext(r);function l(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);