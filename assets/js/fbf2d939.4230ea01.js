"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[478],{72124:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"leetcode/1001-1500/longest_string_chain","title":"1048. Longest String Chain","description":"Python","source":"@site/docs/leetcode/1001-1500/1048_longest_string_chain.md","sourceDirName":"leetcode/1001-1500","slug":"/leetcode/1001-1500/longest_string_chain","permalink":"/docs/leetcode/1001-1500/longest_string_chain","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Medium","permalink":"/docs/tags/leetcode-medium"},{"inline":true,"label":"DP","permalink":"/docs/tags/dp"}],"version":"current","sidebarPosition":1048,"frontMatter":{"title":"1048. Longest String Chain","sidebar_label":"1048. Longest String Chain","tags":["Leetcode Medium","DP"]},"sidebar":"docSidebar","previous":{"title":"1047. Remove All Adjacent Duplicates In String","permalink":"/docs/leetcode/1001-1500/remove_all_adjacent_duplicates_in_string"},"next":{"title":"1051. Height Checker","permalink":"/docs/leetcode/1001-1500/height_checker"}}');var r=t(74848),i=t(28453);const s={title:"1048. Longest String Chain",sidebar_label:"1048. Longest String Chain",tags:["Leetcode Medium","DP"]},d=void 0,l={},a=[{value:"Python",id:"python",level:2},{value:"Top-Down DP",id:"top-down-dp",level:3},{value:"Bottom-Up DP",id:"bottom-up-dp",level:3}];function c(e){const n={code:"code",h2:"h2",h3:"h3",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,r.jsx)(n.h3,{id:"top-down-dp",children:"Top-Down DP"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from functools import cache\n\n\nclass Solution:\n    def longestStrChain(self, words: List[str]) -> int:\n\n        @cache\n        def dp(word: str):\n            max_length = 1\n            for i in range(len(word)):\n                new_word = word[:i] + word[i+1:]\n\n                if new_word in words:\n                    max_length = max(max_length, 1+dp(new_word))\n\n            return max_length\n\n\n        answer = 0\n        for word in words:\n            answer = max(answer, dp(word))\n\n        return answer\n"})}),"\n",(0,r.jsx)(n.h3,{id:"bottom-up-dp",children:"Bottom-Up DP"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from collections import defaultdict\n\n\nclass Solution:\n    def longestStrChain(self, words: List[str]) -> int:\n        dp = defaultdict(int)\n\n        words.sort(key=lambda word: len(word))\n\n        answer = 0\n\n        for word in words:\n            current_length = 1\n            for i in range(len(word)):\n                new_word = word[:i] + word[i+1:]\n                pre_length = dp.get(new_word, 0)\n                current_length = max(current_length, pre_length+1)\n\n            dp[word] = current_length\n            answer = max(answer, current_length)\n\n        return answer\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>d});var o=t(96540);const r={},i=o.createContext(r);function s(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);