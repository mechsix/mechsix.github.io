"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[228],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return p}});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),d=c(t),p=i,f=d["".concat(l,".").concat(p)]||d[p]||m[p]||o;return t?r.createElement(f,a(a({ref:n},s),{},{components:t})):r.createElement(f,a({ref:n},s))}));function p(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=d;var u={};for(var l in n)hasOwnProperty.call(n,l)&&(u[l]=n[l]);u.originalType=e,u.mdxType="string"==typeof e?e:i,a[1]=u;for(var c=2;c<o;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},42886:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return u},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return s},default:function(){return d}});var r=t(87462),i=t(63366),o=(t(67294),t(3905)),a=["components"],u={title:"209. Minimum Size Subarray Sum",sidebar_label:"209. Minimum Size Subarray Sum",tags:["Leetcode Medium","Sliding Window","Two Pointer"]},l=void 0,c={unversionedId:"leetcode/1-500/min_size_subarray_sum",id:"leetcode/1-500/min_size_subarray_sum",title:"209. Minimum Size Subarray Sum",description:"Python",source:"@site/docs/leetcode/1-500/209_min_size_subarray_sum.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/min_size_subarray_sum",permalink:"/docs/leetcode/1-500/min_size_subarray_sum",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/209_min_size_subarray_sum.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Sliding Window",permalink:"/docs/tags/sliding-window"},{label:"Two Pointer",permalink:"/docs/tags/two-pointer"}],version:"current",sidebarPosition:209,frontMatter:{title:"209. Minimum Size Subarray Sum",sidebar_label:"209. Minimum Size Subarray Sum",tags:["Leetcode Medium","Sliding Window","Two Pointer"]},sidebar:"docSidebar",previous:{title:"206. Reverse Linked List",permalink:"/docs/leetcode/1-500/reverse_linked_list"},next:{title:"217. Contains Duplicate",permalink:"/docs/leetcode/1-500/containers_duplicate"}},s=[{value:"Python",id:"python",children:[],level:2}],m={toc:s};function d(e){var n=e.components,t=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'class Solution:\n    def minSubArrayLen(self, target: int, nums: List[int]) -> int:\n        # Can be any of larger number which not possible from the answer\n        min_length = len(nums)+1\n        total = 0\n        start, end = 0, 0\n\n        while end < len(nums):\n            # print("window", nums[start:end+1])\n            total += nums[end]\n\n            while (total >= target):\n                min_length = min(min_length, end-start+1)\n                total -= nums[start]\n                start += 1\n            end += 1\n\n        return min_length if min_length < len(nums)+1 else 0\n')))}d.isMDXComponent=!0}}]);