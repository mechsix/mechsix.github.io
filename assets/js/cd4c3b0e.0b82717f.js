"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[41387],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=s(n),d=o,f=m["".concat(c,".").concat(d)]||m[d]||p[d]||i;return n?r.createElement(f,a(a({ref:t},u),{},{components:n})):r.createElement(f,a({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[m]="string"==typeof e?e:o,a[1]=l;for(var s=2;s<i;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},78836:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return a},default:function(){return m},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return s}});var r=n(83117),o=(n(67294),n(3905));const i={title:"378. Kth Smallest Element in a Sorted Matrix",sidebar_label:"378. Kth Smallest Element in a Sorted Matrix",tags:["Leetcode Medium","Heap"]},a=void 0,l={unversionedId:"leetcode/1-500/kth_smallest_elm_in_sorted_martrix",id:"leetcode/1-500/kth_smallest_elm_in_sorted_martrix",title:"378. Kth Smallest Element in a Sorted Matrix",description:"Python",source:"@site/docs/leetcode/1-500/378_kth_smallest_elm_in_sorted_martrix.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/kth_smallest_elm_in_sorted_martrix",permalink:"/docs/leetcode/1-500/kth_smallest_elm_in_sorted_martrix",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/378_kth_smallest_elm_in_sorted_martrix.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Heap",permalink:"/docs/tags/heap"}],version:"current",sidebarPosition:378,frontMatter:{title:"378. Kth Smallest Element in a Sorted Matrix",sidebar_label:"378. Kth Smallest Element in a Sorted Matrix",tags:["Leetcode Medium","Heap"]},sidebar:"docSidebar",previous:{title:"377. Combination Sum IV",permalink:"/docs/leetcode/1-500/combination_sum_iv"},next:{title:"382. Linked List Random Node",permalink:"/docs/leetcode/1-500/linked_list_rand_node"}},c={},s=[{value:"Python",id:"python",level:2},{value:"Min Heap",id:"min-heap",level:3}],u={toc:s};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"min-heap"},"Min Heap"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Time: O(N*M)"),(0,o.kt)("li",{parentName:"ul"},"Space: O(N*M)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import heapq\n\n\nclass Solution:\n    def kthSmallest(self, matrix: List[List[int]], k: int) -> int:\n        heap = []\n        for row in matrix:\n            for num in row:\n                heapq.heappush(heap, num)\n\n        return heapq.nsmallest(k, heap)[-1]\n")))}m.isMDXComponent=!0}}]);