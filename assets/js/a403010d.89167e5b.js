"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[41348],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(r),f=o,m=p["".concat(c,".").concat(f)]||p[f]||d[f]||i;return r?n.createElement(m,a(a({ref:t},u),{},{components:r})):n.createElement(m,a({ref:t},u))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},16820:function(e,t,r){r.r(t),r.d(t,{assets:function(){return c},contentTitle:function(){return a},default:function(){return p},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return l}});var n=r(83117),o=(r(67294),r(3905));const i={title:"35. Search Insert Position",sidebar_label:"35. Search Insert Position",tags:["Leetcode Easy","Binary Search"]},a=void 0,s={unversionedId:"leetcode/1-500/search_insert_pos",id:"leetcode/1-500/search_insert_pos",title:"35. Search Insert Position",description:"https://leetcode.com/problems/search-insert-position",source:"@site/docs/leetcode/1-500/35_search_insert_pos.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/search_insert_pos",permalink:"/docs/leetcode/1-500/search_insert_pos",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/35_search_insert_pos.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Binary Search",permalink:"/docs/tags/binary-search"}],version:"current",sidebarPosition:35,frontMatter:{title:"35. Search Insert Position",sidebar_label:"35. Search Insert Position",tags:["Leetcode Easy","Binary Search"]},sidebar:"docSidebar",previous:{title:"34. Find First and Last Position of Element in Sorted Array",permalink:"/docs/leetcode/1-500/find_first_and_last_pos_of_element_in_sorted_array"},next:{title:"36. Valid Sudoku",permalink:"/docs/leetcode/1-500/valid_sudoku"}},c={},l=[{value:"Python",id:"python",level:2},{value:"Force Busted",id:"force-busted",level:2},{value:"Binary Search",id:"binary-search",level:2}],u={toc:l};function p(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/search-insert-position"},"https://leetcode.com/problems/search-insert-position")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h2",{id:"force-busted"},"Force Busted"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        insert_pos = 0\n\n        for index, num in enumerate(nums):\n            if target == num:\n                return index\n            if target > num:\n                insert_pos = index+1\n\n        return insert_pos\n")),(0,o.kt)("h2",{id:"binary-search"},"Binary Search"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        l, r = 0, len(nums)-1\n\n        while l <= r:\n            cur = (l+r) // 2\n            if target == nums[cur]:\n                return cur\n            elif target < nums[cur]:\n                r = cur - 1\n            else:\n                l = cur + 1\n        return l\n")))}p.isMDXComponent=!0}}]);