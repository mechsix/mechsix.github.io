"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[5881],{52753:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var n=r(74848),o=r(28453);const i={title:"823. Binary Trees With Factors",sidebar_label:"823. Binary Trees With Factors",tags:["Leetcode Medium","DP","TODO"]},s=void 0,a={id:"leetcode/501-1000/binary_tree_with_factors",title:"823. Binary Trees With Factors",description:"https://leetcode.com/problems/binary-trees-with-factors/",source:"@site/docs/leetcode/501-1000/832_binary_tree_with_factors.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/binary_tree_with_factors",permalink:"/docs/leetcode/501-1000/binary_tree_with_factors",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"DP",permalink:"/docs/tags/dp"},{label:"TODO",permalink:"/docs/tags/todo"}],version:"current",sidebarPosition:832,frontMatter:{title:"823. Binary Trees With Factors",sidebar_label:"823. Binary Trees With Factors",tags:["Leetcode Medium","DP","TODO"]},sidebar:"docSidebar",previous:{title:"820. Short Encoding of Words",permalink:"/docs/leetcode/501-1000/short_encoding_of_words"},next:{title:"835. Image Overlap",permalink:"/docs/leetcode/501-1000/image_overlap"}},c={},d=[{value:"Python",id:"python",level:2},{value:"Bottom Up DP",id:"bottom-up-dp",level:3}];function l(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"https://leetcode.com/problems/binary-trees-with-factors/",children:"https://leetcode.com/problems/binary-trees-with-factors/"})}),"\n",(0,n.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,n.jsx)(t.h3,{id:"bottom-up-dp",children:"Bottom Up DP"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Offical solution"}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"class Solution:\n    def numFactoredBinaryTrees(self, arr: List[int]) -> int:\n        arr.sort()\n\n        dp = [1] * len(arr)\n        mapper = {num: index for index, num in enumerate(arr)}\n\n        for i, num in enumerate(arr):\n            for j in range(i):\n                left, right = num % arr[j], num / arr[j]\n                if left == 0 and right in mapper:\n                    dp[i] += dp[j] * dp[mapper[right]]\n                    dp[i] %= (10**9+7)\n\n        return sum(dp) % (10**9+7)\n"})})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>s,x:()=>a});var n=r(96540);const o={},i=n.createContext(o);function s(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);