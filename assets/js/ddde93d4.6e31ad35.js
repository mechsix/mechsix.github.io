"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[3646],{3905:(e,n,r)=>{r.d(n,{Zo:()=>d,kt:()=>p});var t=r(67294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=t.createContext({}),s=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},d=function(e){var n=s(e.components);return t.createElement(c.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},f=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(r),f=o,p=u["".concat(c,".").concat(f)]||u[f]||m[f]||a;return r?t.createElement(p,i(i({ref:n},d),{},{components:r})):t.createElement(p,i({ref:n},d))}));function p(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=f;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=r[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}f.displayName="MDXCreateElement"},6187:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var t=r(87462),o=(r(67294),r(3905));const a={title:"1020. Number of Enclaves",sidebar_label:"1020. Number of Enclaves",tags:["Leetcode Medium","DFS"]},i=void 0,l={unversionedId:"leetcode/1001-1500/number_of_enclaves",id:"leetcode/1001-1500/number_of_enclaves",title:"1020. Number of Enclaves",description:"https://leetcode.com/problems/number-of-enclaves/",source:"@site/docs/leetcode/1001-1500/1020_number_of_enclaves.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/number_of_enclaves",permalink:"/docs/leetcode/1001-1500/number_of_enclaves",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1020_number_of_enclaves.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"DFS",permalink:"/docs/tags/dfs"}],version:"current",sidebarPosition:1020,frontMatter:{title:"1020. Number of Enclaves",sidebar_label:"1020. Number of Enclaves",tags:["Leetcode Medium","DFS"]},sidebar:"docSidebar",previous:{title:"1009. Complement of Base 10 Integer",permalink:"/docs/leetcode/1001-1500/complement_base_10_int"},next:{title:"1046. Last Stone Weight",permalink:"/docs/leetcode/1001-1500/last_stone_weight"}},c={},s=[{value:"Python",id:"python",level:2},{value:"Mark and Query - DFS",id:"mark-and-query---dfs",level:3},{value:"Mark and Query - BFS (Timelimit Exceed)",id:"mark-and-query---bfs-timelimit-exceed",level:3}],d={toc:s},u="wrapper";function m(e){let{components:n,...r}=e;return(0,o.kt)(u,(0,t.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/number-of-enclaves/"},"https://leetcode.com/problems/number-of-enclaves/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"mark-and-query---dfs"},"Mark and Query - DFS"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def numEnclaves(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n\n        def dfs(i, j):\n            if i < 0 or i >= m or j < 0 or j >= n:\n                return\n\n            if grid[i][j] <= 0:\n                return\n\n            grid[i][j] = -1\n\n            for rx, cx in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                dfs(i+rx, j+cx)\n\n        # Mark reachable islands from edges\n        for row in range(m):\n            dfs(row, 0)\n            dfs(row, n-1)\n\n        for col in range(n):\n            dfs(0, col)\n            dfs(m-1, col)\n\n        # Count the remains islands\n        ans = 0\n        for row in range(m):\n            for col in range(n):\n                if grid[row][col] == 1:\n                    ans += 1\n        return ans\n")),(0,o.kt)("h3",{id:"mark-and-query---bfs-timelimit-exceed"},"Mark and Query - BFS (Timelimit Exceed)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from collections import deque\n\n\nclass Solution:\n    def numEnclaves(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n\n        queue = deque()\n\n        for row in range(m):\n            if grid[row][0] == 1:\n                queue.append((row, 0))\n            if grid[row][n-1] == 1:\n                queue.append((row, n-1))\n\n        for col in range(n):\n            if grid[0][col] == 1:\n                queue.append((0, col))\n            if grid[m-1][col] == 1:\n                queue.append((m-1, col))\n\n        while queue:\n            row, col = queue.popleft()\n            grid[row][col] = -1\n\n            for rx, cx in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n                rn, cn = row+rx, col+cx\n                if rn >= 0 and rn < m and cn >= 0 and cn < n and grid[rn][cn] == 1:\n                    queue.append((rn, cn))\n\n        ans = 0\n        for row in range(m):\n            for col in range(n):\n                if grid[row][col] == 1:\n                    ans += 1\n        return ans\n\n")))}m.isMDXComponent=!0}}]);