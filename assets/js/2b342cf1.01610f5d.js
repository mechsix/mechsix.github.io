"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[11788],{19233:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"leetcode/1-500/path_sum_iii","title":"437. Path Sum III","description":"Python","source":"@site/docs/leetcode/1-500/437_path_sum_iii.md","sourceDirName":"leetcode/1-500","slug":"/leetcode/1-500/path_sum_iii","permalink":"/docs/leetcode/1-500/path_sum_iii","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Medium","permalink":"/docs/tags/leetcode-medium"},{"inline":true,"label":"Binary Tree","permalink":"/docs/tags/binary-tree"},{"inline":true,"label":"Prefix Sum","permalink":"/docs/tags/prefix-sum"}],"version":"current","sidebarPosition":437,"frontMatter":{"title":"437. Path Sum III","sidebar_label":"437. Path Sum III","tags":["Leetcode Medium","Binary Tree","Prefix Sum"]},"sidebar":"docSidebar","previous":{"title":"435. Non-overlapping Intervals","permalink":"/docs/leetcode/1-500/non_overlapping_intervals"},"next":{"title":"438. Find All Anagrams in a String","permalink":"/docs/leetcode/1-500/find_all_anagrams_in_a_string"}}');var i=n(74848),o=n(28453);const a={title:"437. Path Sum III",sidebar_label:"437. Path Sum III",tags:["Leetcode Medium","Binary Tree","Prefix Sum"]},s=void 0,l={},d=[{value:"Python",id:"python",level:2},{value:"Preorder with Prefix Sum",id:"preorder-with-prefix-sum",level:3}];function c(e){const t={code:"code",h2:"h2",h3:"h3",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,i.jsx)(t.h3,{id:"preorder-with-prefix-sum",children:"Preorder with Prefix Sum"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"from collections import defaultdict\n\n\nclass Solution:\n    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> int:\n        answer = 0\n        prefix = defaultdict(int)\n\n        def dfs(node, total):\n            if not node:\n                return\n\n            nonlocal answer\n\n            total += node.val\n            if total == targetSum:\n                answer += 1\n\n            answer += prefix[total-targetSum]\n            prefix[total] += 1\n\n            dfs(node.left, total)\n            dfs(node.right, total)\n\n            prefix[total] -= 1\n\n        dfs(root, 0)\n\n        return answer\n"})})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>s});var r=n(96540);const i={},o=r.createContext(i);function a(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);