"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[46764],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),s=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(i.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,g=d["".concat(i,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(g,l(l({ref:t},p),{},{components:n})):r.createElement(g,l({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c[d]="string"==typeof e?e:a,l[1]=c;for(var s=2;s<o;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},18388:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const o={title:"1047. Remove All Adjacent Duplicates In String",sidebar_label:"1047. Remove All Adjacent Duplicates In String",tags:["Leetcode Easy","Stack","Go"]},l=void 0,c={unversionedId:"leetcode/1001-1500/remove_all_adjacent_duplicates_in_string",id:"leetcode/1001-1500/remove_all_adjacent_duplicates_in_string",title:"1047. Remove All Adjacent Duplicates In String",description:"https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string/",source:"@site/docs/leetcode/1001-1500/1047_remove_all_adjacent_duplicates_in_string.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/remove_all_adjacent_duplicates_in_string",permalink:"/docs/leetcode/1001-1500/remove_all_adjacent_duplicates_in_string",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1047_remove_all_adjacent_duplicates_in_string.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Stack",permalink:"/docs/tags/stack"},{label:"Go",permalink:"/docs/tags/go"}],version:"current",sidebarPosition:1047,frontMatter:{title:"1047. Remove All Adjacent Duplicates In String",sidebar_label:"1047. Remove All Adjacent Duplicates In String",tags:["Leetcode Easy","Stack","Go"]},sidebar:"docSidebar",previous:{title:"1046. Last Stone Weight",permalink:"/docs/leetcode/1001-1500/last_stone_weight"},next:{title:"1048. Longest String Chain",permalink:"/docs/leetcode/1001-1500/longest_string_chain"}},i={},s=[{value:"Python",id:"python",level:2},{value:"Go",id:"go",level:2}],p={toc:s},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string/"},"https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string/")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def removeDuplicates(self, s: str) -> str:\n        stack = []\n\n        for letter in s:\n            if stack and letter == stack[-1]:\n                stack.pop()\n            else:\n                stack.append(letter)\n        return ''.join(stack)\n")),(0,a.kt)("h2",{id:"go"},"Go"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func removeDuplicates(s string) string {\n    var stack []rune\n\n    for _, letter := range s {\n        if len(stack) > 0 && letter == stack[len(stack)-1] {\n            stack = stack[:len(stack)-1]\n        } else {\n            stack = append(stack, letter)\n        }\n    }\n\n    return string(stack)\n}\n")))}u.isMDXComponent=!0}}]);