"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[76115],{16393:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"leetcode/501-1000/network_delay_time","title":"743. Network Delay Time","description":"https://leetcode.com/problems/network-delay-time/","source":"@site/docs/leetcode/501-1000/743_network_delay_time.md","sourceDirName":"leetcode/501-1000","slug":"/leetcode/501-1000/network_delay_time","permalink":"/docs/leetcode/501-1000/network_delay_time","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Medium","permalink":"/docs/tags/leetcode-medium"},{"inline":true,"label":"Graph","permalink":"/docs/tags/graph"},{"inline":true,"label":"DFS","permalink":"/docs/tags/dfs"},{"inline":true,"label":"Dijkstra Algorithm","permalink":"/docs/tags/dijkstra-algorithm"},{"inline":true,"label":"TODO","permalink":"/docs/tags/todo"}],"version":"current","sidebarPosition":743,"frontMatter":{"title":"743. Network Delay Time","sidebar_label":"743. Network Delay Time","tags":["Leetcode Medium","Graph","DFS","Dijkstra Algorithm","TODO"]},"sidebar":"docSidebar","previous":{"title":"740. Delete and Earn","permalink":"/docs/leetcode/501-1000/delete_and_earn"},"next":{"title":"744. Find Smallest Letter Greater Than Target","permalink":"/docs/leetcode/501-1000/find_smallest_letter_greater_than_target"}}');var i=n(74848),a=n(28453);const o={title:"743. Network Delay Time",sidebar_label:"743. Network Delay Time",tags:["Leetcode Medium","Graph","DFS","Dijkstra Algorithm","TODO"]},l=void 0,s={},c=[{value:"Python",id:"python",level:2},{value:"DFS",id:"dfs",level:3},{value:"Dijkstra Algorithm",id:"dijkstra-algorithm",level:3}];function d(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://leetcode.com/problems/network-delay-time/",children:"https://leetcode.com/problems/network-delay-time/"})}),"\n",(0,i.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,i.jsx)(t.h3,{id:"dfs",children:"DFS"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"from math import inf\n\n\nclass Solution:\n    def networkDelayTime(self, times: List[List[int]], n: int, k: int) -> int:\n        reach_times = [inf for i in range(n)]\n        reach_times[k-1] = 0\n\n        # Convert the graph from a list into dict, for better matching query later\n        mapper = dict()\n        for source, target, latency in times:\n            if source not in mapper:\n                mapper[source] = dict()\n            mapper[source][target] = min(mapper[source].get(target, inf), latency)\n\n        # DFS, or call it backtracking, go through all possible edges\n        def dfs(source: int, accu: int):\n            if source not in mapper:\n                return\n\n            for target in mapper[source]:\n                new_accu = accu + mapper[source][target]\n\n                # Only go deeper while the known cost of path is higher\n                if reach_times[target-1] > new_accu:\n                    reach_times[target-1] = new_accu\n                    dfs(target, new_accu)\n\n        dfs(k, 0)\n\n        max_latency = max(reach_times)\n        return max_latency if max_latency < inf else -1\n"})}),"\n",(0,i.jsx)(t.h3,{id:"dijkstra-algorithm",children:"Dijkstra Algorithm"}),"\n",(0,i.jsx)(t.p,{children:"(TODO)"})]})}function m(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>l});var r=n(96540);const i={},a=r.createContext(i);function o(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);