"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[5864],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return d}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),u=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},s=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),f=u(r),d=o,y=f["".concat(c,".").concat(d)]||f[d]||p[d]||i;return r?n.createElement(y,a(a({ref:t},s),{},{components:r})):n.createElement(y,a({ref:t},s))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=f;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var u=2;u<i;u++)a[u]=r[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},30831:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return s},default:function(){return f}});var n=r(87462),o=r(63366),i=(r(67294),r(3905)),a=["components"],l={title:"563. Binary Tree Tilt",sidebar_label:"563. Binary Tree Tilt",tags:["Binary Tree","Leetcode Easy"]},c=void 0,u={unversionedId:"leetcode/501-1000/binary_tree_tilt",id:"leetcode/501-1000/binary_tree_tilt",title:"563. Binary Tree Tilt",description:"Python",source:"@site/docs/leetcode/501-1000/563_binary_tree_tilt.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/binary_tree_tilt",permalink:"/docs/leetcode/501-1000/binary_tree_tilt",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/563_binary_tree_tilt.md",tags:[{label:"Binary Tree",permalink:"/docs/tags/binary-tree"},{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"}],version:"current",sidebarPosition:563,frontMatter:{title:"563. Binary Tree Tilt",sidebar_label:"563. Binary Tree Tilt",tags:["Binary Tree","Leetcode Easy"]},sidebar:"docSidebar",previous:{title:"560. Subarray Sum Equals K",permalink:"/docs/leetcode/501-1000/subarray_sum_equals_k"},next:{title:"566. Reshape the Matrix",permalink:"/docs/leetcode/501-1000/reshape_matrix"}},s=[{value:"Python",id:"python",children:[],level:3}],p={toc:s};function f(e){var t=e.components,r=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"python"},"Python"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def __init__(self):\n        self.total_tilt = 0\n\n    def findTilt(self, root: Optional[TreeNode]) -> int:\n        self._travel(0, root)\n        return self.total_tilt\n\n    def _travel(self, total: int, node) -> tuple:\n        if not node:\n            return 0\n\n        left_total = self._travel(0, node.left)\n        right_total = self._travel(0, node.right)\n\n        self.total_tilt += abs(left_total - right_total)\n\n        return node.val + left_total + right_total\n")))}f.isMDXComponent=!0}}]);