"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[151],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return f}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function d(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),a=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):d(d({},n),e)),t},s=function(e){var n=a(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=a(t),f=o,m=p["".concat(l,".").concat(f)]||p[f]||u[f]||i;return t?r.createElement(m,d(d({ref:n},s),{},{components:t})):r.createElement(m,d({ref:n},s))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,d=new Array(i);d[0]=p;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,d[1]=c;for(var a=2;a<i;a++)d[a]=t[a];return r.createElement.apply(null,d)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},40583:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return a},toc:function(){return s},default:function(){return p}});var r=t(87462),o=t(63366),i=(t(67294),t(3905)),d=["components"],c={title:"328. Odd Even Linked List",sidebar_label:"328. Odd Even Linked List",tags:["Leetcode Medium","Linked List"]},l=void 0,a={unversionedId:"leetcode/odd_even_linklist",id:"leetcode/odd_even_linklist",title:"328. Odd Even Linked List",description:"Python",source:"@site/docs/leetcode/328_odd_even_linklist.md",sourceDirName:"leetcode",slug:"/leetcode/odd_even_linklist",permalink:"/docs/leetcode/odd_even_linklist",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/328_odd_even_linklist.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Linked List",permalink:"/docs/tags/linked-list"}],version:"current",sidebarPosition:328,frontMatter:{title:"328. Odd Even Linked List",sidebar_label:"328. Odd Even Linked List",tags:["Leetcode Medium","Linked List"]},sidebar:"docSidebar",previous:{title:"283. Move Zeroes",permalink:"/docs/leetcode/move_zeros"},next:{title:"382. Linked List Random Node",permalink:"/docs/leetcode/linked_list_rand_node"}},s=[{value:"Python",id:"python",children:[],level:2}],u={toc:s};function p(e){var n=e.components,t=(0,o.Z)(e,d);return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def oddEvenList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        is_odd = True\n\n        odd_head = ListNode(None, None)\n        odd_node = odd_head\n        even_head = ListNode(None, None)\n        even_node = even_head\n\n        current = head\n\n        while current:\n            if is_odd:\n                odd_node.next = current\n                odd_node = current\n            else:\n                even_node.next = current\n                even_node = current\n\n            current = current.next\n            is_odd = not is_odd\n\n        even_node.next = None\n        odd_node.next = even_head.next\n\n        return odd_head.next\n")))}p.isMDXComponent=!0}}]);