"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[32435],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>f});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),u=l(r),m=o,f=u["".concat(c,".").concat(m)]||u[m]||p[m]||s;return r?n.createElement(f,i(i({ref:t},d),{},{components:r})):n.createElement(f,i({ref:t},d))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=r.length,i=new Array(s);i[0]=m;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a[u]="string"==typeof e?e:o,i[1]=a;for(var l=2;l<s;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},12502:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var n=r(87462),o=(r(67294),r(3905));const s={title:"804. Unique Morse Code Words",sidebar_label:"804. Unique Morse Code Words",tags:["Leetcode Easy","Hash"]},i=void 0,a={unversionedId:"leetcode/501-1000/unique_morse_code_words",id:"leetcode/501-1000/unique_morse_code_words",title:"804. Unique Morse Code Words",description:"https://leetcode.com/problems/unique-morse-code-words/",source:"@site/docs/leetcode/501-1000/804_unique_morse_code_words.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/unique_morse_code_words",permalink:"/docs/leetcode/501-1000/unique_morse_code_words",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/804_unique_morse_code_words.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Hash",permalink:"/docs/tags/hash"}],version:"current",sidebarPosition:804,frontMatter:{title:"804. Unique Morse Code Words",sidebar_label:"804. Unique Morse Code Words",tags:["Leetcode Easy","Hash"]},sidebar:"docSidebar",previous:{title:"802. Find Eventual Safe States",permalink:"/docs/leetcode/501-1000/find_eventual_safe_states"},next:{title:"814. Binary Tree Pruning",permalink:"/docs/leetcode/501-1000/binary_tree_pruning"}},c={},l=[{value:"Python",id:"python",level:2}],d={toc:l},u="wrapper";function p(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/unique-morse-code-words/"},"https://leetcode.com/problems/unique-morse-code-words/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Mapped them and remove duplicate with ",(0,o.kt)("inlineCode",{parentName:"li"},"set"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from string import ascii_lowercase\n\n\nclass Solution:\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\n        mapper = {\n            letter: morse for letter, morse in zip(\n                ascii_lowercase,\n                [\n                    ".-","-...","-.-.","-..",".",\n                    "..-.","--.","....","..",".---",\n                    "-.-",".-..","--","-.","---",\n                    ".--.","--.-",".-.","...","-",\n                    "..-","...-",".--","-..-","-.--",\n                    "--.."\n                ]\n            )\n        }\n\n        morses = set([\'\'.join([mapper[letter] for letter in word]) for word in words])\n        return len(morses)\n')))}p.isMDXComponent=!0}}]);