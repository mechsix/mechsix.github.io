"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[30378],{88:(e,r,o)=>{o.r(r),o.d(r,{assets:()=>a,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"leetcode/1-500/construct_bin_tree_from_inorder_postorder_traversal","title":"106. Construct Binary Tree from Inorder and Postorder Traversal","description":"https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal","source":"@site/docs/leetcode/1-500/106_construct_bin_tree_from_inorder_postorder_traversal.md","sourceDirName":"leetcode/1-500","slug":"/leetcode/1-500/construct_bin_tree_from_inorder_postorder_traversal","permalink":"/docs/leetcode/1-500/construct_bin_tree_from_inorder_postorder_traversal","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Binary Tree","permalink":"/docs/tags/binary-tree"},{"inline":true,"label":"Leetcode Medium","permalink":"/docs/tags/leetcode-medium"}],"version":"current","sidebarPosition":106,"frontMatter":{"title":"106. Construct Binary Tree from Inorder and Postorder Traversal","sidebar_label":"106. Construct Binary Tree from Inorder and Postorder Traversal","tags":["Binary Tree","Leetcode Medium"]},"sidebar":"docSidebar","previous":{"title":"105. Construct Binary Tree from Preorder and Inorder Traversal","permalink":"/docs/leetcode/1-500/binary_tree_preorder_inorder"},"next":{"title":"108. Convert Sorted Array to Binary Search Tree","permalink":"/docs/leetcode/1-500/convert_sorted_array_to_bst"}}');var n=o(74848),d=o(28453);const s={title:"106. Construct Binary Tree from Inorder and Postorder Traversal",sidebar_label:"106. Construct Binary Tree from Inorder and Postorder Traversal",tags:["Binary Tree","Leetcode Medium"]},i=void 0,a={},l=[{value:"Python",id:"python",level:2},{value:"Study only try",id:"study-only-try",level:3},{value:"Second try",id:"second-try",level:3}];function c(e){const r={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.p,{children:(0,n.jsx)(r.a,{href:"https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal",children:"https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal"})}),"\n",(0,n.jsx)(r.h2,{id:"python",children:"Python"}),"\n",(0,n.jsx)(r.h3,{id:"study-only-try",children:"Study only try"}),"\n",(0,n.jsxs)(r.p,{children:["Not self solution, the answer from ",(0,n.jsx)(r.a,{href:"https://www.itread01.com/content/1544514664.html",children:"here"})]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'class Solution:\n    def buildTree(self, inorder, postorder):\n        """\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        """\n        if not inorder or not postorder:\n            return None\n        root = postorder[-1]\n        index = inorder.index(root)\n        ret = TreeNode(postorder.pop())\n        ret.right = self.buildTree(inorder[index+1:], postorder)\n        ret.left = self.buildTree(inorder[:index], postorder)\n        return ret\n'})}),"\n",(0,n.jsx)(r.h3,{id:"second-try",children:"Second try"}),"\n",(0,n.jsx)(r.p,{children:"Solution which more Pythonic"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:"class Solution:\n    def buildTree(self, inorder: List[int], postorder: List[int]) -> Optional[TreeNode]:\n        if not inorder or not postorder:\n            return None\n\n        root_val = postorder[-1]\n        root_index = inorder.index(root_val)\n\n        return TreeNode(\n            val=root_val,\n            left=self.buildTree(\n                inorder[:root_index],\n                postorder[:root_index]\n            ),\n            right=self.buildTree(\n                inorder[root_index+1:],\n                postorder[root_index:-1]\n            )\n        )\n"})})]})}function u(e={}){const{wrapper:r}={...(0,d.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},28453:(e,r,o)=>{o.d(r,{R:()=>s,x:()=>i});var t=o(96540);const n={},d=t.createContext(n);function s(e){const r=t.useContext(d);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),t.createElement(d.Provider,{value:r},e.children)}}}]);