"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[87563],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return f}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(t),d=a,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||o;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c[u]="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},31932:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return i},default:function(){return u},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return l}});var r=t(83117),a=(t(67294),t(3905));const o={title:"2306. Naming a Company",sidebar_label:"2306. Naming a Company",tags:["Leetcode Hard","Hash"]},i=void 0,c={unversionedId:"leetcode/2000/naming_a_company",id:"leetcode/2000/naming_a_company",title:"2306. Naming a Company",description:"https://leetcode.com/problems/naming-a-company/",source:"@site/docs/leetcode/2000/2306_naming_a_company.md",sourceDirName:"leetcode/2000",slug:"/leetcode/2000/naming_a_company",permalink:"/docs/leetcode/2000/naming_a_company",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/2000/2306_naming_a_company.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"Hash",permalink:"/docs/tags/hash"}],version:"current",sidebarPosition:2306,frontMatter:{title:"2306. Naming a Company",sidebar_label:"2306. Naming a Company",tags:["Leetcode Hard","Hash"]},sidebar:"docSidebar",previous:{title:"2246. Longest Path With Different Adjacent Characters",permalink:"/docs/leetcode/2000/longest_path_with_different_adjacent_chars"},next:{title:"2300. Successful Pairs of Spells and Potions",permalink:"/docs/leetcode/2000/successful_pairs_of_spells_and_potions"}},s={},l=[{value:"Python",id:"python",level:2}],p={toc:l};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/naming-a-company/"},"https://leetcode.com/problems/naming-a-company/")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from collections import defaultdict\nfrom string import ascii_lowercase\n\n\nclass Solution:\n    def distinctNames(self, ideas: List[str]) -> int:\n        mapper = defaultdict(set)\n        for idea in ideas:\n            mapper[idea[0]].add(idea[1:])\n\n        ans = 0\n        for i in range(25):\n            for j in range(i+1, 26):\n                prefix1 = ascii_lowercase[i]\n                prefix2 = ascii_lowercase[j]\n\n                mutuals = len(mapper[prefix1] & mapper[prefix2])\n\n                ans += 2 * (len(mapper[prefix1]) - mutuals) * (len(mapper[prefix2]) - mutuals)\n\n        return ans\n")))}u.isMDXComponent=!0}}]);