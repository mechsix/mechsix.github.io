"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[18770],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return b}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),d=u(r),f=o,b=d["".concat(s,".").concat(f)]||d[f]||p[f]||i;return r?n.createElement(b,l(l({ref:t},c),{},{components:r})):n.createElement(b,l({ref:t},c))}));function b(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,l=new Array(i);l[0]=f;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[d]="string"==typeof e?e:o,l[1]=a;for(var u=2;u<i;u++)l[u]=r[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},59795:function(e,t,r){r.r(t),r.d(t,{assets:function(){return s},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return i},metadata:function(){return a},toc:function(){return u}});var n=r(83117),o=(r(67294),r(3905));const i={title:"652. Find Duplicate Subtrees",sidebar_label:"652. Find Duplicate Subtrees",tags:["Binary Tree","Leetcode Medium","Leetcode Optimable"]},l=void 0,a={unversionedId:"leetcode/501-1000/find_duplicate_subtrees",id:"leetcode/501-1000/find_duplicate_subtrees",title:"652. Find Duplicate Subtrees",description:"Python",source:"@site/docs/leetcode/501-1000/652_find_duplicate_subtrees.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/find_duplicate_subtrees",permalink:"/docs/leetcode/501-1000/find_duplicate_subtrees",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/652_find_duplicate_subtrees.md",tags:[{label:"Binary Tree",permalink:"/docs/tags/binary-tree"},{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Leetcode Optimable",permalink:"/docs/tags/leetcode-optimable"}],version:"current",sidebarPosition:652,frontMatter:{title:"652. Find Duplicate Subtrees",sidebar_label:"652. Find Duplicate Subtrees",tags:["Binary Tree","Leetcode Medium","Leetcode Optimable"]},sidebar:"docSidebar",previous:{title:"647. Palindromic Substrings",permalink:"/docs/leetcode/501-1000/palindromic_substrings"},next:{title:"653. Two Sum IV - Input is a BST",permalink:"/docs/leetcode/501-1000/two_sum_4_bst_input"}},s={},u=[{value:"Python",id:"python",level:2}],c={toc:u};function d(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def __init__(self):\n        self.seem = set()\n        self.result = []\n\n    def findDuplicateSubtrees(self, root: Optional[TreeNode]) -> List[Optional[TreeNode]]:\n        self.seem = set()\n        self.result = dict()\n\n        self.travel(root)\n\n        return self.result.values()\n\n    def travel(self, node: Optional[TreeNode]):\n        if not node:\n            return\n\n        preorder_travel = tuple(self.get_subtree(node, []))\n        if preorder_travel in self.seem:\n            self.result[preorder_travel] = node # Prevent duplicate in result\n        else:\n            self.seem.add(preorder_travel)\n\n        self.travel(node.left)\n        self.travel(node.right)\n\n    def get_subtree(self, node:  Optional[TreeNode], preorder: List):\n        if not node:\n            preorder.append(None)\n            return\n\n        preorder.append(node.val)\n        self.get_subtree(node.left, preorder)\n        self.get_subtree(node.right, preorder)\n        return preorder\n")))}d.isMDXComponent=!0}}]);