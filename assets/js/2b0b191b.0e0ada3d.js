"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[9475],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return f}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var a=r.createContext({}),s=function(e){var t=r.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(a.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=s(n),f=o,m=u["".concat(a,".").concat(f)]||u[f]||p[f]||i;return n?r.createElement(m,l(l({ref:t},d),{},{components:n})):r.createElement(m,l({ref:t},d))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,l=new Array(i);l[0]=u;var c={};for(var a in t)hasOwnProperty.call(t,a)&&(c[a]=t[a]);c.originalType=e,c.mdxType="string"==typeof e?e:o,l[1]=c;for(var s=2;s<i;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},53367:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return a},metadata:function(){return s},toc:function(){return d},default:function(){return u}});var r=n(87462),o=n(63366),i=(n(67294),n(3905)),l=["components"],c={title:"142. Linked List Cycle II",slidebar_label:"142. Linked List Cycle II",tags:["Leetcode Medium","Linked List","Floyd's Algorithm","Two Pointer"]},a=void 0,s={unversionedId:"leetcode/1-500/linked_list_cycle_ii",id:"leetcode/1-500/linked_list_cycle_ii",title:"142. Linked List Cycle II",description:"https://leetcode.com/problems/linked-list-cycle-ii",source:"@site/docs/leetcode/1-500/142_linked_list_cycle_ii.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/linked_list_cycle_ii",permalink:"/docs/leetcode/1-500/linked_list_cycle_ii",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/142_linked_list_cycle_ii.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Linked List",permalink:"/docs/tags/linked-list"},{label:"Floyd's Algorithm",permalink:"/docs/tags/floyds-algorithm"},{label:"Two Pointer",permalink:"/docs/tags/two-pointer"}],version:"current",sidebarPosition:142,frontMatter:{title:"142. Linked List Cycle II",slidebar_label:"142. Linked List Cycle II",tags:["Leetcode Medium","Linked List","Floyd's Algorithm","Two Pointer"]},sidebar:"docSidebar",previous:{title:"141. Linked List Cycle",permalink:"/docs/leetcode/1-500/linked_list_cycle"},next:{title:"143. Reorder List",permalink:"/docs/leetcode/1-500/reorder_list"}},d=[{value:"Python",id:"python",children:[{value:"While Loop",id:"while-loop",children:[],level:3},{value:"Two Pointer",id:"two-pointer",children:[],level:3}],level:2}],p={toc:d};function u(e){var t=e.components,n=(0,o.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/linked-list-cycle-ii"},"https://leetcode.com/problems/linked-list-cycle-ii")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"while-loop"},"While Loop"),(0,i.kt)("p",null,"Space O(N)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        memory = set()\n\n        node = head\n        n = 0\n\n        while node and id(node) not in memory:\n            memory.add(id(node))\n            node = node.next\n            n += 1\n\n        if not node:\n            return\n\n        return node\n")),(0,i.kt)("h3",{id:"two-pointer"},"Two Pointer"),(0,i.kt)("p",null,"Floyd's Tortoise and Hare Algorithm"),(0,i.kt)("p",null,"Solution from ",(0,i.kt)("a",{parentName:"p",href:"https://englishandcoding.pixnet.net/blog/post/31525831-leetcode-%E7%AD%86%E8%A8%98%EF%BC%8D142.-linked-list-cycle-ii"},"here")),(0,i.kt)("p",null,"Space O(1)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        if not head or not head.next:\n            return\n        first = True\n\n        slow, fast = head, head\n\n        while slow != fast or first:\n            first = False\n            if not fast or not fast.next:\n                return\n            slow = slow.next\n            fast = fast.next.next\n\n\n        slow = head\n        while slow != fast:\n            slow = slow.next\n            fast = fast.next\n        return fast\n")))}u.isMDXComponent=!0}}]);