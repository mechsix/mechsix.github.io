"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[42e3],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>d});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),m=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},s=function(e){var t=m(e.components);return n.createElement(i.Provider,{value:t},e.children)},l="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),l=m(r),u=a,d=l["".concat(i,".").concat(u)]||l[u]||f[u]||o;return r?n.createElement(d,c(c({ref:t},s),{},{components:r})):n.createElement(d,c({ref:t},s))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,c=new Array(o);c[0]=u;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p[l]="string"==typeof e?e:a,c[1]=p;for(var m=2;m<o;m++)c[m]=r[m];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},66344:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>f,frontMatter:()=>o,metadata:()=>p,toc:()=>m});var n=r(87462),a=(r(67294),r(3905));const o={title:"1383. Maximum Performance of a Team",sidebar_label:"1383. Maximum Performance of a Team",tags:["Leetcode Hard","Heap"]},c=void 0,p={unversionedId:"leetcode/1001-1500/max_performance_of_team",id:"leetcode/1001-1500/max_performance_of_team",title:"1383. Maximum Performance of a Team",description:"https://leetcode.com/problems/maximum-performance-of-a-team/",source:"@site/docs/leetcode/1001-1500/1383_max_performance_of_team.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/max_performance_of_team",permalink:"/docs/leetcode/1001-1500/max_performance_of_team",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1383_max_performance_of_team.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"Heap",permalink:"/docs/tags/heap"}],version:"current",sidebarPosition:1383,frontMatter:{title:"1383. Maximum Performance of a Team",sidebar_label:"1383. Maximum Performance of a Team",tags:["Leetcode Hard","Heap"]},sidebar:"docSidebar",previous:{title:"1382. Balance a Binary Search Tree",permalink:"/docs/leetcode/1001-1500/balance_a_bst"},next:{title:"1396. Design Underground System",permalink:"/docs/leetcode/1001-1500/design_underground_system"}},i={},m=[{value:"Python",id:"python",level:2}],s={toc:m},l="wrapper";function f(e){let{components:t,...r}=e;return(0,a.kt)(l,(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/maximum-performance-of-a-team/"},"https://leetcode.com/problems/maximum-performance-of-a-team/")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from heapq import heappush, heappop\n\n\nclass Solution:\n    def maxPerformance(self, n: int, speeds: List[int], efficiencies: List[int], k: int) -> int:\n        mapper = [pair for pair in zip(efficiencies, speeds)]\n        mapper.sort(reverse=True)\n\n        result, speed = 0, 0\n        heap = []\n\n        for eff, spd in mapper:\n            if len(heap) == k:\n                speed -= heappop(heap)\n            speed += spd\n            heappush(heap, spd)\n            result = max(result, eff*speed)\n\n        return result % (10**9+7)\n")))}f.isMDXComponent=!0}}]);