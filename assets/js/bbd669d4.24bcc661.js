"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[777],{67016:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return u},contentTitle:function(){return c},metadata:function(){return r},toc:function(){return i},default:function(){return p}});var o=t(87462),a=t(63366),s=(t(67294),t(3905)),l=["components"],u={},c=void 0,r={type:"mdx",permalink:"/react/use-state",source:"@site/src/pages/react/use-state.md"},i=[{value:"Multiple Set State",id:"multiple-set-state",children:[]},{value:"useState on Object",id:"usestate-on-object",children:[]},{value:"useMemo &amp; useCallback",id:"usememo--usecallback",children:[]}],m={toc:i};function p(e){var n=e.components,t=(0,a.Z)(e,l);return(0,s.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"multiple-set-state"},"Multiple Set State"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function Example() {\n  const [moo, setMoo] = useState(0);\n  const [foo, setFoo] = useState(0);\n\n  const handleClick = () => {\n    setMoo(moo + 1)\n    setMoo(moo + 1) // ??!!\n    \n    setFoo(foo + 1)\n  }\n\n  return (\n    <>\n      <p>\n        <button onClick={handleClick}>Click Me</button>\n      </p>\n      <p>Moo: {moo}</p>\n      <p>Foo: {foo}</p>\n    </>\n  );\n}\n")),(0,s.kt)("h2",{id:"usestate-on-object"},"useState on Object"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function Example() {\n  const [counter, setCounter] = useState(0);\n  const [animal, setAnimal] = useState('dog');\n\n  const obj = {\n    type: (animal === 'dog') ? 'Mammals' : 'Bird',\n    move: (animal === 'dog') ? 'walk' : 'fly'\n  }\n  \n  // const obj = useMemo(() => ({\n  //   type: (animal === 'dog') ? 'Mammals' : 'Bird',\n  //   move: (animal === 'dog') ? 'walk' : 'fly'\n  // }), [animal])\n\n  const handleIncrease = () => {\n    setCounter(counter => counter + 1)\n  }\n\n  const handleChange = () => {\n    if (animal === 'dog') {\n      setAnimal('duck')\n    } else {\n      setAnimal('dog')\n    }\n  }\n  \n  useEffect(() => {\n    console.log('Obj changed', obj)\n  }, [obj])\n\n  return (\n    <>\n      <p>\n        <button onClick={handleIncrease}>Increase</button>\n        <button onClick={handleChange}>Change</button>\n      </p>\n      <p>Counter: {counter}</p>\n      <p>{obj.type} can {obj.move}</p>\n    </>\n  );\n}\n")),(0,s.kt)("h2",{id:"usememo--usecallback"},"useMemo & useCallback"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-reference.html#usememo"},"useMemo")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"useCallback(fn, [dep])\nuseMemo(() => fn, [deps])\n")))}p.isMDXComponent=!0}}]);