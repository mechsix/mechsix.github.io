"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[32435],{3905:function(e,t,r){r.d(t,{Zo:function(){return l},kt:function(){return f}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var a=n.createContext({}),u=function(e){var t=n.useContext(a),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},l=function(e){var t=u(e.components);return n.createElement(a.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=u(r),m=o,f=d["".concat(a,".").concat(m)]||d[m]||p[m]||i;return r?n.createElement(f,s(s({ref:t},l),{},{components:r})):n.createElement(f,s({ref:t},l))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,s=new Array(i);s[0]=m;var c={};for(var a in t)hasOwnProperty.call(t,a)&&(c[a]=t[a]);c.originalType=e,c[d]="string"==typeof e?e:o,s[1]=c;for(var u=2;u<i;u++)s[u]=r[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},12502:function(e,t,r){r.r(t),r.d(t,{assets:function(){return a},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return u}});var n=r(83117),o=(r(67294),r(3905));const i={title:"804. Unique Morse Code Words",sidebar_label:"804. Unique Morse Code Words",tags:["Leetcode Easy","Hash"]},s=void 0,c={unversionedId:"leetcode/501-1000/unique_morse_code_words",id:"leetcode/501-1000/unique_morse_code_words",title:"804. Unique Morse Code Words",description:"https://leetcode.com/problems/unique-morse-code-words/",source:"@site/docs/leetcode/501-1000/804_unique_morse_code_words.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/unique_morse_code_words",permalink:"/docs/leetcode/501-1000/unique_morse_code_words",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/804_unique_morse_code_words.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Hash",permalink:"/docs/tags/hash"}],version:"current",sidebarPosition:804,frontMatter:{title:"804. Unique Morse Code Words",sidebar_label:"804. Unique Morse Code Words",tags:["Leetcode Easy","Hash"]},sidebar:"docSidebar",previous:{title:"802. Find Eventual Safe States",permalink:"/docs/leetcode/501-1000/find_eventual_safe_states"},next:{title:"814. Binary Tree Pruning",permalink:"/docs/leetcode/501-1000/binary_tree_pruning"}},a={},u=[{value:"Python",id:"python",level:2}],l={toc:u};function d(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/unique-morse-code-words/"},"https://leetcode.com/problems/unique-morse-code-words/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Mapped them and remove duplicate with ",(0,o.kt)("inlineCode",{parentName:"li"},"set"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from string import ascii_lowercase\n\n\nclass Solution:\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\n        mapper = {\n            letter: morse for letter, morse in zip(\n                ascii_lowercase,\n                [\n                    ".-","-...","-.-.","-..",".",\n                    "..-.","--.","....","..",".---",\n                    "-.-",".-..","--","-.","---",\n                    ".--.","--.-",".-.","...","-",\n                    "..-","...-",".--","-..-","-.--",\n                    "--.."\n                ]\n            )\n        }\n\n        morses = set([\'\'.join([mapper[letter] for letter in word]) for word in words])\n        return len(morses)\n')))}d.isMDXComponent=!0}}]);