"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[84050],{3905:function(e,r,t){t.d(r,{Zo:function(){return u},kt:function(){return m}});var n=t(67294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function c(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function a(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),l=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):c(c({},r),e)),t},u=function(e){var r=l(e.components);return n.createElement(s.Provider,{value:r},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=l(t),f=o,m=p["".concat(s,".").concat(f)]||p[f]||d[f]||i;return t?n.createElement(m,c(c({ref:r},u),{},{components:t})):n.createElement(m,c({ref:r},u))}));function m(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=t.length,c=new Array(i);c[0]=f;var a={};for(var s in r)hasOwnProperty.call(r,s)&&(a[s]=r[s]);a.originalType=e,a[p]="string"==typeof e?e:o,c[1]=a;for(var l=2;l<i;l++)c[l]=t[l];return n.createElement.apply(null,c)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},30028:function(e,r,t){t.r(r),t.d(r,{assets:function(){return s},contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return i},metadata:function(){return a},toc:function(){return l}});var n=t(83117),o=(t(67294),t(3905));const i={title:"606. Construct String from Binary Tree",sidebar_label:"606. Construct String from Binary Tree",tags:["Leetcode Easy","Binary Tree"]},c=void 0,a={unversionedId:"leetcode/501-1000/construct_string_from_binary_tree",id:"leetcode/501-1000/construct_string_from_binary_tree",title:"606. Construct String from Binary Tree",description:"https://leetcode.com/problems/construct-string-from-binary-tree/",source:"@site/docs/leetcode/501-1000/606_construct_string_from_binary_tree.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/construct_string_from_binary_tree",permalink:"/docs/leetcode/501-1000/construct_string_from_binary_tree",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/606_construct_string_from_binary_tree.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"}],version:"current",sidebarPosition:606,frontMatter:{title:"606. Construct String from Binary Tree",sidebar_label:"606. Construct String from Binary Tree",tags:["Leetcode Easy","Binary Tree"]},sidebar:"docSidebar",previous:{title:"605. Can Place Flowers",permalink:"/docs/leetcode/501-1000/place_flowers"},next:{title:"609. Find Duplicate File in System",permalink:"/docs/leetcode/501-1000/find_duplicate_file_in_system"}},s={},l=[{value:"Python",id:"python",level:2},{value:"Recursion",id:"recursion",level:2}],u={toc:l};function p(e){let{components:r,...t}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/construct-string-from-binary-tree/"},"https://leetcode.com/problems/construct-string-from-binary-tree/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h2",{id:"recursion"},"Recursion"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def tree2str(self, root: Optional[TreeNode]) -> str:\n\n        def preorder(node, result):\n            if not node:\n                return\n\n            result.append(str(node.val))\n\n            if node.left:\n                result.append('(')\n                preorder(node.left, result)\n                result.append(')')\n            else:\n                if node.right:\n                    result.append('()')\n            if node.right:\n                result.append('(')\n                preorder(node.right, result)\n                result.append(')')\n\n        result = []\n        preorder(root, result)\n        return ''.join(result)\n")))}p.isMDXComponent=!0}}]);