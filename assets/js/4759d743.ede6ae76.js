"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[69462],{39337:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"leetcode/1-500/binary_tree_vertical_order_traversal","title":"314. Binary Tree Vertical Order Traversal","description":"https://leetcode.com/problems/binary-tree-vertical-order-traversal/","source":"@site/docs/leetcode/1-500/314_binary_tree_vertical_order_traversal.md","sourceDirName":"leetcode/1-500","slug":"/leetcode/1-500/binary_tree_vertical_order_traversal","permalink":"/docs/leetcode/1-500/binary_tree_vertical_order_traversal","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Medium","permalink":"/docs/tags/leetcode-medium"},{"inline":true,"label":"Binary Tree","permalink":"/docs/tags/binary-tree"},{"inline":true,"label":"BFS","permalink":"/docs/tags/bfs"}],"version":"current","sidebarPosition":314,"frontMatter":{"title":"314. Binary Tree Vertical Order Traversal","sidebar_label":"314. Binary Tree Vertical Order Traversal","tags":["Leetcode Medium","Binary Tree","BFS"]},"sidebar":"docSidebar","previous":{"title":"307. Range Sum Query - Mutable","permalink":"/docs/leetcode/1-500/range_sum_query"},"next":{"title":"315. Count of Smaller Numbers After Self","permalink":"/docs/leetcode/1-500/count_of_smaller_numbers_after_self"}}');var a=n(74848),i=n(28453);const o={title:"314. Binary Tree Vertical Order Traversal",sidebar_label:"314. Binary Tree Vertical Order Traversal",tags:["Leetcode Medium","Binary Tree","BFS"]},l=void 0,s={},d=[{value:"Python",id:"python",level:2},{value:"Javascript",id:"javascript",level:2}];function c(e){const r={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.p,{children:(0,a.jsx)(r.a,{href:"https://leetcode.com/problems/binary-tree-vertical-order-traversal/",children:"https://leetcode.com/problems/binary-tree-vertical-order-traversal/"})}),"\n",(0,a.jsx)(r.h2,{id:"python",children:"Python"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-python",children:"from collections import deque, defaultdict\n\n\nclass Solution:\n    def verticalOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        mapper = defaultdict(list)\n        queue = deque([(root, 0)])\n\n        while queue:\n            node, key = queue.popleft()\n\n            if node:\n                mapper[key].append(node.val)\n                queue.append((node.left, key-1))\n                queue.append((node.right, key+1))\n\n        return [mapper[key] for key in sorted(mapper.keys())]\n"})}),"\n",(0,a.jsx)(r.h2,{id:"javascript",children:"Javascript"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-javascript",children:"var verticalOrder = function(root) {\n    const queue = [];\n    const res = {};\n    let min = Infinity;\n\n    if (root) queue.push([0, root]);\n    while (queue.length) {\n        const [idx, node] = queue.shift();\n\n        min = Math.min(idx, min);\n\n        if (res[idx]) res[idx].push(node.val);\n        else res[idx] = [node.val];\n\n        //console.log(idx, node.val);\n        if (node.left) queue.push([idx - 1, node.left]);\n        if (node.right) queue.push([idx + 1, node.right]);\n    }\n\n    const ary = [];\n    while (res[min] !== undefined) {\n        ary.push(res[min]);\n        min++;\n    }\n    return ary;\n};\n"})})]})}function u(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>l});var t=n(96540);const a={},i=t.createContext(a);function o(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);