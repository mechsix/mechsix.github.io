"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[8306],{3905:function(e,n,r){r.d(n,{Zo:function(){return l},kt:function(){return m}});var t=r(67294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function c(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=t.createContext({}),u=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},l=function(e){var n=u(e.components);return t.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=u(r),m=o,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||i;return r?t.createElement(f,a(a({ref:n},l),{},{components:r})):t.createElement(f,a({ref:n},l))}));function m(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=p;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var u=2;u<i;u++)a[u]=r[u];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},60407:function(e,n,r){r.r(n),r.d(n,{contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return c},metadata:function(){return u},toc:function(){return l}});var t=r(87462),o=r(63366),i=(r(67294),r(3905)),a=["components"],c={title:"665. Non-decreasing Array",sidebar_label:"665. Non-decreasing Array",tags:["Leetcode Medium"]},s=void 0,u={unversionedId:"leetcode/501-1000/non_decreasing_array",id:"leetcode/501-1000/non_decreasing_array",title:"665. Non-decreasing Array",description:"https://leetcode.com/problems/non-decreasing-array/",source:"@site/docs/leetcode/501-1000/665_non_decreasing_array.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/non_decreasing_array",permalink:"/docs/leetcode/501-1000/non_decreasing_array",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/665_non_decreasing_array.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"}],version:"current",sidebarPosition:665,frontMatter:{title:"665. Non-decreasing Array",sidebar_label:"665. Non-decreasing Array",tags:["Leetcode Medium"]},sidebar:"docSidebar",previous:{title:"659. Split Array into Consecutive Subsequences",permalink:"/docs/leetcode/501-1000/split_array_into_consecutive_subsequences"},next:{title:"669. Trim a Binary Search Tree",permalink:"/docs/leetcode/501-1000/trim_bst"}},l=[{value:"Python",id:"python",children:[],level:2}],d={toc:l};function p(e){var n=e.components,r=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,t.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/non-decreasing-array/"},"https://leetcode.com/problems/non-decreasing-array/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def checkPossibility(self, nums: List[int]) -> bool:\n        if len(nums) <= 2:\n            return True\n\n        is_modified = False\n\n        for i in range(1, len(nums)):\n            left, right = nums[i-1], nums[i]\n            \n            if left <= right:\n                continue\n\n            if is_modified:\n                return False\n            \n            is_modified = True\n            \n            if i < 2 or nums[i-2] <= nums[i]:\n                nums[i-1] = nums[i]\n            else:\n                nums[i] = nums[i-1]\n\n        return True\n")))}p.isMDXComponent=!0}}]);