"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[24364],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return p}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var a=n.createContext({}),c=function(e){var t=n.useContext(a),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(a.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),f=c(r),p=o,m=f["".concat(a,".").concat(p)]||f[p]||d[p]||i;return r?n.createElement(m,l(l({ref:t},u),{},{components:r})):n.createElement(m,l({ref:t},u))}));function p(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,l=new Array(i);l[0]=f;var s={};for(var a in t)hasOwnProperty.call(t,a)&&(s[a]=t[a]);s.originalType=e,s.mdxType="string"==typeof e?e:o,l[1]=s;for(var c=2;c<i;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},99644:function(e,t,r){r.r(t),r.d(t,{contentTitle:function(){return a},default:function(){return f},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var n=r(87462),o=r(63366),i=(r(67294),r(3905)),l=["components"],s={title:"341. Flatten Nested List Iterator",sidebar_label:"341. Flatten Nested List Iterator",tags:["Leetcode Medium"]},a=void 0,c={unversionedId:"leetcode/1-500/flatten_nested_list_iterator",id:"leetcode/1-500/flatten_nested_list_iterator",title:"341. Flatten Nested List Iterator",description:"https://leetcode.com/problems/flatten-nested-list-iterator/",source:"@site/docs/leetcode/1-500/341_flatten_nested_list_iterator.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/flatten_nested_list_iterator",permalink:"/docs/leetcode/1-500/flatten_nested_list_iterator",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/341_flatten_nested_list_iterator.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"}],version:"current",sidebarPosition:341,frontMatter:{title:"341. Flatten Nested List Iterator",sidebar_label:"341. Flatten Nested List Iterator",tags:["Leetcode Medium"]},sidebar:"docSidebar",previous:{title:"338. Counting Bits",permalink:"/docs/leetcode/1-500/counting_bits"},next:{title:"341. Flatten Nested List Iterator",permalink:"/docs/leetcode/1-500/flatten_nested_list_lterator"}},u=[{value:"Python",id:"python",children:[{value:"Recursive Generator",id:"recursive-generator",children:[],level:3}],level:2}],d={toc:u};function f(e){var t=e.components,r=(0,o.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/flatten-nested-list-iterator/"},"https://leetcode.com/problems/flatten-nested-list-iterator/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"recursive-generator"},"Recursive Generator"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class NestedIterator:\n    def __init__(self, nestedList: [NestedInteger]):\n        self.iteral = self._generator(nestedList)\n        self.temp = None\n    \n    def _generator(self, obj):\n        if isinstance(obj, list):\n            for item in obj:\n                yield from self._generator(item)\n        else:\n            if obj.isInteger():\n                yield obj.getInteger()\n            else:\n                for item in obj.getList():\n                    yield from self._generator(item)\n\n    def next(self) -> int:\n        if self.temp is not None:\n            result, self.temp = self.temp, None\n            return result\n        return next(self.iteral)\n    \n    def hasNext(self) -> bool:\n        if self.temp is not None:\n            return True\n        \n        try:\n            self.temp = next(self.iteral)\n            return True\n        except StopIteration:\n            return False\n")))}f.isMDXComponent=!0}}]);