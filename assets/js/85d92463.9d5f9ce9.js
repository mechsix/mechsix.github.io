"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[80682],{3905:(e,n,r)=>{r.d(n,{Zo:()=>p,kt:()=>m});var t=r(67294);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function c(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=t.createContext({}),l=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},p=function(e){var n=l(e.components);return t.createElement(s.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},f=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(r),f=i,m=d["".concat(s,".").concat(f)]||d[f]||u[f]||o;return r?t.createElement(m,a(a({ref:n},p),{},{components:r})):t.createElement(m,a({ref:n},p))}));function m(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=f;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c[d]="string"==typeof e?e:i,a[1]=c;for(var l=2;l<o;l++)a[l]=r[l];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}f.displayName="MDXCreateElement"},87446:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var t=r(87462),i=(r(67294),r(3905));const o={title:"664. Strange Printer",sidebar_label:"664. Strange Printer",tags:["Leetcode Hard","DP"]},a=void 0,c={unversionedId:"leetcode/501-1000/strange_printer",id:"leetcode/501-1000/strange_printer",title:"664. Strange Printer",description:"Python",source:"@site/docs/leetcode/501-1000/664_strange_printer.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/strange_printer",permalink:"/docs/leetcode/501-1000/strange_printer",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/664_strange_printer.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"DP",permalink:"/docs/tags/dp"}],version:"current",sidebarPosition:664,frontMatter:{title:"664. Strange Printer",sidebar_label:"664. Strange Printer",tags:["Leetcode Hard","DP"]},sidebar:"docSidebar",previous:{title:"659. Split Array into Consecutive Subsequences",permalink:"/docs/leetcode/501-1000/split_array_into_consecutive_subsequences"},next:{title:"665. Non-decreasing Array",permalink:"/docs/leetcode/501-1000/non_decreasing_array"}},s={},l=[{value:"Python",id:"python",level:2},{value:"2 Dimension DP",id:"2-dimension-dp",level:3}],p={toc:l},d="wrapper";function u(e){let{components:n,...r}=e;return(0,i.kt)(d,(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"2-dimension-dp"},"2 Dimension DP"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def strangePrinter(self, s: str) -> int:\n        if not s:\n            return 0\n\n        n = len(s)\n\n        dp = [[0]*n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n\n        for i in range(n-1, -1, -1):\n            for j in range(i+1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i][j-1]\n                    continue\n                dp[i][j] = min(\n                    dp[i][cur] + dp[cur+1][j]\n                    for cur in range(i, j)\n                )\n\n        return dp[0][n-1]\n")))}u.isMDXComponent=!0}}]);