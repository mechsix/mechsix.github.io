"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[48171],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(r),m=o,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||l;return r?n.createElement(f,a(a({ref:t},u),{},{components:r})):n.createElement(f,a({ref:t},u))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=r.length,a=new Array(l);a[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:o,a[1]=i;for(var c=2;c<l;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},83694:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var n=r(87462),o=(r(67294),r(3905));const l={title:"1305. All Elements in Two Binary Search Trees",sidebar_label:"1305. All Elements in Two Binary Search Trees",tags:["Leetcode Medium","DFS","BST"]},a=void 0,i={unversionedId:"leetcode/1001-1500/all_elms_in_two_bst",id:"leetcode/1001-1500/all_elms_in_two_bst",title:"1305. All Elements in Two Binary Search Trees",description:"Python",source:"@site/docs/leetcode/1001-1500/1305_all_elms_in_two_bst.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/all_elms_in_two_bst",permalink:"/docs/leetcode/1001-1500/all_elms_in_two_bst",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1305_all_elms_in_two_bst.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"DFS",permalink:"/docs/tags/dfs"},{label:"BST",permalink:"/docs/tags/bst"}],version:"current",sidebarPosition:1305,frontMatter:{title:"1305. All Elements in Two Binary Search Trees",sidebar_label:"1305. All Elements in Two Binary Search Trees",tags:["Leetcode Medium","DFS","BST"]},sidebar:"docSidebar",previous:{title:"1302. Deepest Leaves Sum",permalink:"/docs/leetcode/1001-1500/deepest_leaves_sum"},next:{title:"1306. Jump Game III",permalink:"/docs/leetcode/1001-1500/jump_game_iii"}},s={},c=[{value:"Python",id:"python",level:2}],u={toc:c},d="wrapper";function p(e){let{components:t,...r}=e;return(0,o.kt)(d,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def getAllElements(self, root1: TreeNode, root2: TreeNode) -> List[int]:\n\n        tree1 = self._travel(root1, [])\n        tree2 = self._travel(root2, [])\n\n        return sorted(tree1 + tree2)\n\n\n    def _travel(self, node, result):\n        if not node:\n            return result\n\n        self._travel(node.left, result)\n        result.append(node.val)\n        self._travel(node.right, result)\n\n        return result\n")))}p.isMDXComponent=!0}}]);