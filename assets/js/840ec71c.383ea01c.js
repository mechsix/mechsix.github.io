"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[97660],{34187:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var s=r(74848),n=r(28453);const o={title:"981. Time Based Key-Value Store",sidebar_label:"981. Time Based Key-Value Store",tags:["Leetcode Medium","Binary Search"]},i=void 0,a={id:"leetcode/501-1000/time_based_key_value_store",title:"981. Time Based Key-Value Store",description:"https://leetcode.com/problems/time-based-key-value-store/",source:"@site/docs/leetcode/501-1000/981_time_based_key_value_store.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/time_based_key_value_store",permalink:"/docs/leetcode/501-1000/time_based_key_value_store",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Binary Search",permalink:"/docs/tags/binary-search"}],version:"current",sidebarPosition:981,frontMatter:{title:"981. Time Based Key-Value Store",sidebar_label:"981. Time Based Key-Value Store",tags:["Leetcode Medium","Binary Search"]},sidebar:"docSidebar",previous:{title:"977. Squares of a Sorted Array",permalink:"/docs/leetcode/501-1000/squares_of_sorted_array"},next:{title:"983. Minimum Cost For Tickets",permalink:"/docs/leetcode/501-1000/min_cost_for_tickets"}},l={},c=[{value:"Python",id:"python",level:2},{value:"Get by Binary Search",id:"get-by-binary-search",level:3}];function d(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://leetcode.com/problems/time-based-key-value-store/",children:"https://leetcode.com/problems/time-based-key-value-store/"})}),"\n",(0,s.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,s.jsx)(t.h3,{id:"get-by-binary-search",children:"Get by Binary Search"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'from collections import defaultdict\n\n\nclass TimeMap:\n    def __init__(self):\n        self.memory = defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        # The question did not indicate the timestamp will be set always in incremental order\n        # But the test case riase error if you\'re not set in the order, so we can skip the\n        # ordering find of append\n        self.memory[key].append((timestamp, value))\n\n\n    def get(self, key: str, timestamp: int) -> str:\n        result = ""\n        l, r = 0, len(self.memory[key])-1\n        while l <= r:\n            pivot = (l+r) >> 1\n            if self.memory[key][pivot][0] <= timestamp:\n                result = self.memory[key][pivot][1]\n                l = pivot+1\n            else:\n                r = pivot-1\n        return result\n'})})]})}function m(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>a});var s=r(96540);const n={},o=s.createContext(n);function i(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);