"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[65864],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>y});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=s(r),f=o,y=p["".concat(c,".").concat(f)]||p[f]||d[f]||a;return r?n.createElement(y,l(l({ref:t},u),{},{components:r})):n.createElement(y,l({ref:t},u))}));function y(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=f;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:o,l[1]=i;for(var s=2;s<a;s++)l[s]=r[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},30831:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var n=r(87462),o=(r(67294),r(3905));const a={title:"563. Binary Tree Tilt",sidebar_label:"563. Binary Tree Tilt",tags:["Binary Tree","Leetcode Easy"]},l=void 0,i={unversionedId:"leetcode/501-1000/binary_tree_tilt",id:"leetcode/501-1000/binary_tree_tilt",title:"563. Binary Tree Tilt",description:"Python",source:"@site/docs/leetcode/501-1000/563_binary_tree_tilt.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/binary_tree_tilt",permalink:"/docs/leetcode/501-1000/binary_tree_tilt",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/563_binary_tree_tilt.md",tags:[{label:"Binary Tree",permalink:"/docs/tags/binary-tree"},{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"}],version:"current",sidebarPosition:563,frontMatter:{title:"563. Binary Tree Tilt",sidebar_label:"563. Binary Tree Tilt",tags:["Binary Tree","Leetcode Easy"]},sidebar:"docSidebar",previous:{title:"560. Subarray Sum Equals K",permalink:"/docs/leetcode/501-1000/subarray_sum_equals_k"},next:{title:"566. Reshape the Matrix",permalink:"/docs/leetcode/501-1000/reshape_matrix"}},c={},s=[{value:"Python",id:"python",level:3}],u={toc:s},p="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def __init__(self):\n        self.total_tilt = 0\n\n    def findTilt(self, root: Optional[TreeNode]) -> int:\n        self._travel(0, root)\n        return self.total_tilt\n\n    def _travel(self, total: int, node) -> tuple:\n        if not node:\n            return 0\n\n        left_total = self._travel(0, node.left)\n        right_total = self._travel(0, node.right)\n\n        self.total_tilt += abs(left_total - right_total)\n\n        return node.val + left_total + right_total\n")))}d.isMDXComponent=!0}}]);