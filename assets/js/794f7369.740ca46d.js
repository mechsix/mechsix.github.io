"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[91396],{79669:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"leetcode/501-1000/all_possible_full_binary_tree","title":"894. All Possible Full Binary Trees","description":"https://leetcode.com/problems/all-possible-full-binary-trees/","source":"@site/docs/leetcode/501-1000/894_all_possible_full_binary_tree.md","sourceDirName":"leetcode/501-1000","slug":"/leetcode/501-1000/all_possible_full_binary_tree","permalink":"/docs/leetcode/501-1000/all_possible_full_binary_tree","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Medium","permalink":"/docs/tags/leetcode-medium"},{"inline":true,"label":"Binary Tree","permalink":"/docs/tags/binary-tree"},{"inline":true,"label":"Backtracking","permalink":"/docs/tags/backtracking"}],"version":"current","sidebarPosition":894,"frontMatter":{"title":"894. All Possible Full Binary Trees","sidebar_label":"894. All Possible Full Binary Trees","tags":["Leetcode Medium","Binary Tree","Backtracking"]},"sidebar":"docSidebar","previous":{"title":"890. Find and Replace Pattern","permalink":"/docs/leetcode/501-1000/find_and_replace_pattern"},"next":{"title":"897. Increasing Order Search Tree","permalink":"/docs/leetcode/501-1000/increasing_order_bst"}}');var l=t(74848),i=t(28453);const s={title:"894. All Possible Full Binary Trees",sidebar_label:"894. All Possible Full Binary Trees",tags:["Leetcode Medium","Binary Tree","Backtracking"]},o=void 0,a={},c=[{value:"Python",id:"python",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://leetcode.com/problems/all-possible-full-binary-trees/",children:"https://leetcode.com/problems/all-possible-full-binary-trees/"})}),"\n",(0,l.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def allPossibleFBT(self, n: int) -> List[Optional[TreeNode]]:\n        if not n % 2:\n            return []\n\n        def backtrack(i):\n            if i == 1:\n                return [TreeNode(val=0)]\n            tree = []\n            for j in range(1, i-1):\n                for left in backtrack(j):\n                    for right in backtrack(i-j-1):\n                        tree.append(\n                            TreeNode(0, left, right)\n                        )\n            return tree\n\n        return dfs(n)\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var r=t(96540);const l={},i=r.createContext(l);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);