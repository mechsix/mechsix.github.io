"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[79422],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>f});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},m=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=l(n),d=o,f=u["".concat(c,".").concat(d)]||u[d]||p[d]||s;return n?r.createElement(f,a(a({ref:t},m),{},{components:n})):r.createElement(f,a({ref:t},m))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:o,a[1]=i;for(var l=2;l<s;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},10636:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var r=n(87462),o=(n(67294),n(3905));const s={title:"645. Set Mismatch",sidebar_label:"645. Set Mismatch",tags:["Leetcode Easy","Hash","Sort"]},a=void 0,i={unversionedId:"leetcode/501-1000/set_mismatch",id:"leetcode/501-1000/set_mismatch",title:"645. Set Mismatch",description:"https://leetcode.com/problems/set-mismatch/",source:"@site/docs/leetcode/501-1000/645_set_mismatch.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/set_mismatch",permalink:"/docs/leetcode/501-1000/set_mismatch",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/645_set_mismatch.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Hash",permalink:"/docs/tags/hash"},{label:"Sort",permalink:"/docs/tags/sort"}],version:"current",sidebarPosition:645,frontMatter:{title:"645. Set Mismatch",sidebar_label:"645. Set Mismatch",tags:["Leetcode Easy","Hash","Sort"]},sidebar:"docSidebar",previous:{title:"637. Average of Levels in Binary Tree",permalink:"/docs/leetcode/501-1000/average_of_levels_in_binary_tree"},next:{title:"647. Palindromic Substrings",permalink:"/docs/leetcode/501-1000/palindromic_substrings"}},c={},l=[{value:"Python",id:"python",level:2}],m={toc:l},u="wrapper";function p(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/set-mismatch/"},"https://leetcode.com/problems/set-mismatch/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def findErrorNums(self, nums: List[int]) -> List[int]:\n        full_nums = set([n for n in range(1, len(nums)+1)])\n        \n        missed = full_nums - set(nums)\n        \n        seen = set()\n        for num in nums:\n            if num not in seen:\n                seen.add(num)\n                continue\n            return [num, missed.pop()]\n")))}p.isMDXComponent=!0}}]);