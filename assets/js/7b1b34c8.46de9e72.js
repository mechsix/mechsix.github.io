"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[60057],{40495:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>d,toc:()=>l});const d=JSON.parse('{"id":"leetcode/1-500/odd_even_linklist","title":"328. Odd Even Linked List","description":"https://leetcode.com/problems/odd-even-linked-list","source":"@site/docs/leetcode/1-500/328_odd_even_linklist.md","sourceDirName":"leetcode/1-500","slug":"/leetcode/1-500/odd_even_linklist","permalink":"/docs/leetcode/1-500/odd_even_linklist","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Medium","permalink":"/docs/tags/leetcode-medium"},{"inline":true,"label":"Linked List","permalink":"/docs/tags/linked-list"}],"version":"current","sidebarPosition":328,"frontMatter":{"title":"328. Odd Even Linked List","sidebar_label":"328. Odd Even Linked List","tags":["Leetcode Medium","Linked List"]},"sidebar":"docSidebar","previous":{"title":"236. Lowest Common Ancestor of a Binary Tree","permalink":"/docs/leetcode/1-500/lowest_common_ancestor_of_bt"},"next":{"title":"329. Longest Increasing Path in a Matrix","permalink":"/docs/leetcode/1-500/longest_increasing_path_in_matrix"}}');var o=t(74848),i=t(28453);const s={title:"328. Odd Even Linked List",sidebar_label:"328. Odd Even Linked List",tags:["Leetcode Medium","Linked List"]},r=void 0,c={},l=[{value:"Python",id:"python",level:2}];function a(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://leetcode.com/problems/odd-even-linked-list",children:"https://leetcode.com/problems/odd-even-linked-list"})}),"\n",(0,o.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def oddEvenList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        is_odd = True\n\n        odd_head = ListNode(None, None)\n        odd_node = odd_head\n        even_head = ListNode(None, None)\n        even_node = even_head\n\n        current = head\n\n        while current:\n            if is_odd:\n                odd_node.next = current\n                odd_node = current\n            else:\n                even_node.next = current\n                even_node = current\n\n            current = current.next\n            is_odd = not is_odd\n\n        even_node.next = None\n        odd_node.next = even_head.next\n\n        return odd_head.next\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var d=t(96540);const o={},i=d.createContext(o);function s(e){const n=d.useContext(i);return d.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),d.createElement(i.Provider,{value:n},e.children)}}}]);