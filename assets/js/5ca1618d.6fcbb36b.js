"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[14547],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>f});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},m=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,m=c(e,["components","mdxType","originalType","parentName"]),p=s(n),d=i,f=p["".concat(l,".").concat(d)]||p[d]||u[d]||o;return n?r.createElement(f,a(a({ref:t},m),{},{components:n})):r.createElement(f,a({ref:t},m))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[p]="string"==typeof e?e:i,a[1]=c;for(var s=2;s<o;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},74007:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var r=n(87462),i=(n(67294),n(3905));const o={title:"461. Hamming Distance",sidebar_label:"461. Hamming Distance",tags:["Leetcode Easy"]},a=void 0,c={unversionedId:"leetcode/1-500/hamming_distance",id:"leetcode/1-500/hamming_distance",title:"461. Hamming Distance",description:"https://leetcode.com/problems/hamming-distance",source:"@site/docs/leetcode/1-500/461_hamming_distance.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/hamming_distance",permalink:"/docs/leetcode/1-500/hamming_distance",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/461_hamming_distance.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"}],version:"current",sidebarPosition:461,frontMatter:{title:"461. Hamming Distance",sidebar_label:"461. Hamming Distance",tags:["Leetcode Easy"]},sidebar:"docSidebar",previous:{title:"458. Poor Pigs",permalink:"/docs/leetcode/1-500/poor_pigs"},next:{title:"462. Minimum Moves to Equal Array Elements II",permalink:"/docs/leetcode/1-500/minimum_moves_to_equal_array_elements_ii"}},l={},s=[{value:"Python",id:"python",level:2}],m={toc:s},p="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/hamming-distance"},"https://leetcode.com/problems/hamming-distance")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class Solution:\n    def hammingDistance(self, x: int, y: int) -> int:\n        bin_x = "{0:b}".format(x)\n        bin_y = "{0:b}".format(y)\n\n        len_x = len(bin_x)\n        len_y = len(bin_y)\n        max_len = max(len_x, len_y)\n\n        bin_x = bin_x.zfill(max_len)\n        bin_y = bin_y.zfill(max_len)\n\n        counter = 0\n        for i in range(0, max_len):\n            if int(bin_x[i]) ^ int(bin_y[i]) == 1:\n                counter += 1\n        return counter\n')))}u.isMDXComponent=!0}}]);