"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[11758],{3905:function(n,e,t){t.d(e,{Zo:function(){return u},kt:function(){return b}});var r=t(67294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function c(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function i(n,e){if(null==n)return{};var t,r,o=function(n,e){if(null==n)return{};var t,r,o={},a=Object.keys(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var l=r.createContext({}),s=function(n){var e=r.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):c(c({},e),n)),t},u=function(n){var e=s(n.components);return r.createElement(l.Provider,{value:e},n.children)},d="mdxType",p={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},f=r.forwardRef((function(n,e){var t=n.components,o=n.mdxType,a=n.originalType,l=n.parentName,u=i(n,["components","mdxType","originalType","parentName"]),d=s(t),f=o,b=d["".concat(l,".").concat(f)]||d[f]||p[f]||a;return t?r.createElement(b,c(c({ref:e},u),{},{components:t})):r.createElement(b,c({ref:e},u))}));function b(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var a=t.length,c=new Array(a);c[0]=f;var i={};for(var l in e)hasOwnProperty.call(e,l)&&(i[l]=e[l]);i.originalType=n,i[d]="string"==typeof n?n:o,c[1]=i;for(var s=2;s<a;s++)c[s]=t[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},41901:function(n,e,t){t.r(e),t.d(e,{assets:function(){return l},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return a},metadata:function(){return i},toc:function(){return s}});var r=t(83117),o=(t(67294),t(3905));const a={title:"51. N-Queens",sidebar_label:"51. N-Queens",tags:["Leetcode Hard","Backtracking"]},c=void 0,i={unversionedId:"leetcode/1-500/n_queens",id:"leetcode/1-500/n_queens",title:"51. N-Queens",description:"https://leetcode.com/problems/n-queens/",source:"@site/docs/leetcode/1-500/51_n_queens.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/n_queens",permalink:"/docs/leetcode/1-500/n_queens",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/51_n_queens.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"Backtracking",permalink:"/docs/tags/backtracking"}],version:"current",sidebarPosition:51,frontMatter:{title:"51. N-Queens",sidebar_label:"51. N-Queens",tags:["Leetcode Hard","Backtracking"]},sidebar:"docSidebar",previous:{title:"49. Group Anagrams",permalink:"/docs/leetcode/1-500/group_anagrams"},next:{title:"53. Maximum Subarray",permalink:"/docs/leetcode/1-500/max_subarray"}},l={},s=[{value:"Python",id:"python",level:2},{value:"Backtracking",id:"backtracking",level:3},{value:"Javascript",id:"javascript",level:2}],u={toc:s};function d(n){let{components:e,...t}=n;return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/n-queens/"},"https://leetcode.com/problems/n-queens/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"backtracking"},"Backtracking"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from typing import List\n\n\nclass Solution:\n    def solveNQueens(self, n: int) -> List[List[str]]:\n        max_index = n-1\n        board = [['.']*n for i in range(n)]\n        result = []\n\n        def backtrack(row: int):\n            if row > max_index:\n                result.append([''.join(row) for row in board])\n                return\n\n            for col in range(n):\n                # print(\"Checking\", row, col)\n                if not self.is_valid(board, n, row, col):\n                    continue\n\n                board[row][col] = 'Q'\n                backtrack(row+1)\n                board[row][col] = '.'\n        backtrack(0)\n\n        return result\n\n    def is_valid(self, board, n, row, col):\n        tl_col, tr_col = min(col-1, n-1), max(col+1, 0)\n        for r in range(row-1, -1, -1):\n            # Check up\n            if board[r][col] == 'Q':\n                return False\n\n            # Check top right\n            if tr_col < n:\n                if board[r][tr_col] == 'Q':\n                    return False\n                tr_col += 1\n\n            # Check top left\n            if tl_col >= 0:\n                if board[r][tl_col] == 'Q':\n                    return False\n                tl_col -= 1\n        return True\n")),(0,o.kt)("h2",{id:"javascript"},"Javascript"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"}," var solveNQueens = function(n) {\n   const boarder = new Boarder(n);\n   const emptyBoard = boarder.getEmptyBorad();\n   const result = [];\n\n   const backtrack = function(\n     row, board, cols = new Set(), diagonals = new Set(), antiDiagonals = new Set()\n   ) {\n    if (row === n) {\n      result.push(boarder.getResult(board.slice()));\n      return;\n    }\n\n    for (let col = 0; col < n; col++) {\n      const diagonal = row - col;\n      const antiDiagonal = row + col;\n\n      if (cols.has(col) || diagonals.has(diagonal) || antiDiagonals.has(antiDiagonal))\n        continue\n\n      cols.add(col);\n      diagonals.add(diagonal);\n      antiDiagonals.add(antiDiagonal);\n      board[row][col] = 'Q'\n      backtrack(row + 1, board, cols, diagonals, antiDiagonals);\n      cols.delete(col);\n      diagonals.delete(diagonal)\n      antiDiagonals.delete(antiDiagonal)\n      board[row][col] = '.'\n    }\n   }\n    \n   backtrack(0, emptyBoard)\n\n   return result;\n};\n\nclass Boarder {\n  constructor(n) {\n    this.n = n;\n  }\n\n  getEmptyBorad() {\n    const board = [];\n    for (let i = 0; i < this.n; i++) {\n      board[i] = []\n      for (let j = 0; j < this.n; j++) {\n        board[i][j] = '.';\n      }\n    }\n    return board;\n  }\n\n  getResult(board) {\n    const result = []\n    for (const row of board) {\n      result.push(row.join(''));\n    }\n    return result;\n  }\n}\n")))}d.isMDXComponent=!0}}]);