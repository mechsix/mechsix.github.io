"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[64572],{3905:function(e,r,t){t.d(r,{Zo:function(){return p},kt:function(){return f}});var n=t(67294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=n.createContext({}),m=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},p=function(e){var r=m(e.components);return n.createElement(c.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},s=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),s=m(t),f=o,d=s["".concat(c,".").concat(f)]||s[f]||u[f]||a;return t?n.createElement(d,i(i({ref:r},p),{},{components:t})):n.createElement(d,i({ref:r},p))}));function f(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=s;var l={};for(var c in r)hasOwnProperty.call(r,c)&&(l[c]=r[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var m=2;m<a;m++)i[m]=t[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}s.displayName="MDXCreateElement"},76359:function(e,r,t){t.r(r),t.d(r,{contentTitle:function(){return c},default:function(){return s},frontMatter:function(){return l},metadata:function(){return m},toc:function(){return p}});var n=t(87462),o=t(63366),a=(t(67294),t(3905)),i=["components"],l={title:"835. Image Overlap",sidebar_label:"835. Image Overlap",tags:["Leetcode Medium","Matrix"]},c=void 0,m={unversionedId:"leetcode/501-1000/image_overlap",id:"leetcode/501-1000/image_overlap",title:"835. Image Overlap",description:"https://leetcode.com/problems/image-overlap/",source:"@site/docs/leetcode/501-1000/835_image_overlap.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/image_overlap",permalink:"/docs/leetcode/501-1000/image_overlap",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/835_image_overlap.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Matrix",permalink:"/docs/tags/matrix"}],version:"current",sidebarPosition:835,frontMatter:{title:"835. Image Overlap",sidebar_label:"835. Image Overlap",tags:["Leetcode Medium","Matrix"]},sidebar:"docSidebar",previous:{title:"823. Binary Trees With Factors",permalink:"/docs/leetcode/501-1000/binary_tree_with_factors"},next:{title:"841. Keys and Rooms",permalink:"/docs/leetcode/501-1000/keys_and_rooms"}},p=[{value:"Python",id:"python",children:[],level:2}],u={toc:p};function s(e){var r=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/image-overlap/"},"https://leetcode.com/problems/image-overlap/")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def largestOverlap(self, img1: List[List[int]], img2: List[List[int]]) -> int:\n        n = len(img1)\n\n        def count_overlay(start_row, start_col):\n            up_left, up_right, down_left, down_right = 0, 0, 0, 0\n\n            for row_ref, row_move in enumerate(range(start_row, n)):\n                for col_ref, col_move in enumerate(range(start_col, n)):\n                    if img1[row_move][col_move] and img2[row_ref][col_ref]:\n                        up_left += 1\n\n                    if img1[row_move][col_ref] and img2[row_ref][col_move]:\n                        up_right += 1\n\n                    if img1[row_ref][col_ref] and img2[row_move][col_move]:\n                        down_left += 1\n\n                    if img1[row_ref][col_move] and img2[row_move][col_ref]:\n                        down_right += 1\n\n            return max(up_left, up_right, down_left, down_right)\n\n        ans = 0\n        for r in range(n):\n            for c in range(n):\n                ans = max(ans, count_overlay(r, c))\n        return ans\n")))}s.isMDXComponent=!0}}]);