"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[81117],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(r),f=o,m=d["".concat(l,".").concat(f)]||d[f]||u[f]||i;return r?n.createElement(m,a(a({ref:t},p),{},{components:r})):n.createElement(m,a({ref:t},p))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},66166:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=r(87462),o=(r(67294),r(3905));const i={title:"284. Peeking Iterator",sidebar_label:"284. Peeking Iterator",tags:["Leetcode Medium","System Design"]},a=void 0,s={unversionedId:"leetcode/1-500/peeking_iterator",id:"leetcode/1-500/peeking_iterator",title:"284. Peeking Iterator",description:"https://leetcode.com/problems/peeking-iterator/",source:"@site/docs/leetcode/1-500/284_peeking_iterator.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/peeking_iterator",permalink:"/docs/leetcode/1-500/peeking_iterator",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/284_peeking_iterator.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"System Design",permalink:"/docs/tags/system-design"}],version:"current",sidebarPosition:284,frontMatter:{title:"284. Peeking Iterator",sidebar_label:"284. Peeking Iterator",tags:["Leetcode Medium","System Design"]},sidebar:"docSidebar",previous:{title:"283. Move Zeroes",permalink:"/docs/leetcode/1-500/move_zeros"},next:{title:"289. Game of Life",permalink:"/docs/leetcode/1-500/game_of_life"}},l={},c=[],p={toc:c},d="wrapper";function u(e){let{components:t,...r}=e;return(0,o.kt)(d,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/peeking-iterator/"},"https://leetcode.com/problems/peeking-iterator/")),(0,o.kt)("h1",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'class PeekingIterator:\n    def __init__(self, iterator):\n        """\n        Initialize your data structure here.\n        :type iterator: Iterator\n        """\n        self.data = iterator\n        self.peeked = None\n\n    def peek(self):\n        """\n        Returns the next element in the iteration without advancing the iterator.\n        :rtype: int\n        """\n        if self.peeked is not None:\n            return self.peeked\n\n        if self.data.hasNext():\n            self.peeked = self.data.next()\n            return self.peeked\n\n    def next(self):\n        """\n        :rtype: int\n        """\n        if self.peeked is not None:\n            result = self.peeked\n            self.peeked = None\n            return result\n        \n        if self.data.hasNext():\n            return self.data.next()\n\n    def hasNext(self):\n        """\n        :rtype: bool\n        """\n        return self.data.hasNext() if self.peeked is None else True\n')))}u.isMDXComponent=!0}}]);