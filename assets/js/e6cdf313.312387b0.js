"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[34230],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return f}});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(r),f=i,m=p["".concat(c,".").concat(f)]||p[f]||d[f]||o;return r?n.createElement(m,a(a({ref:t},u),{},{components:r})):n.createElement(m,a({ref:t},u))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=p;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var s=2;s<o;s++)a[s]=r[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},26033:function(e,t,r){r.r(t),r.d(t,{contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var n=r(87462),i=r(63366),o=(r(67294),r(3905)),a=["components"],l={title:"86. Partition List",sidebar_label:"86. Partition List",tags:["Leetcode Medium","Linked List"]},c=void 0,s={unversionedId:"leetcode/1-500/partition_list",id:"leetcode/1-500/partition_list",title:"86. Partition List",description:"https://leetcode.com/problems/partition-list/",source:"@site/docs/leetcode/1-500/86_partition_list.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/partition_list",permalink:"/docs/leetcode/1-500/partition_list",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/86_partition_list.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Linked List",permalink:"/docs/tags/linked-list"}],version:"current",sidebarPosition:86,frontMatter:{title:"86. Partition List",sidebar_label:"86. Partition List",tags:["Leetcode Medium","Linked List"]},sidebar:"docSidebar",previous:{title:"83. Remove Duplicates from Sorted List",permalink:"/docs/leetcode/1-500/remove_duplicates_from_sorted_linked_list"},next:{title:"88. Merge Sorted Array",permalink:"/docs/leetcode/1-500/merge_sorted_array"}},u=[{value:"Python",id:"python",children:[],level:2},{value:"Javascript",id:"javascript",children:[],level:2}],d={toc:u};function p(e){var t=e.components,r=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/partition-list/"},"https://leetcode.com/problems/partition-list/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def partition(self, head: Optional[ListNode], x: int) -> Optional[ListNode]:\n        front_head = ListNode()\n        after_head = ListNode()\n\n        front_cur, after_cur = front_head, after_head\n        cur = head\n\n        while cur:\n            if cur.val < x:\n                front_cur.next = cur\n                front_cur = front_cur.next\n            else:\n                after_cur.next = cur\n                after_cur = after_cur.next\n            cur = cur.next\n\n        after_cur.next = None\n        front_cur.next = after_head.next\n\n        return front_head.next\n")),(0,o.kt)("h2",{id:"javascript"},"Javascript"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"var partition = function(head, x) {\n  let lessHeader = new ListNode();\n  let less = lessHeader;\n\n  let greaterHeader = new ListNode();\n  let greater = greaterHeader;\n\n  while (head !== null) {\n    if (head.val < x) {\n      less.next = head;\n      less = less.next;\n    } else {\n      greater.next = head;\n      greater = greater.next;\n    }\n\n    head = head.next;\n  }\n\n  greater.next = null;\n\n  less.next = greaterHeader.next;\n\n  return lessHeader.next;\n};\n")))}p.isMDXComponent=!0}}]);