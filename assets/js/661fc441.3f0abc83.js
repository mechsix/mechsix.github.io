"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[4206],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return m}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=n.createContext({}),l=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},s=function(e){var t=l(e.components);return n.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),d=l(r),m=o,h=d["".concat(u,".").concat(m)]||d[m]||p[m]||i;return r?n.createElement(h,c(c({ref:t},s),{},{components:r})):n.createElement(h,c({ref:t},s))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,c=new Array(i);c[0]=d;var a={};for(var u in t)hasOwnProperty.call(t,u)&&(a[u]=t[u]);a.originalType=e,a.mdxType="string"==typeof e?e:o,c[1]=a;for(var l=2;l<i;l++)c[l]=r[l];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8496:function(e,t,r){r.r(t),r.d(t,{contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return s}});var n=r(87462),o=r(63366),i=(r(67294),r(3905)),c=["components"],a={title:"630. Course Schedule III",sidebar_label:"630. Course Schedule III",tags:["Leetcode Hard","DP","Heap"]},u=void 0,l={unversionedId:"leetcode/501-1000/course_schedule_iii",id:"leetcode/501-1000/course_schedule_iii",title:"630. Course Schedule III",description:"https://leetcode.com/problems/course-schedule-iii/",source:"@site/docs/leetcode/501-1000/630_course_schedule_iii.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/course_schedule_iii",permalink:"/docs/leetcode/501-1000/course_schedule_iii",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/630_course_schedule_iii.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"DP",permalink:"/docs/tags/dp"},{label:"Heap",permalink:"/docs/tags/heap"}],version:"current",sidebarPosition:630,frontMatter:{title:"630. Course Schedule III",sidebar_label:"630. Course Schedule III",tags:["Leetcode Hard","DP","Heap"]},sidebar:"docSidebar",previous:{title:"623. Add One Row to Tree",permalink:"/docs/leetcode/501-1000/add_one_row_to_tree"},next:{title:"637. Average of Levels in Binary Tree",permalink:"/docs/leetcode/501-1000/average_of_levels_in_binary_tree"}},s=[{value:"Python",id:"python",children:[{value:"Top-Down DP (Timelimit Exceed)",id:"top-down-dp-timelimit-exceed",children:[],level:3},{value:"Bottom-Up DP with Max Heap",id:"bottom-up-dp-with-max-heap",children:[],level:3}],level:2}],p={toc:s};function d(e){var t=e.components,r=(0,o.Z)(e,c);return(0,i.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/course-schedule-iii/"},"https://leetcode.com/problems/course-schedule-iii/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"top-down-dp-timelimit-exceed"},"Top-Down DP (Timelimit Exceed)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Time: O(N*D)  # N = len(courses); D = deepth"),(0,i.kt)("li",{parentName:"ul"},"Space: O(N*D)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from functools import cache\n\n\nclass Solution:\n    def scheduleCourse(self, courses: List[List[int]]) -> int:\n        courses.sort(key=lambda course: course[1])\n\n        @cache\n        def dp(i: int, current: int):\n            if i == len(courses):\n                return 0\n            duration, end = courses[i]\n\n            pick_cost = 0\n            if (now := current + duration) <= end:\n                pick_cost = 1 + dp(i+1, now)\n\n            ignore_cost = dp(i+1, current)\n\n            return max(pick_cost, ignore_cost)\n\n        return dp(0, 0)\n")),(0,i.kt)("h3",{id:"bottom-up-dp-with-max-heap"},"Bottom-Up DP with Max Heap"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"import heapq\n\n\nclass Solution:\n    def scheduleCourse(self, courses: List[List[int]]) -> int:\n        courses.sort(key=lambda course: (course[1], course[0]))\n\n        dp = []\n        current = 0\n        for duration, end in courses:\n            current += duration\n            heapq.heappush(dp, -duration)  # Max Heap\n\n            if current > end:\n                current += heapq.heappop(dp)\n\n        return len(dp)\n")))}d.isMDXComponent=!0}}]);