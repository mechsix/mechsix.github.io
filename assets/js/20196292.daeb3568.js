"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[8734],{3905:function(e,r,t){t.d(r,{Zo:function(){return u},kt:function(){return f}});var n=t(67294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function d(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?d(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):d(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function a(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},d=Object.keys(e);for(n=0;n<d.length;n++)t=d[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(e);for(n=0;n<d.length;n++)t=d[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=n.createContext({}),l=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},u=function(e){var r=l(e.components);return n.createElement(c.Provider,{value:r},e.children)},s={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},p=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,d=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=l(t),f=o,m=p["".concat(c,".").concat(f)]||p[f]||s[f]||d;return t?n.createElement(m,i(i({ref:r},u),{},{components:t})):n.createElement(m,i({ref:r},u))}));function f(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var d=t.length,i=new Array(d);i[0]=p;var a={};for(var c in r)hasOwnProperty.call(r,c)&&(a[c]=r[c]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var l=2;l<d;l++)i[l]=t[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},74013:function(e,r,t){t.r(r),t.d(r,{frontMatter:function(){return a},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return u},default:function(){return p}});var n=t(87462),o=t(63366),d=(t(67294),t(3905)),i=["components"],a={title:"127. Word Ladder",sidebar_label:"127. Word Ladder",tags:["Leetcode Hard","BFS"]},c=void 0,l={unversionedId:"leetcode/1-500/word_ladder",id:"leetcode/1-500/word_ladder",title:"127. Word Ladder",description:"https://leetcode.com/problems/word-ladder/",source:"@site/docs/leetcode/1-500/127_word_ladder.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/word_ladder",permalink:"/docs/leetcode/1-500/word_ladder",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/127_word_ladder.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"BFS",permalink:"/docs/tags/bfs"}],version:"current",sidebarPosition:127,frontMatter:{title:"127. Word Ladder",sidebar_label:"127. Word Ladder",tags:["Leetcode Hard","BFS"]},sidebar:"docSidebar",previous:{title:"122. Best Time to Buy and Sell Stock II",permalink:"/docs/leetcode/1-500/best_time_buy_sell_stock_ii"},next:{title:"130. Surrounded Regions",permalink:"/docs/leetcode/1-500/surrounded_regions"}},u=[{value:"Python",id:"python",children:[],level:2}],s={toc:u};function p(e){var r=e.components,t=(0,o.Z)(e,i);return(0,d.kt)("wrapper",(0,n.Z)({},s,t,{components:r,mdxType:"MDXLayout"}),(0,d.kt)("p",null,(0,d.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/word-ladder/"},"https://leetcode.com/problems/word-ladder/")),(0,d.kt)("h2",{id:"python"},"Python"),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"BFS with deuplicate remove")),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-python"},"from collections import deque\n\n\nclass Solution:\n    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\n        if beginWord == endWord:\n            return 1\n\n        queue = deque()\n        queue.append(beginWord)\n\n        candidates = set(wordList)\n        candidates.add(beginWord)\n\n        result = 1\n        while queue:\n            for i in range(len(queue)):\n                word = queue.popleft()\n\n                if word not in candidates:\n                    continue\n\n                candidates.remove(word)\n\n                if word == endWord:\n                    return result\n\n                for i in range(len(word)):\n                    for char in string.ascii_letters[:26]:\n                        temp_word = word[:i] + char + word[i+1:]\n                        if temp_word in candidates:\n                            queue.append(temp_word)\n            result += 1\n        return 0\n")))}p.isMDXComponent=!0}}]);