"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[75446],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>g});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),m=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=m(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=m(r),d=a,g=p["".concat(c,".").concat(d)]||p[d]||u[d]||o;return r?n.createElement(g,i(i({ref:t},s),{},{components:r})):n.createElement(g,i({ref:t},s))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var m=2;m<o;m++)i[m]=r[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},11414:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>m});var n=r(87462),a=(r(67294),r(3905));const o={title:"48. Rotate Image",sidebar_label:"48. Rotate Image",tags:["Leetcode Medium","Matrix","In Place","Rust"]},i=void 0,l={unversionedId:"leetcode/1-500/rotate_image",id:"leetcode/1-500/rotate_image",title:"48. Rotate Image",description:"https://leetcode.com/problems/rotate-image/",source:"@site/docs/leetcode/1-500/48_rotate_image.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/rotate_image",permalink:"/docs/leetcode/1-500/rotate_image",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/48_rotate_image.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Matrix",permalink:"/docs/tags/matrix"},{label:"In Place",permalink:"/docs/tags/in-place"},{label:"Rust",permalink:"/docs/tags/rust"}],version:"current",sidebarPosition:48,frontMatter:{title:"48. Rotate Image",sidebar_label:"48. Rotate Image",tags:["Leetcode Medium","Matrix","In Place","Rust"]},sidebar:"docSidebar",previous:{title:"47. Permutations II",permalink:"/docs/leetcode/1-500/permutations_ii"},next:{title:"49. Group Anagrams",permalink:"/docs/leetcode/1-500/group_anagrams"}},c={},m=[{value:"Python",id:"python",level:2},{value:"Rust",id:"rust",level:2}],s={toc:m},p="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/rotate-image/"},"https://leetcode.com/problems/rotate-image/")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'class Solution:\n    def rotate(self, matrix: List[List[int]]) -> None:\n        """\n        Do not return anything, modify matrix in-place instead.\n        """\n        n = len(matrix)\n\n        for i in range(n//2 + n%2):\n            for j in range(n//2):\n                # top             right             bottom                left\n                matrix[i][j],     matrix[j][n-i-1], matrix[n-i-1][n-j-1], matrix[n-j-1][i] = \\\n                matrix[n-j-1][i], matrix[i][j],     matrix[j][n-i-1],     matrix[n-i-1][n-j-1]\n                # left            top               right                 bottom\n')),(0,a.kt)("h2",{id:"rust"},"Rust"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"impl Solution {\n    pub fn rotate(matrix: &mut Vec<Vec<i32>>) {\n        let n: usize = matrix.len();\n        for i in 0..(n/2 + n%2) {\n            for j in 0..(n/2) {\n                let originTop = matrix[i][j];\n\n                matrix[i][j] = matrix[n-j-1][i]; // left -> top\n                matrix[n-j-1][i] = matrix[n-i-1][n-j-1]; // bottom -> left\n                matrix[n-i-1][n-j-1] = matrix[j][n-i-1]; // right -> bottom\n                matrix[j][n-i-1] = originTop; // top -> right\n            }\n        }\n    }\n}\n")))}u.isMDXComponent=!0}}]);