"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[4476],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return f}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(n),f=o,_=d["".concat(s,".").concat(f)]||d[f]||m[f]||a;return n?r.createElement(_,i(i({ref:t},c),{},{components:n})):r.createElement(_,i({ref:t},c))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},80212:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return c},default:function(){return d}});var r=n(87462),o=n(63366),a=(n(67294),n(3905)),i=["components"],l={title:"1373. Maximum Sum BST in Binary Tree",sidebar_label:"1373. Maximum Sum BST in Binary Tree",tags:["Leetcode Hard","BST","Binary Tree"]},s=void 0,u={unversionedId:"leetcode/1001-1500/max_sum_bst_of_bt",id:"leetcode/1001-1500/max_sum_bst_of_bt",title:"1373. Maximum Sum BST in Binary Tree",description:"Python",source:"@site/docs/leetcode/1001-1500/1373_max_sum_bst_of_bt.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/max_sum_bst_of_bt",permalink:"/docs/leetcode/1001-1500/max_sum_bst_of_bt",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1373_max_sum_bst_of_bt.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"BST",permalink:"/docs/tags/bst"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"}],version:"current",sidebarPosition:1373,frontMatter:{title:"1373. Maximum Sum BST in Binary Tree",sidebar_label:"1373. Maximum Sum BST in Binary Tree",tags:["Leetcode Hard","BST","Binary Tree"]},sidebar:"docSidebar",previous:{title:"1346. Check If N and Its Double Exist",permalink:"/docs/leetcode/1001-1500/check_n_and_its_double_in_arr"},next:{title:"1413. Mini Value to Possitive Sum",permalink:"/docs/leetcode/1001-1500/min_value_get_positive_sum"}},c=[{value:"Python",id:"python",children:[],level:2}],m={toc:c};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'class Solution:\n    MIN_VAL = -4 * (10**4)\n    MAX_VAL = 4 * (10**4)\n\n    def __init__(self):\n        self.max_sum = 0\n\n    def maxSumBST(self, root: Optional[TreeNode]) -> int:\n        self.max_sum = 0\n        self._travel(root)\n        \n        return self.max_sum\n    \n    def _travel(self, node):\n        """\n        node: TreeNode root to check\n        return:\n            tuple(Bool, Number, Number, Number)\n            is_bst, tree_min, tree_max, tree_sum\n        """\n        if not node:\n            return True, self.MAX_VAL, self.MIN_VAL, 0\n        \n        is_left_bst,  left_min,  left_max,  left_sum  = self._travel(node.left)\n        is_right_bst, right_min, right_max, right_sum = self._travel(node.right)\n\n        # Postorder\n        if   is_left_bst and is_right_bst \\\n         and node.val > left_max \\\n         and node.val < right_min:            \n            # node as root is a BST\n            tree_sum = node.val + left_sum + right_sum\n            result = (\n                True,\n                min(left_min, node.val),\n                max(right_max, node.val),\n                tree_sum\n            )\n\n            # Update global val to keep the max sum\n            self.max_sum = max(self.max_sum, tree_sum)\n\n            return result\n\n        # node as root is not a BST\n        return False, None, None, 0\n')))}d.isMDXComponent=!0}}]);