"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[83235],{12519:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"leetcode/501-1000/verifying_an_alien_dictionary","title":"953. Verifying an Alien Dictionary","description":"https://leetcode.com/problems/verifying-an-alien-dictionary","source":"@site/docs/leetcode/501-1000/953_verifying_an_alien_dictionary.md","sourceDirName":"leetcode/501-1000","slug":"/leetcode/501-1000/verifying_an_alien_dictionary","permalink":"/docs/leetcode/501-1000/verifying_an_alien_dictionary","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Easy","permalink":"/docs/tags/leetcode-easy"}],"version":"current","sidebarPosition":953,"frontMatter":{"title":"953. Verifying an Alien Dictionary","sidebar_label":"953. Verifying an Alien Dictionary","tags":["Leetcode Easy"]},"sidebar":"docSidebar","previous":{"title":"946. Validate Stack Sequences","permalink":"/docs/leetcode/501-1000/validate_stack_sequences"},"next":{"title":"958. Check Completeness of a Binary Tree","permalink":"/docs/leetcode/501-1000/check_completeness_of_binary_tree"}}');var r=t(74848),o=t(28453);const a={title:"953. Verifying an Alien Dictionary",sidebar_label:"953. Verifying an Alien Dictionary",tags:["Leetcode Easy"]},s=void 0,c={},l=[{value:"Python",id:"python",level:2},{value:"Hashmap",id:"hashmap",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/verifying-an-alien-dictionary",children:"https://leetcode.com/problems/verifying-an-alien-dictionary"})}),"\n",(0,r.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,r.jsx)(n.h3,{id:"hashmap",children:"Hashmap"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def isAlienSorted(self, words: List[str], order: str) -> bool:\n        mapper = {letter: i for i, letter in enumerate(order)}\n\n        decoded = [\n            [mapper[letter] for letter in word]\n            for word in words\n        ]\n\n        for i in range(1, len(decoded)):\n            if decoded[i] < decoded[i-1]:\n                return False\n        return True\n"})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var i=t(96540);const r={},o=i.createContext(r);function a(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);