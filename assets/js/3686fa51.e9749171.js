"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[11794],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return y}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=s(n),f=i,y=u["".concat(l,".").concat(f)]||u[f]||p[f]||o;return n?r.createElement(y,a(a({ref:t},d),{},{components:n})):r.createElement(y,a({ref:t},d))}));function y(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=f;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[u]="string"==typeof e?e:i,a[1]=c;for(var s=2;s<o;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},59445:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return a},default:function(){return u},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return s}});var r=n(83117),i=(n(67294),n(3905));const o={title:"953. Verifying an Alien Dictionary",sidebar_label:"953. Verifying an Alien Dictionary",tags:["Leetcode Easy"]},a=void 0,c={unversionedId:"leetcode/501-1000/verifying_an_alien_dictionary",id:"leetcode/501-1000/verifying_an_alien_dictionary",title:"953. Verifying an Alien Dictionary",description:"https://leetcode.com/problems/verifying-an-alien-dictionary",source:"@site/docs/leetcode/501-1000/953_verifying_an_alien_dictionary.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/verifying_an_alien_dictionary",permalink:"/docs/leetcode/501-1000/verifying_an_alien_dictionary",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/953_verifying_an_alien_dictionary.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"}],version:"current",sidebarPosition:953,frontMatter:{title:"953. Verifying an Alien Dictionary",sidebar_label:"953. Verifying an Alien Dictionary",tags:["Leetcode Easy"]},sidebar:"docSidebar",previous:{title:"946. Validate Stack Sequences",permalink:"/docs/leetcode/501-1000/validate_stack_sequences"},next:{title:"958. Check Completeness of a Binary Tree",permalink:"/docs/leetcode/501-1000/check_completeness_of_binary_tree"}},l={},s=[{value:"Python",id:"python",level:2},{value:"Hashmap",id:"hashmap",level:3}],d={toc:s};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/verifying-an-alien-dictionary"},"https://leetcode.com/problems/verifying-an-alien-dictionary")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"hashmap"},"Hashmap"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def isAlienSorted(self, words: List[str], order: str) -> bool:\n        mapper = {letter: i for i, letter in enumerate(order)}\n\n        decoded = [\n            [mapper[letter] for letter in word]\n            for word in words\n        ]\n\n        for i in range(1, len(decoded)):\n            if decoded[i] < decoded[i-1]:\n                return False\n        return True\n")))}u.isMDXComponent=!0}}]);