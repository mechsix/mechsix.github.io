"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[30085],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(r),u=i,f=d["".concat(c,".").concat(u)]||d[u]||m[u]||a;return r?n.createElement(f,o(o({ref:t},p),{},{components:r})):n.createElement(f,o({ref:t},p))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[d]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},1527:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var n=r(87462),i=(r(67294),r(3905));const a={title:"54. Spiral Matrix",sidebar_label:"54. Spiral Matrix",tags:["Leetcode Medium","Matrix"]},o=void 0,l={unversionedId:"leetcode/1-500/spiral_matrix",id:"leetcode/1-500/spiral_matrix",title:"54. Spiral Matrix",description:"https://leetcode.com/problems/spiral-matrix/",source:"@site/docs/leetcode/1-500/54_spiral_matrix.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/spiral_matrix",permalink:"/docs/leetcode/1-500/spiral_matrix",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/54_spiral_matrix.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Matrix",permalink:"/docs/tags/matrix"}],version:"current",sidebarPosition:54,frontMatter:{title:"54. Spiral Matrix",sidebar_label:"54. Spiral Matrix",tags:["Leetcode Medium","Matrix"]},sidebar:"docSidebar",previous:{title:"53. Maximum Subarray",permalink:"/docs/leetcode/1-500/max_subarray"},next:{title:"55. Jump Game",permalink:"/docs/leetcode/1-500/jump_gamp"}},c={},s=[{value:"Python",id:"python",level:2}],p={toc:s},d="wrapper";function m(e){let{components:t,...r}=e;return(0,i.kt)(d,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/spiral-matrix/"},"https://leetcode.com/problems/spiral-matrix/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Time: O(m*n)"),(0,i.kt)("li",{parentName:"ul"},"Space: O(m*n)   # the visited hashmap")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:\n        m = len(matrix)\n        n = len(matrix[0])\n\n        limit = m*n\n        visited = set()\n        result = []\n\n        direction = 'right'\n        x, y = 0, 0\n        while len(result) < limit:\n            result.append(matrix[y][x])\n            visited.add((x, y))\n\n            if direction == 'right':\n                if x+1 < n and (x+1, y) not in visited:\n                    x += 1\n                else:\n                    direction = 'down'\n                    y += 1\n            elif direction == 'down':\n                if y+1 < m and (x, y+1) not in visited:\n                    y += 1\n                else:\n                    direction = 'left'\n                    x -= 1\n            elif direction == 'left':\n                if x-1 >= 0 and (x-1, y) not in visited:\n                    x -= 1\n                else:\n                    direction = 'up'\n                    y -= 1\n            else:\n                if y-1 >= 0 and (x, y-1) not in visited:\n                    y -= 1\n                else:\n                    direction = 'right'\n                    x += 1\n\n        return result\n")))}m.isMDXComponent=!0}}]);