"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[88692],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),d=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},c=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=d(r),u=o,f=m["".concat(s,".").concat(u)]||m[u]||p[u]||l;return r?n.createElement(f,a(a({ref:t},c),{},{components:r})):n.createElement(f,a({ref:t},c))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=r.length,a=new Array(l);a[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[m]="string"==typeof e?e:o,a[1]=i;for(var d=2;d<l;d++)a[d]=r[d];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},62194:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>d});var n=r(87462),o=(r(67294),r(3905));const l={title:"380. Insert Delete GetRandom O(1)",sidebar_label:"380. Insert Delete GetRandom O(1)",tags:["Leetcode Medium","Hash"]},a=void 0,i={unversionedId:"leetcode/1-500/insert_delete_get_random_o1",id:"leetcode/1-500/insert_delete_get_random_o1",title:"380. Insert Delete GetRandom O(1)",description:"https://leetcode.com/problems/insert-delete-getrandom-o1",source:"@site/docs/leetcode/1-500/380_insert_delete_get_random_o1.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/insert_delete_get_random_o1",permalink:"/docs/leetcode/1-500/insert_delete_get_random_o1",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/380_insert_delete_get_random_o1.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Hash",permalink:"/docs/tags/hash"}],version:"current",sidebarPosition:380,frontMatter:{title:"380. Insert Delete GetRandom O(1)",sidebar_label:"380. Insert Delete GetRandom O(1)",tags:["Leetcode Medium","Hash"]},sidebar:"docSidebar",previous:{title:"378. Kth Smallest Element in a Sorted Matrix",permalink:"/docs/leetcode/1-500/kth_smallest_elm_in_sorted_martrix"},next:{title:"382. Linked List Random Node",permalink:"/docs/leetcode/1-500/linked_list_rand_node"}},s={},d=[{value:"Python",id:"python",level:2}],c={toc:d},m="wrapper";function p(e){let{components:t,...r}=e;return(0,o.kt)(m,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/insert-delete-getrandom-o1"},"https://leetcode.com/problems/insert-delete-getrandom-o1")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import random\n\n\nclass RandomizedSet:\n\n    def __init__(self):\n        self.memory = set()\n\n    def insert(self, val: int) -> bool:\n        if val in self.memory:\n            return False\n        self.memory.add(val)\n        return True\n\n    def remove(self, val: int) -> bool:\n        if val in self.memory:\n            self.memory.remove(val)\n            return True\n        return False\n\n    def getRandom(self) -> int:\n        picked = random.randrange(0, len(self.memory))\n        return list(self.memory)[picked]\n")))}p.isMDXComponent=!0}}]);