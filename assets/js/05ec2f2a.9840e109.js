"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[48221],{36846:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>i,default:()=>u,frontMatter:()=>d,metadata:()=>c,toc:()=>a});var s=t(74848),o=t(28453);const d={title:"187. Repeated DNA Sequences",sidebar_label:"187. Repeated DNA Sequences",tags:["Leetcode Medium","Sliding Window"]},i=void 0,c={id:"leetcode/1-500/repeated_dna_sequences",title:"187. Repeated DNA Sequences",description:"https://leetcode.com/problems/repeated-dna-sequences/",source:"@site/docs/leetcode/1-500/187_repeated_dna_sequences.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/repeated_dna_sequences",permalink:"/docs/leetcode/1-500/repeated_dna_sequences",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Sliding Window",permalink:"/docs/tags/sliding-window"}],version:"current",sidebarPosition:187,frontMatter:{title:"187. Repeated DNA Sequences",sidebar_label:"187. Repeated DNA Sequences",tags:["Leetcode Medium","Sliding Window"]},sidebar:"docSidebar",previous:{title:"183. Customers Who Never Order",permalink:"/docs/leetcode/1-500/customers_who_never_order"},next:{title:"188. Best Time to Buy and Sell Stock IV",permalink:"/docs/leetcode/1-500/best_time_buy_sell_stock_iv"}},r={},a=[{value:"Python",id:"python",level:2},{value:"Sliding Window with hashmap memory",id:"sliding-window-with-hashmap-memory",level:3}];function l(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/repeated-dna-sequences/",children:"https://leetcode.com/problems/repeated-dna-sequences/"})}),"\n",(0,s.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,s.jsx)(n.h3,{id:"sliding-window-with-hashmap-memory",children:"Sliding Window with hashmap memory"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def findRepeatedDnaSequences(self, s: str) -> List[str]:\n        seem = set()\n        ans = set()\n\n        for i in range(len(s)-10+1):\n            sequence = s[i:i+10]\n            if sequence in seem:\n                ans.add(sequence)\n            seem.add(sequence)\n        return list(ans)\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var s=t(96540);const o={},d=s.createContext(o);function i(e){const n=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(d.Provider,{value:n},e.children)}}}]);