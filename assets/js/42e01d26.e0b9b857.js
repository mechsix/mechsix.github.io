"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[35629],{51268:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"leetcode/1-500/word_search_ii","title":"212. Word Search II","description":"https://leetcode.com/problems/word-search-ii/","source":"@site/docs/leetcode/1-500/212_word_search_ii.md","sourceDirName":"leetcode/1-500","slug":"/leetcode/1-500/word_search_ii","permalink":"/docs/leetcode/1-500/word_search_ii","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Hard","permalink":"/docs/tags/leetcode-hard"},{"inline":true,"label":"Backtracking","permalink":"/docs/tags/backtracking"}],"version":"current","sidebarPosition":212,"frontMatter":{"title":"212. Word Search II","sidebar_label":"212. Word Search II","tags":["Leetcode Hard","Backtracking"]},"sidebar":"docSidebar","previous":{"title":"211. Design Add and Search Words Data Structure","permalink":"/docs/leetcode/1-500/design_add_and_search_words_data_structure"},"next":{"title":"213. House Robber II","permalink":"/docs/leetcode/1-500/house_robber_ii"}}');var r=o(74848),i=o(28453);const c={title:"212. Word Search II",sidebar_label:"212. Word Search II",tags:["Leetcode Hard","Backtracking"]},s=void 0,d={},l=[{value:"Python",id:"python",level:2},{value:"Backtracking (Timelimit Exceed)",id:"backtracking-timelimit-exceed",level:3},{value:"Javascript",id:"javascript",level:2}];function a(n){const e={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.p,{children:(0,r.jsx)(e.a,{href:"https://leetcode.com/problems/word-search-ii/",children:"https://leetcode.com/problems/word-search-ii/"})}),"\n",(0,r.jsx)(e.h2,{id:"python",children:"Python"}),"\n",(0,r.jsx)(e.h3,{id:"backtracking-timelimit-exceed",children:"Backtracking (Timelimit Exceed)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"class Solution:\n    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:\n        row_limit = len(board)\n        col_limit = len(board[0])\n\n        length_limit = max([len(word) for word in words])\n        used = set()\n\n        accepts = set(words)\n        result = set()\n\n        def backtrack(word, row, col):\n            word = word + board[row][col]\n\n            if len(word) > length_limit:\n                return\n\n            if word in accepts:\n                result.add(word)\n\n            used.add((row, col))\n\n            # Go up\n            if row - 1 >= 0 and (row-1, col) not in used:\n                backtrack(word, row-1, col)\n\n            # Go down\n            if row + 1 < row_limit and (row+1, col) not in used:\n                backtrack(word, row+1, col)\n\n            # Go left\n            if col - 1 >= 0 and (row, col-1) not in used:\n                backtrack(word, row, col-1)\n\n            # Go right\n            if col + 1 < col_limit and (row, col+1) not in used:\n                backtrack(word, row, col+1)\n\n            used.remove((row, col))\n\n        for row in range(row_limit):\n            for col in range(col_limit):\n                backtrack('', row, col)\n        return result\n"})}),"\n",(0,r.jsx)(e.h2,{id:"javascript",children:"Javascript"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"var findWords = function (board, words) {\n  const trie = new Trie();\n  trie.create(words)\n  const trieRoot = trie.get();\n\n\tthis.finding = new Finding(board);\n\treturn this.finding.findWords(trieRoot);\n};\n\nclass Finding {\n\tconstructor(board) {\n\t\tthis.board = board;\n\t\tthis.maxRows = board.length;\n\t\tthis.maxCols = board[0].length;\n    this.result = [];\n\t}\n\n\tfindWords(root) {\n    for (let row = 0; row < this.board.length; row++) {\n      for (let col = 0; col < this.board[row].length; col++) {\n        if (root.childs[this.board[row][col]]) {\n          this.find(row, col, root)\n        }\n      }\n    }\n    // console.log(this.result)\n    return this.result;\n\t}\n\n\tfind(row, col, root) {\n    const letter = this.board[row][col];\n    const currNode = root.childs[letter];\n\n    if (currNode.word) {\n      this.result.push(currNode.word)\n      currNode.word = '';\n    }\n\n\t\tthis.board[row][col] = null;\n    // console.log(this.board)\n\n\t\tconst directions = [ [0, 1], [0, -1], [1, 0], [-1, 0] ];\n\n\t\tfor (const [x, y] of directions) {\n      const nextRow = row + x;\n      const nextCol = col + y;\n\n      if ( nextRow >= 0 && nextRow < this.maxRows && nextCol >= 0 && nextCol < this.maxCols) {\n        const nextLetter = this.board[nextRow][nextCol];\n        // console.log(currNode.childs[nextLetter])\n        if (currNode.childs[nextLetter]) {\n          this.find(nextRow, nextCol, currNode)\n        }\n      }\n\t\t}\n\n    this.board[row][col] = letter;\n\t}\n}\n\nclass TrieNode {\n  constructor() {\n    this.childs = {};\n    this.word = '';\n  }\n}\n\nclass Trie {\n  constructor() {\n    this.root = new TrieNode();\n  }\n\n  create(words) {\n    for (const word of words) {\n      let node = this.root;\n      for (let letter of word) {\n        if (node.childs[letter]) {\n          node = node.childs[letter];\n        } else {\n          const newNode = new TrieNode();\n          node.childs[letter] = newNode;\n          node = newNode;\n        }\n      }\n      node.word = word;\n    }\n  }\n\n  get() { return this.root; }\n}\n"})})]})}function h(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(a,{...n})}):a(n)}},28453:(n,e,o)=>{o.d(e,{R:()=>c,x:()=>s});var t=o(96540);const r={},i=t.createContext(r);function c(n){const e=t.useContext(i);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:c(n.components),t.createElement(i.Provider,{value:e},n.children)}}}]);