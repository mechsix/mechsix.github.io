"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[48574],{52322:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"leetcode/1-500/next_permutation","title":"31. Next Permutation","description":"https://leetcode.com/problems/next-permutation/","source":"@site/docs/leetcode/1-500/31_next_permutation.md","sourceDirName":"leetcode/1-500","slug":"/leetcode/1-500/next_permutation","permalink":"/docs/leetcode/1-500/next_permutation","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Medium","permalink":"/docs/tags/leetcode-medium"}],"version":"current","sidebarPosition":31,"frontMatter":{"title":"31. Next Permutation","sidebar_label":"31. Next Permutation","tags":["Leetcode Medium"]},"sidebar":"docSidebar","previous":{"title":"29. Divide Two Integers","permalink":"/docs/leetcode/1-500/divide_two_integers"},"next":{"title":"32. Longest Valid Parentheses","permalink":"/docs/leetcode/1-500/longest_valid_parentheses"}}');var r=n(74848),s=n(28453);const i={title:"31. Next Permutation",sidebar_label:"31. Next Permutation",tags:["Leetcode Medium"]},l=void 0,a={},c=[{value:"Python",id:"python",level:2}];function u(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://leetcode.com/problems/next-permutation/",children:"https://leetcode.com/problems/next-permutation/"})}),"\n",(0,r.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"class Solution:\n    def nextPermutation(self, nums: List[int]) -> None:\n        left = len(nums) - 1\n        right = len(nums) - 1\n\n        # Nums after left (not included) are not yet reach the max which is permutable\n        while left > 0 and nums[left-1] >= nums[left]:\n            left -= 1\n\n        # The nums already reach the max, go back to first permutation\n        if left == 0:\n            self.reverse(nums, left, len(nums)-1)\n            return\n\n        # In the permutable zone, swap the left bound of next order head\n        while nums[right] <= nums[left-1]:\n            right -= 1\n\n        nums[left-1], nums[right] = nums[right], nums[left-1]\n\n        # Reverse the permutable zone order\n        self.reverse(nums, left, len(nums)-1)\n\n    def reverse(self, nums, left, right):\n        stack = []\n        for i in range(left, right+1):\n            stack.append(nums[i])\n        for i in range(left, right+1):\n            nums[i] = stack.pop()\n"})})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>l});var o=n(96540);const r={},s=o.createContext(r);function i(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);