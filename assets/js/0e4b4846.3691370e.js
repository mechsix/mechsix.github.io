"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[87554],{95573:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"leetcode/1-500/group_anagrams","title":"49. Group Anagrams","description":"https://leetcode.com/problems/group-anagrams/","source":"@site/docs/leetcode/1-500/49_group_anagrams.md","sourceDirName":"leetcode/1-500","slug":"/leetcode/1-500/group_anagrams","permalink":"/docs/leetcode/1-500/group_anagrams","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Medium","permalink":"/docs/tags/leetcode-medium"}],"version":"current","sidebarPosition":49,"frontMatter":{"title":"49. Group Anagrams","sidebar_label":"49. Group Anagrams","tags":["Leetcode Medium"]},"sidebar":"docSidebar","previous":{"title":"48. Rotate Image","permalink":"/docs/leetcode/1-500/rotate_image"},"next":{"title":"50. Pow(x, n)","permalink":"/docs/leetcode/1-500/power_x_n"}}');var o=t(74848),s=t(28453);const a={title:"49. Group Anagrams",sidebar_label:"49. Group Anagrams",tags:["Leetcode Medium"]},c=void 0,i={},u=[{value:"Python",id:"python",level:2},{value:"Group by custom key",id:"group-by-custom-key",level:3}];function l(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://leetcode.com/problems/group-anagrams/",children:"https://leetcode.com/problems/group-anagrams/"})}),"\n",(0,o.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,o.jsx)(n.h3,{id:"group-by-custom-key",children:"Group by custom key"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Time: O(2N)"}),"\n",(0,o.jsx)(n.li,{children:"Space: O(N+M), which M is the final group number"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from collections import defaultdict, Counter\n\n\nclass Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        groups = defaultdict(list)\n\n        for string in strs:\n            key = self.gen_key(string)\n            groups[key].append(string)\n\n        return list(groups.values())\n\n    @staticmethod\n    def gen_key(string):\n        """\n        return: str, which "{char}{count}" * n, with sorted char order\n            ate => "a1e1t1"\n            eel => "e2l1"\n        """\n        counts = Counter(string)\n        sequence = []\n        for char in sorted(counts.keys()):\n            sequence.append(char)\n            sequence.append(str(counts[char]))\n        return \'\'.join(sequence)\n'})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var r=t(96540);const o={},s=r.createContext(o);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);