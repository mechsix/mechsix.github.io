"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[2536],{3905:function(e,r,n){n.d(r,{Zo:function(){return s},kt:function(){return m}});var t=n(67294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function a(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function c(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=t.createContext({}),d=function(e){var r=t.useContext(l),n=r;return e&&(n="function"==typeof e?e(r):a(a({},r),e)),n},s=function(e){var r=d(e.components);return t.createElement(l.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},p=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=d(n),m=o,f=p["".concat(l,".").concat(m)]||p[m]||u[m]||i;return n?t.createElement(f,a(a({ref:r},s),{},{components:n})):t.createElement(f,a({ref:r},s))}));function m(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=p;var c={};for(var l in r)hasOwnProperty.call(r,l)&&(c[l]=r[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var d=2;d<i;d++)a[d]=n[d];return t.createElement.apply(null,a)}return t.createElement.apply(null,n)}p.displayName="MDXCreateElement"},41093:function(e,r,n){n.r(r),n.d(r,{contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return c},metadata:function(){return d},toc:function(){return s}});var t=n(87462),o=n(63366),i=(n(67294),n(3905)),a=["components"],c={title:"897. Increasing Order Search Tree",sidebar_label:"897. Increasing Order Search Tree",tags:["Leetcode Easy","BST"]},l=void 0,d={unversionedId:"leetcode/501-1000/increasing_order_bst",id:"leetcode/501-1000/increasing_order_bst",title:"897. Increasing Order Search Tree",description:"https://leetcode.com/problems/increasing-order-search-tree/",source:"@site/docs/leetcode/501-1000/897_increasing_order_bst.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/increasing_order_bst",permalink:"/docs/leetcode/501-1000/increasing_order_bst",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/897_increasing_order_bst.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"BST",permalink:"/docs/tags/bst"}],version:"current",sidebarPosition:897,frontMatter:{title:"897. Increasing Order Search Tree",sidebar_label:"897. Increasing Order Search Tree",tags:["Leetcode Easy","BST"]},sidebar:"docSidebar",previous:{title:"878. Nth Magical Number",permalink:"/docs/leetcode/501-1000/nth_magical_num"},next:{title:"905. Sort Array By Parity",permalink:"/docs/leetcode/501-1000/sort_array_by_parity"}},s=[{value:"Python",id:"python",children:[{value:"Inorder travel &amp; rebuild",id:"inorder-travel--rebuild",children:[],level:3},{value:"Inorder travel with pointers swap",id:"inorder-travel-with-pointers-swap",children:[],level:3}],level:2}],u={toc:s};function p(e){var r=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,t.Z)({},u,n,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/increasing-order-search-tree/"},"https://leetcode.com/problems/increasing-order-search-tree/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"inorder-travel--rebuild"},"Inorder travel & rebuild"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def increasingBST(self, root: TreeNode) -> TreeNode:\n        def inorder(node):\n            if not node:\n                return\n            yield from inorder(node.left)\n            yield node.val\n            yield from inorder(node.right)\n\n        dummy = TreeNode()\n        cur = dummy\n        for value in inorder(root):\n            cur.right = TreeNode(val=value)\n            cur = cur.right\n\n        return dummy.right\n")),(0,i.kt)("h3",{id:"inorder-travel-with-pointers-swap"},"Inorder travel with pointers swap"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def increasingBST(self, root: TreeNode) -> TreeNode:\n        dummy = TreeNode()\n        cur = dummy\n\n        def inorder(node):\n            nonlocal cur\n            if not node:\n                return\n\n            inorder(node.left)\n\n            node.left = None\n            cur.right = node\n            cur = node\n\n            inorder(node.right)\n\n        inorder(root)\n        return dummy.right\n")))}p.isMDXComponent=!0}}]);