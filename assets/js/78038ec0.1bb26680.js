"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[69499],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>g});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),c=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(r),d=a,g=p["".concat(i,".").concat(d)]||p[d]||m[d]||l;return r?n.createElement(g,s(s({ref:t},u),{},{components:r})):n.createElement(g,s({ref:t},u))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,s=new Array(l);s[0]=d;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o[p]="string"==typeof e?e:a,s[1]=o;for(var c=2;c<l;c++)s[c]=r[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},65027:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var n=r(87462),a=(r(67294),r(3905));const l={title:"242. Valid Anagram",sidebar_label:"242. Valid Anagram",tags:["Leetcode Easy","Rust","CTCI"]},s=void 0,o={unversionedId:"leetcode/1-500/valid_anagram",id:"leetcode/1-500/valid_anagram",title:"242. Valid Anagram",description:"https://leetcode.com/problems/valid-anagram/",source:"@site/docs/leetcode/1-500/242_valid_anagram.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/valid_anagram",permalink:"/docs/leetcode/1-500/valid_anagram",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/242_valid_anagram.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Rust",permalink:"/docs/tags/rust"},{label:"CTCI",permalink:"/docs/tags/ctci"}],version:"current",sidebarPosition:242,frontMatter:{title:"242. Valid Anagram",sidebar_label:"242. Valid Anagram",tags:["Leetcode Easy","Rust","CTCI"]},sidebar:"docSidebar",previous:{title:"240. Search a 2D Matrix II",permalink:"/docs/leetcode/1-500/search_2d_matrix_ii"},next:{title:"250. Count Univalue Subtrees",permalink:"/docs/leetcode/1-500/count_univalue_subtree"}},i={},c=[{value:"Python",id:"python",level:2},{value:"Rust",id:"rust",level:2},{value:"Mapper",id:"mapper",level:3},{value:"Sort the string",id:"sort-the-string",level:3}],u={toc:c},p="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/valid-anagram/"},"https://leetcode.com/problems/valid-anagram/")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"CTCI 1.2 Check Permutation")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("p",null,"Consider ",(0,a.kt)("inlineCode",{parentName:"p"},"s")," has length ",(0,a.kt)("inlineCode",{parentName:"p"},"M"),"; ",(0,a.kt)("inlineCode",{parentName:"p"},"t")," has length ",(0,a.kt)("inlineCode",{parentName:"p"},"N")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Time: O(NlogN * MlogM)"),(0,a.kt)("li",{parentName:"ul"},"Space: O(N+M)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def isAnagram(self, s: str, t: str) -> bool:\n        if len(s) != len(t):\n            return False\n\n        s_chars = list(s)\n        t_chars = list(t)\n        s_chars.sort()\n        t_chars.sort()\n\n        for i in range(len(s_chars)-1, -1, -1):\n            s_char = s_chars[i]\n            if s_char != t_chars[-1]:\n                return False\n            t_chars.pop()\n        return True\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Time: O(logM)"),(0,a.kt)("li",{parentName:"ul"},"Space: O(M+N) worst case")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from collections import Counter\n\nclass Solution:\n    def isAnagram(self, s: str, t: str) -> bool:\n        if len(s) != len(t):\n            return False\n\n        s_counts = Counter(s)\n        t_counts = Counter(t)\n\n        for char, count in s_counts.items():\n            if char not in t_counts or t_counts[char] != count:\n                return False\n        return True\n")),(0,a.kt)("h2",{id:"rust"},"Rust"),(0,a.kt)("h3",{id:"mapper"},"Mapper"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Time: O(N)"),(0,a.kt)("li",{parentName:"ul"},"Space: O(1)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"impl Solution {\n    pub fn is_anagram(s: String, t: String) -> bool {\n        if s.len() != t.len() {\n            return false\n        }\n\n        let mut mapper_s = [0; 26];\n        let mut mapper_t = [0; 26];\n\n        for i in s.as_bytes().iter() {\n            mapper_s[(i-b'a') as usize] += 1;\n        }\n        for j in t.as_bytes().iter() {\n            mapper_t[(j-b'a') as usize] += 1;\n        }\n\n        mapper_s == mapper_t\n    }\n}\n")),(0,a.kt)("h3",{id:"sort-the-string"},"Sort the string"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Time: O(NlogN) // by sort"),(0,a.kt)("li",{parentName:"ul"},"Space: O(1)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"use std::iter::Iterator;\nuse std::iter::FromIterator;\n\n\nimpl Solution {\n    pub fn is_anagram(s: String, t: String) -> bool {\n        if s.len() != t.len() {\n            return false\n        }\n\n        let slice_s: &str = &s[..];\n        let slice_t: &str = &t[..];\n\n        let mut chars_s: Vec<char> = slice_s.chars().collect();\n        let mut chars_t: Vec<char> = slice_t.chars().collect();\n\n        chars_s.sort_by(|pre, cur| cur.cmp(pre));\n        chars_t.sort_by(|pre, cur| cur.cmp(pre));\n\n        let sorted_s = String::from_iter(chars_s);\n        let sorted_t = String::from_iter(chars_t);\n\n        sorted_s == sorted_t\n    }\n}\n")))}m.isMDXComponent=!0}}]);