"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[66609],{3905:function(t,e,n){n.d(e,{Zo:function(){return p},kt:function(){return m}});var r=n(67294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function c(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},l=Object.keys(t);for(r=0;r<l.length;r++)n=l[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(r=0;r<l.length;r++)n=l[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var s=r.createContext({}),a=function(t){var e=r.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},p=function(t){var e=a(t.components);return r.createElement(s.Provider,{value:e},t.children)},h="mdxType",u={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(t,e){var n=t.components,o=t.mdxType,l=t.originalType,s=t.parentName,p=c(t,["components","mdxType","originalType","parentName"]),h=a(n),d=o,m=h["".concat(s,".").concat(d)]||h[d]||u[d]||l;return n?r.createElement(m,i(i({ref:e},p),{},{components:n})):r.createElement(m,i({ref:e},p))}));function m(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var l=n.length,i=new Array(l);i[0]=d;var c={};for(var s in e)hasOwnProperty.call(e,s)&&(c[s]=e[s]);c.originalType=t,c[h]="string"==typeof t?t:o,i[1]=c;for(var a=2;a<l;a++)i[a]=n[a];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},656:function(t,e,n){n.r(e),n.d(e,{assets:function(){return s},contentTitle:function(){return i},default:function(){return h},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return a}});var r=n(83117),o=(n(67294),n(3905));const l={title:"Example - Bubble Sorter",sidebar_title:"Example - Bubble Sorter",sidebar_position:3},i=void 0,c={unversionedId:"typescript/example-bubble-sorter",id:"typescript/example-bubble-sorter",title:"Example - Bubble Sorter",description:"This is a study note of Typescript The Complete Developers Guide, if you're looking for more details of these example, please see the course",source:"@site/docs/typescript/example-bubble-sorter.md",sourceDirName:"typescript",slug:"/typescript/example-bubble-sorter",permalink:"/docs/typescript/example-bubble-sorter",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/typescript/example-bubble-sorter.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Example - Bubble Sorter",sidebar_title:"Example - Bubble Sorter",sidebar_position:3},sidebar:"docSidebar",previous:{title:"Developing Environment",permalink:"/docs/typescript/useful-dev-packages"},next:{title:"Interfaces vs Abstract Classes",permalink:"/docs/typescript/interface-vs-abstract-classess"}},s={},a=[{value:"v1 - Basic Sorter",id:"v1---basic-sorter",level:2},{value:"v2 - Support String",id:"v2---support-string",level:2},{value:"v3 - Separate swapping and comparison",id:"v3---separate-swapping-and-comparison",level:2},{value:"v4 - Guard with Abstract Class",id:"v4---guard-with-abstract-class",level:2}],p={toc:a};function h(t){let{components:e,...n}=t;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This is a study note of ",(0,o.kt)("a",{parentName:"p",href:"https://www.udemy.com/course/typescript-the-complete-developers-guide"},"Typescript The Complete Developers Guide"),", if you're looking for more details of these example, please see the course"),(0,o.kt)("h2",{id:"v1---basic-sorter"},"v1 - Basic Sorter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="sorter.ts"',title:'"sorter.ts"'},"// Bubble Soter (Typescript)\nclass Sorter {\n  // collection: number[];\n  // constructor(collection: number[]) {\n  //   this.collection = collection\n  // }\n\n  // * Typescript Constructor Shorthand\n  constructor(public collection: number[]) {}\n\n  sort(): void {\n    const { length } = this.collection;\n    for (let i = 0; i < length; i++) {\n      for (let j = 0; j < length - i - 1; j++) {\n        if (this.collection[j] > this.collection[j + 1]) {\n          const leftHand = this.collection[j];\n          this.collection[j] = this.collection[j + 1];\n          this.collection[j + 1] = leftHand;\n        }\n      }\n    }\n  }\n}\n\nconst sorter = new Sorter([10, 3, -5, 0]);\nsorter.sort();\nconsole.log(sorter.collection);\n")),(0,o.kt)("p",null,"The compiled javascript, can see what ",(0,o.kt)("inlineCode",{parentName:"p"},"tsc")," checked and removed"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The type declaration of collection"),(0,o.kt)("li",{parentName:"ul"},"Return type declaration"),(0,o.kt)("li",{parentName:"ul"},"The constructor shorthand (",(0,o.kt)("a",{parentName:"li",href:"https://maksimivanov.com/posts/typescript-constructor-shorthand/"},"Reference"),")")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="sorter.js"',title:'"sorter.js"'},'// Bubble Soter (Compiled Javascript)\n"use strict";\nclass Sorter {\n  constructor(collection) {\n    this.collection = collection;\n  }\n  sort() {\n    const { length } = this.collection;\n    for (let i = 0; i < length; i++) {\n      for (let j = 0; j < length - i - 1; j++) {\n        if (this.collection[j] > this.collection[j + 1]) {\n          const leftHand = this.collection[j];\n          this.collection[j] = this.collection[j + 1];\n          this.collection[j + 1] = leftHand;\n        }\n      }\n    }\n  }\n}\nconst sorter = new Sorter([10, 3, -5, 0]);\nsorter.sort();\nconsole.log(sorter.collection);\n')),(0,o.kt)("h2",{id:"v2---support-string"},"v2 - Support String"),(0,o.kt)("p",null,"Since ",(0,o.kt)("inlineCode",{parentName:"p"},"string")," can't be replace in place in the Javascript, we have no choice to make the program determine what type it is in the cycle"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="soter-enhanced.ts"',title:'"soter-enhanced.ts"'},"// Bubble Soter with string support (Typescript)\nclass Sorter {\n  constructor(public collection: number[] | string) { }\n\n  sort(): void {\n    const { length } = this.collection;\n\n    for (let i = 0; i < length; i++) {\n      for (let j = 0; j < length - i - 1; j++) {\n        if (this.collection instanceof Array) {\n          if (this.collection[j] > this.collection[j + 1]) {\n            const leftHand = this.collection[j];\n            this.collection[j] = this.collection[j + 1];\n            this.collection[j + 1] = leftHand;\n          }\n        }\n\n        if (typeof this.collection === 'string') {\n          if (this.collection[j].charCodeAt(0) > this.collection[j + 1].charCodeAt(0)) {\n            const leftHand = this.collection[j];\n            this.collection = this.collection.substr(0, j) + this.collection[j + 1] + this.collection[j] + this.collection.substr(j + 2)\n          }\n        }\n      }\n    }\n  }\n}\n")),(0,o.kt)("p",null,"And this is how the compiled javascript code looks like"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="sorter-enhanced.js"',title:'"sorter-enhanced.js"'},"// Bubble Soter with string support (Compiled Javascript)\n\"use strict\";\nclass Sorter {\n    constructor(collection) {\n        this.collection = collection;\n    }\n    sort() {\n        const { length } = this.collection;\n        for (let i = 0; i < length; i++) {\n            for (let j = 0; j < length - i - 1; j++) {\n                if (this.collection instanceof Array) {\n                    if (this.collection[j] > this.collection[j + 1]) {\n                        const leftHand = this.collection[j];\n                        this.collection[j] = this.collection[j + 1];\n                        this.collection[j + 1] = leftHand;\n                    }\n                }\n                if (typeof this.collection === 'string') {\n                    if (this.collection[j].charCodeAt(0) > this.collection[j + 1].charCodeAt(0)) {\n                        const leftHand = this.collection[j];\n                        this.collection = this.collection.substr(0, j) + this.collection[j + 1] + this.collection[j] + this.collection.substr(j + 2);\n                    }\n                }\n            }\n        }\n    }\n}\n")),(0,o.kt)("h2",{id:"v3---separate-swapping-and-comparison"},"v3 - Separate swapping and comparison"),(0,o.kt)("p",null,"Typescript can only help you to ",(0,o.kt)("strong",{parentName:"p"},"check")," the typing, guarad the type but can't help you to add checking logic to the code.  To resolve the problem, you'll still need the refactor skill to decouple the components from the program."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="collection.ts"',title:'"collection.ts"'},"export class NumbersCollection {\n  constructor(public data: number[]) {}\n\n  get length(): number {\n    return this.data.length;\n  }\n  compare(leftIndex: number, rightIndex: number): boolean {\n    return this.data[leftIndex] > this.data[rightIndex];\n  }\n\n  swap(leftIndex: number, rightIndex: number): void {\n    const leftHand = this.data[leftIndex];\n    this.data[leftIndex] = this.data[rightIndex];\n    this.data[rightIndex] = leftHand;\n  }\n}\n\nexport class CharactersCollection {\n  constructor(public data: string) {}\n\n  get length(): number {\n    return this.data.length;\n  }\n\n  compare(leftIndex: number, rightIndex: number): boolean {\n    return (\n      this.data[leftIndex].toLowerCase() > this.data[rightIndex].toLowerCase()\n    );\n  }\n  swap(leftIndex: number, rightIndex: number): void {\n    const characters = this.data.split('');\n\n    const leftHand = characters[leftIndex];\n    characters[leftIndex] = characters[rightIndex];\n    characters[rightIndex] = leftHand;\n\n    this.data = characters.join('');\n  }\n}\n\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="sorter.ts"',title:'"sorter.ts"'},"import {NumbersCollection, CharactersCollection} from 'collections\"\n\n\ninterface Sortable {\n  length: number;\n  compare(leftIndex: number, rightIndex: number): boolean;\n  swap(leftIndex: number, rightIndex: number): void;\n}\n\nexport class Sorter {\n  constructor(public collection: Sortable) {}\n\n  sort(): void {\n    const { length } = this.collection;\n\n    for (let i = 0; i < length; i++) {\n      for (let j = 0; j < length - i - 1; j++) {\n        if (this.collection.compare(j, j + 1)) {\n          this.collection.swap(j, j + 1);\n        }\n      }\n    }\n  }\n}\n\nconst numbersCollection = new NumbersCollection([10, 3, -5, 0]);\nconst num_sorter = new Sorter(numbersCollection);\nnum_sorter.sort();\nconsole.log(numbersCollection.data);\n\nconst charactersCollection = new CharactersCollection('Xaayb');\nconst char_sorter = new Sorter(charactersCollection);\nchar_sorter.sort();\nconsole.log(charactersCollection.data);\n")),(0,o.kt)("h2",{id:"v4---guard-with-abstract-class"},"v4 - Guard with Abstract Class"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title=sorter-type.ts",title:"sorter-type.ts"},"export abstract class Sorter {\n  abstract compare(leftIndex: number, rightIndex: number): boolean;\n  abstract swap(leftIndex: number, rightIndex: number): void;\n  abstract length: number;\n\n  sort(): void {\n    const { length } = this;\n\n    for (let i = 0; i < length; i++) {\n      for (let j = 0; j < length - i - 1; j++) {\n        if (this.compare(j, j + 1)) {\n          this.swap(j, j + 1);\n        }\n      }\n    }\n  }\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title=sorter.ts",title:"sorter.ts"},"import { Sorter } from './sorter-type';\n\nexport class CharactersCollection extends Sorter {\n  constructor(public data: string) {\n    super();\n  }\n\n  get length(): number {\n    return this.data.length;\n  }\n\n  compare(leftIndex: number, rightIndex: number): boolean {\n    return (\n      this.data[leftIndex].toLowerCase() > this.data[rightIndex].toLowerCase()\n    );\n  }\n\n  swap(leftIndex: number, rightIndex: number): void {\n    const characters = this.data.split('');\n\n    const leftHand = characters[leftIndex];\n    characters[leftIndex] = characters[rightIndex];\n    characters[rightIndex] = leftHand;\n\n    this.data = characters.join('');\n  }\n}\n\nexport class NumbersCollection extends Sorter {\n  constructor(public data: number[]) {\n    super();\n  }\n\n  get length(): number {\n    return this.data.length;\n  }\n\n  compare(leftIndex: number, rightIndex: number): boolean {\n    return this.data[leftIndex] > this.data[rightIndex];\n  }\n\n  swap(leftIndex: number, rightIndex: number): void {\n    const leftHand = this.data[leftIndex];\n    this.data[leftIndex] = this.data[rightIndex];\n    this.data[rightIndex] = leftHand;\n  }\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title=index.ts",title:"index.ts"},"import { NumbersCollection, CharactersCollection } from './sorter';\n\nconst numbersCollection = new NumbersCollection([50, 3, -5, 0]);\nconst sorter1 = new Sorter(numbersCollection);\nsorter1.sort();\nconsole.log(numbersCollection.data);\n\nconst charactersCollection = new CharactersCollection('Xaayb');\nconst sorter2 = new Sorter(charactersCollection);\nsorter2.sort();\nconsole.log(charactersCollection.data);\n")))}h.isMDXComponent=!0}}]);