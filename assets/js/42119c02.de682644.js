"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[75446],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),m=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=m(e.components);return r.createElement(l.Provider,{value:t},e.children)},s="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),s=m(n),d=o,f=s["".concat(l,".").concat(d)]||s[d]||p[d]||i;return n?r.createElement(f,a(a({ref:t},u),{},{components:n})):r.createElement(f,a({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[s]="string"==typeof e?e:o,a[1]=c;for(var m=2;m<i;m++)a[m]=n[m];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},11414:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return a},default:function(){return s},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return m}});var r=n(83117),o=(n(67294),n(3905));const i={title:"48. Rotate Image",sidebar_label:"48. Rotate Image",tags:["Leetcode Medium","Matrix","In Place"]},a=void 0,c={unversionedId:"leetcode/1-500/rotate_image",id:"leetcode/1-500/rotate_image",title:"48. Rotate Image",description:"https://leetcode.com/problems/rotate-image/",source:"@site/docs/leetcode/1-500/48_rotate_image.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/rotate_image",permalink:"/docs/leetcode/1-500/rotate_image",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/48_rotate_image.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Matrix",permalink:"/docs/tags/matrix"},{label:"In Place",permalink:"/docs/tags/in-place"}],version:"current",sidebarPosition:48,frontMatter:{title:"48. Rotate Image",sidebar_label:"48. Rotate Image",tags:["Leetcode Medium","Matrix","In Place"]},sidebar:"docSidebar",previous:{title:"47. Permutations II",permalink:"/docs/leetcode/1-500/permutations_ii"},next:{title:"49. Group Anagrams",permalink:"/docs/leetcode/1-500/group_anagrams"}},l={},m=[{value:"Python",id:"python",level:2},{value:"Rust",id:"rust",level:2}],u={toc:m};function s(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/rotate-image/"},"https://leetcode.com/problems/rotate-image/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'class Solution:\n    def rotate(self, matrix: List[List[int]]) -> None:\n        """\n        Do not return anything, modify matrix in-place instead.\n        """\n        n = len(matrix)\n\n        for i in range(n//2 + n%2):\n            for j in range(n//2):\n                # top             right             bottom                left\n                matrix[i][j],     matrix[j][n-i-1], matrix[n-i-1][n-j-1], matrix[n-j-1][i] = \\\n                matrix[n-j-1][i], matrix[i][j],     matrix[j][n-i-1],     matrix[n-i-1][n-j-1]\n                # left            top               right                 bottom\n')),(0,o.kt)("h2",{id:"rust"},"Rust"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"impl Solution {\n    pub fn rotate(matrix: &mut Vec<Vec<i32>>) {\n        let n: usize = matrix.len();\n        for i in 0..(n/2 + n%2) {\n            for j in 0..(n/2) {\n                let originTop = matrix[i][j];\n\n                matrix[i][j] = matrix[n-j-1][i]; // left -> top\n                matrix[n-j-1][i] = matrix[n-i-1][n-j-1]; // bottom -> left\n                matrix[n-i-1][n-j-1] = matrix[j][n-i-1]; // right -> bottom\n                matrix[j][n-i-1] = originTop; // top -> right\n            }\n        }\n    }\n}\n")))}s.isMDXComponent=!0}}]);