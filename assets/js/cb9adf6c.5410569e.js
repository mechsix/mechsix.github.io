"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[78049],{73613:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"leetcode/501-1000/max_length_of_repeated_subarray","title":"718. Maximum Length of Repeated Subarray","description":"https://leetcode.com/problems/maximum-length-of-repeated-subarray/","source":"@site/docs/leetcode/501-1000/718_max_length_of_repeated_subarray.md","sourceDirName":"leetcode/501-1000","slug":"/leetcode/501-1000/max_length_of_repeated_subarray","permalink":"/docs/leetcode/501-1000/max_length_of_repeated_subarray","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"DP","permalink":"/docs/tags/dp"}],"version":"current","sidebarPosition":718,"frontMatter":{"title":"718. Maximum Length of Repeated Subarray","sidebar_label":"718. Maximum Length of Repeated Subarray","tags":["DP"]},"sidebar":"docSidebar","previous":{"title":"712. Minimum ASCII Delete Sum for Two Strings","permalink":"/docs/leetcode/501-1000/minimum-ascii-delete-sum-for-two-strings"},"next":{"title":"723. Candy Crush","permalink":"/docs/leetcode/501-1000/candy_crush"}}');var o=n(74848),a=n(28453);const s={title:"718. Maximum Length of Repeated Subarray",sidebar_label:"718. Maximum Length of Repeated Subarray",tags:["DP"]},i=void 0,d={},l=[{value:"Python",id:"python",level:2},{value:"Bottom Up DP",id:"bottom-up-dp",level:3}];function c(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{href:"https://leetcode.com/problems/maximum-length-of-repeated-subarray/",children:"https://leetcode.com/problems/maximum-length-of-repeated-subarray/"})}),"\n",(0,o.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,o.jsx)(t.h3,{id:"bottom-up-dp",children:"Bottom Up DP"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"class Solution:\n    def findLength(self, nums1: List[int], nums2: List[int]) -> int:\n        m, n = len(nums1), len(nums2)\n\n        dp = [[0]*(n+1) for _ in range(m+1)]\n\n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                if nums1[i-1] == nums2[j-1]:\n\n                    dp[i][j] = dp[i-1][j-1] + 1\n\n        return max([max(row) for row in dp])\n"})})]})}function m(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var r=n(96540);const o={},a=r.createContext(o);function s(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);