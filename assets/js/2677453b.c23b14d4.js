"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[46388],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},f="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),f=u(n),d=o,m=f["".concat(s,".").concat(d)]||f[d]||p[d]||i;return n?r.createElement(m,a(a({ref:t},l),{},{components:n})):r.createElement(m,a({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[f]="string"==typeof e?e:o,a[1]=c;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},49117:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return a},default:function(){return f},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return u}});var r=n(83117),o=(n(67294),n(3905));const i={title:"2305. Fair Distribution of Cookies",sidebar_label:"2305. Fair Distribution of Cookies",tags:["Leetcode Medium","DP","Bit Manipulation"]},a=void 0,c={unversionedId:"leetcode/2000/fair_distribution_of_cookies",id:"leetcode/2000/fair_distribution_of_cookies",title:"2305. Fair Distribution of Cookies",description:"https://leetcode.com/problems/fair-distribution-of-cookies",source:"@site/docs/leetcode/2000/2305_fair_distribution_of_cookies.md",sourceDirName:"leetcode/2000",slug:"/leetcode/2000/fair_distribution_of_cookies",permalink:"/docs/leetcode/2000/fair_distribution_of_cookies",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/2000/2305_fair_distribution_of_cookies.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"DP",permalink:"/docs/tags/dp"},{label:"Bit Manipulation",permalink:"/docs/tags/bit-manipulation"}],version:"current",sidebarPosition:2305,frontMatter:{title:"2305. Fair Distribution of Cookies",sidebar_label:"2305. Fair Distribution of Cookies",tags:["Leetcode Medium","DP","Bit Manipulation"]},sidebar:"docSidebar",previous:{title:"2246. Longest Path With Different Adjacent Characters",permalink:"/docs/leetcode/2000/longest_path_with_different_adjacent_chars"},next:{title:"2306. Naming a Company",permalink:"/docs/leetcode/2000/naming_a_company"}},s={},u=[{value:"Python",id:"python",level:2}],l={toc:u};function f(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/fair-distribution-of-cookies"},"https://leetcode.com/problems/fair-distribution-of-cookies")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from math import inf\nfrom functools import cache\n\n\nclass Solution:\n    def distributeCookies(self, cookies: List[int], k: int) -> int:\n        n = len(cookies)\n\n        @cache\n        def dfs(mask, remain):\n            if mask == 0:\n                return 0\n            \n            if remain == 0:\n                return inf\n            \n            result = inf\n            origin = mask\n\n            while mask:\n                mask = origin & (mask-1)\n                total = sum(cookies[i] for i in range(n) if (origin^mask) & 1<<i)\n                result = min(result, max(total, dfs(mask, remain-1)))\n\n            return result\n\n        return dfs((1<<n)-1, k)\n")))}f.isMDXComponent=!0}}]);