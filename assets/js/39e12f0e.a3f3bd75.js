"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[27252],{91810:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"leetcode/1-500/max_depth_of_binary_tree","title":"104. Maximum Depth of Binary Tree","description":"Python","source":"@site/docs/leetcode/1-500/104_max_depth_of_binary_tree.md","sourceDirName":"leetcode/1-500","slug":"/leetcode/1-500/max_depth_of_binary_tree","permalink":"/docs/leetcode/1-500/max_depth_of_binary_tree","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Binary Tree","permalink":"/docs/tags/binary-tree"},{"inline":true,"label":"Leetcode Easy","permalink":"/docs/tags/leetcode-easy"},{"inline":true,"label":"Go","permalink":"/docs/tags/go"}],"version":"current","sidebarPosition":104,"frontMatter":{"title":"104. Maximum Depth of Binary Tree","sidebar_label":"104. Maximum Depth of Binary Tree","tags":["Binary Tree","Leetcode Easy","Go"]},"sidebar":"docSidebar","previous":{"title":"103. Binary Tree Zigzag Level Order Traversal","permalink":"/docs/leetcode/1-500/binary_tree_zigzag_level_order"},"next":{"title":"105. Construct Binary Tree from Preorder and Inorder Traversal","permalink":"/docs/leetcode/1-500/binary_tree_preorder_inorder"}}');var o=r(74848),l=r(28453);const a={title:"104. Maximum Depth of Binary Tree",sidebar_label:"104. Maximum Depth of Binary Tree",tags:["Binary Tree","Leetcode Easy","Go"]},i=void 0,s={},d=[{value:"Python",id:"python",level:2},{value:"Go",id:"go",level:2},{value:"Javascript",id:"javascript",level:2}];function c(e){const n={code:"code",h2:"h2",pre:"pre",...(0,l.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def maxDepth(self, root: Optional[TreeNode]) -> int:\n        if not root:\n            return 0\n        return self._travel(0, root)\n\n    def _travel(self, level, node):\n        if not node:\n            return level\n\n        return max(self._travel(level+1, node.left), self._travel(level+1, node.right))\n"})}),"\n",(0,o.jsx)(n.h2,{id:"go",children:"Go"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func maxDepth(root *TreeNode) int {\n    if root == nil {\n        return 0\n    }\n    return travel(0, root)\n}\n\nfunc travel(level int, node *TreeNode) int {\n    if node == nil {\n        return level\n    }\n\n    leftLevel := travel(level+1, node.Left)\n    rightLevel := travel(level+1, node.Right)\n\n    if leftLevel > rightLevel {\n        return leftLevel\n    } else {\n        return rightLevel\n    }\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"javascript",children:"Javascript"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"var maxDepth = function(root) {\n    if (root === undefined) {\n        return 0\n    }\n\n    return travel(root, 0)\n};\n\nvar travel = (node, level) => {\n    if (node === null) {\n        return level\n    }\n\n    return Math.max(travel(node.left, level+1), travel(node.right, level+1))\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>i});var t=r(96540);const o={},l=t.createContext(o);function a(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);