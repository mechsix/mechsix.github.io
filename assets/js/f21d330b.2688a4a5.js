"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[21394],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>m});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),p=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},s=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=p(r),f=o,m=d["".concat(c,".").concat(f)]||d[f]||u[f]||i;return r?n.createElement(m,a(a({ref:t},s),{},{components:r})):n.createElement(m,a({ref:t},s))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=f;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[d]="string"==typeof e?e:o,a[1]=l;for(var p=2;p<i;p++)a[p]=r[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},77037:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=r(87462),o=(r(67294),r(3905));const i={title:"1064. Fixed Point",sidebar_label:"1064. Fixed Point",tags:["Leetcode Easy","Binary Search","Go"]},a=void 0,l={unversionedId:"leetcode/1001-1500/fixed_point",id:"leetcode/1001-1500/fixed_point",title:"1064. Fixed Point",description:"https://leetcode.com/problems/fixed-point/",source:"@site/docs/leetcode/1001-1500/1064_fixed_point.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/fixed_point",permalink:"/docs/leetcode/1001-1500/fixed_point",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1064_fixed_point.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Binary Search",permalink:"/docs/tags/binary-search"},{label:"Go",permalink:"/docs/tags/go"}],version:"current",sidebarPosition:1064,frontMatter:{title:"1064. Fixed Point",sidebar_label:"1064. Fixed Point",tags:["Leetcode Easy","Binary Search","Go"]},sidebar:"docSidebar",previous:{title:"1051. Height Checker",permalink:"/docs/leetcode/1001-1500/height_checker"},next:{title:"1065. Index Pairs of a String",permalink:"/docs/leetcode/1001-1500/index_pairs_of_string"}},c={},p=[{value:"Python",id:"python",level:2},{value:"Go",id:"go",level:2}],s={toc:p},d="wrapper";function u(e){let{components:t,...r}=e;return(0,o.kt)(d,(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/fixed-point/"},"https://leetcode.com/problems/fixed-point/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def fixedPoint(self, arr: List[int]) -> int:\n        l, r = 0, len(arr)-1\n\n        result = -1\n        while l <= r:\n            pivot = (l+r) // 2\n\n            if arr[pivot] == pivot:\n                result = pivot\n                r = pivot - 1\n            elif arr[pivot] < pivot:\n                l = pivot + 1\n            else:\n                r = pivot - 1\n        return result\n")),(0,o.kt)("h2",{id:"go"},"Go"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func fixedPoint(arr []int) int {\n    l, r := 0, len(arr)-1\n\n    result := -1\n    for l <= r {\n        pivot := (l+r) / 2\n        if (arr[pivot] == pivot) {\n            result = pivot\n            r = pivot - 1\n        } else if (arr[pivot] < pivot) {\n            l = pivot + 1\n        } else {\n            r = pivot - 1\n        }\n    }\n    return result\n}\n")))}u.isMDXComponent=!0}}]);