"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[24055],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>m});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},d=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},f="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),f=c(r),p=o,m=f["".concat(s,".").concat(p)]||f[p]||u[p]||l;return r?n.createElement(m,a(a({ref:t},d),{},{components:r})):n.createElement(m,a({ref:t},d))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=r.length,a=new Array(l);a[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[f]="string"==typeof e?e:o,a[1]=i;for(var c=2;c<l;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},2752:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var n=r(87462),o=(r(67294),r(3905));const l={title:"872. Leaf-Similar Trees",sidebar_label:"872. Leaf-Similar Trees",tags:["Leetcode Easy","DFS","Binary Tree"]},a=void 0,i={unversionedId:"leetcode/501-1000/leaf_similar_trees",id:"leetcode/501-1000/leaf_similar_trees",title:"872. Leaf-Similar Trees",description:"https://leetcode.com/problems/leaf-similar-trees",source:"@site/docs/leetcode/501-1000/872_leaf_similar_trees.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/leaf_similar_trees",permalink:"/docs/leetcode/501-1000/leaf_similar_trees",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/872_leaf_similar_trees.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"DFS",permalink:"/docs/tags/dfs"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"}],version:"current",sidebarPosition:872,frontMatter:{title:"872. Leaf-Similar Trees",sidebar_label:"872. Leaf-Similar Trees",tags:["Leetcode Easy","DFS","Binary Tree"]},sidebar:"docSidebar",previous:{title:"871. Minimum Number of Refueling Stops",permalink:"/docs/leetcode/501-1000/minimum_number_of_refueling_stops"},next:{title:"875. Koko Eating Bananas",permalink:"/docs/leetcode/501-1000/koko_eating_bananas"}},s={},c=[{value:"Python",id:"python",level:2},{value:"DFS",id:"dfs",level:3},{value:"Rust",id:"rust",level:2},{value:"DFS",id:"dfs-1",level:3}],d={toc:c},f="wrapper";function u(e){let{components:t,...r}=e;return(0,o.kt)(f,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/leaf-similar-trees"},"https://leetcode.com/problems/leaf-similar-trees")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"dfs"},"DFS"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def leafSimilar(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> bool:\n        def dfs(node):\n            if not node:\n                return []\n\n            if not node.left and not node.right:\n                return [node.val]\n\n            return dfs(node.left) + dfs(node.right)\n\n        return dfs(root1) == dfs(root2)\n")),(0,o.kt)("h2",{id:"rust"},"Rust"),(0,o.kt)("h3",{id:"dfs-1"},"DFS"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"use std::rc::Rc;\nuse std::cell::RefCell;\n\n\nimpl Solution {\n    pub fn leaf_similar(root1: Option<Rc<RefCell<TreeNode>>>, root2: Option<Rc<RefCell<TreeNode>>>) -> bool {\n        fn dfs(node: Option<Rc<RefCell<TreeNode>>>) -> Vec<i32> {\n            match node {\n                None => Vec::new(),\n                Some(node) => {\n                    let node = node.borrow();\n                    if node.left.is_none() && node.right.is_none() {\n                        return vec![node.val];\n                    }\n                    let mut leaves = Vec::new();\n                    leaves.extend(dfs(node.left.clone()));\n                    leaves.extend(dfs(node.right.clone()));\n                    leaves\n                }\n            }\n        }\n        dfs(root1) == dfs(root2)\n    }\n}\n")))}u.isMDXComponent=!0}}]);