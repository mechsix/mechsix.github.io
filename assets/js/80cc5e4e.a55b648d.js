"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[72182],{24103:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var i=n(74848),s=n(28453);const o={title:"609. Find Duplicate File in System",sidebar_label:"609. Find Duplicate File in System",tags:["Leetcode Medium","Hash"]},l=void 0,r={id:"leetcode/501-1000/find_duplicate_file_in_system",title:"609. Find Duplicate File in System",description:"https://leetcode.com/problems/find-duplicate-file-in-system/",source:"@site/docs/leetcode/501-1000/609_find_duplicate_file_in_system.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/find_duplicate_file_in_system",permalink:"/docs/leetcode/501-1000/find_duplicate_file_in_system",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Hash",permalink:"/docs/tags/hash"}],version:"current",sidebarPosition:609,frontMatter:{title:"609. Find Duplicate File in System",sidebar_label:"609. Find Duplicate File in System",tags:["Leetcode Medium","Hash"]},sidebar:"docSidebar",previous:{title:"606. Construct String from Binary Tree",permalink:"/docs/leetcode/501-1000/construct_string_from_binary_tree"},next:{title:"617. Merge Two Binary Trees",permalink:"/docs/leetcode/501-1000/merge_two_binary_trees"}},c={},d=[{value:"Python",id:"python",level:2}];function a(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://leetcode.com/problems/find-duplicate-file-in-system/",children:"https://leetcode.com/problems/find-duplicate-file-in-system/"})}),"\n",(0,i.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Time: O(N) # N is amount of files"}),"\n",(0,i.jsx)(t.li,{children:"Space: O(N)"}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"from os.path import join as pathjoin\nfrom collections import defaultdict\n\n\nclass Solution:\n    def findDuplicate(self, paths: List[str]) -> List[List[str]]:\n        mapper = defaultdict(list)\n\n        for path in paths:\n            records = path.split(' ')\n\n            folder = records[0]\n            files = records[1:]\n\n            for file in files:\n                filename, content = file.split('(')\n                content = content[:-1]\n\n                mapper[content].append(pathjoin(folder, filename))\n\n        return [items for items in mapper.values() if len(items) > 1]\n"})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>r});var i=n(96540);const s={},o=i.createContext(s);function l(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);