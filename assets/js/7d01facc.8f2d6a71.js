"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[90310],{54897:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>c,contentTitle:()=>s,default:()=>f,frontMatter:()=>r,metadata:()=>l,toc:()=>d});const l=JSON.parse('{"id":"leetcode/501-1000/flood_fill","title":"733. Flood Fill","description":"https://leetcode.com/problems/flood-fill/","source":"@site/docs/leetcode/501-1000/733_flood_fill.md","sourceDirName":"leetcode/501-1000","slug":"/leetcode/501-1000/flood_fill","permalink":"/docs/leetcode/501-1000/flood_fill","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Easy","permalink":"/docs/tags/leetcode-easy"},{"inline":true,"label":"DFS","permalink":"/docs/tags/dfs"},{"inline":true,"label":"BFS","permalink":"/docs/tags/bfs"}],"version":"current","sidebarPosition":733,"frontMatter":{"title":"733. Flood Fill","sidebar_label":"733. Flood Fill","tags":["Leetcode Easy","DFS","BFS"]},"sidebar":"docSidebar","previous":{"title":"729. My Calendar I","permalink":"/docs/leetcode/501-1000/my_calendar_1"},"next":{"title":"739. Daily Temperatures","permalink":"/docs/leetcode/501-1000/daily_temperatures"}}');var i=n(74848),t=n(28453);const r={title:"733. Flood Fill",sidebar_label:"733. Flood Fill",tags:["Leetcode Easy","DFS","BFS"]},s=void 0,c={},d=[{value:"Python",id:"python",level:2},{value:"DFS",id:"dfs",level:3},{value:"BFS",id:"bfs",level:3}];function a(e){const o={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(o.p,{children:(0,i.jsx)(o.a,{href:"https://leetcode.com/problems/flood-fill/",children:"https://leetcode.com/problems/flood-fill/"})}),"\n",(0,i.jsx)(o.h2,{id:"python",children:"Python"}),"\n",(0,i.jsx)(o.h3,{id:"dfs",children:"DFS"}),"\n",(0,i.jsx)(o.p,{children:"DFS with memory to prevent duplicate visiting"}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-python",children:"class Solution:\n    def floodFill(self, image: List[List[int]], sr: int, sc: int, newColor: int) -> List[List[int]]:\n        origin_color = image[sr][sc]\n        row_limit = len(image) - 1\n        col_limit = len(image[0]) - 1\n\n        seem = set()\n\n        if origin_color == newColor:\n            return image\n\n        def dfs(row, col):\n            if (row, col) in seem:\n                return\n\n            if image[row][col] == origin_color:\n                image[row][col] = newColor\n                seem.add((row, col))\n                if row >= 1:\n                    dfs(row-1, col)\n                if row + 1 <= row_limit:\n                    dfs(row+1, col)\n                if col - 1 >= 0:\n                    dfs(row, col-1)\n                if col + 1 <= col_limit:\n                    dfs(row, col+1)\n\n        dfs(sr, sc)\n        return image\n"})}),"\n",(0,i.jsx)(o.h3,{id:"bfs",children:"BFS"}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-python",children:"from collections import deque\n\nclass Solution:\n    def floodFill(self, image: List[List[int]], sr: int, sc: int, newColor: int) -> List[List[int]]:\n        row_limit = len(image) - 1\n        col_limit = len(image[0]) - 1\n        origin_color = image[sr][sc]\n\n        queue = deque([(sr, sc)])\n\n        seem = set()\n\n        while queue:\n            row, col = queue.popleft()\n            if (row, col) in seem:\n                continue\n\n            if image[row][col] == origin_color:\n                image[row][col] = newColor\n                seem.add((row, col))\n                if row >= 1:\n                    queue.append((row-1, col))\n                if row + 1 <= row_limit:\n                    queue.append((row+1, col))\n                if col - 1 >= 0:\n                    queue.append((row, col-1))\n                if col + 1 <= col_limit:\n                    queue.append((row, col+1))\n        return image\n"})})]})}function f(e={}){const{wrapper:o}={...(0,t.R)(),...e.components};return o?(0,i.jsx)(o,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},28453:(e,o,n)=>{n.d(o,{R:()=>r,x:()=>s});var l=n(96540);const i={},t=l.createContext(i);function r(e){const o=l.useContext(t);return l.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function s(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),l.createElement(t.Provider,{value:o},e.children)}}}]);