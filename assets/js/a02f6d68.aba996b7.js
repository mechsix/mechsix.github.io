"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[37926],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return p}});var r=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,l=function(e,n){if(null==e)return{};var t,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,l=e.mdxType,a=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=u(t),p=l,f=m["".concat(s,".").concat(p)]||m[p]||d[p]||a;return t?r.createElement(f,i(i({ref:n},c),{},{components:t})):r.createElement(f,i({ref:n},c))}));function p(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var a=t.length,i=new Array(a);i[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var u=2;u<a;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},70010:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return c}});var r=t(87462),l=t(63366),a=(t(67294),t(3905)),i=["components"],o={title:"912. Sort an Array",sidebar_label:"912. Sort an Array",tags:["Leetcode Medium"]},s=void 0,u={unversionedId:"leetcode/501-1000/sort_an_array",id:"leetcode/501-1000/sort_an_array",title:"912. Sort an Array",description:"https://leetcode.com/problems/sort-an-array/",source:"@site/docs/leetcode/501-1000/912_sort_an_array.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/sort_an_array",permalink:"/docs/leetcode/501-1000/sort_an_array",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/912_sort_an_array.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"}],version:"current",sidebarPosition:912,frontMatter:{title:"912. Sort an Array",sidebar_label:"912. Sort an Array",tags:["Leetcode Medium"]},sidebar:"docSidebar",previous:{title:"905. Sort Array By Parity",permalink:"/docs/leetcode/501-1000/sort_array_by_parity"},next:{title:"916. Word Subsets",permalink:"/docs/leetcode/501-1000/word_subsets"}},c=[{value:"Python",id:"python",children:[{value:"Bubble Sort",id:"bubble-sort",children:[],level:3},{value:"Binary Search Tree",id:"binary-search-tree",children:[],level:3},{value:"Merge Sort - In Place",id:"merge-sort---in-place",children:[],level:3},{value:"Merge Sort",id:"merge-sort",children:[],level:3}],level:2},{value:"Rust",id:"rust",children:[{value:"Bubble Sort",id:"bubble-sort-1",children:[],level:3}],level:2}],d={toc:c};function m(e){var n=e.components,t=(0,l.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/sort-an-array/"},"https://leetcode.com/problems/sort-an-array/")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("h3",{id:"bubble-sort"},"Bubble Sort"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Time: O(N^2)"),(0,a.kt)("li",{parentName:"ul"},"Space: O(1)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def sortArray(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        for _ in range(n-1):\n            for i in range(1, n):\n                if nums[i-1] > nums[i]:\n                    nums[i], nums[i-1] = nums[i-1], nums[i]\n        return nums\n")),(0,a.kt)("h3",{id:"binary-search-tree"},"Binary Search Tree"),(0,a.kt)("p",null,"(Timelimit Exceed)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Time: O(N)"),(0,a.kt)("li",{parentName:"ul"},"Space: O(N)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class TreeNode:\n    def __init__(self, val=None, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def sortArray(self, nums: List[int]) -> List[int]:\n        def build(node, val):\n            if not node:\n                return TreeNode(val=val)\n            if node.val > val:\n                node.left = build(node.left, val)\n            else:\n                node.right = build(node.right, val)\n            return node\n\n\n        root = TreeNode(val=nums.pop())\n        while nums:\n            num = nums.pop()\n            build(root, num)\n\n        def inorder(node, result):\n            if not node:\n                return result\n\n            inorder(node.left, result)\n            result.append(node.val)\n            inorder(node.right, result)\n\n            return result\n\n        return inorder(root, [])\n")),(0,a.kt)("h3",{id:"merge-sort---in-place"},"Merge Sort - In Place"),(0,a.kt)("p",null,"(Timelimit Exceed)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Time: O(NlogN)"),(0,a.kt)("li",{parentName:"ul"},"Space: O(1)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def sortArray(self, nums: List[int]) -> List[int]:\n        def merge_sort(left, right):\n            if left >= right:\n                return\n\n            pivot = left + (right - left) // 2\n\n            # Split\n            merge_sort(left, pivot)\n            merge_sort(pivot+1, right)\n\n            if nums[pivot] <= nums[pivot+1]:\n                return\n\n            # Merge Result\n            l_start, l_end, r_start, r_end = left, pivot, pivot+1, right\n            while l_start <= l_end and r_start <= r_end:\n                # The partition is already sorted\n                if nums[l_start] <= nums[r_start]:\n                    l_start += 1\n                    continue\n\n                value = nums[r_start]\n                i = r_start\n\n                # Shift all elements to right by 1\n                for i in range(r_start, l_start, -1):\n                    nums[i] = nums[i-1]\n\n                # Place value to first place\n                nums[l_start] = value\n\n                l_start += 1\n                l_end += 1\n                r_start += 1\n\n        merge_sort(0, len(nums)-1)\n\n        return nums\n")),(0,a.kt)("h3",{id:"merge-sort"},"Merge Sort"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def sortArray(self, nums: List[int]) -> List[int]:\n        def merge(left, right, result):\n            i, j, k = 0, 0, 0\n            while i < len(left) and j < len(right):\n                if left[i] < right[j]:\n                    result[k] = left[i]\n                    i += 1\n                else:\n                    result[k] = right[j]\n                    j += 1\n                k += 1\n            result[k:] = left[i:] if i < len(left) else right[j:]\n\n        def merge_sort(nums):\n            if len(nums) == 1:\n                return\n            mid = len(nums) >> 1\n            left = nums[:mid]\n            right = nums[mid:]\n\n            merge_sort(left)\n            merge_sort(right)\n\n            merge(left, right, nums)\n\n        merge_sort(nums)\n        return nums\n")),(0,a.kt)("h2",{id:"rust"},"Rust"),(0,a.kt)("h3",{id:"bubble-sort-1"},"Bubble Sort"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"impl Solution {\n    pub fn sort_array(nums: Vec<i32>) -> Vec<i32> {\n        let mut swapped = true;\n        let mut answer = vec![0; nums.len()];\n        answer[..nums.len()].clone_from_slice(&nums);\n\n        while swapped {\n            swapped = false;\n            for i in 1..answer.len() {\n                if answer[i - 1] > answer[i] {\n                    answer.swap(i - 1, i);\n                    swapped = true\n                }\n            }\n        }\n        answer\n    }\n}\n")))}m.isMDXComponent=!0}}]);