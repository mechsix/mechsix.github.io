"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[74043],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return v}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,l=e.originalType,c=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),d=s(t),v=o,m=d["".concat(c,".").concat(v)]||d[v]||u[v]||l;return t?r.createElement(m,i(i({ref:n},p),{},{components:t})):r.createElement(m,i({ref:n},p))}));function v(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var l=t.length,i=new Array(l);i[0]=d;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var s=2;s<l;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},67547:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return p}});var r=t(87462),o=t(63366),l=(t(67294),t(3905)),i=["components"],a={title:"435. Non-overlapping Intervals",sidebar_label:"435. Non-overlapping Intervals",tags:["Leetcode Medium","Interval"]},c=void 0,s={unversionedId:"leetcode/1-500/non_overlapping_intervals",id:"leetcode/1-500/non_overlapping_intervals",title:"435. Non-overlapping Intervals",description:"https://leetcode.com/problems/non-overlapping-intervals/",source:"@site/docs/leetcode/1-500/435_non_overlapping_intervals.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/non_overlapping_intervals",permalink:"/docs/leetcode/1-500/non_overlapping_intervals",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/435_non_overlapping_intervals.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Interval",permalink:"/docs/tags/interval"}],version:"current",sidebarPosition:435,frontMatter:{title:"435. Non-overlapping Intervals",sidebar_label:"435. Non-overlapping Intervals",tags:["Leetcode Medium","Interval"]},sidebar:"docSidebar",previous:{title:"430. Flatten Doubly Linked List",permalink:"/docs/leetcode/1-500/flatten_multilevel_doubly_linked_list"},next:{title:"437. Path Sum III",permalink:"/docs/leetcode/1-500/path_sum_iii"}},p=[],u={toc:p};function d(e){var n=e.components,t=(0,o.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/non-overlapping-intervals/"},"https://leetcode.com/problems/non-overlapping-intervals/")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:\n        intervals.sort(key=lambda interval: interval[0])\n\n        result = 0\n        end = intervals[0][1]\n\n        for interval in intervals[1:]:\n            if interval[0] < end:\n                result += 1\n                if interval[1] < end:\n                    end = interval[1]\n            else:\n                end = interval[1]\n\n\n        return result\n")))}d.isMDXComponent=!0}}]);