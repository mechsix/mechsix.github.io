"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[63984],{54825:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"leetcode/2000/count_subarray_with_fixed_bounds","title":"6207. Count Subarrays With Fixed Bounds","description":"https://leetcode.com/contest/weekly-contest-315/problems/count-subarrays-with-fixed-bounds/","source":"@site/docs/leetcode/2000/6207_count_subarray_with_fixed_bounds.md","sourceDirName":"leetcode/2000","slug":"/leetcode/2000/count_subarray_with_fixed_bounds","permalink":"/docs/leetcode/2000/count_subarray_with_fixed_bounds","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Hard","permalink":"/docs/tags/leetcode-hard"},{"inline":true,"label":"Two Pointer","permalink":"/docs/tags/two-pointer"},{"inline":true,"label":"Contest","permalink":"/docs/tags/contest"}],"version":"current","sidebarPosition":6207,"frontMatter":{"title":"6207. Count Subarrays With Fixed Bounds","sidebar_label":"6207. Count Subarrays With Fixed Bounds","tags":["Leetcode Hard","Two Pointer","Contest"]},"sidebar":"docSidebar","previous":{"title":"6205. Count Number of Distinct Integers After Reverse Operations","permalink":"/docs/leetcode/2000/count_num_of_distinct_int_after_reverse_operation"},"next":{"title":"6219. Sum of Number and Its Reverse","permalink":"/docs/leetcode/2000/sum_of_num_an_its_reverse"}}');var s=t(74848),o=t(28453);const r={title:"6207. Count Subarrays With Fixed Bounds",sidebar_label:"6207. Count Subarrays With Fixed Bounds",tags:["Leetcode Hard","Two Pointer","Contest"]},c=void 0,a={},u=[{value:"Python",id:"python",level:2},{value:"Brute Force (Timelimit Exceed)",id:"brute-force-timelimit-exceed",level:3},{value:"Two Pointer",id:"two-pointer",level:3}];function l(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/contest/weekly-contest-315/problems/count-subarrays-with-fixed-bounds/",children:"https://leetcode.com/contest/weekly-contest-315/problems/count-subarrays-with-fixed-bounds/"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Contest 315"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,s.jsx)(n.h3,{id:"brute-force-timelimit-exceed",children:"Brute Force (Timelimit Exceed)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Time: O(N**2):"}),"\n",(0,s.jsx)(n.li,{children:"Space: O(1)"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def countSubarrays(self, nums: List[int], minK: int, maxK: int) -> int:\n        if minK not in nums or maxK not in nums:\n            return 0\n\n        ans = 0\n        for i in range(len(nums)):\n            cmin, cmax = nums[i], nums[i]\n\n            for j in range(i, len(nums)):\n                cmax, cmin = max(cmax, nums[j]), min(cmin, nums[j])\n                if cmax > maxK or cmin < minK:\n                    break\n                if cmin == minK and cmax == maxK:\n                    ans += 1\n                # print([i, j], (cmin, cmax), nums[i:j+1])\n        return ans\n"})}),"\n",(0,s.jsx)(n.h3,{id:"two-pointer",children:"Two Pointer"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Anser from No.1 of Contest 315: ",(0,s.jsx)(n.a,{href:"https://leetcode.cn/981377660LMT",children:"981377660lmt"})]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def countSubarrays(self, nums: List[int], minK: int, maxK: int) -> int:\n        n = len(nums)\n        res, left = 0, 0\n        pos1, pos2 = -1, -1\n        for right in range(n):\n            if nums[right] == minK:\n                pos1 = right\n            if nums[right] == maxK:\n                pos2 = right\n            if nums[right] < minK or nums[right] > maxK:\n                left = right + 1\n            res += max(0, min(pos1, pos2) - left + 1)\n\n        return res\n"})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var i=t(96540);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);