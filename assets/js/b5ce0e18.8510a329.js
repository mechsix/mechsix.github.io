"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[93126],{45798:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>i});var r=t(74848),o=t(28453);const a={title:"110. Balanced Binary Tree",slidebar_label:"110. Balanced Binary Tree",tags:["Leetcode Easy","Binary Tree"]},c=void 0,l={id:"leetcode/1-500/balanced_binary_tree",title:"110. Balanced Binary Tree",description:"https://leetcode.com/problems/balanced-binary-tree/",source:"@site/docs/leetcode/1-500/110_balanced_binary_tree.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/balanced_binary_tree",permalink:"/docs/leetcode/1-500/balanced_binary_tree",draft:!1,unlisted:!1,tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"}],version:"current",sidebarPosition:110,frontMatter:{title:"110. Balanced Binary Tree",slidebar_label:"110. Balanced Binary Tree",tags:["Leetcode Easy","Binary Tree"]},sidebar:"docSidebar",previous:{title:"109. Convert Sorted List to Binary Search Tree",permalink:"/docs/leetcode/1-500/convert_sorted_list_to_hight_balanced_bst"},next:{title:"111. Minimum Depth of Binary Tree",permalink:"/docs/leetcode/1-500/min_depth_of_binary_tree"}},s={},i=[{value:"Python",id:"python",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/balanced-binary-tree/",children:"https://leetcode.com/problems/balanced-binary-tree/"})}),"\n",(0,r.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u96d9\u5c64\u7684recursion..."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def get_depth(self, node):\n        if not node:\n            return -1\n        return 1 + max(self.get_depth(node.left), self.get_depth(node.right))\n\n    def check(self, node):\n        if not node:\n            return True\n        return abs(self.get_depth(node.left) - self.get_depth(node.right)) <= 1 \\\n            and self.check(node.left) \\\n            and self.check(node.right)\n\n    def isBalanced(self, root: Optional[TreeNode]) -> bool:\n        return self.check(root)\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>l});var r=t(96540);const o={},a=r.createContext(o);function c(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);