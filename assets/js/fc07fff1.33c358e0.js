"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[88306],{3905:(e,r,n)=>{n.d(r,{Zo:()=>u,kt:()=>f});var t=n(67294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function a(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function c(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=t.createContext({}),l=function(e){var r=t.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):a(a({},r),e)),n},u=function(e){var r=l(e.components);return t.createElement(s.Provider,{value:r},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},m=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=l(n),m=o,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||i;return n?t.createElement(f,a(a({ref:r},u),{},{components:n})):t.createElement(f,a({ref:r},u))}));function f(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var c={};for(var s in r)hasOwnProperty.call(r,s)&&(c[s]=r[s]);c.originalType=e,c[d]="string"==typeof e?e:o,a[1]=c;for(var l=2;l<i;l++)a[l]=n[l];return t.createElement.apply(null,a)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},60407:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var t=n(87462),o=(n(67294),n(3905));const i={title:"665. Non-decreasing Array",sidebar_label:"665. Non-decreasing Array",tags:["Leetcode Medium"]},a=void 0,c={unversionedId:"leetcode/501-1000/non_decreasing_array",id:"leetcode/501-1000/non_decreasing_array",title:"665. Non-decreasing Array",description:"https://leetcode.com/problems/non-decreasing-array/",source:"@site/docs/leetcode/501-1000/665_non_decreasing_array.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/non_decreasing_array",permalink:"/docs/leetcode/501-1000/non_decreasing_array",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/665_non_decreasing_array.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"}],version:"current",sidebarPosition:665,frontMatter:{title:"665. Non-decreasing Array",sidebar_label:"665. Non-decreasing Array",tags:["Leetcode Medium"]},sidebar:"docSidebar",previous:{title:"664. Strange Printer",permalink:"/docs/leetcode/501-1000/strange_printer"},next:{title:"669. Trim a Binary Search Tree",permalink:"/docs/leetcode/501-1000/trim_bst"}},s={},l=[{value:"Python",id:"python",level:2}],u={toc:l},d="wrapper";function p(e){let{components:r,...n}=e;return(0,o.kt)(d,(0,t.Z)({},u,n,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/non-decreasing-array/"},"https://leetcode.com/problems/non-decreasing-array/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def checkPossibility(self, nums: List[int]) -> bool:\n        if len(nums) <= 2:\n            return True\n\n        is_modified = False\n\n        for i in range(1, len(nums)):\n            left, right = nums[i-1], nums[i]\n            \n            if left <= right:\n                continue\n\n            if is_modified:\n                return False\n            \n            is_modified = True\n            \n            if i < 2 or nums[i-2] <= nums[i]:\n                nums[i-1] = nums[i]\n            else:\n                nums[i] = nums[i-1]\n\n        return True\n")))}p.isMDXComponent=!0}}]);