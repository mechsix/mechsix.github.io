"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[31805],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=s(t),f=o,m=p["".concat(l,".").concat(f)]||p[f]||d[f]||i;return t?r.createElement(m,c(c({ref:n},u),{},{components:t})):r.createElement(m,c({ref:n},u))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,c=new Array(i);c[0]=f;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a[p]="string"==typeof e?e:o,c[1]=a;for(var s=2;s<i;s++)c[s]=t[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},29497:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return i},metadata:function(){return a},toc:function(){return s}});var r=t(83117),o=(t(67294),t(3905));const i={title:"926. Flip String to Monotone Increasing",sidebar_label:"926. Flip String to Monotone Increasing",tags:["Leetcode Medium","DP"]},c=void 0,a={unversionedId:"leetcode/501-1000/flip_string_to_monotone_increasing",id:"leetcode/501-1000/flip_string_to_monotone_increasing",title:"926. Flip String to Monotone Increasing",description:"https://leetcode.com/problems/flip-string-to-monotone-increasing/description/",source:"@site/docs/leetcode/501-1000/926_flip_string_to_monotone_increasing.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/flip_string_to_monotone_increasing",permalink:"/docs/leetcode/501-1000/flip_string_to_monotone_increasing",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/926_flip_string_to_monotone_increasing.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"DP",permalink:"/docs/tags/dp"}],version:"current",sidebarPosition:926,frontMatter:{title:"926. Flip String to Monotone Increasing",sidebar_label:"926. Flip String to Monotone Increasing",tags:["Leetcode Medium","DP"]},sidebar:"docSidebar",previous:{title:"916. Word Subsets",permalink:"/docs/leetcode/501-1000/word_subsets"},next:{title:"931. Minimum Falling Path Sum",permalink:"/docs/leetcode/501-1000/minimum_falling_path_sum"}},l={},s=[{value:"Python",id:"python",level:2},{value:"Dynamic Window",id:"dynamic-window",level:3},{value:"Dynamic Window (Official Solution)",id:"dynamic-window-official-solution",level:3}],u={toc:s};function p(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/flip-string-to-monotone-increasing/description/"},"https://leetcode.com/problems/flip-string-to-monotone-increasing/description/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"dynamic-window"},"Dynamic Window"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def minFlipsMonoIncr(self, s: str) -> int:\n        left1, right0 = 0, sum([1 for char in s if char == '0'])\n\n        ans = right0\n\n        print(left1, right0, ans)\n        for char in s:\n            if char == '0':\n                right0 -= 1\n            else:\n                left1 += 1\n\n            ans = min(ans, left1+right0)\n\n        return ans\n")),(0,o.kt)("h3",{id:"dynamic-window-official-solution"},"Dynamic Window (Official Solution)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def minFlipsMonoIncr(self, s: str) -> int:\n        count = sum([1 for n in s if n == '0'])\n\n        ans = count\n        for char in s:\n            if char == '0':\n                count -= 1\n                ans = min(ans, count)\n            else:\n                count += 1\n        return ans\n")))}p.isMDXComponent=!0}}]);