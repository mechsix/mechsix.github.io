"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[90381],{3057:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>a});const l=JSON.parse('{"id":"leetcode/501-1000/valid_palindrome_ii","title":"680. Valid Palindrome II","description":"https://leetcode.com/problems/valid-palindrome-ii/","source":"@site/docs/leetcode/501-1000/680_valid_palindrome_ii.md","sourceDirName":"leetcode/501-1000","slug":"/leetcode/501-1000/valid_palindrome_ii","permalink":"/docs/leetcode/501-1000/valid_palindrome_ii","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Easy","permalink":"/docs/tags/leetcode-easy"},{"inline":true,"label":"Two Pointer","permalink":"/docs/tags/two-pointer"}],"version":"current","sidebarPosition":680,"frontMatter":{"title":"680. Valid Palindrome II","sidebar_label":"680. Valid Palindrome II","tags":["Leetcode Easy","Two Pointer"]},"sidebar":"docSidebar","previous":{"title":"673. Number of Longest Increasing Subsequence","permalink":"/docs/leetcode/501-1000/num_of_longest_increasing_subsequence"},"next":{"title":"682. Baseball Game","permalink":"/docs/leetcode/501-1000/baseball_game"}}');var r=i(74848),t=i(28453);const s={title:"680. Valid Palindrome II",sidebar_label:"680. Valid Palindrome II",tags:["Leetcode Easy","Two Pointer"]},o=void 0,d={},a=[{value:"Python",id:"python",level:2},{value:"Brute Force (Timelimit Exceed)",id:"brute-force-timelimit-exceed",level:3},{value:"Scan from begin and end in 2nd level (Timelimit Exceed)",id:"scan-from-begin-and-end-in-2nd-level-timelimit-exceed",level:3},{value:"Two Pointers",id:"two-pointers",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/valid-palindrome-ii/",children:"https://leetcode.com/problems/valid-palindrome-ii/"})}),"\n",(0,r.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,r.jsx)(n.h3,{id:"brute-force-timelimit-exceed",children:"Brute Force (Timelimit Exceed)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Time: O(N^2)"}),"\n",(0,r.jsx)(n.li,{children:"Space: O(NlogN)"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def validPalindrome(self, s: str) -> bool:\n        for i in range(len(s)):\n            remains = s[:i] + s[i+1:]\n            if remains == remains[::-1]:\n                return True\n        return False\n"})}),"\n",(0,r.jsx)(n.h3,{id:"scan-from-begin-and-end-in-2nd-level-timelimit-exceed",children:"Scan from begin and end in 2nd level (Timelimit Exceed)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Time: O(NlogN)"}),"\n",(0,r.jsx)(n.li,{children:"Space: O(NlogN)"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def validPalindrome(self, s: str) -> bool:\n        if self.isPalindrome(s):\n            return True\n\n        for i in range(len(s)):\n            if self.isPalindrome(s[:i] + s[i+1:]):\n                return True\n\n        return False\n\n    # Leetcode 125\n    def isPalindrome(self, s: str) -> bool:\n        if len(s) < 2:\n            return True\n\n        for i in range(len(s)//2):\n            if s[i] != s[len(s)-1-i]:\n                return False\n\n        return True\n"})}),"\n",(0,r.jsx)(n.h3,{id:"two-pointers",children:"Two Pointers"}),"\n",(0,r.jsx)(n.p,{children:"\u505a\u7b2c\u4e00\u5c64\u7684palindrome check\u6642\uff0c\u5176\u5be6\u53ea\u8981invalid\u4e86\uff0c\u82e5\u522a\u4e00\u500b\u9084\u80fdvalid\u7684\u8a71\uff0c\u8a72\u522a\u9664\u7684character\u52e2\u5fc5\u662f\u5728\u7576\u4e0b\u7684\u5de6\u754c\u6216\u53f3\u754c\u3002\u5229\u7528\u9019\u500b\u7279\u6027\u9054\u6210O(N)\u7684Time complexity"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Time: O(N)"}),"\n",(0,r.jsx)(n.li,{children:"Space: O(1)"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def validPalindrome(self, s: str) -> bool:\n        left, right = 0, len(s)-1\n\n        while left < right:\n            if s[left] != s[right]:\n                return self.isPalindrome(s, left+1, right) or self.isPalindrome(s, left, right-1)\n            left += 1\n            right -= 1\n\n        return True\n\n    def isPalindrome(self, s: str, left: int, right: int) -> bool:\n        while left < right:\n            if s[left] != s[right]:\n                return False\n            left += 1\n            right -= 1\n\n        return True\n"})})]})}function m(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>o});var l=i(96540);const r={},t=l.createContext(r);function s(e){const n=l.useContext(t);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),l.createElement(t.Provider,{value:n},e.children)}}}]);