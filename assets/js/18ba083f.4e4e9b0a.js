"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[14288],{10384:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var n=r(74848),s=r(28453);const i={title:"1630. Arithmetic Subarrays",sidebar_label:"1630. Arithmetic Subarrays",tags:["Leetcode Medium","Array"]},a=void 0,o={id:"leetcode/1501-2000/arithmetic_subarray",title:"1630. Arithmetic Subarrays",description:"https://leetcode.com/problems/arithmetic-subarrays/",source:"@site/docs/leetcode/1501-2000/1630_arithmetic_subarray.md",sourceDirName:"leetcode/1501-2000",slug:"/leetcode/1501-2000/arithmetic_subarray",permalink:"/docs/leetcode/1501-2000/arithmetic_subarray",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Array",permalink:"/docs/tags/array"}],version:"current",sidebarPosition:1630,frontMatter:{title:"1630. Arithmetic Subarrays",sidebar_label:"1630. Arithmetic Subarrays",tags:["Leetcode Medium","Array"]},sidebar:"docSidebar",previous:{title:"1612. Check If Two Expression Trees are Equivalent",permalink:"/docs/leetcode/1501-2000/check_experssion_trees_equal"},next:{title:"1631. Path With Minimum Effort",permalink:"/docs/leetcode/1501-2000/path_with_min_effort"}},c={},l=[{value:"Python",id:"python",level:2}];function u(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"https://leetcode.com/problems/arithmetic-subarrays/",children:"https://leetcode.com/problems/arithmetic-subarrays/"})}),"\n",(0,n.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"class Solution:\n    def isArithmetic(self, nums):\n        if len(nums) < 2:\n            return True\n\n        snums = sorted(nums)\n        diff = snums[1] - snums[0]\n        for i in range(2, len(snums)):\n            if snums[i] - snums[i-1] != diff:\n                return False\n        return True\n\n    def checkArithmeticSubarrays(self, nums: List[int], l: List[int], r: List[int]) -> List[bool]:\n        m = len(l)\n\n        result = []\n        for i in range(m):\n            result.append(self.isArithmetic(nums[l[i]:r[i]+1]))\n\n        return result\n"})})]})}function m(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>a,x:()=>o});var n=r(96540);const s={},i=n.createContext(s);function a(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);