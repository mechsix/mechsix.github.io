"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[48104],{53916:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"leetcode/1501-2000/number_of_good_pairs","title":"1512. Number of Good Pairs","description":"https://leetcode.com/problems/number-of-good-pairs","source":"@site/docs/leetcode/1501-2000/1512_number_of_good_pairs.md","sourceDirName":"leetcode/1501-2000","slug":"/leetcode/1501-2000/number_of_good_pairs","permalink":"/docs/leetcode/1501-2000/number_of_good_pairs","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Easy","permalink":"/docs/tags/leetcode-easy"},{"inline":true,"label":"Permutations","permalink":"/docs/tags/permutations"}],"version":"current","sidebarPosition":1512,"frontMatter":{"title":"1512. Number of Good Pairs","sidebar_label":"1512. Number of Good Pairs","tags":["Leetcode Easy","Permutations"]},"sidebar":"docSidebar","previous":{"title":"1502. Can Make Arithmetic Progression From Sequence","permalink":"/docs/leetcode/1501-2000/can_make_arithmetic_progression_from_sequence"},"next":{"title":"1517. Find Users With Valid E-Mails","permalink":"/docs/leetcode/1501-2000/find_users_with_valid_email"}}');var r=n(74848),s=n(28453);const i={title:"1512. Number of Good Pairs",sidebar_label:"1512. Number of Good Pairs",tags:["Leetcode Easy","Permutations"]},a=void 0,c={},l=[{value:"Python",id:"python",level:2}];function d(e){const o={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(o.p,{children:(0,r.jsx)(o.a,{href:"https://leetcode.com/problems/number-of-good-pairs",children:"https://leetcode.com/problems/number-of-good-pairs"})}),"\n",(0,r.jsx)(o.h2,{id:"python",children:"Python"}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-python",children:"from math import factorial\nfrom collections import defaultdict\n\n\nclass Solution:\n    def numIdenticalPairs(self, nums: List[int]) -> int:\n        mapper = defaultdict(int)\n\n        for i, num in enumerate(nums):\n            mapper[num] += 1\n\n        ans = 0\n        for count in mapper.values():\n            if count >= 2:\n                # C = n! / m!(n-m!)\n                ans += (\n                    factorial(count)/\n                    (2*factorial(count-2))\n                )\n\n        return int(ans)\n"})})]})}function u(e={}){const{wrapper:o}={...(0,s.R)(),...e.components};return o?(0,r.jsx)(o,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,o,n)=>{n.d(o,{R:()=>i,x:()=>a});var t=n(96540);const r={},s=t.createContext(r);function i(e){const o=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function a(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(s.Provider,{value:o},e.children)}}}]);