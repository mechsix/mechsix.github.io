"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[72225],{92979:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>m});const a=JSON.parse('{"id":"leetcode/1001-1500/max_performance_of_team","title":"1383. Maximum Performance of a Team","description":"https://leetcode.com/problems/maximum-performance-of-a-team/","source":"@site/docs/leetcode/1001-1500/1383_max_performance_of_team.md","sourceDirName":"leetcode/1001-1500","slug":"/leetcode/1001-1500/max_performance_of_team","permalink":"/docs/leetcode/1001-1500/max_performance_of_team","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Hard","permalink":"/docs/tags/leetcode-hard"},{"inline":true,"label":"Heap","permalink":"/docs/tags/heap"}],"version":"current","sidebarPosition":1383,"frontMatter":{"title":"1383. Maximum Performance of a Team","sidebar_label":"1383. Maximum Performance of a Team","tags":["Leetcode Hard","Heap"]},"sidebar":"docSidebar","previous":{"title":"1382. Balance a Binary Search Tree","permalink":"/docs/leetcode/1001-1500/balance_a_bst"},"next":{"title":"1396. Design Underground System","permalink":"/docs/leetcode/1001-1500/design_underground_system"}}');var r=t(74848),o=t(28453);const s={title:"1383. Maximum Performance of a Team",sidebar_label:"1383. Maximum Performance of a Team",tags:["Leetcode Hard","Heap"]},c=void 0,i={},m=[{value:"Python",id:"python",level:2}];function p(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/maximum-performance-of-a-team/",children:"https://leetcode.com/problems/maximum-performance-of-a-team/"})}),"\n",(0,r.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from heapq import heappush, heappop\n\n\nclass Solution:\n    def maxPerformance(self, n: int, speeds: List[int], efficiencies: List[int], k: int) -> int:\n        mapper = [pair for pair in zip(efficiencies, speeds)]\n        mapper.sort(reverse=True)\n\n        result, speed = 0, 0\n        heap = []\n\n        for eff, spd in mapper:\n            if len(heap) == k:\n                speed -= heappop(heap)\n            speed += spd\n            heappush(heap, spd)\n            result = max(result, eff*speed)\n\n        return result % (10**9+7)\n"})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var a=t(96540);const r={},o=a.createContext(r);function s(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);