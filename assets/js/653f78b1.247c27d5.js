"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[41976],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=s(r),f=o,m=p["".concat(l,".").concat(f)]||p[f]||d[f]||i;return r?n.createElement(m,c(c({ref:t},u),{},{components:r})):n.createElement(m,c({ref:t},u))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,c=new Array(i);c[0]=f;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[p]="string"==typeof e?e:o,c[1]=a;for(var s=2;s<i;s++)c[s]=r[s];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},95339:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>s});var n=r(87462),o=(r(67294),r(3905));const i={title:"958. Check Completeness of a Binary Tree",sidebar_label:"958. Check Completeness of a Binary Tree",tags:["Leetcode Medium","Binary Tree","BFS"]},c=void 0,a={unversionedId:"leetcode/501-1000/check_completeness_of_binary_tree",id:"leetcode/501-1000/check_completeness_of_binary_tree",title:"958. Check Completeness of a Binary Tree",description:"Python",source:"@site/docs/leetcode/501-1000/958_check_completeness_of_binary_tree.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/check_completeness_of_binary_tree",permalink:"/docs/leetcode/501-1000/check_completeness_of_binary_tree",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/958_check_completeness_of_binary_tree.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"},{label:"BFS",permalink:"/docs/tags/bfs"}],version:"current",sidebarPosition:958,frontMatter:{title:"958. Check Completeness of a Binary Tree",sidebar_label:"958. Check Completeness of a Binary Tree",tags:["Leetcode Medium","Binary Tree","BFS"]},sidebar:"docSidebar",previous:{title:"953. Verifying an Alien Dictionary",permalink:"/docs/leetcode/501-1000/verifying_an_alien_dictionary"},next:{title:"967. Numbers With Same Consecutive Differences",permalink:"/docs/leetcode/501-1000/numbers_with_same_consecutive_differences"}},l={},s=[{value:"Python",id:"python",level:2},{value:"BFS",id:"bfs",level:3}],u={toc:s},p="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"bfs"},"BFS"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from collections import deque\n\n\nclass Solution:\n    def isCompleteTree(self, root: Optional[TreeNode]) -> bool:\n        queue = deque([root])\n\n        while queue:\n            node = queue.popleft()\n\n            if node:\n                queue.append(node.left)\n                queue.append(node.right)\n                continue\n            while queue:\n                if queue.popleft():\n                    return False\n        return True\n")))}d.isMDXComponent=!0}}]);