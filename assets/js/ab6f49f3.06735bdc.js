"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[87274],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>b});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),m=s(n),p=a,b=m["".concat(l,".").concat(p)]||m[p]||u[p]||i;return n?r.createElement(b,o(o({ref:t},d),{},{components:n})):r.createElement(b,o({ref:t},d))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=p;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[m]="string"==typeof e?e:a,o[1]=c;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},12272:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const i={title:"1751. Maximum Number of Events That Can Be Attended II",sidebar_label:"1751. Maximum Number of Events That Can Be Attended II",tags:["Leetcode Hard","DP","Binary Search"]},o=void 0,c={unversionedId:"leetcode/1501-2000/max_number_of_events_that_can_be_attended_ii",id:"leetcode/1501-2000/max_number_of_events_that_can_be_attended_ii",title:"1751. Maximum Number of Events That Can Be Attended II",description:"https://leetcode.com/problems/maximum-number-of-events-that-can-be-attended-ii/",source:"@site/docs/leetcode/1501-2000/1751_max_number_of_events_that_can_be_attended_ii.md",sourceDirName:"leetcode/1501-2000",slug:"/leetcode/1501-2000/max_number_of_events_that_can_be_attended_ii",permalink:"/docs/leetcode/1501-2000/max_number_of_events_that_can_be_attended_ii",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1501-2000/1751_max_number_of_events_that_can_be_attended_ii.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"DP",permalink:"/docs/tags/dp"},{label:"Binary Search",permalink:"/docs/tags/binary-search"}],version:"current",sidebarPosition:1751,frontMatter:{title:"1751. Maximum Number of Events That Can Be Attended II",sidebar_label:"1751. Maximum Number of Events That Can Be Attended II",tags:["Leetcode Hard","DP","Binary Search"]},sidebar:"docSidebar",previous:{title:"1732. Find the Highest Altitude",permalink:"/docs/leetcode/1501-2000/find_highest_altitude"},next:{title:"1768. Merge Strings Alternately",permalink:"/docs/leetcode/1501-2000/merge_strings_alternately"}},l={},s=[{value:"Python",id:"python",level:2},{value:"DP with Binary Search",id:"dp-with-binary-search",level:3}],d={toc:s},m="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/maximum-number-of-events-that-can-be-attended-ii/"},"https://leetcode.com/problems/maximum-number-of-events-that-can-be-attended-ii/")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("h3",{id:"dp-with-binary-search"},"DP with Binary Search"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from functools import cache\nfrom math import inf\nfrom bisect import bisect_right\n\n\nclass Solution:\n    def maxValue(self, events: List[List[int]], k: int) -> int:\n        n = len(events)\n        events.sort(key=lambda event: (event[0], event[1], event[2]))\n\n        @cache\n        def dp(i, remain):\n            if not remain or i >= n:\n                return 0\n            \n            right, value = events[i][1], events[i][2]\n            j = bisect_right(events, [right, inf, inf])\n            \n            return max(\n                dp(i+1, remain),\n                dp(j, remain-1) + value\n            )\n\n        return dp(0, k)\n")))}u.isMDXComponent=!0}}]);