"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[4036],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),u=r,f=c["".concat(s,".").concat(u)]||c[u]||m[u]||i;return n?a.createElement(f,o(o({ref:t},d),{},{components:n})):a.createElement(f,o({ref:t},d))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},88562:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return d}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),o=["components"],l={title:"936. Stamping The Sequence",sidebar_label:"936. Stamping The Sequence",tags:["Leetcode Hard","TODO"]},s=void 0,p={unversionedId:"leetcode/501-1000/stamping_the_sequence",id:"leetcode/501-1000/stamping_the_sequence",title:"936. Stamping The Sequence",description:"https://leetcode.com/problems/stamping-the-sequence/",source:"@site/docs/leetcode/501-1000/936_stamping_the_sequence.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/stamping_the_sequence",permalink:"/docs/leetcode/501-1000/stamping_the_sequence",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/936_stamping_the_sequence.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"TODO",permalink:"/docs/tags/todo"}],version:"current",sidebarPosition:936,frontMatter:{title:"936. Stamping The Sequence",sidebar_label:"936. Stamping The Sequence",tags:["Leetcode Hard","TODO"]},sidebar:"docSidebar",previous:{title:"931. Minimum Falling Path Sum",permalink:"/docs/leetcode/501-1000/minimum_falling_path_sum"},next:{title:"938. Range Sum of BST",permalink:"/docs/leetcode/501-1000/range_sum_bst"}},d=[{value:"Python",id:"python",children:[{value:"Find path from reverse order (Failed Try)",id:"find-path-from-reverse-order-failed-try",children:[],level:3},{value:"Offical Solution",id:"offical-solution",children:[],level:3}],level:2}],m={toc:d};function c(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/stamping-the-sequence/"},"https://leetcode.com/problems/stamping-the-sequence/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"find-path-from-reverse-order-failed-try"},"Find path from reverse order (Failed Try)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u6982\u5ff5\u4e0a\u662f\u53cd\u8457\u627e\u56de\u4f86\uff0c\u627e\u5230stamp\u5728target\u5167\u7684\u4f4d\u7f6e\uff0c\u8996\u70ba",(0,i.kt)("inlineCode",{parentName:"li"},"\u6700\u5f8c\u4e00\u500b\u84cb\u4e0b\u53bb\u7684\u7ae0")),(0,i.kt)("li",{parentName:"ul"},"\u5f9e\u6700\u5f8c\u4e00\u500b\u7ae0\u7684\u4f4d\u7f6e\u5f80\u5de6\u53f3\u63a8\uff0c\u6bcf\u6b21\u90fd\u8a66\u8457\u627e\u51fa",(0,i.kt)("inlineCode",{parentName:"li"},"\u8986\u84cb\u6700\u5927"),"\u7684\u7ae0"),(0,i.kt)("li",{parentName:"ul"},"\u932f\u5728\u6c92\u8003\u91cf\u5230\u6709\u6642\u5019\u7ae0\u662f\u8df3\u8457\u84cb\u7684\uff0c\u4e0d\u4e00\u5b9a\u6703\u8ddf\u4e0b\u500b\u7ae0(\u9019\u500b\u89e3\u6cd5\u51fa\u767c\u7684\u65b9\u5411)\u6709\u9023\u7e8c\u6216\u91cd\u758a"),(0,i.kt)("li",{parentName:"ul"},"\u505a\u500b\u7d00\u9304")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Test Case"),(0,i.kt)("th",{parentName:"tr",align:null},"Passed"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},'"abc" "ababc"'),(0,i.kt)("td",{parentName:"tr",align:null},"Passed")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},'"abca" "aabcaca"'),(0,i.kt)("td",{parentName:"tr",align:null},"Passed")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},'"oz" "ooozz"'),(0,i.kt)("td",{parentName:"tr",align:null},"Passed")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},'"de" "ddeddeddee"'),(0,i.kt)("td",{parentName:"tr",align:null},"Failed")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from collections import deque\n\nclass Solution:\n    def movesToStamp(self, stamp: str, target: str) -> List[int]:\n        if stamp not in target:\n            return []\n\n\n        current = ['?'] * len(target)\n\n        left = target.index(stamp)\n        right = left + len(stamp)\n\n        # The lastest stamp, as beginning\n        ans = deque([left])\n        self.stamp_on(current, stamp, left)\n\n        # Count of the stampeed actions\n        step = 1\n\n\n        # Find largest sequence to take the stamp in the left\n        start = max(0, left-len(stamp))\n        end = min(start+len(stamp), left)\n        while left > 0:\n            if step > 10:\n                break\n            print(\"<\", (start, end), ''.join(target[start:end]), stamp[:end-start])\n            if ''.join(target[start:end]) == stamp[:end-start]:\n                ans.appendleft(start)\n                self.stamp_on(current, stamp, start)\n                left = start\n                start = max(0, left-len(stamp))\n                end = min(start+len(stamp), left)\n                step += 1\n            else:\n                start += 1\n\n\n        # Find largest sequence to take the stamp in the right\n        end = min(right+len(stamp), len(target))\n        start = max(end-len(stamp), right)\n        while right < len(target):\n            if step > 10:\n                break\n            print(\">\", (start, end), ''.join(target[start:end]), stamp[start-end:])\n            if ''.join(target[start:end]) == stamp[start-end:]:\n                ans.appendleft(end-len(stamp))\n                self.stamp_on(current, stamp, end-len(stamp))\n                right = end\n                end = min(right+len(stamp), len(target))\n                start = max(end-len(stamp), right)\n                step += 1\n            else:\n                end -= 1\n\n\n        return ans\n\n    def stamp_on(self, current, stamp, start):\n        end = min(start+len(stamp), len(current))\n        for i in range(start, end):\n            if current[i] != '?':\n                continue\n            current[i] = stamp[i-start]\n        print(\"stamp at {}: {}\".format(\n            start,\n            ''.join(current)\n        ))\n")),(0,i.kt)("h3",{id:"offical-solution"},"Offical Solution"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Details see: ",(0,i.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/stamping-the-sequence/solution/"},"https://leetcode.com/problems/stamping-the-sequence/solution/"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution(object):\n    def movesToStamp(self, stamp, target):\n        M, N = len(stamp), len(target)\n\n        queue = collections.deque()\n        done = [False] * N\n        ans = []\n        A = []\n        for i in range(N - M + 1):\n            # For each window [i, i+M),\n            # A[i] will contain info on what needs to change\n            # before we can reverse stamp at i.\n\n            made, todo = set(), set()\n            for j, c in enumerate(stamp):\n                a = target[i+j]\n                if a == c:\n                    made.add(i+j)\n                else:\n                    todo.add(i+j)\n            A.append((made, todo))\n\n            # If we can reverse stamp at i immediately,\n            # enqueue letters from this window.\n            if not todo:\n                ans.append(i)\n                for j in range(i, i + len(stamp)):\n                    if not done[j]:\n                        queue.append(j)\n                        done[j] = True\n\n        # For each enqueued letter,\n        while queue:\n            i = queue.popleft()\n\n            # For each window that is potentially affected,\n            # j: start of window\n            for j in range(max(0, i-M+1), min(N-M, i)+1):\n                if i in A[j][1]:  # This window is affected\n                    A[j][1].discard(i) # Remove it from todo list of this window\n                    if not A[j][1]:  # Todo list of this window is empty\n                        ans.append(j)\n                        for m in A[j][0]: # For each letter to potentially enqueue,\n                            if not done[m]:\n                                queue.append(m)\n                                done[m] = True\n\n        return ans[::-1] if all(done) else []\n")))}c.isMDXComponent=!0}}]);