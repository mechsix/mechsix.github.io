"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[66812],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(t),f=o,m=p["".concat(s,".").concat(f)]||p[f]||d[f]||i;return t?r.createElement(m,a(a({ref:n},u),{},{components:t})):r.createElement(m,a({ref:n},u))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},40316:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var r=t(87462),o=t(63366),i=(t(67294),t(3905)),a=["components"],l={title:"200. Number of Islands",sidebar_label:"200. Number of Islands",tags:["Leetcode Medium","Matrix"]},s=void 0,c={unversionedId:"leetcode/1-500/number_of_islands",id:"leetcode/1-500/number_of_islands",title:"200. Number of Islands",description:"https://leetcode.com/problems/number-of-islands/",source:"@site/docs/leetcode/1-500/200_number_of_islands.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/number_of_islands",permalink:"/docs/leetcode/1-500/number_of_islands",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/200_number_of_islands.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Matrix",permalink:"/docs/tags/matrix"}],version:"current",sidebarPosition:200,frontMatter:{title:"200. Number of Islands",sidebar_label:"200. Number of Islands",tags:["Leetcode Medium","Matrix"]},sidebar:"docSidebar",previous:{title:"199. Binary Tree Right Side View",permalink:"/docs/leetcode/1-500/binary_tree_right_side_view"},next:{title:"202. Happy Number",permalink:"/docs/leetcode/1-500/happy_number"}},u=[{value:"Python",id:"python",children:[{value:"DFS with Hashmap",id:"dfs-with-hashmap",children:[],level:3}],level:2}],d={toc:u};function p(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/number-of-islands/"},"https://leetcode.com/problems/number-of-islands/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"dfs-with-hashmap"},"DFS with Hashmap"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Time: O(M*N)"),(0,i.kt)("li",{parentName:"ul"},"Space: O(K)  # K present the block with")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        m, n = len(grid), len(grid[0])\n        offsets = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        visited = set()\n\n\n        def dfs(row: int, col: int, island: set):\n            if grid[row][col] == \"0\":\n                return set()\n\n            island.add((row, col))\n\n            for rx, cx in offsets:\n                if row+rx < 0 or row+rx >= m or col+cx < 0 or col+cx >= n:\n                    continue\n                if (row+rx, col+cx) in island:\n                    continue\n                island |= dfs(row+rx, col+cx, island)\n\n            return island\n\n        ans = 0\n        for row in range(m):\n            for col in range(n):\n                if grid[row][col] == '0' or (row, col) in visited:\n                    continue\n                ans += 1\n                visited |= dfs(row, col, set())\n\n        return ans\n")))}p.isMDXComponent=!0}}]);