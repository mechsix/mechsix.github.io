"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[27946],{63140:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>a,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var o=n(74848),s=n(28453);const i={title:"16. 3Sum Closest",sidebar_label:"16. 3Sum Closest",tags:["Leetcode Medium","Number Sum","Two Pointer"]},r=void 0,l={id:"leetcode/1-500/three_sum_closest",title:"16. 3Sum Closest",description:"https://leetcode.com/problems/3sum-closest/",source:"@site/docs/leetcode/1-500/16_three_sum_closest.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/three_sum_closest",permalink:"/docs/leetcode/1-500/three_sum_closest",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Number Sum",permalink:"/docs/tags/number-sum"},{label:"Two Pointer",permalink:"/docs/tags/two-pointer"}],version:"current",sidebarPosition:16,frontMatter:{title:"16. 3Sum Closest",sidebar_label:"16. 3Sum Closest",tags:["Leetcode Medium","Number Sum","Two Pointer"]},sidebar:"docSidebar",previous:{title:"15. 3Sum",permalink:"/docs/leetcode/1-500/three_sum"},next:{title:"17. Letter Combinations of a Phone Number",permalink:"/docs/leetcode/1-500/letter_combinations_of_phone_number"}},c={},u=[{value:"Python",id:"python",level:2}];function m(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{href:"https://leetcode.com/problems/3sum-closest/",children:"https://leetcode.com/problems/3sum-closest/"})}),"\n",(0,o.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Time: O(N^2)"}),"\n",(0,o.jsx)(t.li,{children:"Space: O(1)"}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"\u6bdb\u6bdb\u87f2\u5f0fTwo Pointer"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"from math import inf\n\n\nclass Solution:\n    def threeSumClosest(self, nums: List[int], target: int) -> int:\n        nums.sort()\n        diff = inf\n\n        for i in range(len(nums)):\n            low, high = i+1, len(nums)-1\n\n            while low < high:\n                total = nums[i] + nums[low] + nums[high]\n\n                if abs(target-total) < abs(diff):\n                    diff = target-total\n\n                if total < target:\n                    low += 1\n                else:\n                    high -= 1\n\n                if diff == 0:\n                    break\n        return target - diff\n"})})]})}function a(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>l});var o=n(96540);const s={},i=o.createContext(s);function r(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);