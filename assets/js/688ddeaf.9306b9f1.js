"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[7652],{3905:function(e,r,t){t.d(r,{Zo:function(){return u},kt:function(){return f}});var n=t(67294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=n.createContext({}),s=function(e){var r=n.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},u=function(e){var r=s(e.components);return n.createElement(i.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=s(t),f=a,g=d["".concat(i,".").concat(f)]||d[f]||p[f]||o;return t?n.createElement(g,l(l({ref:r},u),{},{components:t})):n.createElement(g,l({ref:r},u))}));function f(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=d;var c={};for(var i in r)hasOwnProperty.call(r,i)&&(c[i]=r[i]);c.originalType=e,c.mdxType="string"==typeof e?e:a,l[1]=c;for(var s=2;s<o;s++)l[s]=t[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},36669:function(e,r,t){t.r(r),t.d(r,{frontMatter:function(){return c},contentTitle:function(){return i},metadata:function(){return s},toc:function(){return u},default:function(){return d}});var n=t(87462),a=t(63366),o=(t(67294),t(3905)),l=["components"],c={title:"119. Pascal's Triangle II",sidebar_label:"119. Pascal's Triangle II",tags:["Leetcode Easy"]},i=void 0,s={unversionedId:"leetcode/1-500/pascal_triangle_II",id:"leetcode/1-500/pascal_triangle_II",title:"119. Pascal's Triangle II",description:"Python",source:"@site/docs/leetcode/1-500/119_pascal_triangle_II.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/pascal_triangle_II",permalink:"/docs/leetcode/1-500/pascal_triangle_II",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/119_pascal_triangle_II.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"}],version:"current",sidebarPosition:119,frontMatter:{title:"119. Pascal's Triangle II",sidebar_label:"119. Pascal's Triangle II",tags:["Leetcode Easy"]},sidebar:"docSidebar",previous:{title:"118. Pascal's Triangle",permalink:"/docs/leetcode/1-500/pascal_triangle"},next:{title:"130. Surrounded Regions",permalink:"/docs/leetcode/1-500/surrounded_regions"}},u=[{value:"Python",id:"python",children:[{value:"Recursive",id:"recursive",children:[],level:3}],level:2}],p={toc:u};function d(e){var r=e.components,t=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"recursive"},"Recursive"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n\n        return self._generate(2, rowIndex, [1, 1])\n\n    def _generate(self, level, target_level, pre_level):\n        if level > target_level:\n            return pre_level\n\n        current = [1]\n        for i in range(1, len(pre_level)):\n            pre = pre_level[i-1]\n            cur = pre_level[i]\n            current.append(pre+cur)\n        current.append(1)\n\n        return self._generate(level+1, target_level, current)\n")))}d.isMDXComponent=!0}}]);