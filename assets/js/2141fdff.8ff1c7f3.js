"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[79763],{89943:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"leetcode/1-500/uniq_bin_trees_ii","title":"95. Unique Binary Search Trees II","description":"https://leetcode.com/problems/unique-binary-search-trees-ii","source":"@site/docs/leetcode/1-500/95_uniq_bin_trees_ii.md","sourceDirName":"leetcode/1-500","slug":"/leetcode/1-500/uniq_bin_trees_ii","permalink":"/docs/leetcode/1-500/uniq_bin_trees_ii","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Medium","permalink":"/docs/tags/leetcode-medium"},{"inline":true,"label":"BST","permalink":"/docs/tags/bst"},{"inline":true,"label":"DFS","permalink":"/docs/tags/dfs"},{"inline":true,"label":"TODO","permalink":"/docs/tags/todo"}],"version":"current","sidebarPosition":95,"frontMatter":{"title":"95. Unique Binary Search Trees II","sidebar_label":"95. Unique Binary Search Trees II","tags":["Leetcode Medium","BST","DFS","TODO"]},"sidebar":"docSidebar","previous":{"title":"94. Binary Tree Inorder Traversal","permalink":"/docs/leetcode/1-500/binary_tree_inorder"},"next":{"title":"96. Unique Binary Trees","permalink":"/docs/leetcode/1-500/unique_binary_trees"}}');var i=t(74848),o=t(28453);const s={title:"95. Unique Binary Search Trees II",sidebar_label:"95. Unique Binary Search Trees II",tags:["Leetcode Medium","BST","DFS","TODO"]},l=void 0,a={},d=[{value:"Python",id:"python",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/unique-binary-search-trees-ii",children:"https://leetcode.com/problems/unique-binary-search-trees-ii"})}),"\n",(0,i.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,i.jsx)(n.p,{children:"DFS solution with recursion"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def generateTrees(self, n: int) -> List[Optional[TreeNode]]:\n        if n < 1:\n            return []\n\n        return self.generate_dfs(1, n)\n\n    def generate_dfs(self, left: int, right: int):\n        if left > right:\n            return [None]\n\n        result = []\n        for i in range(left, right+1):\n            left_nodes = self.generate_dfs(left, i-1)\n            right_nodes = self.generate_dfs(i+1, right)\n            result += self.generate_tree(\n                    root_val=i,\n                    left_nodes=left_nodes,\n                    right_nodes=right_nodes\n                )\n        return result\n\n    @staticmethod\n    def generate_tree(root_val, left_nodes, right_nodes):\n        trees = []\n        for l_node in left_nodes:\n            for r_node in right_nodes:\n                root = TreeNode(root_val)\n                root.left = l_node\n                root.right = r_node\n                trees.append(root)\n        return trees\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var r=t(96540);const i={},o=r.createContext(i);function s(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);