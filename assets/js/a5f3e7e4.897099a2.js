"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[74991],{53377:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var n=o(74848),r=o(28453);const s={title:"2477. Minimum Fuel Cost to Report to the Capital",sidebar_label:"2477. Minimum Fuel Cost to Report to the Capital",tags:["Leetcode Medium","Tree","DFS"]},i=void 0,a={id:"leetcode/2000/min_fuel_cost_to_report_to_the_capital",title:"2477. Minimum Fuel Cost to Report to the Capital",description:"https://leetcode.com/problems/minimum-fuel-cost-to-report-to-the-capital",source:"@site/docs/leetcode/2000/2477_min_fuel_cost_to_report_to_the_capital.md",sourceDirName:"leetcode/2000",slug:"/leetcode/2000/min_fuel_cost_to_report_to_the_capital",permalink:"/docs/leetcode/2000/min_fuel_cost_to_report_to_the_capital",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Tree",permalink:"/docs/tags/tree"},{label:"DFS",permalink:"/docs/tags/dfs"}],version:"current",sidebarPosition:2477,frontMatter:{title:"2477. Minimum Fuel Cost to Report to the Capital",sidebar_label:"2477. Minimum Fuel Cost to Report to the Capital",tags:["Leetcode Medium","Tree","DFS"]},sidebar:"docSidebar",previous:{title:"2439. Minimize Maximum of Array",permalink:"/docs/leetcode/2000/min_max_of_array"},next:{title:"2618. Check if Object Instance of Class",permalink:"/docs/leetcode/2000/check_if_object_instance_of_class"}},l={},c=[{value:"Python",id:"python",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"https://leetcode.com/problems/minimum-fuel-cost-to-report-to-the-capital",children:"https://leetcode.com/problems/minimum-fuel-cost-to-report-to-the-capital"})}),"\n",(0,n.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"import math\n\n\nclass Solution:\n    def minimumFuelCost(self, roads, seats):\n        self.fuel = 0\n        n = len(roads) + 1\n        mapper = [set() for i in range(n)]\n        for road in roads:\n            mapper[road[0]].add(road[1])\n            mapper[road[1]].add(road[0])\n\n        def dfs(node, parent,seats):\n            representatives = 1\n            for child in mapper[node]:\n                if child == parent:\n                    continue\n                representatives += dfs(child, node, seats)\n\n            if node != 0:\n                self.fuel += math.ceil(representatives / seats)\n\n            return representatives\n\n        dfs(0, -1, seats)\n\n        return self.fuel\n"})})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},28453:(e,t,o)=>{o.d(t,{R:()=>i,x:()=>a});var n=o(96540);const r={},s=n.createContext(r);function i(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);