"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[28816],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),a=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=a(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=a(n),d=o,m=p["".concat(s,".").concat(d)]||p[d]||f[d]||l;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,i=new Array(l);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[p]="string"==typeof e?e:o,i[1]=c;for(var a=2;a<l;a++)i[a]=n[a];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},33148:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return i},default:function(){return p},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return a}});var r=n(83117),o=(n(67294),n(3905));const l={title:"1575. Count All Possible Routes",sidebar_label:"1575. Count All Possible Routes",tags:["Leetcode Hard","DP","DFS"]},i=void 0,c={unversionedId:"leetcode/1501-2000/count_all_possible_routes",id:"leetcode/1501-2000/count_all_possible_routes",title:"1575. Count All Possible Routes",description:"https://leetcode.com/problems/count-all-possible-routes/",source:"@site/docs/leetcode/1501-2000/1575_count_all_possible_routes.md",sourceDirName:"leetcode/1501-2000",slug:"/leetcode/1501-2000/count_all_possible_routes",permalink:"/docs/leetcode/1501-2000/count_all_possible_routes",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1501-2000/1575_count_all_possible_routes.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"DP",permalink:"/docs/tags/dp"},{label:"DFS",permalink:"/docs/tags/dfs"}],version:"current",sidebarPosition:1575,frontMatter:{title:"1575. Count All Possible Routes",sidebar_label:"1575. Count All Possible Routes",tags:["Leetcode Hard","DP","DFS"]},sidebar:"docSidebar",previous:{title:"1557. Minimum Number of Vertices to Reach All Nodes",permalink:"/docs/leetcode/1501-2000/min_number_vertice_reach_all_nodes"},next:{title:"1578. Minimum Time to Make Rope Colorful",permalink:"/docs/leetcode/1501-2000/min_time_to_make_rope_colorful"}},s={},a=[{value:"Python",id:"python",level:2}],u={toc:a};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/count-all-possible-routes/"},"https://leetcode.com/problems/count-all-possible-routes/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u7279\u6b8a\u7d50\u675f\u689d\u4ef6\u7684DP"),(0,o.kt)("li",{parentName:"ul"},"\u689d\u4ef6\uff1a",(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"Fuel > 0"),(0,o.kt)("li",{parentName:"ol"},"\u7d2f\u52a0cost\u4f5c\u70bareturn")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from functools import cache\n\n\nclass Solution:\n    def countRoutes(self, locations: List[int], start: int, finish: int, fuel: int) -> int:\n        @cache\n        def dfs(curr, remain):\n            if remain < 0:\n                return 0\n\n            result = 1 if curr == finish else 0\n\n            for next_location in range(len(locations)):\n                if curr == next_location:\n                    continue\n\n                cost = abs(locations[curr] - locations[next_location])\n                result += dfs(next_location, remain-cost)\n\n            return result % (10**9+7)\n\n        return dfs(start, fuel)\n")))}p.isMDXComponent=!0}}]);