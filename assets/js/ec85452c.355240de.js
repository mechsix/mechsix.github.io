"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[757],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return f}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var d=n.createContext({}),c=function(e){var t=n.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(d.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,l=e.originalType,d=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=c(r),f=o,m=p["".concat(d,".").concat(f)]||p[f]||s[f]||l;return r?n.createElement(m,i(i({ref:t},u),{},{components:r})):n.createElement(m,i({ref:t},u))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=r.length,i=new Array(l);i[0]=p;var a={};for(var d in t)hasOwnProperty.call(t,d)&&(a[d]=t[d]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var c=2;c<l;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},28642:function(e,t,r){r.r(t),r.d(t,{contentTitle:function(){return d},default:function(){return p},frontMatter:function(){return a},metadata:function(){return c},toc:function(){return u}});var n=r(87462),o=r(63366),l=(r(67294),r(3905)),i=["components"],a={title:"623. Add One Row to Tree",sidebar_label:"623. Add One Row to Tree",tags:["Leetcode Medium","Binary Tree","DFS"]},d=void 0,c={unversionedId:"leetcode/501-1000/add_one_row_to_tree",id:"leetcode/501-1000/add_one_row_to_tree",title:"623. Add One Row to Tree",description:"https://leetcode.com/problems/add-one-row-to-tree/",source:"@site/docs/leetcode/501-1000/623_add_one_row_to_tree.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/add_one_row_to_tree",permalink:"/docs/leetcode/501-1000/add_one_row_to_tree",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/623_add_one_row_to_tree.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"},{label:"DFS",permalink:"/docs/tags/dfs"}],version:"current",sidebarPosition:623,frontMatter:{title:"623. Add One Row to Tree",sidebar_label:"623. Add One Row to Tree",tags:["Leetcode Medium","Binary Tree","DFS"]},sidebar:"docSidebar",previous:{title:"622. Design Circular Queue",permalink:"/docs/leetcode/501-1000/design_circular_queue"},next:{title:"630. Course Schedule III",permalink:"/docs/leetcode/501-1000/course_schedule_iii"}},u=[{value:"Python",id:"python",children:[],level:2}],s={toc:u};function p(e){var t=e.components,r=(0,o.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/add-one-row-to-tree/"},"https://leetcode.com/problems/add-one-row-to-tree/")),(0,l.kt)("h2",{id:"python"},"Python"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Edge case\u5f88\u591a\uff0c\u8981\u591a\u601d\u8003\u4e00\u4e0b",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"depth == 1"),(0,l.kt)("li",{parentName:"ul"},"depth == max_tree_depth")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def addOneRow(self, root: Optional[TreeNode], val: int, depth: int) -> Optional[TreeNode]:\n        if depth == 1:\n            return TreeNode(val=val, left=root)\n\n        def dfs(node, level, direction):\n            if not node:\n                return None if level != depth else TreeNode(val=val)\n\n            if level != depth:\n                node.left = dfs(node.left, level+1, 'L')\n                node.right = dfs(node.right, level+1, 'R')\n                return node\n\n            return TreeNode(\n                val=val,\n                left=dfs(node, level+2, 'L') if direction == 'L' else None,\n                right=dfs(node, level+2, 'R') if direction == 'R' else None\n            )\n\n        root.left = dfs(root.left, 2, 'L')\n        root.right = dfs(root.right, 2, 'R')\n        return root\n")))}p.isMDXComponent=!0}}]);