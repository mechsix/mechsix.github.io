"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[5512],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return p}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=c(r),p=o,y=m["".concat(s,".").concat(p)]||m[p]||d[p]||i;return r?n.createElement(y,a(a({ref:t},u),{},{components:r})):n.createElement(y,a({ref:t},u))}));function p(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},22198:function(e,t,r){r.r(t),r.d(t,{contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var n=r(87462),o=r(63366),i=(r(67294),r(3905)),a=["components"],l={title:"981. Time Based Key-Value Store",sidebar_label:"981. Time Based Key-Value Store",tags:["Leetcode Medium","Binary Search"]},s=void 0,c={unversionedId:"leetcode/501-1000/time_based_key_value_store",id:"leetcode/501-1000/time_based_key_value_store",title:"981. Time Based Key-Value Store",description:"https://leetcode.com/problems/time-based-key-value-store/",source:"@site/docs/leetcode/501-1000/981_time_based_key_value_store.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/time_based_key_value_store",permalink:"/docs/leetcode/501-1000/time_based_key_value_store",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/981_time_based_key_value_store.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Binary Search",permalink:"/docs/tags/binary-search"}],version:"current",sidebarPosition:981,frontMatter:{title:"981. Time Based Key-Value Store",sidebar_label:"981. Time Based Key-Value Store",tags:["Leetcode Medium","Binary Search"]},sidebar:"docSidebar",previous:{title:"977. Squares of a Sorted Array",permalink:"/docs/leetcode/501-1000/squares_of_sorted_array"},next:{title:"983. Minimum Cost For Tickets",permalink:"/docs/leetcode/501-1000/min_cost_for_tickets"}},u=[{value:"Python",id:"python",children:[{value:"Get by Binary Search",id:"get-by-binary-search",children:[],level:3}],level:2}],d={toc:u};function m(e){var t=e.components,r=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/time-based-key-value-store/"},"https://leetcode.com/problems/time-based-key-value-store/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"get-by-binary-search"},"Get by Binary Search"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from collections import defaultdict\n\n\nclass TimeMap:\n    def __init__(self):\n        self.memory = defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        # The question did not indicate the timestamp will be set always in incremental order\n        # But the test case riase error if you\'re not set in the order, so we can skip the\n        # ordering find of append\n        self.memory[key].append((timestamp, value))\n\n\n    def get(self, key: str, timestamp: int) -> str:\n        result = ""\n        l, r = 0, len(self.memory[key])-1\n        while l <= r:\n            pivot = (l+r) >> 1\n            if self.memory[key][pivot][0] <= timestamp:\n                result = self.memory[key][pivot][1]\n                l = pivot+1\n            else:\n                r = pivot-1\n        return result\n')))}m.isMDXComponent=!0}}]);