"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[64675],{3905:(e,r,n)=>{n.d(r,{Zo:()=>u,kt:()=>h});var t=n(67294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function c(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function a(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=t.createContext({}),l=function(e){var r=t.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):c(c({},r),e)),n},u=function(e){var r=l(e.components);return t.createElement(s.Provider,{value:r},e.children)},d="mdxType",f={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},p=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),d=l(n),p=o,h=d["".concat(s,".").concat(p)]||d[p]||f[p]||i;return n?t.createElement(h,c(c({ref:r},u),{},{components:n})):t.createElement(h,c({ref:r},u))}));function h(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=n.length,c=new Array(i);c[0]=p;var a={};for(var s in r)hasOwnProperty.call(r,s)&&(a[s]=r[s]);a.originalType=e,a[d]="string"==typeof e?e:o,c[1]=a;for(var l=2;l<i;l++)c[l]=n[l];return t.createElement.apply(null,c)}return t.createElement.apply(null,n)}p.displayName="MDXCreateElement"},91169:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>s,contentTitle:()=>c,default:()=>f,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var t=n(87462),o=(n(67294),n(3905));const i={title:"208. Implement Trie (Prefix Tree)",sidebar_label:"208. Implement Trie (Prefix Tree)",tags:["Leetcode Medium","Trie"]},c=void 0,a={unversionedId:"leetcode/1-500/trie_tree",id:"leetcode/1-500/trie_tree",title:"208. Implement Trie (Prefix Tree)",description:"https://leetcode.com/problems/implement-trie-prefix-tree/",source:"@site/docs/leetcode/1-500/208_trie_tree.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/trie_tree",permalink:"/docs/leetcode/1-500/trie_tree",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/208_trie_tree.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Trie",permalink:"/docs/tags/trie"}],version:"current",sidebarPosition:208,frontMatter:{title:"208. Implement Trie (Prefix Tree)",sidebar_label:"208. Implement Trie (Prefix Tree)",tags:["Leetcode Medium","Trie"]},sidebar:"docSidebar",previous:{title:"207. Course Schedule",permalink:"/docs/leetcode/1-500/course_schedule"},next:{title:"209. Minimum Size Subarray Sum",permalink:"/docs/leetcode/1-500/min_size_subarray_sum"}},s={},l=[{value:"Python",id:"python",level:2},{value:"With custom TrieNode class",id:"with-custom-trienode-class",level:3},{value:"Native Dict with custom EOS (End-of-string) sign",id:"native-dict-with-custom-eos-end-of-string-sign",level:3},{value:"Javascript",id:"javascript",level:2}],u={toc:l},d="wrapper";function f(e){let{components:r,...n}=e;return(0,o.kt)(d,(0,t.Z)({},u,n,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/implement-trie-prefix-tree/"},"https://leetcode.com/problems/implement-trie-prefix-tree/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"with-custom-trienode-class"},"With custom TrieNode class"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word: str) -> None:\n        cur = self.root\n        for char in word:\n            if char not in cur.children:\n                cur.children[char] = TrieNode()\n            cur = cur.children[char]\n        cur.is_end = True\n\n    def search(self, word: str) -> bool:\n        cur = self.root\n        for char in word:\n            if char not in cur.children:\n                return False\n            cur = cur.children[char]\n        return cur.is_end\n\n    def startsWith(self, prefix: str) -> bool:\n        cur = self.root\n        for char in prefix:\n            if char not in cur.children:\n                return False\n            cur = cur.children[char]\n        return True\n")),(0,o.kt)("h3",{id:"native-dict-with-custom-eos-end-of-string-sign"},"Native Dict with custom EOS (End-of-string) sign"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Trie(object):\n    EOS = '-'\n    def __init__(self):\n        self.root = {}\n\n    def insert(self, word):\n        cur = self.root\n        for char in word:\n            if char not in cur:\n                cur[char] = {}\n            cur = cur[char]\n        cur[self.EOS] = True\n\n    def search(self, word):\n        cur = self.root\n        for char in word:\n            if char not in cur:\n                return False\n            cur = cur[char]\n        return self.EOS in cur\n\n    def startsWith(self, prefix):\n        cur = self.root\n        for char in prefix:\n            if char not in cur:\n                return False\n            cur = cur[char]\n        return True\n")),(0,o.kt)("h2",{id:"javascript"},"Javascript"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"var Trie = function () {\n    this.root = {};\n};\n\n/**\n * @param {string} word\n * @return {void}\n */\nTrie.prototype.insert = function (word) {\n    let node = this.root;\n\n    for (const char of word) {\n        if (!node[char]) {\n            node[char] = {};\n        }\n        node = node[char];\n    }\n    node.isWord = true;\n};\n\n/**\n * @param {string} word\n * @return {boolean}\n */\nTrie.prototype.search = function (word) {\n    let node = this.root;\n\n    for (const char of word) {\n    if (!node[char]) return false\n        node = node[char];\n    }\n\n    return node.isWord ?? false;\n};\n\n/**\n * @param {string} prefix\n * @return {boolean}\n */\nTrie.prototype.startsWith = function (prefix) {\n    let node = this.root;\n\n    for (const char of prefix) {\n    if (!node[char]) return false\n        node = node[char];\n    }\n\n    return true;\n};\n")))}f.isMDXComponent=!0}}]);