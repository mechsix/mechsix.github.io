"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[13079],{20527:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>r});const s=JSON.parse('{"id":"leetcode/1-500/containers_duplicate","title":"217. Contains Duplicate","description":"https://leetcode.com/problems/contains-duplicate","source":"@site/docs/leetcode/1-500/217_containers_duplicate.md","sourceDirName":"leetcode/1-500","slug":"/leetcode/1-500/containers_duplicate","permalink":"/docs/leetcode/1-500/containers_duplicate","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Easy","permalink":"/docs/tags/leetcode-easy"},{"inline":true,"label":"Hash","permalink":"/docs/tags/hash"},{"inline":true,"label":"Go","permalink":"/docs/tags/go"},{"inline":true,"label":"Rust","permalink":"/docs/tags/rust"},{"inline":true,"label":"CTCI","permalink":"/docs/tags/ctci"}],"version":"current","sidebarPosition":217,"frontMatter":{"title":"217. Contains Duplicate","sidebar_label":"217. Contains Duplicate","tags":["Leetcode Easy","Hash","Go","Rust","CTCI"]},"sidebar":"docSidebar","previous":{"title":"216. Combination Sum III","permalink":"/docs/leetcode/1-500/combination_sum_iii"},"next":{"title":"219. Contains Duplicate II","permalink":"/docs/leetcode/1-500/contains_duplicate_ii"}}');var i=t(74848),o=t(28453);const l={title:"217. Contains Duplicate",sidebar_label:"217. Contains Duplicate",tags:["Leetcode Easy","Hash","Go","Rust","CTCI"]},a=void 0,c={},r=[{value:"Python",id:"python",level:2},{value:"Go",id:"go",level:2},{value:"Rust",id:"rust",level:2}];function u(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/contains-duplicate",children:"https://leetcode.com/problems/contains-duplicate"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"CTCI 1.1 Is Unique"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def containsDuplicate(self, nums: List[int]) -> bool:\n        seem = set()\n        for num in nums:\n            if num in seem:\n                return True\n            seem.add(num)\n        return False\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def containsDuplicate(self, nums: List[int]) -> bool:\n        return len(nums) != len(set(nums))\n"})}),"\n",(0,i.jsx)(n.h2,{id:"go",children:"Go"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func containsDuplicate(nums []int) bool {\n    seem := make(map[int]bool)\n    for _, num := range nums {\n        if seem[num] {\n            return true\n        }\n        seem[num] = true\n    }\n    return false\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"rust",children:"Rust"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"use std::collections::HashSet;\n\nimpl Solution {\n    pub fn contains_duplicate(nums: Vec<i32>) -> bool {\n        let mut seen = HashSet::new();\n        for num in nums {\n            if seen.contains(&num) {\n                return true;\n            }\n            seen.insert(num);\n        }\n        false\n    }\n}\n"})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var s=t(96540);const i={},o=s.createContext(i);function l(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);