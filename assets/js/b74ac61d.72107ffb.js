"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[56738],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var r=n(67294);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,c=function(e,t){if(null==e)return{};var n,r,c={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(c[n]=e[n]);return c}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(c[n]=e[n])}return c}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,c=e.mdxType,o=e.originalType,u=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),p=l(n),f=c,m=p["".concat(u,".").concat(f)]||p[f]||d[f]||o;return n?r.createElement(m,i(i({ref:t},s),{},{components:n})):r.createElement(m,i({ref:t},s))}));function m(e,t){var n=arguments,c=t&&t.mdxType;if("string"==typeof e||c){var o=n.length,i=new Array(o);i[0]=f;var a={};for(var u in t)hasOwnProperty.call(t,u)&&(a[u]=t[u]);a.originalType=e,a[p]="string"==typeof e?e:c,i[1]=a;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},9489:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return i},default:function(){return p},frontMatter:function(){return o},metadata:function(){return a},toc:function(){return l}});var r=n(83117),c=(n(67294),n(3905));const o={title:"2665. Counter II",sidebar_label:"2665. Counter II",tags:["Leetcode Easy","JS 30 Days Challenge"]},i=void 0,a={unversionedId:"leetcode/2000/counter_ii",id:"leetcode/2000/counter_ii",title:"2665. Counter II",description:"Javascript",source:"@site/docs/leetcode/2000/2665_counter_ii.md",sourceDirName:"leetcode/2000",slug:"/leetcode/2000/counter_ii",permalink:"/docs/leetcode/2000/counter_ii",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/2000/2665_counter_ii.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"JS 30 Days Challenge",permalink:"/docs/tags/js-30-days-challenge"}],version:"current",sidebarPosition:2665,frontMatter:{title:"2665. Counter II",sidebar_label:"2665. Counter II",tags:["Leetcode Easy","JS 30 Days Challenge"]},sidebar:"docSidebar",previous:{title:"2635. Apply Transform Over Each Element in Array",permalink:"/docs/leetcode/2000/apply_transform_over_each_element_in_array"},next:{title:"2667. Create Hello World Function",permalink:"/docs/leetcode/2000/create_hello_world_function"}},u={},l=[{value:"Javascript",id:"javascript",level:2},{value:"Typescript",id:"typescript",level:2}],s={toc:l};function p(e){let{components:t,...n}=e;return(0,c.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("h2",{id:"javascript"},"Javascript"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-javascript"},"var createCounter = function(init) {\n    const origin = init\n    let current = init\n\n    return {\n        increment: () => {\n            return ++current\n        },\n        decrement: () => {\n            return --current\n        },\n        reset: () => {\n            current = init\n            return current\n        }\n    }\n};\n")),(0,c.kt)("h2",{id:"typescript"},"Typescript"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-typescript"},"type ReturnObj = {\n    increment: () => number,\n    decrement: () => number,\n    reset: () => number,\n}\n\nvar createCounter = function(init): ReturnObj {\n    const origin = init\n    let current = init\n\n    return {\n        increment: () => {\n            return ++current\n        },\n        decrement: () => {\n            return --current\n        },\n        reset: () => {\n            current = init\n            return current\n        }\n    }\n};\n")))}p.isMDXComponent=!0}}]);