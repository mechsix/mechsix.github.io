"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[82542],{76016:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>a,contentTitle:()=>r,default:()=>u,frontMatter:()=>c,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"leetcode/1001-1500/min_cost_move_chips_to_same_pos","title":"1217. Minimum Cost to Move Chips to The Same Position","description":"Python","source":"@site/docs/leetcode/1001-1500/1217_min_cost_move_chips_to_same_pos.md","sourceDirName":"leetcode/1001-1500","slug":"/leetcode/1001-1500/min_cost_move_chips_to_same_pos","permalink":"/docs/leetcode/1001-1500/min_cost_move_chips_to_same_pos","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Easy","permalink":"/docs/tags/leetcode-easy"}],"version":"current","sidebarPosition":1217,"frontMatter":{"title":"1217. Minimum Cost to Move Chips to The Same Position","sidebar_label":"1217. Min Cost Move to Same Pos","tags":["Leetcode Easy"]},"sidebar":"docSidebar","previous":{"title":"1209. Remove All Adjacent Duplicates in String II","permalink":"/docs/leetcode/1001-1500/remove_all_adjacent_duplicates_in_string_ii"},"next":{"title":"1218. Longest Arithmetic Subsequence of Given Difference","permalink":"/docs/leetcode/1001-1500/longest_arithmetic_subsequence_of_given_difference"}}');var i=o(74848),s=o(28453);const c={title:"1217. Minimum Cost to Move Chips to The Same Position",sidebar_label:"1217. Min Cost Move to Same Pos",tags:["Leetcode Easy"]},r=void 0,a={},l=[{value:"Python",id:"python",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,i.jsx)(t.p,{children:"\u984c\u76ee\u96e3\u61c2\u800c\u5df2\uff0c\u79fb\u52d52\u6b65cost\u70ba\u96f6\uff0c\u554f\u7684\u53ea\u662f\u5947\u6578\u591a\u9084\u662f\u5076\u6578\u591a"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"class Solution:\n    def minCostToMoveChips(self, position: List[int]) -> int:\n        if not position:\n            return 0\n\n        odd_count = len([i for i in position if i % 2 == 1])\n        even_count = len([i for i in position if i % 2 == 0])\n\n        if odd_count > even_count:\n            return even_count\n        return odd_count\n\n"})})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,t,o)=>{o.d(t,{R:()=>c,x:()=>r});var n=o(96540);const i={},s=n.createContext(i);function c(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);