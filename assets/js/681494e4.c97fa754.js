"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[50670],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return b}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var a=r.createContext({}),u=function(e){var t=r.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(a.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),d=o,b=p["".concat(a,".").concat(d)]||p[d]||m[d]||i;return n?r.createElement(b,s(s({ref:t},c),{},{components:n})):r.createElement(b,s({ref:t},c))}));function b(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,s=new Array(i);s[0]=d;var l={};for(var a in t)hasOwnProperty.call(t,a)&&(l[a]=t[a]);l.originalType=e,l[p]="string"==typeof e?e:o,s[1]=l;for(var u=2;u<i;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},24969:function(e,t,n){n.r(t),n.d(t,{assets:function(){return a},contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return u}});var r=n(83117),o=(n(67294),n(3905));const i={title:"452. Minimum Number of Arrows to Burst Balloons",sidebar_label:"452. Minimum Number of Arrows to Burst Balloons",tags:["Leetcode Medium","Sweep Line","Greedy"]},s=void 0,l={unversionedId:"leetcode/1-500/min_arrow_bust_balloons",id:"leetcode/1-500/min_arrow_bust_balloons",title:"452. Minimum Number of Arrows to Burst Balloons",description:"https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons",source:"@site/docs/leetcode/1-500/452_min_arrow_bust_balloons.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/min_arrow_bust_balloons",permalink:"/docs/leetcode/1-500/min_arrow_bust_balloons",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/452_min_arrow_bust_balloons.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Sweep Line",permalink:"/docs/tags/sweep-line"},{label:"Greedy",permalink:"/docs/tags/greedy"}],version:"current",sidebarPosition:452,frontMatter:{title:"452. Minimum Number of Arrows to Burst Balloons",sidebar_label:"452. Minimum Number of Arrows to Burst Balloons",tags:["Leetcode Medium","Sweep Line","Greedy"]},sidebar:"docSidebar",previous:{title:"451. Sort Characters By Frequency",permalink:"/docs/leetcode/1-500/sort_char_by_frequency"},next:{title:"453. Minimum Moves to Equal Array Elements",permalink:"/docs/leetcode/1-500/minimum_moves_to_equal_array_elements"}},a={},u=[{value:"Python",id:"python",level:2}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons"},"https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def findMinArrowShots(self, points: List[List[int]]) -> int:\n        if not points:\n            return 0\n\n        points.sort(key=lambda point: point[0])\n\n        cur = points[-1][0]\n        points.pop()\n        counter = 1\n\n        while points:\n            if cur <= points[-1][1]:\n                points.pop()\n                continue\n\n            point = points.pop()\n            cur = point[0]\n            counter += 1\n\n        return counter\n")))}p.isMDXComponent=!0}}]);