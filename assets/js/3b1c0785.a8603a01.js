"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[2659],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return d}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),u=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=u(e.components);return r.createElement(c.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=u(t),d=o,f=p["".concat(c,".").concat(d)]||p[d]||s[d]||a;return t?r.createElement(f,i(i({ref:n},m),{},{components:t})):r.createElement(f,i({ref:n},m))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=p;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var u=2;u<a;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},88551:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return m},default:function(){return p}});var r=t(87462),o=t(63366),a=(t(67294),t(3905)),i=["components"],l={title:"779. K-th Symbol in Grammar",sidebar_label:"779. K-th Symbol in Grammar",tags:["Leetcode Medium"]},c=void 0,u={unversionedId:"leetcode/501-1000/kth_symbol_in_grammar",id:"leetcode/501-1000/kth_symbol_in_grammar",title:"779. K-th Symbol in Grammar",description:"Python",source:"@site/docs/leetcode/501-1000/779_kth_symbol_in_grammar.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/kth_symbol_in_grammar",permalink:"/docs/leetcode/501-1000/kth_symbol_in_grammar",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/779_kth_symbol_in_grammar.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"}],version:"current",sidebarPosition:779,frontMatter:{title:"779. K-th Symbol in Grammar",sidebar_label:"779. K-th Symbol in Grammar",tags:["Leetcode Medium"]},sidebar:"docSidebar",previous:{title:"739. Daily Temperatures",permalink:"/docs/leetcode/501-1000/daily_temperatures"},next:{title:"875. Koko Eating Bananas",permalink:"/docs/leetcode/501-1000/koko_eating_bananas"}},m=[{value:"Python",id:"python",children:[],level:2}],s={toc:m};function p(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Timelimit exceed"),(0,a.kt)("li",{parentName:"ul"},"O(n^2 + k)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def kthGrammar(self, n: int, k: int) -> int:\n        if n == 1:\n            if k > 1:\n                return\n            else:\n                return 0\n\n        return self._travel(2, n, k, [0])\n\n    def _travel(self, cur_n, target_n, k, pre):\n        if cur_n > target_n:\n            return pre.pop(k-1)\n\n        nums = []\n        limit = k/2\n        for num in pre:\n            if limit < 0:\n                break\n            if num == 0:\n                nums.append(0)\n                nums.append(1)\n            else:\n                nums.append(1)\n                nums.append(0)\n            limit -= 1\n\n        return self._travel(cur_n+1, target_n, k, nums)\n")))}p.isMDXComponent=!0}}]);