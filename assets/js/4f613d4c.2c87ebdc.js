"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[55938],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return d}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),a=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=a(e.components);return r.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,c=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=a(n),d=o,f=m["".concat(u,".").concat(d)]||m[d]||p[d]||c;return n?r.createElement(f,i(i({ref:t},s),{},{components:n})):r.createElement(f,i({ref:t},s))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=n.length,i=new Array(c);i[0]=m;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var a=2;a<c;a++)i[a]=n[a];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},18177:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return l},metadata:function(){return a},toc:function(){return s}});var r=n(87462),o=n(63366),c=(n(67294),n(3905)),i=["components"],l={title:"347. Top K Frequent Elements",sidebar_label:"347. Top K Frequent Elements",tags:["Leetcode Medium","Heap"]},u=void 0,a={unversionedId:"leetcode/1-500/top_k_frequent_elms",id:"leetcode/1-500/top_k_frequent_elms",title:"347. Top K Frequent Elements",description:"https://leetcode.com/problems/top-k-frequent-elements/",source:"@site/docs/leetcode/1-500/347_top_k_frequent_elms.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/top_k_frequent_elms",permalink:"/docs/leetcode/1-500/top_k_frequent_elms",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/347_top_k_frequent_elms.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Heap",permalink:"/docs/tags/heap"}],version:"current",sidebarPosition:347,frontMatter:{title:"347. Top K Frequent Elements",sidebar_label:"347. Top K Frequent Elements",tags:["Leetcode Medium","Heap"]},sidebar:"docSidebar",previous:{title:"344. Reverse String",permalink:"/docs/leetcode/1-500/reverse_string"},next:{title:"349. Intersection of Two Arrays",permalink:"/docs/leetcode/1-500/intersection_of_two_arrays"}},s=[{value:"Python",id:"python",children:[{value:"Count and sort",id:"count-and-sort",children:[],level:3},{value:"Heap",id:"heap",children:[],level:3}],level:2}],p={toc:s};function m(e){var t=e.components,n=(0,o.Z)(e,i);return(0,c.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/top-k-frequent-elements/"},"https://leetcode.com/problems/top-k-frequent-elements/")),(0,c.kt)("h2",{id:"python"},"Python"),(0,c.kt)("h3",{id:"count-and-sort"},"Count and sort"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-python"},"from collections import Counter\n\n\nclass Solution:\n    def topKFrequent(self, nums: List[int], k: int) -> List[int]:\n        counts = [(num, count) for num, count in Counter(nums).items()]\n        counts.sort(key=lambda item: item[1], reverse=True)\n\n        return [count[0] for count in counts[:k]]\n")),(0,c.kt)("h3",{id:"heap"},"Heap"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-python"},"import heapq\nfrom collections import Counter\n\n\nclass Solution:\n    def topKFrequent(self, nums: List[int], k: int) -> List[int]:\n        counts = Counter(nums)\n\n        return heapq.nlargest(k, counts.keys(), key=counts.get)\n")))}m.isMDXComponent=!0}}]);