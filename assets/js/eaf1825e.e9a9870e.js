"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[21550],{24936:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"leetcode/1-500/add_two_numbers_ii","title":"445. Add Two Numbers II","description":"https://leetcode.com/problems/add-two-numbers-ii/","source":"@site/docs/leetcode/1-500/445_add_two_numbers_ii.md","sourceDirName":"leetcode/1-500","slug":"/leetcode/1-500/add_two_numbers_ii","permalink":"/docs/leetcode/1-500/add_two_numbers_ii","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Medium","permalink":"/docs/tags/leetcode-medium"},{"inline":true,"label":"Linked List","permalink":"/docs/tags/linked-list"},{"inline":true,"label":"Stack","permalink":"/docs/tags/stack"}],"version":"current","sidebarPosition":445,"frontMatter":{"title":"445. Add Two Numbers II","sidebar_label":"445. Add Two Numbers II","tags":["Leetcode Medium","Linked List","Stack"]},"sidebar":"docSidebar","previous":{"title":"443. String Compression","permalink":"/docs/leetcode/1-500/string_compression"},"next":{"title":"448. Find All Numbers Disappeared in an Array","permalink":"/docs/leetcode/1-500/find_all_nums_disappeared_in_array"}}');var s=t(74848),i=t(28453);const r={title:"445. Add Two Numbers II",sidebar_label:"445. Add Two Numbers II",tags:["Leetcode Medium","Linked List","Stack"]},d=void 0,a={},c=[{value:"Python",id:"python",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/add-two-numbers-ii/",children:"https://leetcode.com/problems/add-two-numbers-ii/"})}),"\n",(0,s.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\n        if not l1 and not l2:\n            return ListNode(val=0)\n        stack1, stack2 = [], []\n        cur1, cur2 = l1, l2\n\n        while cur1:\n            stack1.append(cur1.val)\n            cur1 = cur1.next\n\n        while cur2:\n            stack2.append(cur2.val)\n            cur2 = cur2.next\n        \n        new_head = None\n        carry = 0\n        while stack1 or stack2 or carry:\n            num1 = stack1.pop() if stack1 else 0\n            num2 = stack2.pop() if stack2 else 0\n\n            total = num1 + num2 + carry\n            carry = total // 10\n            \n            new_node = ListNode(total % 10)\n            new_node.next = new_head\n            new_head = new_node\n\n        return new_head\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>d});var o=t(96540);const s={},i=o.createContext(s);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);