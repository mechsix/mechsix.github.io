"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[52692],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var o=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},i=Object.keys(e);for(o=0;o<i.length;o++)r=i[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)r=i[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var a=o.createContext({}),s=function(e){var t=o.useContext(a),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=s(e.components);return o.createElement(a.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,a=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=s(r),m=n,f=d["".concat(a,".").concat(m)]||d[m]||p[m]||i;return r?o.createElement(f,l(l({ref:t},u),{},{components:r})):o.createElement(f,l({ref:t},u))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,l=new Array(i);l[0]=m;var c={};for(var a in t)hasOwnProperty.call(t,a)&&(c[a]=t[a]);c.originalType=e,c[d]="string"==typeof e?e:n,l[1]=c;for(var s=2;s<i;s++)l[s]=r[s];return o.createElement.apply(null,l)}return o.createElement.apply(null,r)}m.displayName="MDXCreateElement"},97101:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>c,toc:()=>s});var o=r(87462),n=(r(67294),r(3905));const i={title:"82. Remove Duplicates from Sorted List II",sidebar_label:"82. Remove Duplicates from Sorted List II",tags:["Leetcode Medium","Linked List","Go"]},l=void 0,c={unversionedId:"leetcode/1-500/remove_duplicates_from_sorted_list_ii",id:"leetcode/1-500/remove_duplicates_from_sorted_list_ii",title:"82. Remove Duplicates from Sorted List II",description:"https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/",source:"@site/docs/leetcode/1-500/82_remove_duplicates_from_sorted_list_ii.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/remove_duplicates_from_sorted_list_ii",permalink:"/docs/leetcode/1-500/remove_duplicates_from_sorted_list_ii",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/82_remove_duplicates_from_sorted_list_ii.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Linked List",permalink:"/docs/tags/linked-list"},{label:"Go",permalink:"/docs/tags/go"}],version:"current",sidebarPosition:82,frontMatter:{title:"82. Remove Duplicates from Sorted List II",sidebar_label:"82. Remove Duplicates from Sorted List II",tags:["Leetcode Medium","Linked List","Go"]},sidebar:"docSidebar",previous:{title:"80. Remove Duplicates from Sorted Array II",permalink:"/docs/leetcode/1-500/remove_duplicates_from_sorted_array_ii"},next:{title:"83. Remove Duplicates from Sorted List",permalink:"/docs/leetcode/1-500/remove_duplicates_from_sorted_linked_list"}},a={},s=[{value:"Python",id:"python",level:2},{value:"Go",id:"go",level:2}],u={toc:s},d="wrapper";function p(e){let{components:t,...r}=e;return(0,n.kt)(d,(0,o.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/"},"https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/")),(0,n.kt)("h2",{id:"python"},"Python"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        dummy = ListNode(val=None, next=head)\n        pre, cur = dummy, head\n\n        while cur:\n            if cur.next and cur.val == cur.next.val:\n                # Move over all duplicates\n                while cur.next and cur.val == cur.next.val:\n                    cur = cur.next\n                pre.next = cur.next\n            else:\n                pre = pre.next\n\n            cur = cur.next\n\n        return dummy.next\n")),(0,n.kt)("h2",{id:"go"},"Go"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"func deleteDuplicates(head *ListNode) *ListNode {\n    dummy := new(ListNode)\n    dummy.Next = head\n\n    pre, cur := dummy, head\n\n    for cur != nil {\n        if cur.Next != nil && cur.Val == cur.Next.Val {\n            for cur.Next != nil && cur.Val == cur.Next.Val {\n                cur = cur.Next\n            }\n            pre.Next = cur.Next\n        } else {\n            pre = pre.Next\n        }\n        cur = cur.Next\n    }\n\n    return dummy.Next\n}\n")))}p.isMDXComponent=!0}}]);