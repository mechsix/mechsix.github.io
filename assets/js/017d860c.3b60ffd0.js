"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[41482],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return f}});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var a=o.createContext({}),u=function(e){var t=o.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=u(e.components);return o.createElement(a.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=u(n),d=r,f=p["".concat(a,".").concat(d)]||p[d]||m[d]||i;return n?o.createElement(f,c(c({ref:t},l),{},{components:n})):o.createElement(f,c({ref:t},l))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,c=new Array(i);c[0]=d;var s={};for(var a in t)hasOwnProperty.call(t,a)&&(s[a]=t[a]);s.originalType=e,s[p]="string"==typeof e?e:r,c[1]=s;for(var u=2;u<i;u++)c[u]=n[u];return o.createElement.apply(null,c)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},29262:function(e,t,n){n.r(t),n.d(t,{assets:function(){return a},contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return u}});var o=n(83117),r=(n(67294),n(3905));const i={title:"1217. Minimum Cost to Move Chips to The Same Position",sidebar_label:"1217. Min Cost Move to Same Pos",tags:["Leetcode Easy"]},c=void 0,s={unversionedId:"leetcode/1001-1500/min_cost_move_chips_to_same_pos",id:"leetcode/1001-1500/min_cost_move_chips_to_same_pos",title:"1217. Minimum Cost to Move Chips to The Same Position",description:"Python",source:"@site/docs/leetcode/1001-1500/1217_min_cost_move_chips_to_same_pos.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/min_cost_move_chips_to_same_pos",permalink:"/docs/leetcode/1001-1500/min_cost_move_chips_to_same_pos",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1217_min_cost_move_chips_to_same_pos.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"}],version:"current",sidebarPosition:1217,frontMatter:{title:"1217. Minimum Cost to Move Chips to The Same Position",sidebar_label:"1217. Min Cost Move to Same Pos",tags:["Leetcode Easy"]},sidebar:"docSidebar",previous:{title:"1209. Remove All Adjacent Duplicates in String II",permalink:"/docs/leetcode/1001-1500/remove_all_adjacent_duplicates_in_string_ii"},next:{title:"1220. Count Vowels Permutation",permalink:"/docs/leetcode/1001-1500/count_vowels_permutation"}},a={},u=[{value:"Python",id:"python",level:2}],l={toc:u};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"python"},"Python"),(0,r.kt)("p",null,"\u984c\u76ee\u96e3\u61c2\u800c\u5df2\uff0c\u79fb\u52d52\u6b65cost\u70ba\u96f6\uff0c\u554f\u7684\u53ea\u662f\u5947\u6578\u591a\u9084\u662f\u5076\u6578\u591a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def minCostToMoveChips(self, position: List[int]) -> int:\n        if not position:\n            return 0\n\n        odd_count = len([i for i in position if i % 2 == 1])\n        even_count = len([i for i in position if i % 2 == 0])\n\n        if odd_count > even_count:\n            return even_count\n        return odd_count\n\n")))}p.isMDXComponent=!0}}]);