"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[5658],{3905:(e,r,t)=>{t.d(r,{Zo:()=>m,kt:()=>_});var n=t(67294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=n.createContext({}),s=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},m=function(e){var r=s(e.components);return n.createElement(c.Provider,{value:r},e.children)},f="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},p=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),f=s(t),p=a,_=f["".concat(c,".").concat(p)]||f[p]||u[p]||o;return t?n.createElement(_,i(i({ref:r},m),{},{components:t})):n.createElement(_,i({ref:r},m))}));function _(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=p;var l={};for(var c in r)hasOwnProperty.call(r,c)&&(l[c]=r[c]);l.originalType=e,l[f]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},98326:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=t(87462),a=(t(67294),t(3905));const o={title:"363. Max Sum of Rectangle No Larger Than K",sidebar_label:"363. Max Sum of Rectangle No Larger Than K",tags:["Leetcode Hard","Prefix Sum","Binary Search"]},i=void 0,l={unversionedId:"leetcode/1-500/max_sum_of_rectangle_no_larger_than_k",id:"leetcode/1-500/max_sum_of_rectangle_no_larger_than_k",title:"363. Max Sum of Rectangle No Larger Than K",description:"Python",source:"@site/docs/leetcode/1-500/363_max_sum_of_rectangle_no_larger_than_k.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/max_sum_of_rectangle_no_larger_than_k",permalink:"/docs/leetcode/1-500/max_sum_of_rectangle_no_larger_than_k",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/363_max_sum_of_rectangle_no_larger_than_k.md",tags:[{label:"Leetcode Hard",permalink:"/docs/tags/leetcode-hard"},{label:"Prefix Sum",permalink:"/docs/tags/prefix-sum"},{label:"Binary Search",permalink:"/docs/tags/binary-search"}],version:"current",sidebarPosition:363,frontMatter:{title:"363. Max Sum of Rectangle No Larger Than K",sidebar_label:"363. Max Sum of Rectangle No Larger Than K",tags:["Leetcode Hard","Prefix Sum","Binary Search"]},sidebar:"docSidebar",previous:{title:"359. Logger Rate Limiter",permalink:"/docs/leetcode/1-500/logger_rate_limiter"},next:{title:"371. Sum of Two Integers",permalink:"/docs/leetcode/1-500/sum_of_two_integer"}},c={},s=[{value:"Python",id:"python",level:2}],m={toc:s},f="wrapper";function u(e){let{components:r,...t}=e;return(0,a.kt)(f,(0,n.Z)({},m,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from math import inf\nfrom bisect import insort, bisect_right\n\n\nclass Solution:\n    def maxSumSubmatrix(self, matrix: List[List[int]], k: int) -> int:\n        m, n = len(matrix), len(matrix[0])\n        prefix = self.build_prefix(matrix)\n\n        # Binary Search code refer to\n        # https://leetcode.com/problems/max-sum-of-rectangle-no-larger-than-k/discuss/2490502/Clean-Python3-W-Comments-or-Prefix-Sum-and-Bisect-or-Faster-than-97\n        max_sum_lk = float('-inf')\n        for row1 in range(m):\n            for row2 in range(row1, m):\n                left_sums = [0]\n                for end_col in range(n):\n                    sum_here = prefix[row2][end_col] - prefix[row1 - 1][end_col]\n\n                    pivot = bisect_right(left_sums, sum_here - k)\n                    if pivot > 0 and left_sums[pivot-1] == sum_here - k:\n                        return k\n                    elif pivot <= end_col:\n                        max_sum_lk = max(max_sum_lk, sum_here - left_sums[pivot])\n\n                    insort(left_sums, sum_here)\n\n        return max_sum_lk\n\n    @staticmethod\n    def build_prefix(matrix):\n        m, n = len(matrix), len(matrix[0])\n        prefix = [[0]*(n+1) for _ in range(m+1)]\n\n        for i in range(m):\n            for j in range(n):\n                if j-1 >= 0 and i-1 >= 0:\n                    prefix[i][j] = prefix[i-1][j] + prefix[i][j-1] - prefix[i-1][j-1] \\\n                                 + matrix[i][j]\n                elif i-1 >= 0:\n                    prefix[i][j] = prefix[i-1][j] + matrix[i][j]\n                elif j-1 >= 0:\n                    prefix[i][j] = prefix[i][j-1] + matrix[i][j]\n                else:\n                    prefix[i][j] = matrix[i][j]\n        return prefix\n")))}u.isMDXComponent=!0}}]);