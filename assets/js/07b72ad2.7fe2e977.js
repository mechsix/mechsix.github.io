"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[95388],{25705:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"leetcode/501-1000/valid_mountain_array","title":"941. Valid Mountain Array","description":"Python","source":"@site/docs/leetcode/501-1000/941_valid_mountain_array.md","sourceDirName":"leetcode/501-1000","slug":"/leetcode/501-1000/valid_mountain_array","permalink":"/docs/leetcode/501-1000/valid_mountain_array","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Easy","permalink":"/docs/tags/leetcode-easy"}],"version":"current","sidebarPosition":941,"frontMatter":{"title":"941. Valid Mountain Array","sidebar_label":"941. Valid Mountain Array","tags":["Leetcode Easy"]},"sidebar":"docSidebar","previous":{"title":"938. Range Sum of BST","permalink":"/docs/leetcode/501-1000/range_sum_bst"},"next":{"title":"946. Validate Stack Sequences","permalink":"/docs/leetcode/501-1000/validate_stack_sequences"}}');var o=t(74848),r=t(28453);const a={title:"941. Valid Mountain Array",sidebar_label:"941. Valid Mountain Array",tags:["Leetcode Easy"]},l=void 0,s={},c=[{value:"Python",id:"python",level:2},{value:"Single Loop Solution",id:"single-loop-solution",level:3},{value:"Break Loop Solution",id:"break-loop-solution",level:3}];function d(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,o.jsx)(n.h3,{id:"single-loop-solution",children:"Single Loop Solution"}),"\n",(0,o.jsx)(n.p,{children:"335 ms, 15.4MB"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def validMountainArray(self, arr: List[int]) -> bool:\n        length = len(arr)\n        if length < 3:\n            return False\n\n        top_index = 0\n        is_reach_top = False\n        \n        for i in range(1, length):\n            # Increasing\n            if arr[i] > arr[i-1] and not is_reach_top:\n                top_index = i\n                continue\n\n            # Decreasing\n            if arr[i] < arr[i-1]:\n                is_reach_top = True\n                continue\n\n            return False\n        \n        return top_index != 0 and top_index != length - 1\n"})}),"\n",(0,o.jsx)(n.h3,{id:"break-loop-solution",children:"Break Loop Solution"}),"\n",(0,o.jsx)(n.p,{children:"192 ms, 15.6MB"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def validMountainArray(self, arr: List[int]) -> bool:\n        length = len(arr)\n        if length < 3:\n            return False\n\n        i = 0\n        while i < length-1:\n            if arr[i] < arr[i+1]:\n                i += 1\n            else:\n                break\n\n        if i == 0 or i == length-1:\n            return False\n\n        while i < length-1:\n            if arr[i] > arr[i+1]:\n                i += 1\n            else:\n                break\n\n        return i == length-1\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var i=t(96540);const o={},r=i.createContext(o);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);