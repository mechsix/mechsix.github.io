"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[4258],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return d}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),u=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},s=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=u(r),d=o,y=p["".concat(c,".").concat(d)]||p[d]||f[d]||i;return r?n.createElement(y,a(a({ref:t},s),{},{components:r})):n.createElement(y,a({ref:t},s))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=p;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var u=2;u<i;u++)a[u]=r[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},38744:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return s},default:function(){return p}});var n=r(87462),o=r(63366),i=(r(67294),r(3905)),a=["components"],l={title:"114. Flatten Binary Tree to Linked List",sidebar_label:"114. Flatten Binary Tree to Linked List"},c=void 0,u={unversionedId:"leetcode/binary_tree/flatten_binary_tree_to_ll",id:"leetcode/binary_tree/flatten_binary_tree_to_ll",isDocsHomePage:!1,title:"114. Flatten Binary Tree to Linked List",description:"Python",source:"@site/docs/leetcode/binary_tree/114__flatten_binary_tree_to_ll.md",sourceDirName:"leetcode/binary_tree",slug:"/leetcode/binary_tree/flatten_binary_tree_to_ll",permalink:"/docs/leetcode/binary_tree/flatten_binary_tree_to_ll",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/binary_tree/114__flatten_binary_tree_to_ll.md",tags:[],version:"current",sidebarPosition:114,frontMatter:{title:"114. Flatten Binary Tree to Linked List",sidebar_label:"114. Flatten Binary Tree to Linked List"},sidebar:"tutorialSidebar",previous:{title:"106. Construct Binary Tree from Inorder and Postorder Traversal",permalink:"/docs/leetcode/binary_tree/construct_bin_tree_from_inorder_postorder_traversal"},next:{title:"116. Populating Next Right Pointers in Each Node",permalink:"/docs/leetcode/binary_tree/link_next_right_in_binary_tree_nodes"}},s=[{value:"Python",id:"python",children:[]}],f={toc:s};function p(e){var t=e.components,r=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,n.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def flatten(self, root: Optional[TreeNode]) -> None:\n        if root is None:\n            return None\n\n        # 1. Flattern both sub-trees\n        self.flatten(root.left)\n        self.flatten(root.right)\n\n        # 2. Left subtree as right tree\n        origin_left = root.left\n        origin_right = root.right\n\n        root.left = None\n        root.right = origin_left\n\n        # 3. Attach origin right tree to the eof right tree\n        cur = root\n        while cur.right:\n            cur = cur.right\n        cur.right = origin_right\n")))}p.isMDXComponent=!0}}]);