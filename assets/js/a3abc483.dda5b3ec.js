"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[26797],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>b});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var m=r.createContext({}),u=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(m.Provider,{value:t},e.children)},s="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,m=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),s=u(n),d=i,b=s["".concat(m,".").concat(d)]||s[d]||p[d]||o;return n?r.createElement(b,a(a({ref:t},l),{},{components:n})):r.createElement(b,a({ref:t},l))}));function b(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=d;var c={};for(var m in t)hasOwnProperty.call(t,m)&&(c[m]=t[m]);c.originalType=e,c[s]="string"==typeof e?e:i,a[1]=c;for(var u=2;u<o;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},98784:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var r=n(87462),i=(n(67294),n(3905));const o={title:"1689. Partitioning Into Minimum Number Of Deci-Binary Numbers",sidebar_label:"1689. Partitioning Into Minimum Number Of Deci-Binary Numbers",tags:["Leetcode Medium"]},a=void 0,c={unversionedId:"leetcode/1501-2000/partitioning_into_min_num_of_deci_binary_nums",id:"leetcode/1501-2000/partitioning_into_min_num_of_deci_binary_nums",title:"1689. Partitioning Into Minimum Number Of Deci-Binary Numbers",description:"https://leetcode.com/problems/partitioning-into-minimum-number-of-deci-binary-numbers/",source:"@site/docs/leetcode/1501-2000/1689_partitioning_into_min_num_of_deci_binary_nums.md",sourceDirName:"leetcode/1501-2000",slug:"/leetcode/1501-2000/partitioning_into_min_num_of_deci_binary_nums",permalink:"/docs/leetcode/1501-2000/partitioning_into_min_num_of_deci_binary_nums",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1501-2000/1689_partitioning_into_min_num_of_deci_binary_nums.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"}],version:"current",sidebarPosition:1689,frontMatter:{title:"1689. Partitioning Into Minimum Number Of Deci-Binary Numbers",sidebar_label:"1689. Partitioning Into Minimum Number Of Deci-Binary Numbers",tags:["Leetcode Medium"]},sidebar:"docSidebar",previous:{title:"1683. Invalid Tweets",permalink:"/docs/leetcode/1501-2000/invalid_tweets"},next:{title:"1695. Maximum Erasure Value",permalink:"/docs/leetcode/1501-2000/max_erasure_value"}},m={},u=[{value:"Python",id:"python",level:2}],l={toc:u},s="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(s,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/partitioning-into-minimum-number-of-deci-binary-numbers/"},"https://leetcode.com/problems/partitioning-into-minimum-number-of-deci-binary-numbers/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def minPartitions(self, n: str) -> int:\n        return int(max(n))\n")))}p.isMDXComponent=!0}}]);