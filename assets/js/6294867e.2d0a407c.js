"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[17206],{65993:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"leetcode/1501-2000/max_num_of_achievable_trans_request","title":"1601. Maximum Number of Achievable Transfer Requests","description":"https://leetcode.com/problems/maximum-number-of-achievable-transfer-requests/","source":"@site/docs/leetcode/1501-2000/1601_max_num_of_achievable_trans_request.md","sourceDirName":"leetcode/1501-2000","slug":"/leetcode/1501-2000/max_num_of_achievable_trans_request","permalink":"/docs/leetcode/1501-2000/max_num_of_achievable_trans_request","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Hard","permalink":"/docs/tags/leetcode-hard"},{"inline":true,"label":"DP","permalink":"/docs/tags/dp"},{"inline":true,"label":"Graph","permalink":"/docs/tags/graph"},{"inline":true,"label":"Combinations","permalink":"/docs/tags/combinations"}],"version":"current","sidebarPosition":1601,"frontMatter":{"title":"1601. Maximum Number of Achievable Transfer Requests","sidebar_label":"1601. Maximum Number of Achievable Transfer Requests","tags":["Leetcode Hard","DP","Graph","Combinations"]},"sidebar":"docSidebar","previous":{"title":"1557. Minimum Number of Vertices to Reach All Nodes","permalink":"/docs/leetcode/1501-2000/min_cost_connect_all_points"},"next":{"title":"1612. Check If Two Expression Trees are Equivalent","permalink":"/docs/leetcode/1501-2000/check_experssion_trees_equal"}}');var r=t(74848),o=t(28453);const a={title:"1601. Maximum Number of Achievable Transfer Requests",sidebar_label:"1601. Maximum Number of Achievable Transfer Requests",tags:["Leetcode Hard","DP","Graph","Combinations"]},i=void 0,c={},l=[{value:"Python",id:"python",level:2}];function m(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/maximum-number-of-achievable-transfer-requests/",children:"https://leetcode.com/problems/maximum-number-of-achievable-transfer-requests/"})}),"\n",(0,r.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from itertools import combinations\n\n\nclass Solution:\n    def maximumRequests(self, n: int, requests: List[List[int]]) -> int:\n        unchanged = sum([1 for req in requests if req[0] == req[1]])\n        reqs = [req for req in requests if req[0] != req[1]]\n\n        ans = 0\n        for i in range(len(reqs)+1):\n            for combs in list(combinations(reqs, i)):\n                if not combs:\n                    continue\n\n                movement = [0] * n\n                for egress, ingress in combs:\n                    movement[egress] += 1\n                    movement[ingress] -= 1\n\n                if set(movement) == {0}:\n                    ans = max(ans, len(combs))\n\n        return ans + unchanged\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var s=t(96540);const r={},o=s.createContext(r);function a(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);