"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[72406],{62635:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>d,metadata:()=>i,toc:()=>c});var o=n(74848),r=n(28453);const d={title:"623. Add One Row to Tree",sidebar_label:"623. Add One Row to Tree",tags:["Leetcode Medium","Binary Tree","DFS"]},l=void 0,i={id:"leetcode/501-1000/add_one_row_to_tree",title:"623. Add One Row to Tree",description:"https://leetcode.com/problems/add-one-row-to-tree/",source:"@site/docs/leetcode/501-1000/623_add_one_row_to_tree.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/add_one_row_to_tree",permalink:"/docs/leetcode/501-1000/add_one_row_to_tree",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"},{label:"DFS",permalink:"/docs/tags/dfs"}],version:"current",sidebarPosition:623,frontMatter:{title:"623. Add One Row to Tree",sidebar_label:"623. Add One Row to Tree",tags:["Leetcode Medium","Binary Tree","DFS"]},sidebar:"docSidebar",previous:{title:"622. Design Circular Queue",permalink:"/docs/leetcode/501-1000/design_circular_queue"},next:{title:"630. Course Schedule III",permalink:"/docs/leetcode/501-1000/course_schedule_iii"}},s={},c=[{value:"Python",id:"python",level:2}];function a(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{href:"https://leetcode.com/problems/add-one-row-to-tree/",children:"https://leetcode.com/problems/add-one-row-to-tree/"})}),"\n",(0,o.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Edge case\u5f88\u591a\uff0c\u8981\u591a\u601d\u8003\u4e00\u4e0b","\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"depth == 1"}),"\n",(0,o.jsx)(t.li,{children:"depth == max_tree_depth"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"class Solution:\n    def addOneRow(self, root: Optional[TreeNode], val: int, depth: int) -> Optional[TreeNode]:\n        if depth == 1:\n            return TreeNode(val=val, left=root)\n\n        def dfs(node, level, direction):\n            if not node:\n                return None if level != depth else TreeNode(val=val)\n\n            if level != depth:\n                node.left = dfs(node.left, level+1, 'L')\n                node.right = dfs(node.right, level+1, 'R')\n                return node\n\n            return TreeNode(\n                val=val,\n                left=dfs(node, level+2, 'L') if direction == 'L' else None,\n                right=dfs(node, level+2, 'R') if direction == 'R' else None\n            )\n\n        root.left = dfs(root.left, 2, 'L')\n        root.right = dfs(root.right, 2, 'R')\n        return root\n"})})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>i});var o=n(96540);const r={},d=o.createContext(r);function l(e){const t=o.useContext(d);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),o.createElement(d.Provider,{value:t},e.children)}}}]);