"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[69132],{3905:function(e,n,r){r.d(n,{Zo:function(){return u},kt:function(){return p}});var t=r(67294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var d=t.createContext({}),c=function(e){var n=t.useContext(d),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},u=function(e){var n=c(e.components);return t.createElement(d.Provider,{value:n},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},f=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,i=e.originalType,d=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),s=c(r),f=o,p=s["".concat(d,".").concat(f)]||s[f]||m[f]||i;return r?t.createElement(p,a(a({ref:n},u),{},{components:r})):t.createElement(p,a({ref:n},u))}));function p(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=f;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l[s]="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=r[c];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}f.displayName="MDXCreateElement"},51718:function(e,n,r){r.r(n),r.d(n,{assets:function(){return d},contentTitle:function(){return a},default:function(){return s},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return c}});var t=r(83117),o=(r(67294),r(3905));const i={title:"130 Surrounded Regions",sidebar_label:"130. Surrounded Regions",tags:["Leetcode Medium","TODO"]},a=void 0,l={unversionedId:"leetcode/1-500/surrounded_regions",id:"leetcode/1-500/surrounded_regions",title:"130 Surrounded Regions",description:"https://leetcode.com/problems/surrounded-regions",source:"@site/docs/leetcode/1-500/130_surrounded_regions.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/surrounded_regions",permalink:"/docs/leetcode/1-500/surrounded_regions",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/130_surrounded_regions.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"TODO",permalink:"/docs/tags/todo"}],version:"current",sidebarPosition:130,frontMatter:{title:"130 Surrounded Regions",sidebar_label:"130. Surrounded Regions",tags:["Leetcode Medium","TODO"]},sidebar:"docSidebar",previous:{title:"128. Longest Consecutive Sequence",permalink:"/docs/leetcode/1-500/longest_consecutive_sequence"},next:{title:"136. Single Number",permalink:"/docs/leetcode/1-500/single_num"}},d={},c=[{value:"Python",id:"python",level:2},{value:"Fail Try",id:"fail-try",level:3},{value:"Second Try (Not Correct)",id:"second-try-not-correct",level:3}],u={toc:c};function s(e){let{components:n,...r}=e;return(0,o.kt)("wrapper",(0,t.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/surrounded-regions"},"https://leetcode.com/problems/surrounded-regions")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"fail-try"},"Fail Try"),(0,o.kt)("p",null,"Did not consider the turns of traversal..."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"}," Two cells are connected if they are adjacent cells connected horizontally or vertically.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def solve(self, board: List[List[str]]) -> None:\n    for m in range(1, len(board)-1):\n        for n in range(1, len(board[m])-1):\n            if board[m][n] == 'O':\n                left  = next((nx for nx in range(n-1, -1, -1)        if board[m][nx] == 'X'), None)\n                right = next((nx for nx in range(n+1, len(board[m])) if board[m][nx] == 'X'), None)\n                up    = next((mx for mx in range(m-1, -1, -1)        if board[mx][n] == 'X'), None)\n                down  = next((mx for mx in range(m+1, len(board))    if board[mx][n] == 'X'), None)\n\n\n                # print(f\"[{m}, {n}] {left} {right} {up} {down}\")\n                if left  is not None and  \\\n                   right is not None and \\\n                   up    is not None and \\\n                   down  is not None:\n                    board[m][n] = 'X'\n\n")),(0,o.kt)("h3",{id:"second-try-not-correct"},"Second Try (Not Correct)"),(0,o.kt)("p",null,"Start from edge and determine by DFS alg"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def solve(self, board: List[List[str]]) -> None:\n    for m in range(1, len(board)-1):\n        for n in range(1, len(board[m])-1):\n            if board[m][n] == 'O':\n                left  =  next((\n                    nx for nx in range(n-1, -1, -1)\n                    if board[m][nx] == 'X'),\n                    None\n                )\n                right = next((\n                    nx for nx in range(n+1, len(board[m]))\n                    if board[m][nx] == 'X'),\n                    None\n                 )\n                up = next((\n                    mx for mx in range(m-1, -1, -1)\n                    if board[mx][n] == 'X'),\n                    None\n                )\n                bottom = next((\n                    mx for mx in range(m+1, len(board))\n                    if board[mx][n] == 'X'),\n                    None\n                )\n\n                if left is not None and right is not None and up is not None and bottom is not None:\n                    board[m][n] = 'X'\n")))}s.isMDXComponent=!0}}]);