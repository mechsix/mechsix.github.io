"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[83410],{3905:(e,r,t)=>{t.d(r,{Zo:()=>u,kt:()=>m});var n=t(67294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),c=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},u=function(e){var r=c(e.components);return n.createElement(s.Provider,{value:r},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(t),f=o,m=p["".concat(s,".").concat(f)]||p[f]||d[f]||a;return t?n.createElement(m,l(l({ref:r},u),{},{components:t})):n.createElement(m,l({ref:r},u))}));function m(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=f;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i[p]="string"==typeof e?e:o,l[1]=i;for(var c=2;c<a;c++)l[c]=t[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},13979:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var n=t(87462),o=(t(67294),t(3905));const a={title:"2348. Number of Zero-Filled Subarrays",sidebar_label:"2348. Number of Zero-Filled Subarrays",tags:["Leetcode Medium"]},l=void 0,i={unversionedId:"leetcode/2000/num_of_zero_filled_subarrays",id:"leetcode/2000/num_of_zero_filled_subarrays",title:"2348. Number of Zero-Filled Subarrays",description:"https://leetcode.com/problems/number-of-zero-filled-subarrays",source:"@site/docs/leetcode/2000/2348_num_of_zero_filled_subarrays.md",sourceDirName:"leetcode/2000",slug:"/leetcode/2000/num_of_zero_filled_subarrays",permalink:"/docs/leetcode/2000/num_of_zero_filled_subarrays",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/2000/2348_num_of_zero_filled_subarrays.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"}],version:"current",sidebarPosition:2348,frontMatter:{title:"2348. Number of Zero-Filled Subarrays",sidebar_label:"2348. Number of Zero-Filled Subarrays",tags:["Leetcode Medium"]},sidebar:"docSidebar",previous:{title:"2300. Successful Pairs of Spells and Potions",permalink:"/docs/leetcode/2000/successful_pairs_of_spells_and_potions"},next:{title:"2405. Optimal Partition of String",permalink:"/docs/leetcode/2000/optimal_partition_of_string"}},s={},c=[{value:"Python",id:"python",level:2}],u={toc:c},p="wrapper";function d(e){let{components:r,...t}=e;return(0,o.kt)(p,(0,n.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/number-of-zero-filled-subarrays"},"https://leetcode.com/problems/number-of-zero-filled-subarrays")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def zeroFilledSubarray(self, nums: List[int]) -> int:\n        segments = []\n\n        count = 0\n        for i, num in enumerate(nums):\n            if num == 0:\n                count += 1\n                continue\n\n            if count:\n                segments.append(count)\n            count = 0\n\n        if count:\n            segments.append(count)\n\n        # Trapezoidal area\n        return sum([(n**2 + n)//2 for n in segments])\n")))}d.isMDXComponent=!0}}]);