"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[95458],{75947:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"leetcode/1-500/remove_duplicates_from_sorted_list_ii","title":"82. Remove Duplicates from Sorted List II","description":"https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/","source":"@site/docs/leetcode/1-500/82_remove_duplicates_from_sorted_list_ii.md","sourceDirName":"leetcode/1-500","slug":"/leetcode/1-500/remove_duplicates_from_sorted_list_ii","permalink":"/docs/leetcode/1-500/remove_duplicates_from_sorted_list_ii","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Medium","permalink":"/docs/tags/leetcode-medium"},{"inline":true,"label":"Linked List","permalink":"/docs/tags/linked-list"},{"inline":true,"label":"Go","permalink":"/docs/tags/go"}],"version":"current","sidebarPosition":82,"frontMatter":{"title":"82. Remove Duplicates from Sorted List II","sidebar_label":"82. Remove Duplicates from Sorted List II","tags":["Leetcode Medium","Linked List","Go"]},"sidebar":"docSidebar","previous":{"title":"80. Remove Duplicates from Sorted Array II","permalink":"/docs/leetcode/1-500/remove_duplicates_from_sorted_array_ii"},"next":{"title":"83. Remove Duplicates from Sorted List","permalink":"/docs/leetcode/1-500/remove_duplicates_from_sorted_linked_list"}}');var n=o(74848),i=o(28453);const s={title:"82. Remove Duplicates from Sorted List II",sidebar_label:"82. Remove Duplicates from Sorted List II",tags:["Leetcode Medium","Linked List","Go"]},l=void 0,c={},d=[{value:"Python",id:"python",level:2},{value:"Go",id:"go",level:2}];function a(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/",children:"https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/"})}),"\n",(0,n.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"class Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        dummy = ListNode(val=None, next=head)\n        pre, cur = dummy, head\n\n        while cur:\n            if cur.next and cur.val == cur.next.val:\n                # Move over all duplicates\n                while cur.next and cur.val == cur.next.val:\n                    cur = cur.next\n                pre.next = cur.next\n            else:\n                pre = pre.next\n\n            cur = cur.next\n\n        return dummy.next\n"})}),"\n",(0,n.jsx)(t.h2,{id:"go",children:"Go"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-go",children:"func deleteDuplicates(head *ListNode) *ListNode {\n    dummy := new(ListNode)\n    dummy.Next = head\n\n    pre, cur := dummy, head\n\n    for cur != nil {\n        if cur.Next != nil && cur.Val == cur.Next.Val {\n            for cur.Next != nil && cur.Val == cur.Next.Val {\n                cur = cur.Next\n            }\n            pre.Next = cur.Next\n        } else {\n            pre = pre.Next\n        }\n        cur = cur.Next\n    }\n\n    return dummy.Next\n}\n"})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},28453:(e,t,o)=>{o.d(t,{R:()=>s,x:()=>l});var r=o(96540);const n={},i=r.createContext(n);function s(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);