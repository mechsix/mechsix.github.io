"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[1276],{3905:function(e,r,t){t.d(r,{Zo:function(){return d},kt:function(){return f}});var n=t(67294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function l(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?l(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),u=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},d=function(e){var r=u(e.components);return n.createElement(s.Provider,{value:r},e.children)},c={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},p=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=u(t),f=o,v=p["".concat(s,".").concat(f)]||p[f]||c[f]||l;return t?n.createElement(v,a(a({ref:r},d),{},{components:t})):n.createElement(v,a({ref:r},d))}));function f(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var l=t.length,a=new Array(l);a[0]=p;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var u=2;u<l;u++)a[u]=t[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},51743:function(e,r,t){t.r(r),t.d(r,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return d},default:function(){return p}});var n=t(87462),o=t(63366),l=(t(67294),t(3905)),a=["components"],i={title:"Overview",sidebar_label:"Overview",sidebar_position:0},s=void 0,u={unversionedId:"leetcode/binary_tree/overview",id:"leetcode/binary_tree/overview",isDocsHomePage:!1,title:"Overview",description:"Binary Tree Traversal",source:"@site/docs/leetcode/binary_tree/overview.md",sourceDirName:"leetcode/binary_tree",slug:"/leetcode/binary_tree/overview",permalink:"/docs/leetcode/binary_tree/overview",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/binary_tree/overview.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{title:"Overview",sidebar_label:"Overview",sidebar_position:0},sidebar:"tutorialSidebar",previous:{title:"Data Operations",permalink:"/docs/javascript/operation"},next:{title:"105. Construct Binary Tree from Preorder and Inorder Traversal",permalink:"/docs/leetcode/binary_tree/binary_tree_preorder_inorder"}},d=[{value:"Binary Tree Traversal",id:"binary-tree-traversal",children:[{value:"Preorder",id:"preorder",children:[]},{value:"Inorder",id:"inorder",children:[]},{value:"Postorder",id:"postorder",children:[]},{value:"Level Order",id:"level-order",children:[]}]}],c={toc:d};function p(e){var r=e.components,t=(0,o.Z)(e,a);return(0,l.kt)("wrapper",(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"binary-tree-traversal"},"Binary Tree Traversal"),(0,l.kt)("p",null,"The example code node definitions"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n")),(0,l.kt)("h3",{id:"preorder"},"Preorder"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Quick Sort is the preorder traversal of a Binary Tree")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        return self.travel([], root)\n        \n    def travel(self, result: List[int], root: Optional[TreeNode]):\n        if not root:\n            return\n        \n        result.append(root.val)\n        self.travel(result, root.left)\n        self.travel(result, root.right)\n        return result\n")),(0,l.kt)("h3",{id:"inorder"},"Inorder"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        return self.travel([], root)\n    def travel(self, result, node):\n        if not node:\n            return\n        \n        self.travel(result, node.left)\n        result.append(node.val)\n        self.travel(result, node.right)\n        return result\n")),(0,l.kt)("h3",{id:"postorder"},"Postorder"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Merge Sort is the postorder traversasl of a Binary Tree")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        return self.travel([], root)\n    def travel(self, result, node):\n        if not node:\n            return\n        \n        self.travel(result, node.left)\n        self.travel(result, node.right)\n        result.append(node.val)\n        return result\n")),(0,l.kt)("h3",{id:"level-order"},"Level Order"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        return self._travel([], 0, root)\n\n    def _travel(self, result, level, node):\n        if not node:\n            return result\n        \n        if len(result) < level+1:\n            result.append([])\n        \n        result[level].append(node.val)\n        \n        result = self._travel(result, level+1, node.left)\n        result = self._travel(result, level+1, node.right)\n        return result\n")))}p.isMDXComponent=!0}}]);