"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[2156],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(r),m=i,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||o;return r?n.createElement(f,a(a({ref:t},u),{},{components:r})):n.createElement(f,a({ref:t},u))}));function m(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var s=2;s<o;s++)a[s]=r[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},19216:function(e,t,r){r.r(t),r.d(t,{contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var n=r(87462),i=r(63366),o=(r(67294),r(3905)),a=["components"],l={title:"56. Merge Intervals",sidebar_label:"56. Merge Intervals",tags:["Leetcode Medium","Interval"]},c=void 0,s={unversionedId:"leetcode/1-500/merge_intervals",id:"leetcode/1-500/merge_intervals",title:"56. Merge Intervals",description:"https://leetcode.com/problems/merge-intervals/",source:"@site/docs/leetcode/1-500/56_merge_intervals.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/merge_intervals",permalink:"/docs/leetcode/1-500/merge_intervals",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/56_merge_intervals.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Interval",permalink:"/docs/tags/interval"}],version:"current",sidebarPosition:56,frontMatter:{title:"56. Merge Intervals",sidebar_label:"56. Merge Intervals",tags:["Leetcode Medium","Interval"]},sidebar:"docSidebar",previous:{title:"54. Spiral Matrix",permalink:"/docs/leetcode/1-500/spiral_matrix"},next:{title:"57. Insert Interval",permalink:"/docs/leetcode/1-500/insert_interval"}},u=[{value:"Python",id:"python",children:[],level:2}],p={toc:u};function d(e){var t=e.components,r=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/merge-intervals/"},"https://leetcode.com/problems/merge-intervals/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def merge(self, intervals: List[List[int]]) -> List[List[int]]:\n        if len(intervals) < 2:\n            return intervals\n\n        intervals.sort(key=lambda pair: pair[0])\n\n        result = []\n        start, end = intervals[0]\n\n        for i in range(len(intervals)):\n            if intervals[i][0] <= end:\n                end = max(end, intervals[i][1])\n                continue\n            result.append([start, end])\n            start, end = intervals[i]\n\n        result.append([start, end])\n        return result\n")))}d.isMDXComponent=!0}}]);