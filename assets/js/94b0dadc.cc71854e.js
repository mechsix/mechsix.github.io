"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[54660],{82117:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>a});var t=o(74848),s=o(28453);const i={title:"1557. Minimum Number of Vertices to Reach All Nodes",sidebar_label:"1557. Minimum Number of Vertices to Reach All Nodes",tags:["Leetcode Medium","MST","Graph","Kruskal Algorithm"]},r=void 0,l={id:"leetcode/1501-2000/min_cost_connect_all_points",title:"1557. Minimum Number of Vertices to Reach All Nodes",description:"https://leetcode.com/problems/min-cost-to-connect-all-points/",source:"@site/docs/leetcode/1501-2000/1584_min_cost_connect_all_points.md",sourceDirName:"leetcode/1501-2000",slug:"/leetcode/1501-2000/min_cost_connect_all_points",permalink:"/docs/leetcode/1501-2000/min_cost_connect_all_points",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"MST",permalink:"/docs/tags/mst"},{label:"Graph",permalink:"/docs/tags/graph"},{label:"Kruskal Algorithm",permalink:"/docs/tags/kruskal-algorithm"}],version:"current",sidebarPosition:1584,frontMatter:{title:"1557. Minimum Number of Vertices to Reach All Nodes",sidebar_label:"1557. Minimum Number of Vertices to Reach All Nodes",tags:["Leetcode Medium","MST","Graph","Kruskal Algorithm"]},sidebar:"docSidebar",previous:{title:"1578. Minimum Time to Make Rope Colorful",permalink:"/docs/leetcode/1501-2000/min_time_to_make_rope_colorful"},next:{title:"1601. Maximum Number of Achievable Transfer Requests",permalink:"/docs/leetcode/1501-2000/max_num_of_achievable_trans_request"}},c={},a=[{value:"Python",id:"python",level:2},{value:"Kruskal&#39;s Algorithm",id:"kruskals-algorithm",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/min-cost-to-connect-all-points/",children:"https://leetcode.com/problems/min-cost-to-connect-all-points/"})}),"\n",(0,t.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,t.jsx)(n.h3,{id:"kruskals-algorithm",children:"Kruskal's Algorithm"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Time: O(N^2 * logN)"}),"\n",(0,t.jsx)(n.li,{children:"Space: O(N^2)"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class UnionFind:\n    def __init__(self, size: int) -> None:\n        self.group = [0] * size\n        self.rank = [0] * size\n\n        for i in range(size):\n            self.group[i] = i\n\n    def find(self, node: int) -> int:\n        if self.group[node] != node:\n            self.group[node] = self.find(self.group[node])\n        return self.group[node]\n\n    def join(self, node1: int, node2: int) -> bool:\n        group1 = self.find(node1)\n        group2 = self.find(node2)\n\n        # node1 and node2 already belong to same group.\n        if group1 == group2:\n            return False\n\n        if self.rank[group1] > self.rank[group2]:\n            self.group[group2] = group1\n        elif self.rank[group1] < self.rank[group2]:\n            self.group[group1] = group2\n        else:\n            self.group[group1] = group2\n            self.rank[group2] += 1\n\n        return True\n\nclass Solution:\n    def minCostConnectPoints(self, points: List[List[int]]) -> int:\n        n = len(points)\n\n        edges = []\n        for i in range(n):\n            for j in range(i+1, n):\n                weight = abs(points[i][0]-points[j][0]) + abs(points[i][1]-points[j][1])\n                edges.append((weight, i, j))\n\n        edges.sort(key=lambda edge: edge[0])\n\n        uf = UnionFind(n)\n        cost = 0\n        edges_used = 0\n\n        for weight, i, j in edges:\n            if uf.join(i, j):\n                cost += weight\n                edges_used += 1\n\n                if edges_used == n-1:\n                    break\n        return cost\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>l});var t=o(96540);const s={},i=t.createContext(s);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);