"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[25205],{70169:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"leetcode/1001-1500/last_stone_weight","title":"1046. Last Stone Weight","description":"https://leetcode.com/problems/last-stone-weight/","source":"@site/docs/leetcode/1001-1500/1046_last_stone_weight.md","sourceDirName":"leetcode/1001-1500","slug":"/leetcode/1001-1500/last_stone_weight","permalink":"/docs/leetcode/1001-1500/last_stone_weight","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Easy","permalink":"/docs/tags/leetcode-easy"},{"inline":true,"label":"Heap","permalink":"/docs/tags/heap"}],"version":"current","sidebarPosition":1046,"frontMatter":{"title":"1046. Last Stone Weight","sidebar_label":"1046. Last Stone Weight","tags":["Leetcode Easy","Heap"]},"sidebar":"docSidebar","previous":{"title":"1020. Number of Enclaves","permalink":"/docs/leetcode/1001-1500/number_of_enclaves"},"next":{"title":"1047. Remove All Adjacent Duplicates In String","permalink":"/docs/leetcode/1001-1500/remove_all_adjacent_duplicates_in_string"}}');var o=n(74848),a=n(28453);const i={title:"1046. Last Stone Weight",sidebar_label:"1046. Last Stone Weight",tags:["Leetcode Easy","Heap"]},l=void 0,r={},c=[{value:"Python",id:"python",level:2},{value:"Max Heap",id:"max-heap",level:3}];function p(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{href:"https://leetcode.com/problems/last-stone-weight/",children:"https://leetcode.com/problems/last-stone-weight/"})}),"\n",(0,o.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,o.jsx)(t.h3,{id:"max-heap",children:"Max Heap"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"import heapq\n\n\nclass Solution:\n    def lastStoneWeight(self, stones: List[int]) -> int:\n        if len(stones) < 2:\n            # Constraints indicate the len(stones) min to 1\n            return stones[0]\n\n        # Build the max heap\n        for i in range(len(stones)):\n            stones[i] = -stones[i]\n        \n        heapq.heapify(stones)\n        \n        \n        while len(stones) > 1:\n            largest_1 = heapq.heappop(stones)  # miniumn native is the largest\n            largest_2 = heapq.heappop(stones)\n\n            if largest_1 != largest_2:\n                heapq.heappush(stones, largest_1-largest_2)\n        \n        return -heapq.heappop(stones) if stones else 0\n"})})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>l});var s=n(96540);const o={},a=s.createContext(o);function i(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);