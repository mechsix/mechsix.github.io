"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[32291],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var a=r.createContext({}),l=function(e){var t=r.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(a.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=l(n),f=o,m=u["".concat(a,".").concat(f)]||u[f]||p[f]||i;return n?r.createElement(m,c(c({ref:t},d),{},{components:n})):r.createElement(m,c({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,c=new Array(i);c[0]=f;var s={};for(var a in t)hasOwnProperty.call(t,a)&&(s[a]=t[a]);s.originalType=e,s[u]="string"==typeof e?e:o,c[1]=s;for(var l=2;l<i;l++)c[l]=n[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},60641:function(e,t,n){n.r(t),n.d(t,{assets:function(){return a},contentTitle:function(){return c},default:function(){return u},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return l}});var r=n(83117),o=(n(67294),n(3905));const i={title:"91. Decode Ways",slidebar_label:"91. Decode Ways",tags:["Leetcode Medium","DP"]},c=void 0,s={unversionedId:"leetcode/1-500/decode_ways",id:"leetcode/1-500/decode_ways",title:"91. Decode Ways",description:"https://leetcode.com/problems/decode-ways/",source:"@site/docs/leetcode/1-500/91_decode_ways.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/decode_ways",permalink:"/docs/leetcode/1-500/decode_ways",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/91_decode_ways.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"DP",permalink:"/docs/tags/dp"}],version:"current",sidebarPosition:91,frontMatter:{title:"91. Decode Ways",slidebar_label:"91. Decode Ways",tags:["Leetcode Medium","DP"]},sidebar:"docSidebar",previous:{title:"90. Subsets II",permalink:"/docs/leetcode/1-500/subsets_ii"},next:{title:"92. Reverse Linked List II",permalink:"/docs/leetcode/1-500/reverse_linked_list_ii"}},a={},l=[{value:"Python",id:"python",level:2},{value:"Bottom Up DP",id:"bottom-up-dp",level:3}],d={toc:l};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/decode-ways/"},"https://leetcode.com/problems/decode-ways/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"bottom-up-dp"},"Bottom Up DP"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from functools import cache\n\n\nclass Solution:\n    def numDecodings(self, s: str) -> int:\n        options = set([str(n) for n in range(1, 27)])\n\n        @cache\n        def dp(i: int):\n            if i >= len(s):\n                return 0\n            if i == len(s)-1 and s[i:] in options:\n                return 1\n\n            count = 0\n            if i == len(s)-2 and s[i:] in options:\n                count += 1\n\n            if s[i:i+2] in options:\n                count += dp(i+2)\n            if s[i:i+1] in options:\n                count += dp(i+1)\n\n            return count\n\n        return dp(0)\n")))}u.isMDXComponent=!0}}]);