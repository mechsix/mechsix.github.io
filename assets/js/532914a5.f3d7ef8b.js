"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[63041],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return f}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=u(n),d=o,f=p["".concat(l,".").concat(d)]||p[d]||m[d]||i;return n?r.createElement(f,a(a({ref:t},s),{},{components:n})):r.createElement(f,a({ref:t},s))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[p]="string"==typeof e?e:o,a[1]=c;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},40163:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return a},default:function(){return p},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return u}});var r=n(83117),o=(n(67294),n(3905));const i={title:"191. Number of 1 Bits",sidebar_label:"191. Number of 1 Bits",tags:["Leetcode Medium","Bit Manipulation"]},a=void 0,c={unversionedId:"leetcode/1-500/number_of_1_bits",id:"leetcode/1-500/number_of_1_bits",title:"191. Number of 1 Bits",description:"https://leetcode.com/problems/number-of-1-bits/",source:"@site/docs/leetcode/1-500/191_number_of_1_bits.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/number_of_1_bits",permalink:"/docs/leetcode/1-500/number_of_1_bits",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/191_number_of_1_bits.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Bit Manipulation",permalink:"/docs/tags/bit-manipulation"}],version:"current",sidebarPosition:191,frontMatter:{title:"191. Number of 1 Bits",sidebar_label:"191. Number of 1 Bits",tags:["Leetcode Medium","Bit Manipulation"]},sidebar:"docSidebar",previous:{title:"190. Reverse Bits",permalink:"/docs/leetcode/1-500/reverse_bits"},next:{title:"196. Delete Duplicate Emails",permalink:"/docs/leetcode/1-500/delete_duplicate_emails"}},l={},u=[{value:"Python",id:"python",level:2},{value:"Convert the type and count",id:"convert-the-type-and-count",level:3},{value:"Hamming Weight",id:"hamming-weight",level:3},{value:"Javascript",id:"javascript",level:2}],s={toc:u};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/number-of-1-bits/"},"https://leetcode.com/problems/number-of-1-bits/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"convert-the-type-and-count"},"Convert the type and count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def hammingWeight(self, n: int) -> int:\n        bins = str(bin(n))[2:]\n        return sum([int(char) for char in bins])\n")),(0,o.kt)("h3",{id:"hamming-weight"},"Hamming Weight"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def hammingWeight(self, n: int) -> int:\n        total = 0\n        while n:\n            total += 1\n            n &= (n-1)\n        return total\n")),(0,o.kt)("h2",{id:"javascript"},"Javascript"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"var hammingWeight = function(n) {\n  let count = 0;\n  while (n > 0) {\n    count += (n & 1);\n    n >>>= 1;\n  }\n  return count;\n};\n")))}p.isMDXComponent=!0}}]);