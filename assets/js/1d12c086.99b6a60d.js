"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[36150],{22952:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>d,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"leetcode/501-1000/feat1038_convert_bst_greater_tree","title":"538. Convert BST to Greater Tree","description":"https://leetcode.com/problems/convert-bst-to-greater-tree/","source":"@site/docs/leetcode/501-1000/538_feat1038_convert_bst_greater_tree.md","sourceDirName":"leetcode/501-1000","slug":"/leetcode/501-1000/feat1038_convert_bst_greater_tree","permalink":"/docs/leetcode/501-1000/feat1038_convert_bst_greater_tree","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Medium","permalink":"/docs/tags/leetcode-medium"},{"inline":true,"label":"BST","permalink":"/docs/tags/bst"}],"version":"current","sidebarPosition":538,"frontMatter":{"title":"538. Convert BST to Greater Tree","sidebar_label":"538. Convert BST to Greater Tree","tags":["Leetcode Medium","BST"]},"sidebar":"docSidebar","previous":{"title":"535. Encode and Decode TinyURL","permalink":"/docs/leetcode/501-1000/encode_decode_tinyurl"},"next":{"title":"540. Single Element in a Sorted Array","permalink":"/docs/leetcode/501-1000/single_elm_in_sotrted_array"}}');var o=n(74848),l=n(28453);const s={title:"538. Convert BST to Greater Tree",sidebar_label:"538. Convert BST to Greater Tree",tags:["Leetcode Medium","BST"]},d=void 0,i={},c=[{value:"Python",id:"python",level:2},{value:"Inorder BST (First run)",id:"inorder-bst-first-run",level:3},{value:"Inorder BST (second run)",id:"inorder-bst-second-run",level:3}];function a(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{href:"https://leetcode.com/problems/convert-bst-to-greater-tree/",children:"https://leetcode.com/problems/convert-bst-to-greater-tree/"})}),"\n",(0,o.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,o.jsx)(t.h3,{id:"inorder-bst-first-run",children:"Inorder BST (First run)"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"BST inorder is in increasing order"}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"class Solution:\n    def __init__(self):\n        self.total = 0\n\n    def convertBST(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\n        if not root:\n            return\n        self.total = 0\n        self._travel(root)\n\n        return root\n\n    def _travel(self, node):\n        if not node:\n            return\n\n        self._travel(node.right)\n\n        self.total += node.val\n        node.val = self.total\n\n        self._travel(node.left)\n"})}),"\n",(0,o.jsx)(t.h3,{id:"inorder-bst-second-run",children:"Inorder BST (second run)"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Use the Python ",(0,o.jsx)(t.code,{children:"nonlocal"})," keyword"]}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"class Solution:\n    def convertBST(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\n        total = 0\n\n        def covert(node):\n            nonlocal total\n\n            if not node:\n                return\n\n            covert(node.right)\n\n            total += node.val\n            node.val = total\n\n            covert(node.left)\n\n        covert(root)\n        return root\n"})})]})}function u(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>d});var r=n(96540);const o={},l=r.createContext(o);function s(e){const t=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(l.Provider,{value:t},e.children)}}}]);