"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[41050],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return m}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),d=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=d(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),p=d(t),m=o,f=p["".concat(c,".").concat(m)]||p[m]||u[m]||i;return t?r.createElement(f,l(l({ref:n},s),{},{components:t})):r.createElement(f,l({ref:n},s))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,l=new Array(i);l[0]=p;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a.mdxType="string"==typeof e?e:o,l[1]=a;for(var d=2;d<i;d++)l[d]=t[d];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},41137:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return a},metadata:function(){return d},toc:function(){return s}});var r=t(87462),o=t(63366),i=(t(67294),t(3905)),l=["components"],a={title:"1290. Convert Binary Number in a Linked List to Integer",sidebar_label:"1290. Binary Num Linked List to Integer",tags:["Leetcode Easy"]},c=void 0,d={unversionedId:"leetcode/1001-1500/bin_linked_list_to_decimal",id:"leetcode/1001-1500/bin_linked_list_to_decimal",title:"1290. Convert Binary Number in a Linked List to Integer",description:"Python",source:"@site/docs/leetcode/1001-1500/1290_bin_linked_list_to_decimal.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/bin_linked_list_to_decimal",permalink:"/docs/leetcode/1001-1500/bin_linked_list_to_decimal",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1290_bin_linked_list_to_decimal.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"}],version:"current",sidebarPosition:1290,frontMatter:{title:"1290. Convert Binary Number in a Linked List to Integer",sidebar_label:"1290. Binary Num Linked List to Integer",tags:["Leetcode Easy"]},sidebar:"docSidebar",previous:{title:"1288. Remove Covered Intervals",permalink:"/docs/leetcode/1001-1500/remove_covered_intervals"},next:{title:"1291. Sequential Digits",permalink:"/docs/leetcode/1001-1500/sequential_digits"}},s=[{value:"Python",id:"python",children:[],level:2}],u={toc:s};function p(e){var n=e.components,t=(0,o.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("p",null,"First try, O(2N)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def getDecimalValue(self, head: ListNode) -> int:\n        length = 0\n        node = head\n        while node:\n            length += 1\n            node = node.next\n\n        result = 0\n        exp = length - 1\n\n        node = head\n        while node:\n            result += node.val * (2 ** exp)\n            exp = exp - 1\n            node = node.next\n        return result\n")),(0,i.kt)("p",null,"Second try, optimize version, O(N + logN)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def getDecimalValue(self, head: ListNode) -> int:\n        length = 0\n        node = head\n        while node:\n            length += 1\n            node = node.next\n\n        result = 0\n        exp = 2 ** (length - 1)\n\n        node = head\n        while node:\n            if node.val:\n                result += node.val * exp\n            exp = exp // 2\n            node = node.next\n        return result\n")))}p.isMDXComponent=!0}}]);