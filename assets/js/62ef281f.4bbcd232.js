"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[753],{95420:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var i=n(74848),s=n(28453);const r={title:"763. Partition Labels",sidebar_label:"763. Partition Labels",tags:["Leetcode Medium","Greedy"]},a=void 0,o={id:"leetcode/501-1000/partition_labels",title:"763. Partition Labels",description:"https://leetcode.com/problems/partition-labels/",source:"@site/docs/leetcode/501-1000/763_partition_labels.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/partition_labels",permalink:"/docs/leetcode/501-1000/partition_labels",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Greedy",permalink:"/docs/tags/greedy"}],version:"current",sidebarPosition:763,frontMatter:{title:"763. Partition Labels",sidebar_label:"763. Partition Labels",tags:["Leetcode Medium","Greedy"]},sidebar:"docSidebar",previous:{title:"746. Min Cost Climbing Stairs",permalink:"/docs/leetcode/501-1000/min_cost_climbing_stairs"},next:{title:"766. Toeplitz Matrix",permalink:"/docs/leetcode/501-1000/toeplitz_matrix"}},l={},d=[{value:"Python",id:"python",level:2},{value:"Greedy",id:"greedy",level:3}];function c(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://leetcode.com/problems/partition-labels/",children:"https://leetcode.com/problems/partition-labels/"})}),"\n",(0,i.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,i.jsx)(t.h3,{id:"greedy",children:"Greedy"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Time: O(N)"}),"\n",(0,i.jsx)(t.li,{children:"Space: O(N)"}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"class Solution:\n    def partitionLabels(self, s: str) -> List[int]:\n        last_seem = {char: index for index, char in enumerate(s)}\n\n        start, end = 0, 0\n\n        ans = []\n        for index, char in enumerate(s):\n            end = max(end, last_seem[char])\n            if index == end:\n                ans.append(end+1 - start)\n                start = index + 1\n\n        return ans\n"})}),"\n",(0,i.jsx)(t.p,{children:"Or, you'd like to see what those partitions are"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"class Solution:\n    def partitionLabels(self, s: str) -> List[int]:\n        last_seem = {char: index for index, char in enumerate(s)}\n\n        start, end = 0, 0\n        partitions = []\n        for index, char in enumerate(s):\n            end = max(end, last_seem[char])\n            if index == end:\n                partitions.append(s[start:end+1])\n                start = index + 1\n\n        return [len(part) for part in partitions]\n"})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var i=n(96540);const s={},r=i.createContext(s);function a(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);