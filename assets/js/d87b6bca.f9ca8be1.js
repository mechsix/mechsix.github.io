"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[65281],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return f}});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=s(r),f=a,g=d["".concat(c,".").concat(f)]||d[f]||p[f]||l;return r?n.createElement(g,o(o({ref:t},u),{},{components:r})):n.createElement(g,o({ref:t},u))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,o=new Array(l);o[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var s=2;s<l;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},91567:function(e,t,r){r.r(t),r.d(t,{contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return u}});var n=r(87462),a=r(63366),l=(r(67294),r(3905)),o=["components"],i={title:"118. Pascal's Triangle",sidebar_label:"118. Pascal's Triangle",tags:["Leetcode Easy"]},c=void 0,s={unversionedId:"leetcode/1-500/pascal_triangle",id:"leetcode/1-500/pascal_triangle",title:"118. Pascal's Triangle",description:"https://leetcode.com/problems/pascals-triangle",source:"@site/docs/leetcode/1-500/118_pascal_triangle.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/pascal_triangle",permalink:"/docs/leetcode/1-500/pascal_triangle",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/118_pascal_triangle.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"}],version:"current",sidebarPosition:118,frontMatter:{title:"118. Pascal's Triangle",sidebar_label:"118. Pascal's Triangle",tags:["Leetcode Easy"]},sidebar:"docSidebar",previous:{title:"117. Populating Next Right Pointers in Each Node II",permalink:"/docs/leetcode/1-500/link_next_right_in_binary_tree_nodes_ii"},next:{title:"119. Pascal's Triangle II",permalink:"/docs/leetcode/1-500/pascal_triangle_II"}},u=[{value:"Python",id:"python",children:[{value:"Recursive",id:"recursive",children:[],level:3}],level:2}],p={toc:u};function d(e){var t=e.components,r=(0,a.Z)(e,o);return(0,l.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/pascals-triangle"},"https://leetcode.com/problems/pascals-triangle")),(0,l.kt)("h2",{id:"python"},"Python"),(0,l.kt)("h3",{id:"recursive"},"Recursive"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1, 1]]\n\n        return self._generate(3, numRows, [[1], [1, 1]])\n\n    def _generate(self, level, targetLevel, result):\n        if level > targetLevel:\n            return result\n\n        pre_level = result[-1]\n        current = [1]\n        for i in range(1, len(pre_level)):\n            pre = pre_level[i-1]\n            cur = pre_level[i]\n            current.append(pre+cur)\n        current.append(1)\n        result.append(current)\n\n        return self._generate(level+1, targetLevel, result)\n")))}d.isMDXComponent=!0}}]);