"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[69134],{99790:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>d,toc:()=>r});var i=t(74848),s=t(28453);const a={title:"875. Koko Eating Bananas",sidebar_label:"875. Koko Eating Bananas",tags:["Binary Search","Leetcode Medium"]},o=void 0,d={id:"leetcode/501-1000/koko_eating_bananas",title:"875. Koko Eating Bananas",description:"Python",source:"@site/docs/leetcode/501-1000/875_koko_eating_bananas.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/koko_eating_bananas",permalink:"/docs/leetcode/501-1000/koko_eating_bananas",draft:!1,unlisted:!1,tags:[{label:"Binary Search",permalink:"/docs/tags/binary-search"},{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"}],version:"current",sidebarPosition:875,frontMatter:{title:"875. Koko Eating Bananas",sidebar_label:"875. Koko Eating Bananas",tags:["Binary Search","Leetcode Medium"]},sidebar:"docSidebar",previous:{title:"872. Leaf-Similar Trees",permalink:"/docs/leetcode/501-1000/leaf_similar_trees"},next:{title:"876. Middle of the Linked List",permalink:"/docs/leetcode/501-1000/middle_of_linked_list"}},l={},r=[{value:"Python",id:"python",level:2}];function c(e){const n={code:"code",h2:"h2",li:"li",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Min speed between 1~max(slices)"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def minEatingSpeed(self, piles: List[int], h: int) -> int:\n        min_speed, max_speed = 1, max(piles)\n\n        while min_speed <= max_speed:\n            speed = min_speed + (max_speed - min_speed) // 2\n            time = self._eating_speed(piles, speed)\n\n            if time <= h:\n                # Too fast\n                max_speed = speed - 1\n            else:\n                # Too slow\n                min_speed = speed + 1\n        return min_speed\n\n    @staticmethod\n    def _eating_speed(piles, speed):\n        time = 0\n        for pile in piles:\n            time += math.ceil(pile / speed)\n        return time\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>d});var i=t(96540);const s={},a=i.createContext(s);function o(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);