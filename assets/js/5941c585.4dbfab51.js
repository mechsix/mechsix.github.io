"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[63555],{3905:function(e,t,o){o.d(t,{Zo:function(){return u},kt:function(){return p}});var n=o(67294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function l(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function c(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var s=n.createContext({}),i=function(e){var t=n.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):l(l({},t),e)),o},u=function(e){var t=i(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=i(o),m=r,p=d["".concat(s,".").concat(m)]||d[m]||f[m]||a;return o?n.createElement(p,l(l({ref:t},u),{},{components:o})):n.createElement(p,l({ref:t},u))}));function p(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=o.length,l=new Array(a);l[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[d]="string"==typeof e?e:r,l[1]=c;for(var i=2;i<a;i++)l[i]=o[i];return n.createElement.apply(null,l)}return n.createElement.apply(null,o)}m.displayName="MDXCreateElement"},28093:function(e,t,o){o.r(t),o.d(t,{assets:function(){return s},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return a},metadata:function(){return c},toc:function(){return i}});var n=o(83117),r=(o(67294),o(3905));const a={title:"235. Lowest Common Ancestor of a Binary Search Tree",sidebar_label:"235. Lowest Common Ancestor of a Binary Search Tree",tags:["Leetcode Easy","BST"]},l=void 0,c={unversionedId:"leetcode/1-500/lowest_common_ancestor_of_bst",id:"leetcode/1-500/lowest_common_ancestor_of_bst",title:"235. Lowest Common Ancestor of a Binary Search Tree",description:"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/",source:"@site/docs/leetcode/1-500/235_lowest_common_ancestor_of_bst.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/lowest_common_ancestor_of_bst",permalink:"/docs/leetcode/1-500/lowest_common_ancestor_of_bst",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/235_lowest_common_ancestor_of_bst.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"BST",permalink:"/docs/tags/bst"}],version:"current",sidebarPosition:235,frontMatter:{title:"235. Lowest Common Ancestor of a Binary Search Tree",sidebar_label:"235. Lowest Common Ancestor of a Binary Search Tree",tags:["Leetcode Easy","BST"]},sidebar:"docSidebar",previous:{title:"234. Palindrome Linked List",permalink:"/docs/leetcode/1-500/palindrome_linked_list"},next:{title:"326. Power of Three",permalink:"/docs/leetcode/1-500/power_of_three"}},s={},i=[{value:"Python",id:"python",level:2},{value:"First Solution",id:"first-solution",level:3},{value:"Second Solution",id:"second-solution",level:3}],u={toc:i};function d(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/"},"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/")),(0,r.kt)("h2",{id:"python"},"Python"),(0,r.kt)("h3",{id:"first-solution"},"First Solution"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        if not root:\n            # Leaf, but target not found\n            return None\n\n        if root.val == p.val or root.val == q.val:\n            # Hit the target, current root is p or q\n            return root\n\n        if p.val > root.val and q.val > root.val:\n            # Find targets from the right tree\n            return self.lowestCommonAncestor(root.right, p, q)\n        elif p.val < root.val and q.val < root.val:\n            # Find targets from the left tree\n            return self.lowestCommonAncestor(root.left, p, q)\n\n        # Both left and right are reaching the targets, current node is the answer\n        return root\n")),(0,r.kt)("h3",{id:"second-solution"},"Second Solution"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        targets = (p.val, q.val)\n        \n        def find(node):\n            if not node:\n                return\n            \n            if node.val in targets:\n                return node\n            \n            if all(node.val > t for t in targets):\n                return find(node.left)\n\n            if all(node.val < t for t in targets):\n                return find(node.right)\n            \n            return node\n            \n            \n        return find(root)\n")))}d.isMDXComponent=!0}}]);