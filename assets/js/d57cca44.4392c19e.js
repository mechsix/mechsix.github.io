"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[62268],{97661:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>s});var a=n(74848),o=n(28453);const r={title:"223. Rectangle Area",sidebar_label:"223. Rectangle Area",tags:["Leetcode Medium","Go"]},l=void 0,i={id:"leetcode/1-500/rectangle_area",title:"223. Rectangle Area",description:"https://leetcode.com/problems/rectangle-area/",source:"@site/docs/leetcode/1-500/223_rectangle_area.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/rectangle_area",permalink:"/docs/leetcode/1-500/rectangle_area",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Go",permalink:"/docs/tags/go"}],version:"current",sidebarPosition:223,frontMatter:{title:"223. Rectangle Area",sidebar_label:"223. Rectangle Area",tags:["Leetcode Medium","Go"]},sidebar:"docSidebar",previous:{title:"222. Count Complete Tree Nodes",permalink:"/docs/leetcode/1-500/count_complete_bin_tree"},next:{title:"225. Implement Stack using Queues",permalink:"/docs/leetcode/1-500/implement_stack_with_queue"}},c={},s=[{value:"Python",id:"python",level:2},{value:"Go",id:"go",level:2}];function x(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://leetcode.com/problems/rectangle-area/",children:"https://leetcode.com/problems/rectangle-area/"})}),"\n",(0,a.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"class Solution:\n    def computeArea(self, ax1: int, ay1: int, ax2: int, ay2: int, bx1: int, by1: int, bx2: int, by2: int) -> int:\n\n        overlap_x = min(ax2, bx2) - max(ax1, bx1)\n        overlap_y = min(ay2, by2) - max(ay1, by1)\n\n        overlap = 0\n        if overlap_x > 0 and overlap_y > 0:\n            overlap = overlap_x * overlap_y\n\n        return (ax2-ax1)*(ay2-ay1) + (bx2-bx1)*(by2-by1) - overlap\n"})}),"\n",(0,a.jsx)(t.h2,{id:"go",children:"Go"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-go",children:"func computeArea(ax1 int, ay1 int, ax2 int, ay2 int, bx1 int, by1 int, bx2 int, by2 int) int {\n    var xLeft, xRight, xTop, xBottom int\n\n    if (ax2 > bx2) { xRight = bx2 } else { xRight = ax2 }\n    if (ax1 > bx1) { xLeft = ax1 } else { xLeft = bx1 }\n    if (ay2 > by2) { xBottom = by2 } else { xBottom = ay2 }\n    if (ay1 > by1) { xTop = ay1 } else { xTop = by1 }\n\n    overlapX, overlapY := xRight-xLeft, xBottom-xTop\n\n    overlap := 0\n    if overlapX > 0 && overlapY > 0 {\n        overlap = overlapX * overlapY\n    }\n\n    areaA := (ax2-ax1) * (ay2-ay1)\n    areaB := (bx2-bx1) * (by2-by1)\n\n    return areaA + areaB - overlap\n}\n"})})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(x,{...e})}):x(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>i});var a=n(96540);const o={},r=a.createContext(o);function l(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);