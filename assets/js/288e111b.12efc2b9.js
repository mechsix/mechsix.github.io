"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[7032],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=o,h=d["".concat(c,".").concat(m)]||d[m]||l[m]||i;return n?r.createElement(h,a(a({ref:t},p),{},{components:n})):r.createElement(h,a({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},45692:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return p}});var r=n(87462),o=n(63366),i=(n(67294),n(3905)),a=["components"],s={title:"659. Split Array into Consecutive Subsequences",sidebar_label:"659. Split Array into Consecutive Subsequences",tags:["Leetcode Medium","Heap"]},c=void 0,u={unversionedId:"leetcode/501-1000/split_array_into_consecutive_subsequences",id:"leetcode/501-1000/split_array_into_consecutive_subsequences",title:"659. Split Array into Consecutive Subsequences",description:"https://leetcode.com/problems/split-array-into-consecutive-subsequences/",source:"@site/docs/leetcode/501-1000/659_split_array_into_consecutive_subsequences.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/split_array_into_consecutive_subsequences",permalink:"/docs/leetcode/501-1000/split_array_into_consecutive_subsequences",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/659_split_array_into_consecutive_subsequences.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Heap",permalink:"/docs/tags/heap"}],version:"current",sidebarPosition:659,frontMatter:{title:"659. Split Array into Consecutive Subsequences",sidebar_label:"659. Split Array into Consecutive Subsequences",tags:["Leetcode Medium","Heap"]},sidebar:"docSidebar",previous:{title:"654. Maximum Binary Tree",permalink:"/docs/leetcode/501-1000/max_binary_tree"},next:{title:"665. Non-decreasing Array",permalink:"/docs/leetcode/501-1000/non_decreasing_array"}},p=[{value:"Python",id:"python",children:[{value:"Heap and sort (Timelimit Exceed)",id:"heap-and-sort-timelimit-exceed",children:[],level:3},{value:"Bottom Up DP with Heap",id:"bottom-up-dp-with-heap",children:[],level:3}],level:2}],l={toc:p};function d(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/split-array-into-consecutive-subsequences/"},"https://leetcode.com/problems/split-array-into-consecutive-subsequences/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"heap-and-sort-timelimit-exceed"},"Heap and sort (Timelimit Exceed)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"import heapq\n\n\nclass Solution:\n    def isPossible(self, nums: List[int]) -> bool:\n        heaps = []\n\n        for num in nums:\n            for heap in heaps:\n                if -heap[0] == num-1:\n                    heapq.heappush(heap, -num)\n                    break\n            else:\n                heap = [-num]\n                heaps.append(heap)\n\n            heaps.sort(key=lambda h: len(h))\n\n        return not any([len(h)<3 for h in heaps])\n")),(0,i.kt)("h3",{id:"bottom-up-dp-with-heap"},"Bottom Up DP with Heap"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from heapq import heappush, heappop\nfrom collections import defaultdict\n\n\nclass Solution:\n    def isPossible(self, nums: List[int]) -> bool:\n        dp = defaultdict(list)\n\n        for num in nums:\n            if dp[num-1]:\n                head = heappop(dp[num-1])\n                heappush(dp[num], head+1)\n            else:\n                heappush(dp[num], 1)\n\n        for heap in dp.values():\n            if not heap:\n                continue\n            if not all(x >= 3 for x in heap):\n                return False\n        return True\n")))}d.isMDXComponent=!0}}]);