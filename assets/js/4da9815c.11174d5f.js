"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[92599],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(r),d=o,f=p["".concat(s,".").concat(d)]||p[d]||m[d]||a;return r?n.createElement(f,i(i({ref:t},u),{},{components:r})):n.createElement(f,i({ref:t},u))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[p]="string"==typeof e?e:o,i[1]=c;for(var l=2;l<a;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},51674:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var n=r(87462),o=(r(67294),r(3905));const a={title:"1512. Number of Good Pairs",sidebar_label:"1512. Number of Good Pairs",tags:["Leetcode Easy","Permutations"]},i=void 0,c={unversionedId:"leetcode/1501-2000/number_of_good_pairs",id:"leetcode/1501-2000/number_of_good_pairs",title:"1512. Number of Good Pairs",description:"https://leetcode.com/problems/number-of-good-pairs",source:"@site/docs/leetcode/1501-2000/1512_number_of_good_pairs.md",sourceDirName:"leetcode/1501-2000",slug:"/leetcode/1501-2000/number_of_good_pairs",permalink:"/docs/leetcode/1501-2000/number_of_good_pairs",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1501-2000/1512_number_of_good_pairs.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Permutations",permalink:"/docs/tags/permutations"}],version:"current",sidebarPosition:1512,frontMatter:{title:"1512. Number of Good Pairs",sidebar_label:"1512. Number of Good Pairs",tags:["Leetcode Easy","Permutations"]},sidebar:"docSidebar",previous:{title:"1502. Can Make Arithmetic Progression From Sequence",permalink:"/docs/leetcode/1501-2000/can_make_arithmetic_progression_from_sequence"},next:{title:"1517. Find Users With Valid E-Mails",permalink:"/docs/leetcode/1501-2000/find_users_with_valid_email"}},s={},l=[{value:"Python",id:"python",level:2}],u={toc:l},p="wrapper";function m(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/number-of-good-pairs"},"https://leetcode.com/problems/number-of-good-pairs")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from math import factorial\nfrom collections import defaultdict\n\n\nclass Solution:\n    def numIdenticalPairs(self, nums: List[int]) -> int:\n        mapper = defaultdict(int)\n\n        for i, num in enumerate(nums):\n            mapper[num] += 1\n\n        ans = 0\n        for count in mapper.values():\n            if count >= 2:\n                # C = n! / m!(n-m!)\n                ans += (\n                    factorial(count)/\n                    (2*factorial(count-2))\n                )\n\n        return int(ans)\n")))}m.isMDXComponent=!0}}]);