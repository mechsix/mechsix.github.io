"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[29664],{84073:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>c,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"leetcode/1001-1500/critical_connections_in_network","title":"1192. Critical Connections in a Network","description":"https://leetcode.com/problems/critical-connections-in-a-network/","source":"@site/docs/leetcode/1001-1500/1192_critical_connections_in_network.md","sourceDirName":"leetcode/1001-1500","slug":"/leetcode/1001-1500/critical_connections_in_network","permalink":"/docs/leetcode/1001-1500/critical_connections_in_network","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Hard","permalink":"/docs/tags/leetcode-hard"},{"inline":true,"label":"Graph","permalink":"/docs/tags/graph"},{"inline":true,"label":"Tarjan algorithm","permalink":"/docs/tags/tarjan-algorithm"},{"inline":true,"label":"TODO","permalink":"/docs/tags/todo"}],"version":"current","sidebarPosition":1192,"frontMatter":{"title":"1192. Critical Connections in a Network","sidebar_label":"1192. Critical Connections in a Network","tags":["Leetcode Hard","Graph","Tarjan algorithm","TODO"]},"sidebar":"docSidebar","previous":{"title":"1167. Minimum Cost to Connect Sticks","permalink":"/docs/leetcode/1001-1500/min_cost_to_connect_sticks"},"next":{"title":"1200. Mini Abs Difference","permalink":"/docs/leetcode/1001-1500/min_abs_difference"}}');var o=t(74848),i=t(28453);const c={title:"1192. Critical Connections in a Network",sidebar_label:"1192. Critical Connections in a Network",tags:["Leetcode Hard","Graph","Tarjan algorithm","TODO"]},a=void 0,s={},l=[{value:"Python",id:"python",level:2},{value:"Tarjan&#39;s algorithm",id:"tarjans-algorithm",level:3}];function d(n){const e={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.p,{children:(0,o.jsx)(e.a,{href:"https://leetcode.com/problems/critical-connections-in-a-network/",children:"https://leetcode.com/problems/critical-connections-in-a-network/"})}),"\n",(0,o.jsx)(e.h2,{id:"python",children:"Python"}),"\n",(0,o.jsx)(e.h3,{id:"tarjans-algorithm",children:"Tarjan's algorithm"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"class Solution:\n    def criticalConnections(self, n: int, connections: List[List[int]]) -> List[List[int]]:\n        lowest_rank = [i for i in range(n)]\n\n        graph = [[] for _ in range(n)]\n        for connection in connections:\n            graph[connection[0]].append(connection[1])\n            graph[connection[1]].append(connection[0])\n\n        visited = [False for _ in range(n)]\n\n        def dfs(result, rank, pre_ver, cur_ver):\n            nonlocal visited\n            nonlocal lowest_rank\n\n            visited[cur_ver] = True\n            lowest_rank[cur_ver] = rank\n\n            for next_ver in graph[cur_ver]:\n                if next_ver == pre_ver:\n                    continue\n\n                if not visited[next_ver]:\n                    dfs(result, rank + 1, cur_ver, next_ver)\n\n                lowest_rank[cur_ver] = min(\n                    lowest_rank[cur_ver],\n                    lowest_rank[next_ver]\n                )\n                if lowest_rank[next_ver] >= rank + 1:\n                    result.append([cur_ver, next_ver])\n\n        result = []\n        dfs(result, 0, -1, 0)\n        return result\n"})})]})}function u(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}},28453:(n,e,t)=>{t.d(e,{R:()=>c,x:()=>a});var r=t(96540);const o={},i=r.createContext(o);function c(n){const e=r.useContext(i);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:c(n.components),r.createElement(i.Provider,{value:e},n.children)}}}]);