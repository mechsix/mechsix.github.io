"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[42156],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>v});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o=n.createContext({}),c=function(e){var t=n.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(o.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(r),m=a,v=d["".concat(o,".").concat(m)]||d[m]||p[m]||s;return r?n.createElement(v,l(l({ref:t},u),{},{components:r})):n.createElement(v,l({ref:t},u))}));function v(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,l=new Array(s);l[0]=m;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[d]="string"==typeof e?e:a,l[1]=i;for(var c=2;c<s;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},19216:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var n=r(87462),a=(r(67294),r(3905));const s={title:"56. Merge Intervals",sidebar_label:"56. Merge Intervals",tags:["Leetcode Medium","Rust","Interval"]},l=void 0,i={unversionedId:"leetcode/1-500/merge_intervals",id:"leetcode/1-500/merge_intervals",title:"56. Merge Intervals",description:"https://leetcode.com/problems/merge-intervals/",source:"@site/docs/leetcode/1-500/56_merge_intervals.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/merge_intervals",permalink:"/docs/leetcode/1-500/merge_intervals",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/56_merge_intervals.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Rust",permalink:"/docs/tags/rust"},{label:"Interval",permalink:"/docs/tags/interval"}],version:"current",sidebarPosition:56,frontMatter:{title:"56. Merge Intervals",sidebar_label:"56. Merge Intervals",tags:["Leetcode Medium","Rust","Interval"]},sidebar:"docSidebar",previous:{title:"55. Jump Game",permalink:"/docs/leetcode/1-500/jump_gamp"},next:{title:"57. Insert Interval",permalink:"/docs/leetcode/1-500/insert_interval"}},o={},c=[{value:"Python",id:"python",level:2},{value:"Rust",id:"rust",level:2}],u={toc:c},d="wrapper";function p(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/merge-intervals/"},"https://leetcode.com/problems/merge-intervals/")),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def merge(self, intervals: List[List[int]]) -> List[List[int]]:\n        if len(intervals) < 2:\n            return intervals\n\n        intervals.sort(key=lambda pair: pair[0])\n\n        result = []\n        start, end = intervals[0]\n\n        for i in range(len(intervals)):\n            if intervals[i][0] <= end:\n                end = max(end, intervals[i][1])\n                continue\n            result.append([start, end])\n            start, end = intervals[i]\n\n        result.append([start, end])\n        return result\n")),(0,a.kt)("h2",{id:"rust"},"Rust"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"use std::cmp::max;\n\nimpl Solution {\n    pub fn merge(intervals: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n        if intervals.len() < 2 {\n            return intervals;\n        }\n\n        let mut sorted_intervals = intervals.clone();\n        sorted_intervals.sort_by_key(|pair| pair[0]);\n\n        let mut result = vec![];\n        let mut start = sorted_intervals[0][0];\n        let mut end = sorted_intervals[0][1];\n\n        for i in 0..sorted_intervals.len() {\n            if sorted_intervals[i as usize][0] <= end {\n                end = max(end, sorted_intervals[i as usize][1]);\n                continue\n            }\n            result.push(vec![start, end]);\n            start = sorted_intervals[i as usize][0];\n            end = sorted_intervals[i as usize][1];\n        }\n\n        result.push(vec![start, end]);\n\n        result\n    }\n}\n")))}p.isMDXComponent=!0}}]);