"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[18188],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var a=n.createContext({}),d=function(e){var t=n.useContext(a),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=d(e.components);return n.createElement(a.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},v=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(r),v=o,f=p["".concat(a,".").concat(v)]||p[v]||u[v]||i;return r?n.createElement(f,l(l({ref:t},c),{},{components:r})):n.createElement(f,l({ref:t},c))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,l=new Array(i);l[0]=v;var s={};for(var a in t)hasOwnProperty.call(t,a)&&(s[a]=t[a]);s.originalType=e,s[p]="string"==typeof e?e:o,l[1]=s;for(var d=2;d<i;d++)l[d]=r[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}v.displayName="MDXCreateElement"},71012:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var n=r(87462),o=(r(67294),r(3905));const i={title:"206. Reverse Linked List",sidebar_label:"206. Reverse Linked List",tags:["Leetcode Easy","Linked List","Go"]},l=void 0,s={unversionedId:"leetcode/1-500/reverse_linked_list",id:"leetcode/1-500/reverse_linked_list",title:"206. Reverse Linked List",description:"https://leetcode.com/problems/reverse-linked-list",source:"@site/docs/leetcode/1-500/206_reverse_linked_list.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/reverse_linked_list",permalink:"/docs/leetcode/1-500/reverse_linked_list",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/206_reverse_linked_list.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Linked List",permalink:"/docs/tags/linked-list"},{label:"Go",permalink:"/docs/tags/go"}],version:"current",sidebarPosition:206,frontMatter:{title:"206. Reverse Linked List",sidebar_label:"206. Reverse Linked List",tags:["Leetcode Easy","Linked List","Go"]},sidebar:"docSidebar",previous:{title:"205. Isomorphic Strings",permalink:"/docs/leetcode/1-500/isomorphic_strings"},next:{title:"207. Course Schedule",permalink:"/docs/leetcode/1-500/course_schedule"}},a={},d=[{value:"Python",id:"python",level:2},{value:"Recursion",id:"recursion",level:3},{value:"Loop",id:"loop",level:3},{value:"Go",id:"go",level:2},{value:"Recursion",id:"recursion-1",level:3}],c={toc:d},p="wrapper";function u(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/reverse-linked-list"},"https://leetcode.com/problems/reverse-linked-list")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"recursion"},"Recursion"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n   def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n       return self._travel(head, None)\n\n   def _travel(self, node, prev):\n       if not node:\n           return prev\n\n       origin_next = node.next\n       node.next = prev\n\n       return self._travel(origin_next, node)\n")),(0,o.kt)("h3",{id:"loop"},"Loop"),(0,o.kt)("p",null,"(This is be used in ",(0,o.kt)("a",{parentName:"p",href:"/docs/leetcode/1-500/reorder_list"},"143. Reorder List"),")"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        if not head:\n            return\n\n        prev = None\n        while head:\n            head.next, prev, head =  prev, head, head.next\n\n        return prev\n")),(0,o.kt)("h2",{id:"go"},"Go"),(0,o.kt)("h3",{id:"recursion-1"},"Recursion"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func reverseList(head *ListNode) *ListNode {\n    return travel(head, nil)\n}\n\nfunc travel(node *ListNode, prev *ListNode) *ListNode {\n    if node == nil {\n        return prev\n    }\n\n    originNext := node.Next\n    node.Next = prev\n\n   return travel(originNext, node)\n}\n")))}u.isMDXComponent=!0}}]);