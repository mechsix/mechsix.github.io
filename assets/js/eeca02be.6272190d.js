"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[64572],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>f});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},m=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=s(r),d=o,f=p["".concat(c,".").concat(d)]||p[d]||u[d]||a;return r?n.createElement(f,i(i({ref:t},m),{},{components:r})):n.createElement(f,i({ref:t},m))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},76359:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var n=r(87462),o=(r(67294),r(3905));const a={title:"835. Image Overlap",sidebar_label:"835. Image Overlap",tags:["Leetcode Medium","Matrix"]},i=void 0,l={unversionedId:"leetcode/501-1000/image_overlap",id:"leetcode/501-1000/image_overlap",title:"835. Image Overlap",description:"https://leetcode.com/problems/image-overlap/",source:"@site/docs/leetcode/501-1000/835_image_overlap.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/image_overlap",permalink:"/docs/leetcode/501-1000/image_overlap",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/835_image_overlap.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Matrix",permalink:"/docs/tags/matrix"}],version:"current",sidebarPosition:835,frontMatter:{title:"835. Image Overlap",sidebar_label:"835. Image Overlap",tags:["Leetcode Medium","Matrix"]},sidebar:"docSidebar",previous:{title:"823. Binary Trees With Factors",permalink:"/docs/leetcode/501-1000/binary_tree_with_factors"},next:{title:"841. Keys and Rooms",permalink:"/docs/leetcode/501-1000/keys_and_rooms"}},c={},s=[{value:"Python",id:"python",level:2}],m={toc:s},p="wrapper";function u(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/image-overlap/"},"https://leetcode.com/problems/image-overlap/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def largestOverlap(self, img1: List[List[int]], img2: List[List[int]]) -> int:\n        n = len(img1)\n\n        def count_overlay(start_row, start_col):\n            up_left, up_right, down_left, down_right = 0, 0, 0, 0\n\n            for row_ref, row_move in enumerate(range(start_row, n)):\n                for col_ref, col_move in enumerate(range(start_col, n)):\n                    if img1[row_move][col_move] and img2[row_ref][col_ref]:\n                        up_left += 1\n\n                    if img1[row_move][col_ref] and img2[row_ref][col_move]:\n                        up_right += 1\n\n                    if img1[row_ref][col_ref] and img2[row_move][col_move]:\n                        down_left += 1\n\n                    if img1[row_ref][col_move] and img2[row_move][col_ref]:\n                        down_right += 1\n\n            return max(up_left, up_right, down_left, down_right)\n\n        ans = 0\n        for r in range(n):\n            for c in range(n):\n                ans = max(ans, count_overlay(r, c))\n        return ans\n")))}u.isMDXComponent=!0}}]);