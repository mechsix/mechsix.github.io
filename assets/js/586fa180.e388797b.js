"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[7273],{3905:function(e,t,r){r.d(t,{Zo:function(){return l},kt:function(){return p}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var a=n.createContext({}),u=function(e){var t=n.useContext(a),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},l=function(e){var t=u(e.components);return n.createElement(a.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,s=e.originalType,a=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),m=u(r),p=o,h=m["".concat(a,".").concat(p)]||m[p]||d[p]||s;return r?n.createElement(h,c(c({ref:t},l),{},{components:r})):n.createElement(h,c({ref:t},l))}));function p(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=r.length,c=new Array(s);c[0]=m;var i={};for(var a in t)hasOwnProperty.call(t,a)&&(i[a]=t[a]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var u=2;u<s;u++)c[u]=r[u];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},7213:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return i},contentTitle:function(){return a},metadata:function(){return u},toc:function(){return l},default:function(){return m}});var n=r(87462),o=r(63366),s=(r(67294),r(3905)),c=["components"],i={title:"1268. Search Suggestions System",sidebar_label:"1268. Search Suggestions System",tags:["Leetcode Medium","Trie"]},a=void 0,u={unversionedId:"leetcode/1001-1500/search_suggestions_system",id:"leetcode/1001-1500/search_suggestions_system",title:"1268. Search Suggestions System",description:"https://leetcode.com/problems/search-suggestions-system/",source:"@site/docs/leetcode/1001-1500/1268_search_suggestions_system.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/search_suggestions_system",permalink:"/docs/leetcode/1001-1500/search_suggestions_system",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1268_search_suggestions_system.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Trie",permalink:"/docs/tags/trie"}],version:"current",sidebarPosition:1268,frontMatter:{title:"1268. Search Suggestions System",sidebar_label:"1268. Search Suggestions System",tags:["Leetcode Medium","Trie"]},sidebar:"docSidebar",previous:{title:"1260. Shift 2D Grid",permalink:"/docs/leetcode/1001-1500/shift_2d_grid"},next:{title:"1288. Remove Covered Intervals",permalink:"/docs/leetcode/1001-1500/remove_covered_intervals"}},l=[{value:"Python",id:"python",children:[{value:"Tire Tree with member of matched words",id:"tire-tree-with-member-of-matched-words",children:[],level:3}],level:2},{value:"Javascript",id:"javascript",children:[],level:2}],d={toc:l};function m(e){var t=e.components,r=(0,o.Z)(e,c);return(0,s.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/search-suggestions-system/"},"https://leetcode.com/problems/search-suggestions-system/")),(0,s.kt)("h2",{id:"python"},"Python"),(0,s.kt)("h3",{id:"tire-tree-with-member-of-matched-words"},"Tire Tree with member of matched words"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    MATCHED_KEY = '#'\n    def suggestedProducts(self, products: List[str], searchWord: str) -> List[List[str]]:\n        products.sort()\n\n        # Build the trie tree, and remember the matched products under a special key: MATCHED_KEY\n        trie = {}\n        cur = trie\n        for product in products:\n            cur = trie\n            for letter in product:\n                cur = cur.setdefault(letter, {})\n                matched = cur.setdefault(self.MATCHED_KEY, [])\n                if len(matched) < 3:\n                    matched.append(product)\n\n\n        # Travel the characters in searchWord, and get the result from the memory\n        result = []\n        cur = trie\n\n        is_matched = True  # Default from empty string, which \"is_matched\" true\n        for i, char in enumerate(searchWord):\n            if char not in cur:\n                is_matched = False\n\n            if not is_matched:\n                result.append([])\n                continue\n\n            cur = cur[char]\n            result.append(cur[self.MATCHED_KEY])\n\n        return result\n")),(0,s.kt)("h2",{id:"javascript"},"Javascript"))}m.isMDXComponent=!0}}]);