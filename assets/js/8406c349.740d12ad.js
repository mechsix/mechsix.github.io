"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[8690],{96484:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>d,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var r=o(74848),n=o(28453);const i={title:"1339. Maximum Product of Splitted Binary Tree",sidebar_label:"1339. Maximum Product of Splitted Binary Tree",tags:["Leetcode Medium","Binary Tree"]},d=void 0,a={id:"leetcode/1001-1500/max_product_of_splited_binary_tree",title:"1339. Maximum Product of Splitted Binary Tree",description:"https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/",source:"@site/docs/leetcode/1001-1500/1339_max_product_of_splited_binary_tree.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/max_product_of_splited_binary_tree",permalink:"/docs/leetcode/1001-1500/max_product_of_splited_binary_tree",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"}],version:"current",sidebarPosition:1339,frontMatter:{title:"1339. Maximum Product of Splitted Binary Tree",sidebar_label:"1339. Maximum Product of Splitted Binary Tree",tags:["Leetcode Medium","Binary Tree"]},sidebar:"docSidebar",previous:{title:"1338. Reduce Array Size to The Half",permalink:"/docs/leetcode/1001-1500/reduce_array_size_to_the_half"},next:{title:"1342. Number of Steps to Reduce a Number to Zero",permalink:"/docs/leetcode/1001-1500/number_steps_to_reduce_num_to_zero"}},s={},l=[{value:"Python",id:"python",level:2},{value:"Postorder for prefix sum",id:"postorder-for-prefix-sum",level:3}];function c(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/",children:"https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/"})}),"\n",(0,r.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,r.jsx)(t.h3,{id:"postorder-for-prefix-sum",children:"Postorder for prefix sum"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"from typing import Optional\n\n\nclass Solution:\n    def maxProduct(self, root: Optional[TreeNode]) -> int:\n        prefix = []\n        def postorder(node):\n            if not node:\n                return 0\n            total = postorder(node.left) + postorder(node.right) + node.val\n            prefix.append(total)\n            return total\n\n        full_total = postorder(root)\n\n        ans = 0\n        for total in prefix:\n            ans = max(ans, total*(full_total-total))\n\n        return ans % (10 ** 9 + 7)\n"})})]})}function u(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,t,o)=>{o.d(t,{R:()=>d,x:()=>a});var r=o(96540);const n={},i=r.createContext(n);function d(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:d(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);