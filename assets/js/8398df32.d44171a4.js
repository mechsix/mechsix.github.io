"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[63942],{30550:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var i=n(74848),r=n(28453);const a={title:"1338. Reduce Array Size to The Half",sidebar_label:"1338. Reduce Array Size to The Half",tags:["Leetcode Medium","Backtracking"]},c=void 0,o={id:"leetcode/1001-1500/reduce_array_size_to_the_half",title:"1338. Reduce Array Size to The Half",description:"https://leetcode.com/problems/reduce-array-size-to-the-half/",source:"@site/docs/leetcode/1001-1500/1338_reduce_array_size_to_the_half.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/reduce_array_size_to_the_half",permalink:"/docs/leetcode/1001-1500/reduce_array_size_to_the_half",draft:!1,unlisted:!1,tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Backtracking",permalink:"/docs/tags/backtracking"}],version:"current",sidebarPosition:1338,frontMatter:{title:"1338. Reduce Array Size to The Half",sidebar_label:"1338. Reduce Array Size to The Half",tags:["Leetcode Medium","Backtracking"]},sidebar:"docSidebar",previous:{title:"1337. The K Weakest Rows in a Matrix",permalink:"/docs/leetcode/1001-1500/k_weakest_rows_in_matrix"},next:{title:"1339. Maximum Product of Splitted Binary Tree",permalink:"/docs/leetcode/1001-1500/max_product_of_splited_binary_tree"}},s={},l=[{value:"Python",id:"python",level:2},{value:"Backtracking (Timelimit Exceed)",id:"backtracking-timelimit-exceed",level:3}];function d(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://leetcode.com/problems/reduce-array-size-to-the-half/",children:"https://leetcode.com/problems/reduce-array-size-to-the-half/"})}),"\n",(0,i.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,i.jsx)(t.h3,{id:"backtracking-timelimit-exceed",children:"Backtracking (Timelimit Exceed)"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Time: O(N!)"}),"\n",(0,i.jsx)(t.li,{children:"Space: O(M)  # M is the count of non-duplicated num in the arr"}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"from collections import Counter\nfrom math import inf\n\n\nclass Solution:\n    def minSetSize(self, arr: List[int]) -> int:\n        counts = Counter(arr)\n        half = len(arr) >> 1\n\n        nums = counts.keys()\n\n        def backtrack(path: set):\n            if sum([counts[num] for num in nums if num not in path]) <= half:\n                return len(path)\n\n            minium = inf\n            for num in nums:\n                if num in path:\n                    continue\n                path.add(num)\n                minium = min(minium, backtrack(path))\n                path.remove(num)\n\n            return minium\n\n        return backtrack(set())\n"})})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>o});var i=n(96540);const r={},a=i.createContext(r);function c(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);