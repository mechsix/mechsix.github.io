"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[97035],{3905:function(e,t,r){r.d(t,{Zo:function(){return l},kt:function(){return f}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},c=Object.keys(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=n.createContext({}),p=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},l=function(e){var t=p(e.components);return n.createElement(u.Provider,{value:t},e.children)},s="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,c=e.originalType,u=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),s=p(r),d=o,f=s["".concat(u,".").concat(d)]||s[d]||y[d]||c;return r?n.createElement(f,a(a({ref:t},l),{},{components:r})):n.createElement(f,a({ref:t},l))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=r.length,a=new Array(c);a[0]=d;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[s]="string"==typeof e?e:o,a[1]=i;for(var p=2;p<c;p++)a[p]=r[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},26814:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return a},default:function(){return s},frontMatter:function(){return c},metadata:function(){return i},toc:function(){return p}});var n=r(83117),o=(r(67294),r(3905));const c={title:"2631. Group By",sidebar_label:"2631. Group By",tags:["Leetcode Medium","JS 30 Days Challenge"]},a=void 0,i={unversionedId:"leetcode/2000/group_by",id:"leetcode/2000/group_by",title:"2631. Group By",description:"https://leetcode.com/problems/group-by",source:"@site/docs/leetcode/2000/2631_group_by.md",sourceDirName:"leetcode/2000",slug:"/leetcode/2000/group_by",permalink:"/docs/leetcode/2000/group_by",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/2000/2631_group_by.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"JS 30 Days Challenge",permalink:"/docs/tags/js-30-days-challenge"}],version:"current",sidebarPosition:2631,frontMatter:{title:"2631. Group By",sidebar_label:"2631. Group By",tags:["Leetcode Medium","JS 30 Days Challenge"]},sidebar:"docSidebar",previous:{title:"2629. Function Composition",permalink:"/docs/leetcode/2000/function_composition"},next:{title:"2632. Curry",permalink:"/docs/leetcode/2000/curry"}},u={},p=[{value:"Javascript",id:"javascript",level:2},{value:"Typescript",id:"typescript",level:2}],l={toc:p};function s(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/group-by"},"https://leetcode.com/problems/group-by")),(0,o.kt)("h2",{id:"javascript"},"Javascript"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"Array.prototype.groupBy = function(fn) {\n    const groups = {}\n    this.forEach((value) => {\n        const key = fn(value)\n        if (!groups.hasOwnProperty(key)) {\n            groups[key] = []\n        }\n        groups[key].push(value)\n    })\n    return groups\n};\n")),(0,o.kt)("h2",{id:"typescript"},"Typescript"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"declare global {\n    interface Array<T> {\n        groupBy(fn: (item: T) => string): Record<string, T[]>\n    }\n}\n\nArray.prototype.groupBy = function(fn) {\n    const groups = {}\n    this.forEach((value) => {\n        const key = fn(value)\n        if (!groups.hasOwnProperty(key)) {\n            groups[key] = []\n        }\n        groups[key].push(value)\n    })\n    return groups\n}\n")))}s.isMDXComponent=!0}}]);