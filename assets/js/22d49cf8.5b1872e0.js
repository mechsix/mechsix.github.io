"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[51630],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(n),h=i,g=u["".concat(c,".").concat(h)]||u[h]||p[h]||o;return n?r.createElement(g,a(a({ref:t},d),{},{components:n})):r.createElement(g,a({ref:t},d))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=h;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:i,a[1]=l;for(var s=2;s<o;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},79772:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(87462),i=(n(67294),n(3905));const o={title:"1732. Find the Highest Altitude",sidebar_label:"1732. Find the Highest Altitude",tags:["Leetcode Easy","Go"]},a=void 0,l={unversionedId:"leetcode/1501-2000/find_highest_altitude",id:"leetcode/1501-2000/find_highest_altitude",title:"1732. Find the Highest Altitude",description:"https://leetcode.com/problems/find-the-highest-altitude",source:"@site/docs/leetcode/1501-2000/1732_find_highest_altitude.md",sourceDirName:"leetcode/1501-2000",slug:"/leetcode/1501-2000/find_highest_altitude",permalink:"/docs/leetcode/1501-2000/find_highest_altitude",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1501-2000/1732_find_highest_altitude.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Go",permalink:"/docs/tags/go"}],version:"current",sidebarPosition:1732,frontMatter:{title:"1732. Find the Highest Altitude",sidebar_label:"1732. Find the Highest Altitude",tags:["Leetcode Easy","Go"]},sidebar:"docSidebar",previous:{title:"1721. Swapping Nodes in a Linked List",permalink:"/docs/leetcode/1501-2000/swap_nodes_in_linked_list"},next:{title:"1751. Maximum Number of Events That Can Be Attended II",permalink:"/docs/leetcode/1501-2000/max_number_of_events_that_can_be_attended_ii"}},c={},s=[{value:"Python",id:"python",level:2},{value:"Go",id:"go",level:2}],d={toc:s},u="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/find-the-highest-altitude"},"https://leetcode.com/problems/find-the-highest-altitude")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def largestAltitude(self, gain: List[int]) -> int:\n        current, highest = 0, 0\n        for g in gain:\n            current = current + g\n            highest = max(highest, current)\n        return highest\n")),(0,i.kt)("h2",{id:"go"},"Go"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"func largestAltitude(gain []int) int {\n    highest := 0\n    current := 0\n\n    for _, elm := range gain {\n        current += elm\n        if current > highest {\n            highest = current\n        }\n    }\n    return highest\n}\n")))}p.isMDXComponent=!0}}]);