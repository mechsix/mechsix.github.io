"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[21196],{91009:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"leetcode/501-1000/squares_of_sorted_array","title":"977. Squares of a Sorted Array","description":"Python","source":"@site/docs/leetcode/501-1000/977_squares_of_sorted_array.md","sourceDirName":"leetcode/501-1000","slug":"/leetcode/501-1000/squares_of_sorted_array","permalink":"/docs/leetcode/501-1000/squares_of_sorted_array","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Leetcode Easy","permalink":"/docs/tags/leetcode-easy"},{"inline":true,"label":"Two Pointer","permalink":"/docs/tags/two-pointer"}],"version":"current","sidebarPosition":977,"frontMatter":{"title":"977. Squares of a Sorted Array","sidebar_label":"977. Squares of a Sorted Array","tags":["Leetcode Easy","Two Pointer"]},"sidebar":"docSidebar","previous":{"title":"976. Largest Perimeter Triangle","permalink":"/docs/leetcode/501-1000/largest_perimeter_triangle"},"next":{"title":"981. Time Based Key-Value Store","permalink":"/docs/leetcode/501-1000/time_based_key_value_store"}}');var s=n(74848),o=n(28453);const a={title:"977. Squares of a Sorted Array",sidebar_label:"977. Squares of a Sorted Array",tags:["Leetcode Easy","Two Pointer"]},i=void 0,l={},d=[{value:"Python",id:"python",level:2},{value:"Cacluate and Sort",id:"cacluate-and-sort",level:3},{value:"Two Pointer",id:"two-pointer",level:3}];function c(e){const t={code:"code",h2:"h2",h3:"h3",li:"li",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"python",children:"Python"}),"\n",(0,s.jsx)(t.h3,{id:"cacluate-and-sort",children:"Cacluate and Sort"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"class Solution:\n    def sortedSquares(self, nums: List[int]) -> List[int]:\n        return sorted([i**2 for i in nums])\n"})}),"\n",(0,s.jsx)(t.h3,{id:"two-pointer",children:"Two Pointer"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Use the adventage from the ",(0,s.jsx)(t.code,{children:"sorted"})," natural"]}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"class Solution:\n    def sortedSquares(self, nums: List[int]) -> List[int]:\n        length = len(nums)\n\n        result = [0] * length\n        left, right = 0, length-1\n\n        for i in range(length-1, -1, -1):\n            if abs(nums[left]) < abs(nums[right]):\n                result[i] = nums[right] ** 2\n                right -= 1\n            else:\n                result[i] = nums[left] ** 2\n                left += 1\n        return result\n"})})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var r=n(96540);const s={},o=r.createContext(s);function a(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);