"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[3116],{3905:function(e,n,r){r.d(n,{Zo:function(){return s},kt:function(){return f}});var t=r(67294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=t.createContext({}),u=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},s=function(e){var n=u(e.components);return t.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=u(r),f=o,y=d["".concat(c,".").concat(f)]||d[f]||p[f]||a;return r?t.createElement(y,i(i({ref:n},s),{},{components:r})):t.createElement(y,i({ref:n},s))}));function f(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var u=2;u<a;u++)i[u]=r[u];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},38593:function(e,n,r){r.r(n),r.d(n,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return s},default:function(){return d}});var t=r(87462),o=r(63366),a=(r(67294),r(3905)),i=["components"],l={title:"941. Valid Mountain Array",sidebar_label:"941. Valid Mountain Array",tags:["Leetcode Easy"]},c=void 0,u={unversionedId:"leetcode/501-1000/valid_mountain_array",id:"leetcode/501-1000/valid_mountain_array",title:"941. Valid Mountain Array",description:"Python",source:"@site/docs/leetcode/501-1000/941_valid_mountain_array.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/valid_mountain_array",permalink:"/docs/leetcode/501-1000/valid_mountain_array",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/941_valid_mountain_array.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"}],version:"current",sidebarPosition:941,frontMatter:{title:"941. Valid Mountain Array",sidebar_label:"941. Valid Mountain Array",tags:["Leetcode Easy"]},sidebar:"docSidebar",previous:{title:"938. Range Sum of BST",permalink:"/docs/leetcode/501-1000/range_sum_bst"},next:{title:"977. Squares of a Sorted Array",permalink:"/docs/leetcode/501-1000/squares_of_sorted_array"}},s=[{value:"Python",id:"python",children:[{value:"Single Loop Solution",id:"single-loop-solution",children:[],level:3},{value:"Break Loop Solution",id:"break-loop-solution",children:[],level:3}],level:2}],p={toc:s};function d(e){var n=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("h3",{id:"single-loop-solution"},"Single Loop Solution"),(0,a.kt)("p",null,"335 ms, 15.4MB"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def validMountainArray(self, arr: List[int]) -> bool:\n        length = len(arr)\n        if length < 3:\n            return False\n\n        top_index = 0\n        is_reach_top = False\n        \n        for i in range(1, length):\n            # Increasing\n            if arr[i] > arr[i-1] and not is_reach_top:\n                top_index = i\n                continue\n\n            # Decreasing\n            if arr[i] < arr[i-1]:\n                is_reach_top = True\n                continue\n\n            return False\n        \n        return top_index != 0 and top_index != length - 1\n")),(0,a.kt)("h3",{id:"break-loop-solution"},"Break Loop Solution"),(0,a.kt)("p",null,"192 ms, 15.6MB"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def validMountainArray(self, arr: List[int]) -> bool:\n        length = len(arr)\n        if length < 3:\n            return False\n\n        i = 0\n        while i < length-1:\n            if arr[i] < arr[i+1]:\n                i += 1\n            else:\n                break\n\n        if i == 0 or i == length-1:\n            return False\n\n        while i < length-1:\n            if arr[i] > arr[i+1]:\n                i += 1\n            else:\n                break\n\n        return i == length-1\n")))}d.isMDXComponent=!0}}]);