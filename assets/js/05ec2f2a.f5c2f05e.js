"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[7267],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=l(n),m=o,f=p["".concat(s,".").concat(m)]||p[m]||u[m]||i;return n?r.createElement(f,a(a({ref:t},d),{},{components:n})):r.createElement(f,a({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=p;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var l=2;l<i;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},42231:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return d},default:function(){return p}});var r=n(87462),o=n(63366),i=(n(67294),n(3905)),a=["components"],c={title:"187. Repeated DNA Sequences",sidebar_label:"187. Repeated DNA Sequences",tags:["Leetcode Medium","Sliding Window"]},s=void 0,l={unversionedId:"leetcode/1-500/repeated_dna_sequences",id:"leetcode/1-500/repeated_dna_sequences",title:"187. Repeated DNA Sequences",description:"https://leetcode.com/problems/repeated-dna-sequences/",source:"@site/docs/leetcode/1-500/187_repeated_dna_sequences.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/repeated_dna_sequences",permalink:"/docs/leetcode/1-500/repeated_dna_sequences",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/187_repeated_dna_sequences.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Sliding Window",permalink:"/docs/tags/sliding-window"}],version:"current",sidebarPosition:187,frontMatter:{title:"187. Repeated DNA Sequences",sidebar_label:"187. Repeated DNA Sequences",tags:["Leetcode Medium","Sliding Window"]},sidebar:"docSidebar",previous:{title:"171. Excel Sheet Column Number",permalink:"/docs/leetcode/1-500/excel_sheet_column"},next:{title:"189. Rotate Array",permalink:"/docs/leetcode/1-500/rotate_array"}},d=[{value:"Python",id:"python",children:[{value:"Sliding Window with hashmap memory",id:"sliding-window-with-hashmap-memory",children:[],level:3}],level:2}],u={toc:d};function p(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/repeated-dna-sequences/"},"https://leetcode.com/problems/repeated-dna-sequences/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"sliding-window-with-hashmap-memory"},"Sliding Window with hashmap memory"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def findRepeatedDnaSequences(self, s: str) -> List[str]:\n        seem = set()\n        ans = set()\n\n        for i in range(len(s)-10+1):\n            sequence = s[i:i+10]\n            if sequence in seem:\n                ans.add(sequence)\n            seem.add(sequence)\n        return list(ans)\n")))}p.isMDXComponent=!0}}]);