"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[5938],{3905:function(e,t,n){n.d(t,{Zo:function(){return a},kt:function(){return d}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},a=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,c=e.originalType,l=e.parentName,a=u(e,["components","mdxType","originalType","parentName"]),m=s(n),d=o,f=m["".concat(l,".").concat(d)]||m[d]||p[d]||c;return n?r.createElement(f,i(i({ref:t},a),{},{components:n})):r.createElement(f,i({ref:t},a))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=n.length,i=new Array(c);i[0]=m;var u={};for(var l in t)hasOwnProperty.call(t,l)&&(u[l]=t[l]);u.originalType=e,u.mdxType="string"==typeof e?e:o,i[1]=u;for(var s=2;s<c;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},18177:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return u},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return a},default:function(){return m}});var r=n(87462),o=n(63366),c=(n(67294),n(3905)),i=["components"],u={title:"347. Top K Frequent Elements",sidebar_label:"347. Top K Frequent Elements",tags:["Leetcode Medium"]},l=void 0,s={unversionedId:"leetcode/1-500/top_k_frequent_elms",id:"leetcode/1-500/top_k_frequent_elms",title:"347. Top K Frequent Elements",description:"https://leetcode.com/problems/top-k-frequent-elements/",source:"@site/docs/leetcode/1-500/347_top_k_frequent_elms.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/top_k_frequent_elms",permalink:"/docs/leetcode/1-500/top_k_frequent_elms",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/347_top_k_frequent_elms.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"}],version:"current",sidebarPosition:347,frontMatter:{title:"347. Top K Frequent Elements",sidebar_label:"347. Top K Frequent Elements",tags:["Leetcode Medium"]},sidebar:"docSidebar",previous:{title:"344. Reverse String",permalink:"/docs/leetcode/1-500/reverse_string"},next:{title:"349. Intersection of Two Arrays",permalink:"/docs/leetcode/1-500/intersection_of_two_arrays"}},a=[{value:"Python",id:"python",children:[{value:"Count and sort",id:"count-and-sort",children:[],level:3}],level:2}],p={toc:a};function m(e){var t=e.components,n=(0,o.Z)(e,i);return(0,c.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/top-k-frequent-elements/"},"https://leetcode.com/problems/top-k-frequent-elements/")),(0,c.kt)("h2",{id:"python"},"Python"),(0,c.kt)("h3",{id:"count-and-sort"},"Count and sort"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-python"},"from collections import Counter\n\n\nclass Solution:\n    def topKFrequent(self, nums: List[int], k: int) -> List[int]:\n        counts = [(num, count) for num, count in Counter(nums).items()]\n        counts.sort(key=lambda item: item[1], reverse=True)\n\n        return [count[0] for count in counts[:k]]\n")))}m.isMDXComponent=!0}}]);