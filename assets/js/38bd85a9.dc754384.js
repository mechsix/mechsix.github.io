"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[20447],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),m=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=m(e.components);return n.createElement(p.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),s=m(r),f=o,d=s["".concat(p,".").concat(f)]||s[f]||u[f]||i;return r?n.createElement(d,l(l({ref:t},c),{},{components:r})):n.createElement(d,l({ref:t},c))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,l=new Array(i);l[0]=f;var a={};for(var p in t)hasOwnProperty.call(t,p)&&(a[p]=t[p]);a.originalType=e,a[s]="string"==typeof e?e:o,l[1]=a;for(var m=2;m<i;m++)l[m]=r[m];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},57548:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>m});var n=r(87462),o=(r(67294),r(3905));const i={title:"1770. Maximum Score from Performing Multiplication Operations",sidebar_label:"1770. Maximum Score from Performing Multiplication Operations",tags:["Leetcode Medium","DP"]},l=void 0,a={unversionedId:"leetcode/1501-2000/max_score_from_performing_multiplication_operations",id:"leetcode/1501-2000/max_score_from_performing_multiplication_operations",title:"1770. Maximum Score from Performing Multiplication Operations",description:"Python",source:"@site/docs/leetcode/1501-2000/1770_max_score_from_performing_multiplication_operations.md",sourceDirName:"leetcode/1501-2000",slug:"/leetcode/1501-2000/max_score_from_performing_multiplication_operations",permalink:"/docs/leetcode/1501-2000/max_score_from_performing_multiplication_operations",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1501-2000/1770_max_score_from_performing_multiplication_operations.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"DP",permalink:"/docs/tags/dp"}],version:"current",sidebarPosition:1770,frontMatter:{title:"1770. Maximum Score from Performing Multiplication Operations",sidebar_label:"1770. Maximum Score from Performing Multiplication Operations",tags:["Leetcode Medium","DP"]},sidebar:"docSidebar",previous:{title:"1768. Merge Strings Alternately",permalink:"/docs/leetcode/1501-2000/merge_strings_alternately"},next:{title:"1822. Sign of the Product of an Array",permalink:"/docs/leetcode/1501-2000/sign_of_the_product_of_an_array"}},p={},m=[{value:"Python",id:"python",level:2},{value:"Top Down DP",id:"top-down-dp",level:3},{value:"Bottom Up DP",id:"bottom-up-dp",level:3}],c={toc:m},s="wrapper";function u(e){let{components:t,...r}=e;return(0,o.kt)(s,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"top-down-dp"},"Top Down DP"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u76f4\u63a5",(0,o.kt)("inlineCode",{parentName:"li"},"@cache"),"\u6703memory limit exceed"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"maxsize=2048"),"\u662ftry & error\u8a66\u51fa\u4f86\u7684\uff0c\u9019\u984c\u505aBottom Up\u6703\u7406\u60f3\u4e00\u9ede")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from functools import lru_cache\n\n\nclass Solution:\n    def maximumScore(self, nums: List[int], multipliers: List[int]) -> int:\n        n, m = len(nums), len(multipliers)\n\n        @lru_cache(maxsize=2048)\n        def dp(left: int, right: int):\n            if right == m:\n                return 0\n\n            take_left = nums[left] * multipliers[right] + dp(left+1, right+1)\n            take_right = nums[n-(right-left)-1] * multipliers[right] + dp(left, right+1)\n\n            return max(take_left, take_right)\n\n        return dp(0, 0)\n")),(0,o.kt)("h3",{id:"bottom-up-dp"},"Bottom Up DP"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def maximumScore(self, nums: List[int], multipliers: List[int]) -> int:\n        n, m = len(nums), len(multipliers)\n        dp = [[0]*(m+1) for _ in range(m+1)]\n\n        for step in range(m-1, -1, -1):\n            for left in range(step, -1, -1):\n                dp[step][left] = max(\n                    multipliers[step]*nums[left] + dp[step+1][left+1],\n                    multipliers[step]*nums[n-(step-left)-1] + dp[step+1][left]\n                )\n\n        return dp[0][0]\n")))}u.isMDXComponent=!0}}]);