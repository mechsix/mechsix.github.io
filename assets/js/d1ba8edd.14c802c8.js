"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[4675],{3905:function(e,r,t){t.d(r,{Zo:function(){return u},kt:function(){return p}});var n=t(67294);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function c(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,i=function(e,r){if(null==e)return{};var t,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=n.createContext({}),a=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):c(c({},r),e)),t},u=function(e){var r=a(e.components);return n.createElement(s.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),f=a(t),p=i,m=f["".concat(s,".").concat(p)]||f[p]||d[p]||o;return t?n.createElement(m,c(c({ref:r},u),{},{components:t})):n.createElement(m,c({ref:r},u))}));function p(e,r){var t=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var o=t.length,c=new Array(o);c[0]=f;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,c[1]=l;for(var a=2;a<o;a++)c[a]=t[a];return n.createElement.apply(null,c)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},91169:function(e,r,t){t.r(r),t.d(r,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return a},toc:function(){return u},default:function(){return f}});var n=t(87462),i=t(63366),o=(t(67294),t(3905)),c=["components"],l={title:"208. Implement Trie (Prefix Tree)",sidebar_label:"208. Implement Trie (Prefix Tree)",tags:["Leetcode Medium","Trie"]},s=void 0,a={unversionedId:"leetcode/1-500/trie_tree",id:"leetcode/1-500/trie_tree",title:"208. Implement Trie (Prefix Tree)",description:"https://leetcode.com/problems/implement-trie-prefix-tree/",source:"@site/docs/leetcode/1-500/208_trie_tree.md",sourceDirName:"leetcode/1-500",slug:"/leetcode/1-500/trie_tree",permalink:"/docs/leetcode/1-500/trie_tree",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1-500/208_trie_tree.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Trie",permalink:"/docs/tags/trie"}],version:"current",sidebarPosition:208,frontMatter:{title:"208. Implement Trie (Prefix Tree)",sidebar_label:"208. Implement Trie (Prefix Tree)",tags:["Leetcode Medium","Trie"]},sidebar:"docSidebar",previous:{title:"206. Reverse Linked List",permalink:"/docs/leetcode/1-500/reverse_linked_list"},next:{title:"209. Minimum Size Subarray Sum",permalink:"/docs/leetcode/1-500/min_size_subarray_sum"}},u=[{value:"Python",id:"python",children:[{value:"With custom TrieNode class",id:"with-custom-trienode-class",children:[],level:3},{value:"Native Dict with custom EOS (End-of-string) sign",id:"native-dict-with-custom-eos-end-of-string-sign",children:[],level:3}],level:2}],d={toc:u};function f(e){var r=e.components,t=(0,i.Z)(e,c);return(0,o.kt)("wrapper",(0,n.Z)({},d,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/implement-trie-prefix-tree/"},"https://leetcode.com/problems/implement-trie-prefix-tree/")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"with-custom-trienode-class"},"With custom TrieNode class"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word: str) -> None:\n        cur = self.root\n        for char in word:\n            if char not in cur.children:\n                cur.children[char] = TrieNode()\n            cur = cur.children[char]\n        cur.is_end = True\n\n    def search(self, word: str) -> bool:\n        cur = self.root\n        for char in word:\n            if char not in cur.children:\n                return False\n            cur = cur.children[char]\n        return cur.is_end\n\n    def startsWith(self, prefix: str) -> bool:\n        cur = self.root\n        for char in prefix:\n            if char not in cur.children:\n                return False\n            cur = cur.children[char]\n        return True\n")),(0,o.kt)("h3",{id:"native-dict-with-custom-eos-end-of-string-sign"},"Native Dict with custom EOS (End-of-string) sign"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Trie(object):\n    EOS = '-'\n    def __init__(self):\n        self.root = {}\n\n    def insert(self, word):\n        cur = self.root\n        for char in word:\n            if char not in cur:\n                cur[char] = {}\n            cur = cur[char]\n        cur[self.EOS] = True\n\n    def search(self, word):\n        cur = self.root\n        for char in word:\n            if char not in cur:\n                return False\n            cur = cur[char]\n        return self.EOS in cur\n\n    def startsWith(self, prefix):\n        cur = self.root\n        for char in prefix:\n            if char not in cur:\n                return False\n            cur = cur[char]\n        return True\n")))}f.isMDXComponent=!0}}]);