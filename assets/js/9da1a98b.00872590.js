"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[68641],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),i=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=i(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=i(n),m=r,k=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(k,c(c({ref:t},p),{},{components:n})):a.createElement(k,c({ref:t},p))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,c[1]=s;for(var i=2;i<o;i++)c[i]=n[i];return a.createElement.apply(null,c)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},90098:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>i});var a=n(87462),r=(n(67294),n(3905));const o={title:"946. Validate Stack Sequences",sidebar_label:"946. Validate Stack Sequences",tags:["Leetcode Medium","Stack","Rust","Go"]},c=void 0,s={unversionedId:"leetcode/501-1000/validate_stack_sequences",id:"leetcode/501-1000/validate_stack_sequences",title:"946. Validate Stack Sequences",description:"https://leetcode.com/problems/validate-stack-sequences/",source:"@site/docs/leetcode/501-1000/946_validate_stack_sequences.md",sourceDirName:"leetcode/501-1000",slug:"/leetcode/501-1000/validate_stack_sequences",permalink:"/docs/leetcode/501-1000/validate_stack_sequences",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/501-1000/946_validate_stack_sequences.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Stack",permalink:"/docs/tags/stack"},{label:"Rust",permalink:"/docs/tags/rust"},{label:"Go",permalink:"/docs/tags/go"}],version:"current",sidebarPosition:946,frontMatter:{title:"946. Validate Stack Sequences",sidebar_label:"946. Validate Stack Sequences",tags:["Leetcode Medium","Stack","Rust","Go"]},sidebar:"docSidebar",previous:{title:"941. Valid Mountain Array",permalink:"/docs/leetcode/501-1000/valid_mountain_array"},next:{title:"953. Verifying an Alien Dictionary",permalink:"/docs/leetcode/501-1000/verifying_an_alien_dictionary"}},l={},i=[{value:"Python",id:"python",level:2},{value:"Rust",id:"rust",level:2},{value:"Go",id:"go",level:2}],p={toc:i},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/validate-stack-sequences/"},"https://leetcode.com/problems/validate-stack-sequences/")),(0,r.kt)("h2",{id:"python"},"Python"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from collections import deque\n\n\nclass Solution:\n    def validateStackSequences(self, pushed: List[int], popped: List[int]) -> bool:\n        remains = deque(popped)\n        stack = []\n\n        for num in pushed:\n            stack.append(num)\n            while stack and stack[-1] == remains[0]:\n                stack.pop()\n                remains.popleft()\n\n        return not remains\n")),(0,r.kt)("h2",{id:"rust"},"Rust"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"impl Solution {\n    pub fn validate_stack_sequences(pushed: Vec<i32>, popped: Vec<i32>) -> bool {\n       let mut stack = Vec::new();\n        let mut pop_index = 0;\n        for num in pushed {\n            stack.push(num);\n            while let Some(&top) = stack.last() {\n                if top == popped[pop_index] {\n                    stack.pop();\n                    pop_index += 1;\n                } else {\n                    break;\n                }\n            }\n        }\n        pop_index == popped.len()\n    }\n}\n")),(0,r.kt)("h2",{id:"go"},"Go"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"func validateStackSequences(pushed []int, popped []int) bool {\n    stack := []int{}\n    popIndex := 0\n    for _, num := range pushed {\n        stack = append(stack, num)\n        for len(stack) > 0 && stack[len(stack)-1] == popped[popIndex] {\n            stack = stack[:len(stack)-1]\n            popIndex++\n        }\n    }\n    return popIndex == len(popped)\n}\n")))}d.isMDXComponent=!0}}]);