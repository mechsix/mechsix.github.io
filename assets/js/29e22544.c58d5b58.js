"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[343],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return p}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var a=n.createContext({}),u=function(e){var t=n.useContext(a),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},s=function(e){var t=u(e.components);return n.createElement(a.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=u(r),p=o,f=d["".concat(a,".").concat(p)]||d[p]||m[p]||i;return r?n.createElement(f,c(c({ref:t},s),{},{components:r})):n.createElement(f,c({ref:t},s))}));function p(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,c=new Array(i);c[0]=d;var l={};for(var a in t)hasOwnProperty.call(t,a)&&(l[a]=t[a]);l.originalType=e,l.mdxType="string"==typeof e?e:o,c[1]=l;for(var u=2;u<i;u++)c[u]=r[u];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},77705:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return a},metadata:function(){return u},toc:function(){return s},default:function(){return d}});var n=r(87462),o=r(63366),i=(r(67294),r(3905)),c=["components"],l={title:"1557. Minimum Number of Vertices to Reach All Nodes",sidebar_label:"1557. Minimum Number of Vertices to Reach All Nodes",tags:["Leetcode Medium","Graph"]},a=void 0,u={unversionedId:"leetcode/1501-2000/min_number_vertice_reach_all_nodes",id:"leetcode/1501-2000/min_number_vertice_reach_all_nodes",title:"1557. Minimum Number of Vertices to Reach All Nodes",description:"https://leetcode.com/problems/minimum-number-of-vertices-to-reach-all-nodes/",source:"@site/docs/leetcode/1501-2000/1557_min_number_vertice_reach_all_nodes.md",sourceDirName:"leetcode/1501-2000",slug:"/leetcode/1501-2000/min_number_vertice_reach_all_nodes",permalink:"/docs/leetcode/1501-2000/min_number_vertice_reach_all_nodes",editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1501-2000/1557_min_number_vertice_reach_all_nodes.md",tags:[{label:"Leetcode Medium",permalink:"/docs/tags/leetcode-medium"},{label:"Graph",permalink:"/docs/tags/graph"}],version:"current",sidebarPosition:1557,frontMatter:{title:"1557. Minimum Number of Vertices to Reach All Nodes",sidebar_label:"1557. Minimum Number of Vertices to Reach All Nodes",tags:["Leetcode Medium","Graph"]},sidebar:"docSidebar",previous:{title:"1539. Kth Missing Positive Number",permalink:"/docs/leetcode/1501-2000/kth_missing_possitive_num"},next:{title:"1557. Minimum Number of Vertices to Reach All Nodes",permalink:"/docs/leetcode/1501-2000/min_cost_connect_all_points"}},s=[{value:"Python",id:"python",children:[{value:"Outdegree Difference",id:"outdegree-difference",children:[],level:3}],level:2}],m={toc:s};function d(e){var t=e.components,r=(0,o.Z)(e,c);return(0,i.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/minimum-number-of-vertices-to-reach-all-nodes/"},"https://leetcode.com/problems/minimum-number-of-vertices-to-reach-all-nodes/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"outdegree-difference"},"Outdegree Difference"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u80fd\u5920\u900f\u904e\u5176\u4ed6\u7bc0\u9ede\u5230\u9054\u7684\u7bc0\u9ede(edge outdegree)\u90fd\u53ef\u4ee5\u8996\u70bareachable"),(0,i.kt)("li",{parentName:"ul"},"\u6240\u6709\u7bc0\u9ede\u8207edge outdegree\u7684\u5dee\u96c6\uff0c\u5373\u662f\u81f3\u5c11\u8981\u4f7f\u7528\u7684\u51fa\u767c\u9ede")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def findSmallestSetOfVertices(self, n: int, edges: List[List[int]]) -> List[int]:\n        nodes = set(range(n))\n        outdegree = set([edge[1] for edge in edges])\n\n        return list(nodes - outdegree)\n")))}d.isMDXComponent=!0}}]);