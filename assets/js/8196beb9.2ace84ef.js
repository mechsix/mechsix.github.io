"use strict";(self.webpackChunkmechsix_github_io_source=self.webpackChunkmechsix_github_io_source||[]).push([[8425],{3905:function(e,t,r){r.d(t,{Zo:function(){return d},kt:function(){return m}});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},d=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=l(r),f=i,m=u["".concat(s,".").concat(f)]||u[f]||p[f]||o;return r?n.createElement(m,a(a({ref:t},d),{},{components:r})):n.createElement(m,a({ref:t},d))}));function m(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=f;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[u]="string"==typeof e?e:i,a[1]=c;for(var l=2;l<o;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},13966:function(e,t,r){r.r(t),r.d(t,{assets:function(){return s},contentTitle:function(){return a},default:function(){return u},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return l}});var n=r(83117),i=(r(67294),r(3905));const o={title:"1260. Shift 2D Grid",sidebar_label:"1260. Shift 2D Grid",tags:["Leetcode Easy","Matrix"]},a=void 0,c={unversionedId:"leetcode/1001-1500/shift_2d_grid",id:"leetcode/1001-1500/shift_2d_grid",title:"1260. Shift 2D Grid",description:"https://leetcode.com/problems/shift-2d-grid/",source:"@site/docs/leetcode/1001-1500/1260_shift_2d_grid.md",sourceDirName:"leetcode/1001-1500",slug:"/leetcode/1001-1500/shift_2d_grid",permalink:"/docs/leetcode/1001-1500/shift_2d_grid",draft:!1,editUrl:"https://github.dev/mechsix/mechsix.github.io.source/tree/master/docs/leetcode/1001-1500/1260_shift_2d_grid.md",tags:[{label:"Leetcode Easy",permalink:"/docs/tags/leetcode-easy"},{label:"Matrix",permalink:"/docs/tags/matrix"}],version:"current",sidebarPosition:1260,frontMatter:{title:"1260. Shift 2D Grid",sidebar_label:"1260. Shift 2D Grid",tags:["Leetcode Easy","Matrix"]},sidebar:"docSidebar",previous:{title:"1249. Minimum Remove to Make Valid Parentheses",permalink:"/docs/leetcode/1001-1500/min_remove_to_make_valid_parentheses"},next:{title:"1268. Search Suggestions System",permalink:"/docs/leetcode/1001-1500/search_suggestions_system"}},s={},l=[{value:"Python",id:"python",level:2},{value:"Offset 1 per run",id:"offset-1-per-run",level:3}],d={toc:l};function u(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/shift-2d-grid/"},"https://leetcode.com/problems/shift-2d-grid/")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("h3",{id:"offset-1-per-run"},"Offset 1 per run"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Time: O(mnk)"),(0,i.kt)("li",{parentName:"ul"},"Space: O(1)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def shiftGrid(self, grid: List[List[int]], k: int) -> List[List[int]]:\n        m = len(grid)\n        n = len(grid[0])\n\n        for i in range(k):\n            last = grid[-1][-1]\n            for r in range(m):\n                tmp = grid[r][-1]\n                for c in range(n-1, 0, -1):\n                    grid[r][c] = grid[r][c-1]\n                grid[r][0] = last\n                last = tmp\n\n        return grid\n")))}u.isMDXComponent=!0}}]);